namespace OfaSchlupfer.Model {
    using System;
    using Newtonsoft.Json;

    using OfaSchlupfer.Freezable;

    [JsonObject]
    public class ModelScalarType
        : ModelType
        , IModelScalarTypeFacade {
        [JsonIgnore]
        private bool _AutoGenerated;

        [JsonIgnore]
        private bool? _Collection;

        [JsonIgnore]
        private Type _Type;

        [JsonIgnore]
        private bool? _Nullable;

        [JsonIgnore]
        private short? _MaxLength;

        [JsonIgnore]
        private bool? _FixedLength;

        [JsonIgnore]
        private byte? _Precision;

        [JsonIgnore]
        private byte? _Scale;

        [JsonIgnore]
        private bool? _Unicode;

        public ModelScalarType() {
#warning handle this
            this._Nullable = true;
            this._Unicode = true;
        }

        /// <summary>
        /// Copy all but owner
        /// </summary>
        /// <param name="source"></param>
        public ModelScalarType(ModelScalarType source) {
            this._Collection = source._Collection;
            this._FixedLength = source._FixedLength;
            this._MaxLength = source._MaxLength;
            this._Nullable = source._Nullable;
            this._Precision = source._Precision;
            this._Scale = source._Scale;
            this._Type = source._Type;
            this._Unicode = source._Unicode;
        }

        [JsonIgnore]
        public override ModelSchema Owner {
            get => this._Owner;
            set => this.SetOwnerWithChildren(ref this._Owner, value, (owner) => owner.ScalarTypes);
        }

#warning AutoGenerated - specify exactly what that means

        [JsonProperty(Order = 3, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public bool AutoGenerated {
            get {
                return this._AutoGenerated;
            }
            set {
                this.ThrowIfFrozen();
                this._AutoGenerated = value;
            }
        }

        [JsonProperty(Order = 4)]
#warning [JsonConverter(typeof(OfaSchlupfer.Entity.TypeJsonConverter))]
        public Type Type {
            get {
                return this._Type;
            }
            set {
                this.ThrowIfFrozen();
                this._Type = value;
            }
        }

#warning thinkof IModelScalarTypeFacade ItemType
        [JsonIgnore]
        public IModelScalarTypeFacade ItemType {
            get { return null; }
            set { }
        }

        [JsonProperty(Order = 5, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public bool? Collection {
            get => this._Collection;
            set => this.SetValueProperty(ref this._Collection, value);
        }

        [JsonProperty(Order = 6)]
        public bool? Nullable {
            get => this._Nullable;
            set => this.SetValueProperty(ref this._Nullable, value);            
        }
        public bool ShouldSerializeNullable() => this._Nullable.HasValue && this._Nullable.Value == false;

        [JsonProperty(Order = 7, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public short? MaxLength {
            get => this._MaxLength;
            set => this.SetValueProperty(ref this._MaxLength, value);
        }

        [JsonProperty(Order = 8, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public bool? FixedLength {
            get => this._FixedLength;
            set => this.SetValueProperty(ref this._FixedLength, value);
        }

        [JsonProperty(Order = 9, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public byte? Precision {
            get => this._Precision;
            set => this.SetValueProperty(ref this._Precision, value);

        }

        [JsonProperty(Order = 10, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public byte? Scale {
            get => this._Scale;
            set => this.SetValueProperty(ref this._Scale, value);

        }

        [JsonProperty(Order = 11, DefaultValueHandling = DefaultValueHandling.Ignore)]
        public bool? Unicode {
            get => this._Unicode;
            set => this.SetValueProperty(ref this._Unicode, value);

        }
        public bool ShouldSerializeUnicode() => this._Unicode.HasValue && !this.Unicode.Value;

        public override Type GetClrType() => this._Type;
    }
}
