-----------------------------------------------------------
--
-- SOLVIN Reporting Database
--
-----------------------------------------------------------
--
-- Version 2017-12-14
--
-- for manual deployment/update please select current database (top left combobox) to the ****_SolvinReportingDB
-- and execute
-- the message at the button should show "Query executed successfully."
--


-- Checks if NOT master database is used
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOEXEC OFF;
GO
IF (DB_NAME() = 'master') BEGIN
    PRINT 'use different database'
    SET NOEXEC ON;
END;

-----------------------------------------------------------
--
-- SOLVIN Reporting Database Part I
--
-----------------------------------------------------------
--
-- Version History Part 1:
-- 2016-11-28 - Flori : First Draw for Synoynms
-- 2017-01-24 - Nadine : Adding GenerateXYZ funktionality
-- 2017-02-06 - Flori : New GenerateTable
-- 2017-02-07 - Flori : GenerateMerge
-- 2017-02-07 - Flori : handle deny - problem with PSDataAccess
-- 2017-02-10 - NK    : Final version RollOutReportTablesStarterMirror2016
-- 2017-02-20 - Flori : GenerateTable add SerialVersion - column
-- 2017-02-22 - NK    : adding [GetTableColumns_Nullable]
-- 2017-02-22 - NL & Flori : bugfix after sew testing
-- 2017-02-27 - Flori : add SOLVIN.GetViewCombine_TVF
-- 2017-02-27 - Flori : SOLVIN.InsertSysTablesByObjectId add TF as valid type for #columns
-- 2017-03-16 - Flori : add SOLVIN.ShowLogs
-- 2017-08-15 - Flori : add LazyState
-- 2017-08-15 - Flori : modify selectiv merge
-- 2017-09-28 - Flori - enhanced log
-- 2017-09-28 - Flori - merge bugfixes + logging
-- 2017-09-28 - Flori - SOLVIN.ShowLogs bugfix
-- 2017-12-14 - Flori : add [SOLVIN].[UtilitySettingInsertDefault]
--
-----------------------------------------------------
--
-- Schema and database role
--
-----------------------------------------------------------
/** Creates schema "SOLVIN", database role "report" and procedure "EnsureSchema" **/
GO
IF (NOT EXISTS(SELECT * FROM sys.database_principals  WHERE type_desc = 'DATABASE_ROLE' AND name = 'report')) BEGIN
    CREATE ROLE [report];
    PRINT ('    -- CREATE ROLE [report];');
END;
GO

IF (SCHEMA_ID('SOLVIN') IS NULL) BEGIN
    EXEC sys.sp_executesql N'CREATE SCHEMA SOLVIN;';
    PRINT ('    -- CREATE SCHEMA SOLVIN;');
END;
GO
GRANT VIEW DATABASE STATE TO [report]
GO
GRANT VIEW DEFINITION TO [report]
GO
GRANT SELECT ON SCHEMA::[SOLVIN] TO [report];
GO
GRANT REFERENCES ON SCHEMA::[SOLVIN] TO [report];
GO
GRANT VIEW DEFINITION ON SCHEMA::[SOLVIN] TO [report];
GO
IF (OBJECT_ID('SOLVIN.EnsureSchema') IS NULL) BEGIN
    EXEC sys.sp_executesql N'CREATE PROCEDURE SOLVIN.EnsureSchema AS BEGIN SET NOCOUNT ON; END;';
        PRINT (N'    -- [SOLVIN].[EnsureSchema] is a new Procedure.');
END;
GO
ALTER PROCEDURE [SOLVIN].[EnsureSchema]
(
    @name sysname
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    SET NOCOUNT ON;
    --
    SET @name = PARSENAME(@name, 1);
    DECLARE @nameQ sysname = Quotename(@name);
    --
    IF (SCHEMA_ID(@name) IS NULL) BEGIN
        DECLARE @sql nvarchar(max)
        SET @sql = REPLACE( N'CREATE SCHEMA #nameQ#;', N'#nameQ#', @nameQ);
        PRINT @sql
        EXEC sys.sp_executesql @sql;
        SET @sql = REPLACE( N'GRANT SELECT ON SCHEMA::#nameQ# TO [report];', N'#nameQ#', @nameQ);
        EXEC sys.sp_executesql @sql;
        SET @sql = REPLACE( N'GRANT REFERENCES ON SCHEMA::#nameQ# TO [report];', N'#nameQ#', @nameQ);
        EXEC sys.sp_executesql @sql;
        SET @sql = REPLACE( N'GRANT VIEW DEFINITION ON SCHEMA::#nameQ# TO [report];', N'#nameQ#', @nameQ);
        EXEC sys.sp_executesql @sql;
        PRINT (N'    -- ' + @name + N' is a new schema.');
    END;

/** This stroed procedure creates a new schema and assigns it to reportdatabase role

    EXECUTE [SOLVIN].[EnsureSchema] CustomSchema
-->
    CREATE SCHEMA [CustomSchema];
    -- CustomSchema is a new schema.

**/

END;
GO

-----------------------------------------------------------
--
-- Setting
--
-----------------------------------------------------------
/** Creates table "Settings" **/
GO
IF (OBJECT_ID(N'SOLVIN.Setting', N'u') IS NULL) BEGIN
    CREATE TABLE SOLVIN.Setting(
        SettingName varchar(255) NOT NULL,
        SettingValue nvarchar(MAX) NOT NULL,
        SerialVersion timestamp NOT NULL,
    CONSTRAINT PK_SOLVIN_Setting PRIMARY KEY CLUSTERED (SettingName ASC)
    ) ON [PRIMARY]
    PRINT ('    -- [SOLVIN].[Setting] is a new table.');
END ELSE BEGIN
    PRINT ('    -- [SOLVIN].[Setting] exists.');
END;
GO
EXECUTE SOLVIN.CreateScalarValuedFunctionIfNeeded 'SOLVIN.FN_SettingGet'
GO
ALTER FUNCTION SOLVIN.FN_SettingGet(
    @SettingName varchar(255),
    @defaultValue nvarchar(max) 
) 
RETURNS nvarchar(max)
AS BEGIN 
    --
    -- Get a Setting - SettingValue by its SettingName
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2018-01-25 Flori
    -- 
RETURN 
    (	
        ISNULL(
            (SELECT TOP (1) 
                        SettingValue
                    FROM SOLVIN.Setting
                    WHERE (SettingName = @SettingName)
            ),
            @defaultValue
        )
    )
/* Example

SELECT 
    SOLVIN.FN_SettingGet('UtilityRequestDelete-DaysUntilDelete-Waiting', '0') as [expected -33],
    CAST(SOLVIN.FN_SettingGet('UtilityRequestDelete-DaysUntilDelete-Waiting', '0') as INT) as [expected -33 int],
    SOLVIN.FN_SettingGet('hurz', 'default') as [expected default]

*/
END;
GO

EXECUTE SOLVIN.CreateProcedureIfNeeded 'SOLVIN.SettingInsertDefault'
GO
ALTER PROCEDURE SOLVIN.SettingInsertDefault
(
      @SettingName varchar(255)
    , @SettingValue nvarchar(max)
) AS BEGIN
    SET NOCOUNT ON;
    --
    -- Add a Setting if it NOT exists
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2018-01-25 Flori
    --
    IF (NOT EXISTS(SELECT 1 FROM SOLVIN.Setting WHERE (SettingName = @SettingName))) BEGIN        
        INSERT INTO SOLVIN.Setting
                (SettingName, SettingValue)
        VALUES  (@SettingName, @SettingValue)
        ;
    END;
END;
GO
EXECUTE SOLVIN.CreateProcedureIfNeeded 'SOLVIN.SettingUpsert'
GO
ALTER PROCEDURE SOLVIN.SettingUpsert
(
      @SettingName varchar(50)
    , @SettingValue nvarchar(max)
) AS BEGIN
    SET NOCOUNT ON;
    --
    -- Upsert a Setting
    -- 
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2018-01-25 Flori
    --
    IF (EXISTS(SELECT 1 FROM SOLVIN.Setting WHERE (SettingName = @SettingName))) BEGIN
        UPDATE SOLVIN.Setting
        SET SettingValue = @SettingValue
        WHERE (SettingName = @SettingName)
        AND SOLVIN.IsEqualNVarCharMax(SettingValue, @SettingValue) = 0
          ;
    END ELSE BEGIN
        INSERT INTO SOLVIN.Setting
            (SettingName, SettingValue)
        VALUES (@SettingName, @SettingValue)
        ;
    END;
END;
GO
-----------------------------------------------------------
--
-- Utilities
--
-----------------------------------------------------------
GO
IF (OBJECT_ID('SOLVIN.GrantPermission') IS NULL) BEGIN
    EXEC sys.sp_executesql N'CREATE PROCEDURE SOLVIN.GrantPermission AS BEGIN SET NOCOUNT ON; END;';
    PRINT (N'    -- [SOLVIN].[CreateProcedureIfNeeded] is a new Procedure.');
END;
GO

ALTER PROCEDURE [SOLVIN].[GrantPermission]
(
    @name nvarchar(max)
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    -- 2017-02-20 Flori add TF
    --
    SET NOCOUNT ON;
    --
    DECLARE @schemaName sysname;
    DECLARE @objectName sysname;
    SET @schemaName = ISNULL(PARSENAME(@name, 2), N'dbo');
    SET @objectName = PARSENAME(@name, 1);
    SET @name = QUOTENAME(@schemaName) + N'.' + QUOTENAME(@objectName);

    DECLARE @sql nvarchar(max)
    DECLARE @type nvarchar(2);
    SELECT TOP(1) @type = type FROM sys.all_objects WHERE object_id = OBJECT_ID(@name);
    IF (@type = 'U') BEGIN
        SET @sql = REPLACE( N'GRANT SELECT, REFERENCES, VIEW DEFINITION ON #name# TO [report];', N'#name#', @name);
        PRINT (N'    -- ' + @name + N' is a table.');
        PRINT (N'  ' + @sql);
        EXEC sys.sp_executesql @sql;
    END ELSE IF (@type = 'V') BEGIN
        SET @sql = REPLACE( N'GRANT SELECT, REFERENCES, VIEW DEFINITION ON #name# TO [report];', N'#name#', @name);
        PRINT (N'    -- ' + @name + N' is a view.');
        PRINT (N'  ' + @sql);
        EXEC sys.sp_executesql @sql;
    END ELSE IF (@type = 'P') BEGIN
        SET @sql = REPLACE( N'GRANT EXECUTE, REFERENCES, VIEW DEFINITION  ON #name# TO [report];', N'#name#', @name);
        PRINT (N'    -- ' + @name + N' is a stored procedure.');
        PRINT (N'  ' + @sql);
        EXEC sys.sp_executesql @sql;
    END ELSE IF (@type = 'IF') BEGIN
        SET @sql = REPLACE( N'GRANT SELECT, REFERENCES, VIEW DEFINITION  ON #name# TO [report];', N'#name#', @name);
        PRINT (N'    -- ' + @name + N' is a table valued function.');
        PRINT (N'  ' + @sql);
        EXEC sys.sp_executesql @sql;
    END ELSE IF (@type = 'FN') BEGIN
        SET @sql = REPLACE( N'GRANT EXECUTE, REFERENCES, VIEW DEFINITION  ON #name# TO [report];', N'#name#', @name);
        PRINT (N'    -- ' + @name + N' is a scalar valued function.');
        PRINT (N'  ' + @sql);
        EXEC sys.sp_executesql @sql;

    END ELSE IF (EXISTS(SELECT * FROM sys.table_types WHERE (schema_id = SCHEMA_ID(@schemaName)) AND (name = @objectName))) BEGIN
        SET @sql = REPLACE( N'GRANT REFERENCES, VIEW DEFINITION ON TYPE::#name# TO [report];', N'#name#', @name);
        PRINT (N'    -- ' + @name + N' is a table type.');
        PRINT (N'  ' + @sql);
        EXEC sys.sp_executesql @sql;
    END ELSE IF (@type = 'SN') BEGIN
        SET @sql = REPLACE( N'GRANT SELECT, VIEW DEFINITION  ON #name# TO [report];', N'#name#', @name);
        PRINT (N'    -- ' + @name + N' is a synonym.');
        PRINT (N'  ' + @sql);
        EXEC sys.sp_executesql @sql;
    END ELSE IF (@type = 'TF') BEGIN
        SET @sql = REPLACE( N'GRANT CONTROL,REFERENCES,SELECT,VIEW DEFINITION ON #name# TO [report];', N'#name#', @name);
        PRINT (N'    -- ' + @name + N' is a TableValuedFunction.');
        PRINT (N'  ' + @sql);
        EXEC sys.sp_executesql @sql;

    END ELSE BEGIN
        PRINT (N'WARNING:' + @name + N' - ' + @type + N' not found');

    END;

/** This stroed procedure delivers the grant permission statement to the database role "report" for database objects

    EXECUTE SOLVIN.GrantPermission 'SOLVIN.Setting'
-->
     -- [SOLVIN].[Setting] is a table.
  GRANT SELECT, REFERENCES, VIEW DEFINITION ON [SOLVIN].[Setting] TO [report];

**/
END;
GO

/** Creates a set of utilities **/

IF (OBJECT_ID('SOLVIN.CreateProcedureIfNeeded') IS NULL) BEGIN
    EXEC sys.sp_executesql N'CREATE PROCEDURE SOLVIN.CreateProcedureIfNeeded AS BEGIN SET NOCOUNT ON; END;';
    PRINT (N'    -- [SOLVIN].[CreateProcedureIfNeeded] is a new Procedure.');
END;
GO

ALTER PROCEDURE [SOLVIN].[CreateProcedureIfNeeded]
(
    @name nvarchar(max)
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    SET NOCOUNT ON;
    --
    DECLARE @schemaName sysname;
    DECLARE @objectName sysname;
    SET @schemaName = ISNULL(PARSENAME(@name, 2), N'dbo');
    SET @objectName = PARSENAME(@name, 1);
    SET @name = QUOTENAME(@schemaName) + N'.' + QUOTENAME(@objectName);

    DECLARE @sql nvarchar(max)
    DECLARE @type nvarchar(2);
    DECLARE @type_desc nvarchar(255);
    SELECT TOP(1) @type = type, @type_desc=type_desc FROM sys.all_objects WHERE object_id = OBJECT_ID(@name);

    IF (@type IS NOT NULL) BEGIN
        PRINT (N'    -- ' + @name + N' is an existing ' + @type_desc + '.');
    END ELSE IF (EXISTS(SELECT * FROM sys.table_types WHERE (schema_id = SCHEMA_ID(@schemaName)) AND (name = @objectName))) BEGIN
        PRINT (N'    -- ' + @name + N' is a table type.');
    END ELSE BEGIN
        EXECUTE [SOLVIN].[EnsureSchema] @schemaName;
        SET @sql = N'CREATE PROCEDURE #name# AS BEGIN SET NOCOUNT ON; END;';

        SET @sql = REPLACE(@sql, N'#name#', @name);
        EXEC sys.sp_executesql @sql;
        PRINT (N'    -- ' + @name + N' is a new Procedure.');
        EXECUTE [SOLVIN].[GrantPermission] @name;
    END;

/** This stroed procedure creates a new empty stored procedure if needed

    EXECUTE SOLVIN.CreateProcedureIfNeeded SOLVIN.CreateViewIfNeeded
-->
     -- [SOLVIN].[CreateViewIfNeeded] is a new Procedure.

**/
END;
GO

EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.CreateViewIfNeeded';
GO
ALTER PROCEDURE [SOLVIN].[CreateViewIfNeeded]
(
    @name nvarchar(max)
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    SET NOCOUNT ON;
    --
    DECLARE @schemaName sysname;
    DECLARE @objectName sysname;
    SET @schemaName = ISNULL(PARSENAME(@name, 2), N'dbo');
    SET @objectName = PARSENAME(@name, 1);
    SET @name = QUOTENAME(@schemaName) + N'.' + QUOTENAME(@objectName);

    DECLARE @sql nvarchar(max)
    DECLARE @type nvarchar(2);
    DECLARE @type_desc nvarchar(255);
    SELECT TOP(1) @type = type, @type_desc=type_desc FROM sys.all_objects WHERE object_id = OBJECT_ID(@name);

    IF (@type IS NOT NULL) BEGIN
        PRINT (N'    -- ' + @name + N' is an existing ' + @type_desc + '.');
    END ELSE IF (EXISTS(SELECT * FROM sys.table_types WHERE (schema_id = SCHEMA_ID(@schemaName)) AND (name = @objectName))) BEGIN
        PRINT (N'    -- ' + @name + N' is a table type.');
    END ELSE BEGIN
        EXECUTE [SOLVIN].[EnsureSchema] @schemaName;
        SET @sql = N'CREATE VIEW #name# WITH VIEW_METADATA AS SELECT DUMMY = 1;';

        SET @sql = REPLACE(@sql, N'#name#', @name);
        EXEC sys.sp_executesql @sql;
        PRINT (N'    -- ' + @name + N' is a new View.');
        EXECUTE [SOLVIN].[GrantPermission] @name;
    END;

/** This stroed procedure creates a new empty view if needed

    EXECUTE SOLVIN.CreateViewIfNeeded SOLVIN.NewView
-->
     -- [SOLVIN].[NewView] is a new View.

**/
END;
GO

EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.CreateScalarValuedFunctionIfNeeded';
GO

ALTER PROCEDURE [SOLVIN].[CreateScalarValuedFunctionIfNeeded]
(
    @name nvarchar(max)
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    SET NOCOUNT ON;
    --
    DECLARE @schemaName sysname;
    DECLARE @objectName sysname;
    SET @schemaName = ISNULL(PARSENAME(@name, 2), N'dbo');
    SET @objectName = PARSENAME(@name, 1);
    SET @name = QUOTENAME(@schemaName) + N'.' + QUOTENAME(@objectName);

    DECLARE @sql nvarchar(max)
    DECLARE @type nvarchar(2);
    DECLARE @type_desc nvarchar(255);
    SELECT TOP(1) @type = type, @type_desc=type_desc FROM sys.all_objects WHERE object_id = OBJECT_ID(@name);

    IF (@type IS NOT NULL) BEGIN
        PRINT (N'    -- ' + @name + N' is an existing ' + @type_desc + '.');
    END ELSE IF (EXISTS(SELECT * FROM sys.table_types WHERE (schema_id = SCHEMA_ID(@schemaName)) AND (name = @objectName))) BEGIN
        PRINT (N'    -- ' + @name + N' is a table type.');
    END ELSE BEGIN
        EXECUTE [SOLVIN].[EnsureSchema] @schemaName;
        SET @sql = N'CREATE FUNCTION #name#() RETURNS NVARCHAR(MAX) AS BEGIN RETURN CAST(NULL AS NVARCHAR(MAX)); END;';

        SET @sql = REPLACE(@sql, N'#name#', @name);
        EXEC sys.sp_executesql @sql;
        PRINT (N'    -- ' + @name + N' is a new Scalar Valued - Function.');
        EXECUTE [SOLVIN].[GrantPermission] @name;

    END;

/** This stroed procedure creates a new empty Scalar Valued - Function if needed

    EXECUTE SOLVIN.CreateScalarValuedFunctionIfNeeded SOLVIN.NewFunction
-->
     -- [SOLVIN].[NewFunction] is a new Scalar Valued - Function.

**/
END;
GO

EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.CreateTableValuedFunctionIfNeeded';
GO
ALTER PROCEDURE [SOLVIN].[CreateTableValuedFunctionIfNeeded]
(
    @name nvarchar(max)
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    SET NOCOUNT ON;
    --
    DECLARE @schemaName sysname;
    DECLARE @objectName sysname;
    SET @schemaName = ISNULL(PARSENAME(@name, 2), N'dbo');
    SET @objectName = PARSENAME(@name, 1);
    SET @name = QUOTENAME(@schemaName) + N'.' + QUOTENAME(@objectName);

    DECLARE @sql nvarchar(max)
    DECLARE @type nvarchar(2);
    DECLARE @type_desc nvarchar(255);
    SELECT TOP(1) @type = type, @type_desc=type_desc FROM sys.all_objects WHERE object_id = OBJECT_ID(@name);

    IF (@type IS NOT NULL) BEGIN
        PRINT (N'    -- ' + @name + N' is an existing ' + @type_desc + '.');

    END ELSE IF (EXISTS(SELECT * FROM sys.table_types WHERE (schema_id = SCHEMA_ID(@schemaName)) AND (name = @objectName))) BEGIN

        PRINT (N'    -- ' + @name + N' is a table type.');

    END ELSE BEGIN
        EXECUTE [SOLVIN].[EnsureSchema] @schemaName;
        SET @sql = N'CREATE FUNCTION #name#() RETURNS TABLE AS RETURN SELECT DUMMY=NULL;';
        SET @sql = REPLACE(@sql, N'#name#', @name);
        EXEC sys.sp_executesql @sql;
        PRINT (N'    -- ' + @name + N' is a new Table Valued - Function.');
        EXECUTE [SOLVIN].[GrantPermission] @name;

    END;

/** This stroed procedure creates a new empty Table Valued - Function if needed

    EXECUTE SOLVIN.CreateTableValuedFunctionIfNeeded SOLVIN.NewFunction1
-->
     -- [SOLVIN].[NewFunction1] is a new Table Valued - Function.

**/
END;
GO

-----------------------------------------------------------
--
-- Table Types
--
-----------------------------------------------------------
/** Creates a set of table types **/
GO
IF (NOT EXISTS(SELECT * FROM sys.table_types WHERE (schema_id = SCHEMA_ID('SOLVIN')) AND (name = 'TVP_NVarCharMAX'))) BEGIN
    CREATE TYPE SOLVIN.TVP_NVarCharMAX AS TABLE
    (
        Item nvarchar(max) NOT NULL
    );
    PRINT ('    -- [SOLVIN].[TVP_NVarCharMAX] is a new table type.');
END ELSE BEGIN
    PRINT ('    -- [SOLVIN].[TVP_NVarCharMAX] exists.');
END;
EXECUTE SOLVIN.GrantPermission 'SOLVIN.TVP_NVarCharMAX';
GO

IF (NOT EXISTS(SELECT * FROM sys.table_types WHERE (schema_id = SCHEMA_ID('SOLVIN')) AND (name = 'TVP_NVarChar255'))) BEGIN
    CREATE TYPE SOLVIN.TVP_NVarChar255 AS TABLE
    (
        Item nvarchar(255) NOT NULL,
        PRIMARY KEY (Item)
    );
    PRINT ('    -- [SOLVIN].[TVP_NVarChar255] is a new table type.');
END ELSE BEGIN
    PRINT ('    -- [SOLVIN].[TVP_NVarChar255] exists.');
END;
EXECUTE SOLVIN.GrantPermission 'SOLVIN.TVP_NVarChar255';
GO

IF (NOT EXISTS(SELECT * FROM sys.table_types WHERE (schema_id = SCHEMA_ID('SOLVIN')) AND (name = 'TVP_Uid'))) BEGIN
    CREATE TYPE SOLVIN.TVP_Uid AS TABLE
    (
        Item uniqueidentifier NOT NULL,
        PRIMARY KEY (Item)
    );
    PRINT ('    -- [SOLVIN].[TVP_Uid] is a new table type.');
END ELSE BEGIN
    PRINT ('    -- [SOLVIN].[TVP_Uid] exists.');
END;
EXECUTE SOLVIN.GrantPermission 'SOLVIN.TVP_Uid';
GO

IF (NOT EXISTS(SELECT * FROM sys.table_types WHERE (schema_id = SCHEMA_ID('SOLVIN')) AND (name = 'TVP_Int'))) BEGIN
    CREATE TYPE SOLVIN.TVP_Int AS TABLE
    (
        Item int NOT NULL,
        PRIMARY KEY (Item)
    );
    PRINT ('    -- [SOLVIN].[TVP_Int] is a new table type.');
END ELSE BEGIN
    PRINT ('    -- [SOLVIN].[TVP_Int] exists.');
END;
EXECUTE SOLVIN.GrantPermission 'SOLVIN.TVP_Int';
GO

IF (NOT EXISTS(SELECT * FROM sys.table_types WHERE (schema_id = SCHEMA_ID('SOLVIN')) AND (name = 'TVP_KeyValue'))) BEGIN
    CREATE TYPE [SOLVIN].[TVP_KeyValue] AS TABLE(
        [Key] [nvarchar](255) NOT NULL,
        [Value] [nvarchar](max) NOT NULL,
        PRIMARY KEY ([Key])
    )
    ;
    PRINT ('    -- [SOLVIN].[TVP_KeyValue] is a new table type.');
END ELSE BEGIN
    PRINT ('    -- [SOLVIN].[TVP_KeyValue] exists.');
END;
EXECUTE SOLVIN.GrantPermission 'SOLVIN.TVP_KeyValue';
GO

-----------------------------------------------------------
--
-- Report Parameter Functions
--
-----------------------------------------------------------
/** Creates a set of report parameter functions **/
GO
/* To avoid special characters in URL and to avoid comma(,) for reporting services we encode and decode like this.
    ! --> !X
    / --> !S
    \ --> !B
    % --> !P
    # --> !H
    : --> !D
    , --> !K
    ? --> !Q
    & --> !A
    = --> !E
    Usage:
    SSRS-Parameter:

    SELECT
        Display = res.ResourceName
        , Value = SOLVIN.FN_EncodeReportParameter(res.ResourceUID)
    FROM dbo.MSP_EpmResource res;

    DECLARE @parameterResources nvarchar(MAX) = N'E8169DCC-4CF0-E211-93F7-00155D321C05,4C39AE58-8CF5-E311-9415-00155D321C05,4D39AE58-8CF5-E311-9415-00155D321C05';
    DECLARE @tblResources SOLVIN.TVP_Uid;
    INSERT INTO @tblResources (Item) SELECT DISTINCT Item FROM SOLVIN.FN_split_ReportParameterAsUid(@parameterResources)
    SELECT *
    FROM dbo.MSP_EpmResource res
    INNER JOIN @tblResources paramRes
        on res.ResourceUID = paramRes.Item


    SELECT
        Display = res.ResourceName
        , Value = SOLVIN.FN_EncodeReportParameter(res.ResourceNTAccount)
    FROM dbo.MSP_EpmResource res;

    DECLARE @parameterResources nvarchar(MAX) = N'i!D0!H.w|solvin!Bf.grimm,i!D0!H.w|dev!Bpeter,i!D0!H.w|dev!Bpaul';
    DECLARE @tblResources SOLVIN.TVP_NVARCHAR255;
    INSERT INTO @tblResources (Item) SELECT DISTINCT Item FROM SOLVIN.FN_split_ReportParameter(@parameterResources)
    SELECT *
    FROM dbo.MSP_EpmResource res
    INNER JOIN @tblResources paramRes
        on res.ResourceNTAccount = paramRes.Item

*/

EXECUTE SOLVIN.CreateScalarValuedFunctionIfNeeded N'SOLVIN.FN_EncodeReportParameter';
GO

ALTER FUNCTION SOLVIN.FN_EncodeReportParameter
(
    @p AS NVARCHAR(MAX)
)
RETURNS NVARCHAR(MAX)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2014-10-13 Flori
    -- 2016-10-18 Nadine, Flori
    --
    -- replace magic
/**
    Use this function to encode report parameter and decode with SOLVIN.FN_split_ReportParameter
    New Code :
    ! --> !X
    / --> !S
    \ --> !B
    % --> !P
    # --> !H
    : --> !D
    , --> !K
    ? --> !Q
    & --> !A
    = --> !E

    Usage:
    SELECT
        Display = res.ResourceName
        , Value = SOLVIN.FN_EncodeReportParameter(res.ResourceName)
    FROM dbo.MSP_EpmResource res
**/
    RETURN REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
            @p,
            N'!', N'!X'),
            N'/', N'!S'),
            N'\', N'!B'),
            N'%', N'!P'),
            N'#', N'!H'),
            N':', N'!D'),
            N',', N'!K'),
            N'?', N'!Q'),
            N'&', N'!A'),
            N'=', N'!E')
            ;
END;

/**
SELECT SOLVIN.FN_EncodeReportParameter('ntdomain!abce')
--> ntdomain!Xabce
SELECT SOLVIN.FN_EncodeReportParameter('ntdomain/abce')
--> ntdomain!Sabce
SELECT SOLVIN.FN_EncodeReportParameter('ntdomain\abce')
--> ntdomain!Babce
SELECT SOLVIN.FN_EncodeReportParameter('ntdomain%abce')
--> ntdomain!Pabce
SELECT SOLVIN.FN_EncodeReportParameter('ntdomain#abce')
--> ntdomain!Habce
SELECT SOLVIN.FN_EncodeReportParameter('ntdomain:abce')
--> ntdomain!Dabce
SELECT SOLVIN.FN_EncodeReportParameter('ntdomain,abce')
--> ntdomain!Kabce
**/
GO

EXECUTE SOLVIN.CreateScalarValuedFunctionIfNeeded 'SOLVIN.EncodeHTML';
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER FUNCTION [SOLVIN].[EncodeHTML](@text NVARCHAR(MAX)) RETURNS NVARCHAR(MAX)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-09-17 Flori
    --

    RETURN REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
        @text
        , N'&', N'&amp;')
        , N'<', N'&lt;')
        , N'>', N'&gt;')
        , N'''', N'&apos;')
        , N'"', N'&quot;')
        ;
/*
SELECT SOLVIN.EncodeHTML('a<b>c&d''e"f')
--> a&lt;b&gt;c&amp;d&apos;e&quot;f
*/
END;
GO

EXECUTE SOLVIN.CreateTableValuedFunctionIfNeeded N'SOLVIN.FN_split_by';
GO
ALTER FUNCTION SOLVIN.FN_split_by
(
   @List NVARCHAR(MAX),
   @Delimiter NVARCHAR(1)
)
RETURNS TABLE
WITH SCHEMABINDING AS
RETURN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2014-10-13 Florian
    -- 2014-11-05 Florian: bugfix last part
    --
  WITH E1(N)        AS ( SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1),
       E2(N)        AS (SELECT 1 FROM E1 a, E1 b),
       E4(N)        AS (SELECT 1 FROM E2 a, E2 b),
       E8(N)        AS (SELECT 1 FROM E4 a, E2 b),
       cteTally(N)  AS (SELECT TOP (DATALENGTH(ISNULL(@List,N''))/2) ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) FROM E8),
       cteStart(N1) AS (SELECT 0 UNION ALL SELECT t.N+1 FROM cteTally t WHERE (SUBSTRING(@List,t.N,1) = @Delimiter))
  SELECT Item = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
    SUBSTRING(@List, s.N1, ISNULL(NULLIF(CHARINDEX(@Delimiter,@List,s.N1),0)-s.N1,DATALENGTH(ISNULL(@List,N''))/2+1)),
                N'!K', N','),
                N'!B', N'\'),
                N'!S', N'/'),
                N'!P', N'%'),
                N'!H', N'#'),
                N'!D', N':'),
                N'!Q', N'?'),
                N'!A', N'&'),
                N'!E', N'='),
                N'!X', N'!')
    FROM cteStart s;
/*
SELECT * FROM SOLVIN.FN_split_by('12345678','4')
--> 123
--> 5678
SELECT * FROM SOLVIN.FN_split_by('12345678','6');
--> 12345
--> 78
SELECT * FROM SOLVIN.FN_split_by('12345678','8');
--> 1234567
SELECT * FROM SOLVIN.FN_split_by('12345678','9');
--> 12345678
SELECT * FROM SOLVIN.FN_split_by('','4');
--> ''
SELECT * FROM SOLVIN.FN_split_by(NULL,'4');
--> NULL
*/
GO

EXECUTE SOLVIN.CreateTableValuedFunctionIfNeeded N'SOLVIN.FN_split_ReportParameterAsInt';
GO
ALTER FUNCTION SOLVIN.FN_split_ReportParameterAsInt
(@List NVARCHAR(MAX))
RETURNS TABLE WITH SCHEMABINDING AS
RETURN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2014-10-13 Florian
    -- 2014-11-05 Florian: bugfix last part
    -- 2016-10-18 Nadine, Flori
    --
    -- split @List by comma(,)
    -- replace Magic
    -- convert to int
WITH
    E1(N) AS (SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1),
    E2(N) AS (SELECT 1 FROM E1 a, E1 b),
    E4(N) AS (SELECT 1 FROM E2 a, E2 b),
    E8(N) AS (SELECT 1 FROM E4 a, E2 b),
    cteTally(N) AS (SELECT TOP ( DATALENGTH(ISNULL(@List,N''))/2 ) ROW_NUMBER() OVER (ORDER BY (SELECT NULL) ) FROM E8),
    cteStart(N1) AS (SELECT 0 UNION ALL SELECT t.N+1 FROM cteTally t WHERE (SUBSTRING(@List,t.N,1) = N',')),
    cteText(T) AS (SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
        SUBSTRING(@List, s.N1, ISNULL(NULLIF(CHARINDEX(N',',@List,s.N1),0)-s.N1,DATALENGTH(ISNULL(@List,N''))/2+1)),
                N'!K', N','),
                N'!B', N'\'),
                N'!S', N'/'),
                N'!P', N'%'),
                N'!H', N'#'),
                N'!D', N':'),
                N'!Q', N'?'),
                N'!A', N'&'),
                N'!E', N'='),
                N'!X', N'!')
        AS T FROM cteStart s)
    SELECT CAST(T AS INT) AS Item
    FROM cteText
    WHERE (DATALENGTH(T) >0);
    /*
SELECT * FROM SOLVIN.FN_split_ReportParameterAsInt('42')
--> 42
SELECT * FROM SOLVIN.FN_split_ReportParameterAsInt('1,2,345')
--> 1
--> 2
--> 345
SELECT * FROM SOLVIN.FN_split_ReportParameterAsInt('a');
--> Msg 245, Level 16, State 1, Line 1
--> Conversion failed when converting the nvarchar value 'a' to data type int.
SELECT * FROM SOLVIN.FN_split_ReportParameterAsInt('');
--> %
SELECT * FROM SOLVIN.FN_split_ReportParameterAsInt(NULL);
--> %
*/
GO

EXECUTE SOLVIN.CreateTableValuedFunctionIfNeeded N'SOLVIN.FN_split_ReportParameterAsUid';
GO
ALTER FUNCTION SOLVIN.FN_split_ReportParameterAsUid
(
    @List NVARCHAR(MAX)
) RETURNS TABLE WITH SCHEMABINDING AS
RETURN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2014-10-13 Florian
    -- 2014-11-05 Florian: bugfix last part
    -- 2016-10-18 Nadine
    --
    --Use this function to decode report parameter and encode before with SOLVIN.FN_EncodeReportParameter
    --
    -- split @List by comma(,)
    -- replace see below
    -- convert to GUID
    -- split @List by comma(,)
/** NK:
New Code 2016-10-18:
            !K --> ,
            !B --> \
            !S --> /
            !X --> !
            !P --> %
            !H --> #
            !D --> :
            !Q --> ?
            !A --> &
            !E --> =
**/

WITH
    E1(N) AS (SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1),
    E2(N) AS (SELECT 1 FROM E1 a, E1 b),
    E4(N) AS (SELECT 1 FROM E2 a, E2 b),
    E8(N) AS (SELECT 1 FROM E4 a, E2 b),
    cteTally(N) AS (SELECT TOP ( DATALENGTH(ISNULL(@List,N''))/2 ) ROW_NUMBER() OVER (ORDER BY (SELECT NULL) ) FROM E8),
    cteStart(N1) AS (SELECT 0 UNION ALL SELECT t.N+1 FROM cteTally t WHERE (SUBSTRING(@List,t.N,1) = N',')),
    cteText(T) AS (SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
            SUBSTRING(@List, s.N1, ISNULL(NULLIF(CHARINDEX(N',',@List,s.N1),0)-s.N1,DATALENGTH(ISNULL(@List,N''))/2+1)),
                N'!K', N','),
                N'!B', N'\'),
                N'!S', N'/'),
                N'!P', N'%'),
                N'!H', N'#'),
                N'!D', N':'),
                N'!Q', N'?'),
                N'!A', N'&'),
                N'!E', N'='),
                N'!X', N'!')
    AS T FROM cteStart s)
    SELECT CAST(T AS UNIQUEIDENTIFIER) AS Item
    FROM cteText
    WHERE (DATALENGTH(T) = 72);
/*
SELECT * FROM SOLVIN.FN_split_ReportParameterAsUid('01234567-890a-bcde-f012-34567890abcd')
--> 01234567-890a-bcde-f012-34567890abcd
SELECT * FROM SOLVIN.FN_split_ReportParameterAsUid('01234567-890a-bcde-f012-34567890abcd,F1234567-890a-bcde-f012-34567890abcF')
--> 01234567-890a-bcde-f012-34567890abcd
--> F1234567-890a-bcde-f012-34567890abcF
SELECT * FROM SOLVIN.FN_split_ReportParameterAsUid('xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx')
--> Msg 8169, Level 16, State 2, Line 1
--> Conversion failed when converting from a character string to uniqueidentifier.
SELECT * FROM SOLVIN.FN_split_ReportParameterAsUid('a');
--> %
SELECT * FROM SOLVIN.FN_split_ReportParameterAsUid('');
--> %
SELECT * FROM SOLVIN.FN_split_ReportParameterAsUid(NULL);
--> %
*/
GO

EXECUTE SOLVIN.CreateTableValuedFunctionIfNeeded N'SOLVIN.FN_split_ReportParameter';
GO
ALTER FUNCTION SOLVIN.FN_split_ReportParameter
(
@List NVARCHAR(MAX)
) RETURNS TABLE WITH SCHEMABINDING AS
RETURN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2014-10-13 Florian
    -- 2014-11-05 Florian: bugfix last part
    -- 2016-10-18 Nadine
    -- split @List by comma(,)
/** NK:
Use this function to decode report parameter and encode before with SOLVIN.FN_EncodeReportParameter
New Code 2016-10-18:
            !K --> ,
            !B --> \
            !S --> /
            !X --> !
            !P --> %
            !H --> #
            !D --> :
            !Q --> ?
            !A --> &
            !E --> =
**/
WITH
    E1(N) AS (SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1),
    E2(N) AS (SELECT 1 FROM E1 a, E1 b),
    E4(N) AS (SELECT 1 FROM E2 a, E2 b),
    E8(N) AS (SELECT 1 FROM E4 a, E2 b),
    cteTally(N) AS (SELECT TOP ( DATALENGTH(ISNULL(@List,N''))/2 ) ROW_NUMBER() OVER (ORDER BY (SELECT NULL) ) FROM E8),
    cteStart(N1) AS (SELECT 0 UNION ALL SELECT t.N+1 FROM cteTally t WHERE (SUBSTRING(@List,t.N,1) = N','))
    SELECT  REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
            SUBSTRING(@List, s.N1, ISNULL(NULLIF(CHARINDEX(N',',@List,s.N1),0)-s.N1,DATALENGTH(ISNULL(@List,N''))/2+1)),
                N'!K', N','),
                N'!B', N'\'),
                N'!S', N'/'),
                N'!P', N'%'),
                N'!H', N'#'),
                N'!D', N':'),
                N'!Q', N'?'),
                N'!A', N'&'),
                N'!E', N'='),
                N'!X', N'!') AS Item
FROM cteStart s;
/*
SELECT * FROM SOLVIN.FN_split_ReportParameter('12345678')
--> 12345678
SELECT * FROM SOLVIN.FN_split_ReportParameter('1234!K5678,1234!K5678')
--> 1234,5678
--> 1234,5678
SELECT * FROM SOLVIN.FN_split_ReportParameter('1234!B5678,1234!bb5678')
--> 123\,5678
--> 1234\b5678
SELECT * FROM SOLVIN.FN_split_ReportParameter('1234!XS5678,1234!Xsb5678')
--> 1234!5678
--> 1234!sb5678
SELECT * FROM SOLVIN.FN_split_ReportParameter('1234!S5678!K1234,1234!Sb5678')
-->1234/5678,1234
--> 1234/b5678
SELECT * FROM SOLVIN.FN_split_ReportParameter('1234!P5678!P1234,1234!pb5678')
--> 1234%5678%1234
--> 1234%b5678
SELECT * FROM SOLVIN.FN_split_ReportParameter('12!H34,5!H78')
--> 12#34
--> 5#78
SELECT * FROM SOLVIN.FN_split_ReportParameter('12!D34!K12345,5!D78')
--> 12:34,12345
--> 5:78
SELECT * FROM SOLVIN.FN_split_ReportParameter('');
--> ''
SELECT * FROM SOLVIN.FN_split_ReportParameter(NULL);
--> NULL
*/
GO

EXECUTE SOLVIN.CreateTableValuedFunctionIfNeeded N'SOLVIN.FN_split';
GO
ALTER FUNCTION SOLVIN.FN_split
(
   @List NVARCHAR(MAX),
   @Delimiter NVARCHAR(1)
)
RETURNS TABLE
WITH SCHEMABINDING AS
RETURN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2018-01-17 created    
    --
  WITH E1(N)        AS ( SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1),
       E2(N)        AS (SELECT 1 FROM E1 a, E1 b),
       E4(N)        AS (SELECT 1 FROM E2 a, E2 b),
       E8(N)        AS (SELECT 1 FROM E4 a, E2 b),
       cteTally(N)  AS (SELECT TOP (DATALENGTH(ISNULL(@List,N''))/2) ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) FROM E8),
       cteStart(N1) AS (SELECT 0 UNION ALL SELECT t.N+1 FROM cteTally t WHERE (SUBSTRING(@List,t.N,1) = @Delimiter))
  SELECT Item = SUBSTRING(@List, s.N1, ISNULL(NULLIF(CHARINDEX(@Delimiter,@List,s.N1),0)-s.N1,DATALENGTH(ISNULL(@List,N''))/2+1))    
    FROM cteStart s;
/*
SELECT * FROM SOLVIN.FN_split('12345678','4')
--> 123
--> 5678
SELECT * FROM SOLVIN.FN_split('12345678','6');
--> 12345
--> 78
SELECT * FROM SOLVIN.FN_split('12345678','8');
--> 1234567
SELECT * FROM SOLVIN.FN_split('12345678','9');
--> 12345678
SELECT * FROM SOLVIN.FN_split('','4');
--> ''
SELECT * FROM SOLVIN.FN_split(NULL,'4');
--> NULL
*/
GO

EXECUTE SOLVIN.CreateTableValuedFunctionIfNeeded 'SOLVIN.FN_SplitUrlArgs'
GO
ALTER FUNCTION SOLVIN.FN_SplitUrlArgs(@text as nvarchar(max)) 
RETURNS TABLE AS 
RETURN 
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2018-01-17 created    
    --
    SELECT 
        [Key] = SUBSTRING(amp.Item, 0, CHARINDEX('=', amp.Item)),
        [Value] = SUBSTRING(amp.Item, CHARINDEX('=', amp.Item)+1, DATALENGTH(amp.Item)-CHARINDEX('=', amp.Item))
    FROM SOLVIN.FN_split(@text, '&') as amp
/* example
    DECLARE @parameter [SOLVIN].[TVP_KeyValue];
    INSERT INTO @parameter ([Key], [Value]) SELECT [Key], [Value] FROM SOLVIN.FN_SplitUrlArgs('RequestE2P=8D06BD3D-66BD-49EB-B2E0-8D679026703F&RequestDivProject=3CE23A37-970E-4BAD-B753-10F23216430B&RequestDivRootTask=13D29D64-D0BA-493C-AD50-0317B282CC08')
    SELECT * FROM @parameter ;
*/
    ;
GO

EXECUTE [SOLVIN].[CreateScalarValuedFunctionIfNeeded] 'SOLVIN.FN_Trim';
GO
ALTER FUNCTION SOLVIN.FN_Trim (
    @Str nvarchar(max)
)
RETURNS nvarchar(max) AS
BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- Trim left and right spaces, tab, cr and lf.
    --
    -- 2017-02-37 Florian
    --
    DECLARE @Result nvarchar(max)

    SET @Result = LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@Str, CHAR(9), ' '), CHAR(10), ' '), CHAR(11), ' '), CHAR(12), ' '), CHAR(13), ' ')))

    RETURN @Result
END;
GO
EXECUTE SOLVIN.CreateScalarValuedFunctionIfNeeded 'SOLVIN.IsEqualNVarCharMax'
GO
ALTER FUNCTION SOLVIN.IsEqualNVarCharMax(
@a nvarchar(max),@b nvarchar(max)
) RETURNS bit AS BEGIN 
    --
    -- returns 1 if @a==@b OR (@a IS NULL AND @b IS NULL)
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2018-01-25 Flori
    -- 
    RETURN (
        CASE 
            WHEN ISNULL(NULLIF(@a,@b),NULLIF(@b,@a)) IS NULL
            THEN CAST(1 AS bit) 
            ELSE CAST(0 AS bit) 
            END
        );
/* example
SELECT 
    SOLVIN.IsEqualNVarCharMax(N'a', N'a') as [a eq a], 
    SOLVIN.IsEqualNVarCharMax(N'a', N'b') as [a eq b],
    SOLVIN.IsEqualNVarCharMax(N'a', NULL) as [a eq NULL],
    SOLVIN.IsEqualNVarCharMax(NULL, N'b') as [NULL eq a],	
    SOLVIN.IsEqualNVarCharMax(NULL, NULL) as [NULL eq NULL]
-- a eq a	a eq b	a eq NULL	NULL eq a	NULL eq NULL
-- 1		0		0			0			1
*/
END;
GO
EXECUTE SOLVIN.CreateScalarValuedFunctionIfNeeded 'SOLVIN.IsEqualNVarChar255'
GO
ALTER FUNCTION SOLVIN.IsEqualNVarChar255(
@a nvarchar(255),@b nvarchar(255)
) RETURNS bit AS BEGIN 
    --
    -- returns 1 if @a==@b OR (@a IS NULL AND @b IS NULL)
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2018-01-25 Flori
    -- 
    RETURN (
        CASE 
            WHEN ISNULL(NULLIF(@a,@b),NULLIF(@b,@a)) IS NULL
            THEN CAST(1 AS bit) 
            ELSE CAST(0 AS bit) 
            END
        );
/* example
SELECT 
    SOLVIN.IsEqualNVarChar255(N'a', N'a') as [a eq a], 
    SOLVIN.IsEqualNVarChar255(N'a', N'b') as [a eq b],
    SOLVIN.IsEqualNVarChar255(N'a', NULL) as [a eq NULL],
    SOLVIN.IsEqualNVarChar255(NULL, N'b') as [NULL eq a],	
    SOLVIN.IsEqualNVarChar255(NULL, NULL) as [NULL eq NULL]
-- a eq a	a eq b	a eq NULL	NULL eq a	NULL eq NULL
-- 1		0		0			0			1
*/
END;
GO
EXECUTE SOLVIN.CreateScalarValuedFunctionIfNeeded 'SOLVIN.IsEqualVarChar255'
GO
ALTER FUNCTION SOLVIN.IsEqualVarChar255(
@a varchar(255),@b varchar(255)
) RETURNS bit AS BEGIN 
    --
    -- returns 1 if @a==@b OR (@a IS NULL AND @b IS NULL)
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2018-01-25 Flori
    -- 
    RETURN (
        CASE 
            WHEN ISNULL(NULLIF(@a,@b),NULLIF(@b,@a)) IS NULL
            THEN CAST(1 AS bit) 
            ELSE CAST(0 AS bit) 
            END
        );
/* example
SELECT 
    SOLVIN.IsEqualVarChar255(N'a', N'a') as [a eq a], 
    SOLVIN.IsEqualVarChar255(N'a', N'b') as [a eq b],
    SOLVIN.IsEqualVarChar255(N'a', NULL) as [a eq NULL],
    SOLVIN.IsEqualVarChar255(NULL, N'b') as [NULL eq a],	
    SOLVIN.IsEqualVarChar255(NULL, NULL) as [NULL eq NULL]
-- a eq a	a eq b	a eq NULL	NULL eq a	NULL eq NULL
-- 1		0		0			0			1
*/
END;
GO
EXECUTE SOLVIN.CreateScalarValuedFunctionIfNeeded 'SOLVIN.IsEqualUniqueidentifier'
GO
ALTER FUNCTION SOLVIN.IsEqualUniqueidentifier(
@a uniqueidentifier,@b uniqueidentifier
) RETURNS bit AS BEGIN 
    --
    -- returns 1 if @a==@b OR (@a IS NULL AND @b IS NULL)
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2018-01-25 Flori
    -- 
    RETURN (
        CASE 
            WHEN ISNULL(NULLIF(@a,@b),NULLIF(@b,@a)) IS NULL
            THEN CAST(1 AS bit) 
            ELSE CAST(0 AS bit) 
            END
        );
/* example
DECLARE @a uniqueidentifier = NEWID(), @b uniqueidentifier = NEWID()
SELECT 
    SOLVIN.IsEqualUniqueidentifier(@a, @a) as [a eq a], 
    SOLVIN.IsEqualUniqueidentifier(@a, @b) as [a eq b],
    SOLVIN.IsEqualUniqueidentifier(@a, NULL) as [a eq NULL],
    SOLVIN.IsEqualUniqueidentifier(NULL, @b) as [NULL eq a],	
    SOLVIN.IsEqualUniqueidentifier(NULL, NULL) as [NULL eq NULL]
-- a eq a	a eq b	a eq NULL	NULL eq a	NULL eq NULL
-- 1		0		0			0			1
*/
END;
GO
EXECUTE SOLVIN.CreateScalarValuedFunctionIfNeeded 'SOLVIN.IsEqualVariant';
GO
ALTER FUNCTION [SOLVIN].[IsEqualVariant](
@a sql_variant,@b sql_variant
) RETURNS bit AS BEGIN 
    --
    -- returns 1 if @a==@b OR (@a IS NULL AND @b IS NULL)
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2018-01-25 Flori
    -- 
    RETURN (
        CASE 
            WHEN ISNULL(NULLIF(@a,@b),NULLIF(@b,@a)) IS NULL
            THEN CAST(1 AS bit) 
            ELSE CAST(0 AS bit) 
            END
        );
/* example
SELECT 
    SOLVIN.IsEqualVariant(N'a', N'a') as [a eq a], 
    SOLVIN.IsEqualVariant(N'a', N'b') as [a eq b],
    SOLVIN.IsEqualVariant(N'a', NULL) as [a eq NULL],
    SOLVIN.IsEqualVariant(NULL, N'b') as [NULL eq a],	
    SOLVIN.IsEqualVariant(NULL, NULL) as [NULL eq NULL]
-- a eq a	a eq b	a eq NULL	NULL eq a	NULL eq NULL
-- 1		0		0			0			1
*/
END;

GO
-----------------------------------------------------------
--
-- Permissions
--
-----------------------------------------------------------
/** Creates a set of prodeures to set permissions **/
GO
EXECUTE SOLVIN.CreateTableValuedFunctionIfNeeded N'SOLVIN.GetGrantPermissions';
GO

ALTER FUNCTION [SOLVIN].[GetGrantPermissions]
(
    @objectName NVARCHAR(MAX)
) RETURNS TABLE AS
RETURN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2014-10-13 Flori
    --
    SELECT
        stmt = REPLACE(REPLACE(REPLACE(
            N'GRANT #permissionName# ON #objectName# TO #roleName#;' COLLATE SQL_Latin1_General_CP1_CI_AS
            , N'#permissionName#', permissionName COLLATE SQL_Latin1_General_CP1_CI_AS)
            , N'#objectName#', objectName COLLATE SQL_Latin1_General_CP1_CI_AS)
            , N'#roleName#', roleName COLLATE SQL_Latin1_General_CP1_CI_AS)
    FROM (
        SELECT
            objectName = QUOTENAME(s.name) + '.' + QUOTENAME(o.name)
            , roleName = QUOTENAME(pr.name)
            , permissionName = pe.permission_name

        FROM sys.database_principals AS pr
        JOIN sys.database_permissions AS pe
            ON pe.grantee_principal_id = pr.principal_id
        JOIN sys.objects AS o
            ON (pe.major_id = o.object_id) AND (pe.minor_id = 0)
        JOIN sys.schemas AS s
            ON o.schema_id = s.schema_id
        WHERE (pe.major_id = OBJECT_ID(@objectName))
    ) as i
    ;

/* This procedure delivers  alist of granted permission on databaseobject

SELECT * FROM [SOLVIN].[GetGrantPermissions]('[SOLVIN].[FN_split_by]')

-->
    GRANT REFERENCES ON [SOLVIN].[FN_split_by] TO [report];
    GRANT SELECT ON [SOLVIN].[FN_split_by] TO [report];
    GRANT VIEW DEFINITION ON [SOLVIN].[FN_split_by] TO [report];

*/
GO

EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.ExecuteSqlStmts';
GO
ALTER PROCEDURE SOLVIN.ExecuteSqlStmts
(
    @stmts [SOLVIN].[TVP_NVarCharMAX] readonly
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    SET NOCOUNT ON;
    --
    DECLARE @stmt nvarchar(MAX);
    DECLARE c CURSOR LOCAL READ_ONLY FORWARD_ONLY
    FOR SELECT Item FROM @stmts;
    OPEN c;
    FETCH NEXT FROM c INTO @stmt;
    WHILE (@@fetch_status <> -1) BEGIN
        IF (@@fetch_status <> -2) BEGIN
            EXEC sys.sp_executesql @stmt;
        END;
        FETCH NEXT FROM c INTO @stmt;
    END;
    CLOSE c;
    DEALLOCATE c;
END;
GO
-----------------------------------------------------------
--
-- Replace
--
-----------------------------------------------------------
IF (NOT EXISTS(SELECT * FROM sys.table_types WHERE (schema_id = SCHEMA_ID('SOLVIN')) AND (name = 'TVP_Replace'))) BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-20 Florian
    --
    CREATE TYPE SOLVIN.TVP_Replace AS TABLE
    (
        Match nvarchar(400) NOT NULL,
        Replacement nvarchar(max) NULL,
        PRIMARY KEY (Match)
    );
    PRINT ('    -- [SOLVIN].[TVP_Replace] is a new table type.');
END ELSE BEGIN
    PRINT ('    -- [SOLVIN].[TVP_Replace] exists.');
END;
EXECUTE SOLVIN.GrantPermission 'SOLVIN.TVP_Replace';
GO
IF (NOT EXISTS(SELECT * FROM sys.table_types WHERE (schema_id = SCHEMA_ID('SOLVIN')) AND (name = 'TVP_PosReplace'))) BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-20 Florian
    --
    CREATE TYPE SOLVIN.TVP_PosReplace AS TABLE
    (
        charpos INT NOT NULL,
        Match nvarchar(400) NOT NULL,
        Replacement nvarchar(max) NULL,
        PRIMARY KEY (charpos, Match)
    );
    PRINT ('    -- [SOLVIN].[TVP_PosReplace] is a new table type.');
END ELSE BEGIN
    PRINT ('    -- [SOLVIN].[TVP_PosReplace] exists.');
END;
EXECUTE SOLVIN.GrantPermission 'SOLVIN.TVP_PosReplace';
GO
IF (NOT EXISTS(SELECT * FROM sys.table_types WHERE (schema_id = SCHEMA_ID('SOLVIN')) AND (name = 'TVP_MultiReplace'))) BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-20 Florian
    --
    CREATE TYPE [SOLVIN].[TVP_MultiReplace] AS TABLE(
        [RowId] [int] NOT NULL,
        [Match] [nvarchar](400) NOT NULL,
        [Replacement] [nvarchar](max) NULL,
        PRIMARY KEY CLUSTERED
        (
            [RowId] ASC,
            [Match] ASC
        )
        WITH (IGNORE_DUP_KEY = OFF)
    );
    PRINT ('    -- [SOLVIN].[TVP_MultiReplace] is a new table type.');
END ELSE BEGIN
    PRINT ('    -- [SOLVIN].[TVP_MultiReplace] exists.');
END;
EXECUTE SOLVIN.GrantPermission 'SOLVIN.TVP_MultiReplace';
GO
IF (NOT EXISTS(SELECT * FROM sys.table_types WHERE (schema_id = SCHEMA_ID('SOLVIN')) AND (name = 'TVP_MultiReplaceResult'))) BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-20 Florian
    --
    CREATE TYPE [SOLVIN].[TVP_MultiReplaceResult] AS TABLE(
        RowId INT NOT NULL,
        ReplacedText nvarchar(max) NULL,
        PRIMARY KEY (RowId)
        WITH (IGNORE_DUP_KEY = OFF)
    );
    PRINT ('    -- [SOLVIN].[TVP_MultiReplaceResult] is a new table type.');
END ELSE BEGIN
    PRINT ('    -- [SOLVIN].[TVP_MultiReplaceResult] exists.');
END;
EXECUTE SOLVIN.GrantPermission 'SOLVIN.TVP_MultiReplaceResult';
GO

IF (OBJECT_ID('SOLVIN.GetReplacementsFromSettings') IS NULL) BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-20 Florian
    --
    PRINT '    -- new SOLVIN.GetReplacementsFromSettings';
    EXECUTE sys.sp_executesql N'
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-20 Flori
    --
    CREATE FUNCTION SOLVIN.GetReplacementsFromSettings()
    RETURNS @replace TABLE
        (
            Match nvarchar(400) NOT NULL,
            Replacement nvarchar(max) NULL,
            PRIMARY KEY (Match)
        )
    AS BEGIN
        RETURN
    END;
    ';
END ELSE BEGIN
    PRINT '    -- existing SOLVIN.GetReplacementsFromSettings';
END;
GO
EXECUTE SOLVIN.GrantPermission 'SOLVIN.GetReplacementsFromSettings';
GO

ALTER FUNCTION SOLVIN.GetReplacementsFromSettings()
RETURNS @replace TABLE
    (
        Match nvarchar(400) NOT NULL,
        Replacement nvarchar(max) NULL,
        PRIMARY KEY (Match)
    )
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-20 Florian
    --
    DECLARE
        @SiteId       uniqueidentifier,
        @DatabaseName nvarchar(255),
        @Version      int;

    SELECT TOP (1)
          @SiteId       = [SiteId]
        , @DatabaseName = [DatabaseName]
        , @Version      = [Version]
    FROM [SOLVIN].[MSPSourceSetting]
    WHERE [Index] = 1

    INSERT INTO @replace (match, replacement)
        SELECT '#SiteId#', ISNULL(CAST(@SiteId as nvarchar(max)),CAST(N'' as nvarchar(max)));

    INSERT INTO @replace (match, replacement)
        SELECT '#DatabaseName#', ISNULL(CAST(@DatabaseName as nvarchar(max)),CAST(N'' as nvarchar(max)));

    INSERT INTO @replace (match, replacement)
        SELECT '#Version#', ISNULL(CAST(@Version as nvarchar(max)),CAST(N'' as nvarchar(max)));

    IF (@Version = 15) BEGIN
        INSERT INTO @replace (match, replacement) VALUES ('/*15', ' ');
        INSERT INTO @replace (match, replacement) VALUES ('15*/', ' ');
    END;
    IF (@Version = 16) BEGIN
        INSERT INTO @replace (match, replacement) VALUES ('/*16', ' ');
        INSERT INTO @replace (match, replacement) VALUES ('16*/', ' ');
    END;
    INSERT INTO @replace (match, replacement) SELECT CONCAT('#Setting:',[SettingName], '#'),[SettingValue] FROM [SOLVIN].[Setting]
    RETURN
/*
DECLARE @replace SOLVIN.TVP_Replace;
INSERT INTO @replace (Match, Replacement) SELECT Match, Replacement FROM SOLVIN.GetReplacementsFromSettings()
SELECT Match, Replacement FROM @replace
*/
END;
GO

EXECUTE [SOLVIN].[CreateScalarValuedFunctionIfNeeded] N'SOLVIN.ReplaceText'
GO
ALTER FUNCTION SOLVIN.ReplaceText
(
    @text nvarchar(max),
    @replace SOLVIN.TVP_Replace readonly
)
RETURNS nvarchar(max)
AS
BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-20 Florian
    --
    DECLARE @PosReplace SOLVIN.TVP_PosReplace;

    WITH
        E1(N)        AS ( SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1),
        E2(N)        AS (SELECT 1 FROM E1 a, E1 b),
        E4(N)        AS (SELECT 1 FROM E2 a, E2 b),
        E8(N)        AS (SELECT 1 FROM E4 a, E2 b),
        cteTally(N)  AS (SELECT TOP (DATALENGTH(ISNULL(@text, N''))/2) ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) FROM E8),
        cteStart(N) AS (SELECT t.N FROM cteTally t WHERE (SUBSTRING(@text,t.N,1) IN ('#', '/', 'S')))
    INSERT INTO @PosReplace (charpos, match, replacement)
        SELECT
        s.N,
        r.match,
        r.replacement
        FROM cteStart s CROSS JOIN @replace r
        WHERE (((DATALENGTH(@text)/2) - LEN(match) - s.N + 1) >= 0)
            AND (SUBSTRING(@text, s.N, LEN(r.match)) = r.match)
        ;
    --
    DECLARE
        @charpos INT,
        @match nvarchar(max),
        @replacement nvarchar(max);
    DECLARE cursorMatches CURSOR LOCAL READ_ONLY
    FOR SELECT charpos, match, replacement from @PosReplace ORDER BY charpos DESC;
    OPEN cursorMatches;
    FETCH NEXT FROM cursorMatches INTO @charpos, @match, @replacement;
    WHILE (@@fetch_status <> -1) BEGIN
        IF (@@fetch_status <> -2) BEGIN
            SET @text = (STUFF(@text, @charpos, LEN(@match), @replacement));
        END
        FETCH NEXT FROM cursorMatches INTO @charpos, @match, @replacement;
    END
    CLOSE cursorMatches;
    DEALLOCATE cursorMatches;
    return @text;
/*
-- Example
-----------
DECLARE
    @text nvarchar(max),
    @replace SOLVIN.TVP_Replace,
    @act nvarchar(max);
SET @text = N'xxx#bb#yyy#cc#zz';
INSERT INTO @replace (match, replacement) VALUES ('#aa#', '22')
INSERT INTO @replace (match, replacement) VALUES ('#bb#', '22')
INSERT INTO @replace (match, replacement) VALUES ('#cc#', '33')
SET @act = SOLVIN.ReplaceText(@text, @replace)
SELECT @act;
*/
END;
GO


IF (OBJECT_ID('[SOLVIN].[MultiReplaceText]') IS NULL) BEGIN
    EXECUTE sys.sp_executesql N'
    CREATE FUNCTION [SOLVIN].[MultiReplaceText](
        @text nvarchar(max),
        @replace SOLVIN.TVP_Replace READONLY,
        @multiReplace [SOLVIN].[TVP_MultiReplace] READONLY
    )
    RETURNS @resultReplaced TABLE
        (
            RowId INT IDENTITY(1,1) NOT NULL,
            ReplacedText nvarchar(max) NULL,
            PRIMARY KEY (RowId)
        )
    AS BEGIN
        RETURN
    END;
    ';
END;
GO
ALTER FUNCTION [SOLVIN].[MultiReplaceText](
    @text nvarchar(max),
    @replace SOLVIN.TVP_Replace READONLY,
    @multiReplace [SOLVIN].[TVP_MultiReplace] READONLY
)
RETURNS @resultReplaced TABLE
    (
        RowId INT NOT NULL,
        ReplacedText nvarchar(max) NULL,
        PRIMARY KEY (RowId)
    )
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-20 Florian
    --

    DECLARE	@replaceRow SOLVIN.TVP_Replace;
    DECLARE @RowId INT;
    --
    DECLARE cursorRowId CURSOR LOCAL READ_ONLY
        FOR SELECT DISTINCT mr.RowId FROM @multiReplace mr;
    OPEN cursorRowId;
    FETCH NEXT FROM cursorRowId INTO @RowId;
    WHILE (@@fetch_status <> -1) BEGIN
        IF (@@fetch_status <> -2) BEGIN
            INSERT INTO @replaceRow (Match, Replacement)
                SELECT mr.Match, mr.Replacement
                FROM @multiReplace mr
                WHERE mr.RowId = @RowId
                ;
            INSERT INTO @replaceRow (Match, Replacement)
                SELECT r.Match, r.Replacement
                FROM @replace r
                LEFT JOIN @replaceRow rw
                    ON r.Match = rw.Match
                WHERE (rw.Match IS NULL)
                ;
            INSERT INTO @resultReplaced (RowId, ReplacedText)
                SELECT @RowId, SOLVIN.ReplaceText(@text, @replaceRow)
                ;
            DELETE FROM @replaceRow
                ;
        END;
        FETCH NEXT FROM cursorRowId INTO @RowId;
    END;
    CLOSE cursorRowId;
    DEALLOCATE cursorRowId;

    RETURN
/*

DECLARE	@text nvarchar(max) = 'a:#a#; b:#b#; c:#c#;';
DECLARE @replace SOLVIN.TVP_Replace;
DECLARE	@multiReplace [SOLVIN].[TVP_MultiReplace];
DECLARE	@act SOLVIN.TVP_MultiReplaceResult;
INSERT INTO @replace (Match, Replacement) VALUES ('#a#', 'a1'), ('#c#', 'cc');
INSERT INTO @multiReplace (RowId, Match, Replacement) VALUES (1, '#a#', 'a1'), (1, '#b#', 'b1'), (2, '#a#', 'a2'), (2, '#b#', 'b2');
SELECT RowId, Match, Replacement FROM @multiReplace ;
INSERT INTO @act (RowId, ReplacedText) SELECT RowId, ReplacedText FROM [SOLVIN].[MultiReplaceText](@text, @replace, @multiReplace);
SELECT * FROM @act

*/
END;
GO
--

-----------------------------------------------------------
--
-- role
--
-----------------------------------------------------------
EXECUTE SOLVIN.CreateProcedureIfNeeded 'SOLVIN.AddRoleMember';
GO

ALTER PROCEDURE SOLVIN.AddRoleMember
(
@role sysname,
@login sysname
)
AS
BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-09-17 Flori
    --

    DECLARE @sql nvarchar(max);
    IF (NULLIF(@role, N'') IS NULL) BEGIN
        SET @role = 'report';
    END ELSE BEGIN
        SET @role = PARSENAME(@role, 1)
    END;
    IF (NULLIF(@login, N'') IS NULL) BEGIN
        SET @login = ORIGINAL_LOGIN();
    END ELSE BEGIN
        SET @login = PARSENAME(@login, 1)
    END;

    DECLARE @role_principal_id INT ;
    SELECT TOP(1) @role_principal_id = principal_id FROM sys.database_principals  WHERE type_desc = 'DATABASE_ROLE' AND name = @role;
    -- Create Role - if needed
    IF (NOT EXISTS(SELECT * FROM sys.database_principals  WHERE type_desc = 'DATABASE_ROLE' AND name = @role)) BEGIN
        SET @sql = 'CREATE ROLE [role];';
        SET @sql = REPLACE(@sql, '[role]', QUOTENAME(@role));
        PRINT @sql;
        EXEC sys.sp_executesql @sql;
        SELECT TOP(1) @role_principal_id = principal_id FROM sys.database_principals  WHERE type_desc = 'DATABASE_ROLE' AND name = @role;
    END ELSE BEGIN
        SET @sql = '    -- Role [role] exists;';
        SET @sql = REPLACE(@sql, '[role]', QUOTENAME(@role));
        PRINT @sql;
    END;

    -- CREATE Login - if needed
    DECLARE @ServerLoginName sysname;
    DECLARE @DBUserName sysname;
    --ORIGINAL_LOGIN()
    SELECT TOP (1)
        @ServerLoginName = sp.name,
        @DBUserName      = dp.name
    FROM
        sys.server_principals sp
        LEFT JOIN sys.database_principals dp
        ON sp.sid = dp.sid
    WHERE sp.name = @login;

    if (@ServerLoginName IS NULL) BEGIN
        SELECT TOP (1)
            @ServerLoginName = sp.name,
            @DBUserName      = dp.name
        FROM
            sys.server_principals sp
            LEFT JOIN sys.database_principals dp
            ON sp.sid = dp.sid
        WHERE dp.name = @login;
    END;

    --
    IF (@ServerLoginName IS NULL) BEGIN
        SET @sql='CREATE LOGIN [login] FROM WINDOWS'
        SET @sql = REPLACE(@sql, '[login]', QUOTENAME(@login));
        EXEC sys.sp_executesql @sql;
        PRINT @sql

        SELECT TOP (1)
            @ServerLoginName = sp.name,
            @DBUserName      = dp.name
        FROM
            sys.server_principals sp
            LEFT JOIN sys.database_principals dp
            ON sp.sid = dp.sid
        WHERE sp.name = @login;

    END ELSE BEGIN
        SET @sql='    -- LOGIN [login] exists';
        SET @sql = REPLACE(@sql, '[login]', QUOTENAME(@login));
        PRINT @sql
    END;

    IF (@DBUserName IS NULL) BEGIN
        SET @sql='CREATE USER [login] FOR LOGIN [login]'
        SET @sql = REPLACE(@sql, '[login]', QUOTENAME(@login));
        EXEC sys.sp_executesql @sql;
        PRINT @sql
    END ELSE BEGIN
        SET @sql='    -- USER for Login [login] exists';
        SET @sql = REPLACE(@sql, '[login]', QUOTENAME(@login));
        PRINT @sql
    END;

    IF (@DBUserName = 'dbo') BEGIN
        SET @sql='    -- USER for Login [login] is dbo skip add to role.';
        SET @sql = REPLACE(@sql, '[login]', QUOTENAME(@login));
        PRINT @sql
    END ELSE BEGIN
        IF (EXISTS(
            SELECT
                 --sp.name,
                 --dp.name,
                 --dp.principal_id,
                 drm.role_principal_id
                FROM
                    sys.server_principals sp
                    INNER JOIN sys.database_principals dp
                        ON sp.sid = dp.sid
                    INNER JOIN (SELECT * FROM sys.database_role_members WHERE role_principal_id = @role_principal_id) as drm
                        ON dp.principal_id = drm.member_principal_id
                    )) BEGIN
            SET @sql='ALTER ROLE [role] ADD MEMBER [login]';
            SET @sql = REPLACE(@sql, '[role]', QUOTENAME(@role));
            SET @sql = REPLACE(@sql, '[login]', QUOTENAME(@login));
            PRINT @sql
        END ELSE BEGIN
            SET @sql='    -- [login] is member of role [role]';
            SET @sql = REPLACE(@sql, '[role]', QUOTENAME(@role));
            SET @sql = REPLACE(@sql, '[login]', QUOTENAME(@login));
            PRINT @sql
        END;
    END;
/*

*/
END;
GO
-----------------------------------------------------------
--
-- Synonyms
--
-----------------------------------------------------------
GO
EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.EnsureAllSynonyms';
--
-- NO ALTER FOR SOLVIN.EnsureAllSynonyms
--
GO
EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.EnsureSynonym';
GO
ALTER PROCEDURE SOLVIN.EnsureSynonym
(
    @name sysname,
    @for nvarchar(MAX)
)
AS BEGIN
    SET NOCOUNT ON;
    /*
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-10-13 Flori
    --
    -- drop and create of SYNONYM if needed
    */
    DECLARE @forNow nvarchar(MAX);
    DECLARE @sql nvarchar(MAX);
    DECLARE @type char(2);
    DECLARE @type_desc nvarchar(60);
    DECLARE @grantStmts [SOLVIN].[TVP_NVarCharMAX];

    IF (@name is NULL) BEGIN
        SET @name = QUOTENAME(PARSENAME(@for, 2))+N'.'+QUOTENAME(PARSENAME(@for, 1));
    END;

    -- auto generate schema
    DECLARE @schema sysname = ISNULL(PARSENAME(@name, 2), N'dbo');
    EXECUTE SOLVIN.EnsureSchema @schema;

    --
    SELECT TOP (1) @type=type, @type_desc=type_desc FROM sys.all_objects WHERE object_id = OBJECT_ID(@name);
    IF (NULLIF(@type, 'SN') IS NULL) BEGIN
        SELECT TOP (1) @forNow = base_object_name FROM sys.synonyms WHERE OBJECT_ID(@name) = object_id;
        IF (@forNow IS NOT NULL AND @forNow != @for) BEGIN
            INSERT @grantStmts ([Item]) SELECT stmt FROM  SOLVIN.GetGrantPermissions(@name);
            SET @sql = (REPLACE(N'DROP SYNONYM #name#', N'#name#', @name));
            PRINT (REPLACE(REPLACE(REPLACE(N'    INFO: DROP SYNONYM #name#; --old: #forNow# new: #for#', N'#name#', @name), N'#forNow#', @forNow), N'#for#', @for));
            EXECUTE sys.sp_executesql @sql;
            SET @forNow = NULL;
        END;
        IF (@forNow IS NULL) BEGIN
            SET @sql = REPLACE(REPLACE(N'CREATE SYNONYM #name# FOR #for#', N'#name#', @name),N'#for#', @for);
            PRINT ('    INFO: '+@sql);
            EXECUTE sys.sp_executesql @sql;
            SET @forNow = NULL;
            EXECUTE SOLVIN.ExecuteSqlStmts @grantStmts;
        END;
    END ELSE BEGIN
        SET @sql = REPLACE(REPLACE(REPLACE(N'Cannot create SYNONYM #name# FOR #for# because a #type# with that name exists.', N'#name#', @name), N'#type#', @type_desc),N'#for#', @for);
        PRINT @sql;
    END;
END;
/** This stroed procedure drops and creates a synonym if needed

    EXECUTE SOLVIN.EnsureSynonym 'dbo.TestSyn', '[ReportServer].[dbo].[Catalog]'
-->
         INFO: CREATE SYNONYM dbo.TestSyn FOR [ReportServer].[dbo].[Catalog]

**/
GO

EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.GeneratorSynonym';
GO
ALTER PROCEDURE SOLVIN.GeneratorSynonym
(
    @databaseName nvarchar(MAX),
    @filterName nvarchar(MAX),
    @filterType nvarchar(MAX)
)
AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    -- The output is TSQL statements to create the synonms
    --


    IF (NULLIF(@filterType, N'') IS NULL) BEGIN
        SET @filterType = N'U,V';
    END;
    DECLARE @currentDatabaseName nvarchar(max) = DB_NAME();
    SET @databaseName = PARSENAME(@databaseName,1);
    IF ((NULLIF(@filterName, N'') IS NOT NULL) AND (CHARINDEX(N'%',@filterName)<=0)) BEGIN
        SET @filterName = N'%'+@filterName+N'%';
    END;
    -- PRINT ('-- from '+@databaseName);
    -- PRINT ('-- to '+@currentDatabaseName);

    DECLARE @collaction nvarchar(128) = CAST(DATABASEPROPERTYEX('master', 'Collation') as nvarchar(128));
    DECLARE @sql nvarchar(max);

    SET @sql = N'
        SELECT REPLACE(REPLACE(REPLACE(
            N''EXECUTE SOLVIN.EnsureSynonym NULL, ''''#objectname#''''; -- #type# - #type_desc#
'' COLLATE #collaction#,
            N''#objectname#'' COLLATE #collaction#,objectname),
            N''#type#'' COLLATE #collaction#, type),
            N''#type_desc#'' COLLATE #collaction#, type_desc)
        FROM (
            SELECT TOP (9223372036854775807)
                objectname = (QUOTENAME(@databaseName) + N''.'' + QUOTENAME(s.name) + N''.'' + QUOTENAME(o.name)) COLLATE #collaction#
                ,type = type COLLATE #collaction#
                ,type_desc = type_desc COLLATE #collaction#
            FROM [#db#].sys.schemas s
            INNER JOIN [#db#].sys.objects o
                ON s.schema_id = o.schema_id
            WHERE (s.name NOT IN (''sys''))
            AND ( (NULLIF(@filterName, N'''') IS NULL)
                OR (o.name LIKE @filterName))
            AND (	(@filterType IN (''*'', ''%'', ''ALL''))
                OR (o.type IN (SELECT Item = Item COLLATE #collaction# FROM [#currentdb#].SOLVIN.FN_split_ReportParameter(@filterType)))
                )
            ORDER BY s.name, o.name
        ) as obj
    ;
';

    SET @sql =  REPLACE(REPLACE(REPLACE(
        @sql,
        N'#db#', @databaseName),
        N'#currentdb#', @currentDatabaseName),
        N'#collaction#', @collaction);
    PRINT ('/*' + @sql + '*/');
    EXECUTE sys.sp_executesql @sql, N'@databaseName nvarchar(MAX), @filterName nvarchar(MAX), @filterType nvarchar(max)', @databaseName=@databaseName, @filterName=@filterName, @filterType=@filterType;
END;
GO

/* This procedure delivers output (TSQL statements) to create the synonms by filter criterias.

1. Parameter: @databaseName
2. Parameter: @filterName
3. Parameter: @filterType

EXECUTE SOLVIN.GeneratorSynonym '[DATABASE_PWA]', 'Role', 'U,V'

type | type_desc
---------------------------------------
IF	 | SQL_INLINE_TABLE_VALUED_FUNCTION
FN	 | SQL_SCALAR_FUNCTION
P 	 | SQL_STORED_PROCEDURE
TF	 | SQL_TABLE_VALUED_FUNCTION
TT	 | TYPE_TABLE
U 	 | USER_TABLE
V 	 | VIEW

-->
    EXECUTE SOLVIN.EnsureSynonym NULL, '[DATABASE_PWA].[dbo].[RoleAssignment]'; -- U  - USER_TABLE
    EXECUTE SOLVIN.EnsureSynonym NULL, '[DATABASE_PWA].[dbo].[Roles]'; -- U  - USER_TABLE
    EXECUTE SOLVIN.EnsureSynonym NULL, '[DATABASE_PWA].[pjdiag].[pjpub_MSP_ANALYSIS_PLANNER_REM_CAPACITY_BY_ROLE]'; -- V  - VIEW
    EXECUTE SOLVIN.EnsureSynonym NULL, '[DATABASE_PWA].[pjdiag].[pjpub_MSP_ANALYSIS_PLANNER_ROLE_RATES]'; -- V  - VIEW
    EXECUTE SOLVIN.EnsureSynonym NULL, '[DATABASE_PWA].[pjdiag].[pjpub_MSP_ANALYSIS_PLANNER_SOLUTION_PROJECT_REQUIREMENTS_BY_ROLE]'; -- V  - VIEW
    EXECUTE SOLVIN.EnsureSynonym NULL, '[DATABASE_PWA].[pjdiag].[pjpub_MSP_ANALYSIS_PROJECT_REQUIREMENTS_BY_ROLE]'; -- V  - VIEW
    EXECUTE SOLVIN.EnsureSynonym NULL, '[DATABASE_PWA].[pjpub].[MSP_ANALYSIS_PLANNER_REM_CAPACITY_BY_ROLE]'; -- U  - USER_TABLE
    EXECUTE SOLVIN.EnsureSynonym NULL, '[DATABASE_PWA].[pjpub].[MSP_ANALYSIS_PLANNER_ROLE_RATES]'; -- U  - USER_TABLE
    EXECUTE SOLVIN.EnsureSynonym NULL, '[DATABASE_PWA].[pjpub].[MSP_ANALYSIS_PLANNER_SOLUTION_PROJECT_REQUIREMENTS_BY_ROLE]'; -- U  - USER_TABLE
    EXECUTE SOLVIN.EnsureSynonym NULL, '[DATABASE_PWA].[pjpub].[MSP_ANALYSIS_PROJECT_REQUIREMENTS_BY_ROLE]'; -- U  - USER_TABLE

*/
GO

EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.UpdateEnsureAllSynonyms';
GO
ALTER PROCEDURE [SOLVIN].[UpdateEnsureAllSynonyms]
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    -- updates EnsureSynonyms that ensures that all synonm exists and references as currently defined
    --
    SET NOCOUNT ON;

    DECLARE c CURSOR LOCAL READ_ONLY FORWARD_ONLY
    FOR SELECT
        stmt = REPLACE(REPLACE(
            CASE
                WHEN i.synonymName = i.localName
                    THEN N'EXECUTE SOLVIN.EnsureSynonym NULL, N''#objectname#'';'
                ELSE
                    N'EXECUTE SOLVIN.EnsureSynonym N''#synonymname#'', N''#objectname#'';'
            END
        , N'#synonymname#', i.synonymName )
        , N'#objectname#', i.objectName )
    FROM (
        SELECT TOP (9223372036854775807)
        synonymName = (QUOTENAME(SCHEMA_NAME(s.schema_id)) + N'.' + QUOTENAME(s.name))
        , objectName = s.base_object_name
        , localName = QUOTENAME(PARSENAME(s.base_object_name, 2)) + N'.' + QUOTENAME(PARSENAME(s.base_object_name, 1))
        FROM sys.synonyms s
        ORDER BY SCHEMA_NAME(s.schema_id), s.name
    ) as i;

    DECLARE @stmts nvarchar(max) = N'';

    DECLARE @stmt nvarchar(max);
    OPEN c;
    FETCH NEXT FROM c INTO @stmt;
    WHILE (@@fetch_status <> -1)
    BEGIN
        IF (@@fetch_status <> -2)
        BEGIN
            SET @stmts = @stmts + CAST(N'
        ' AS nvarchar(MAX)) + @stmt;
        END
        FETCH NEXT FROM c INTO @stmt
    END;
    CLOSE c;
    DEALLOCATE c;
    SET @stmt = REPLACE(
    CAST(N'ALTER PROCEDURE SOLVIN.EnsureAllSynonyms
AS BEGIN
    SET NOCOUNT ON;
    -- drop and create of SYNONYM s if needed
    --
    -- use SOLVIN.UpdateEnsureAllSynonyms to update this stored procedure
    --
    #stmts#

/*

EXECUTE SOLVIN.EnsureAllSynonyms ;

*/
END;' AS nvarchar(max))
    ,N'#stmts#',@stmts);

    EXECUTE [SOLVIN].[CreateProcedureIfNeeded] 'SOLVIN.EnsureAllSynonyms';

    EXEC sys.sp_executesql @stmt;
/*

EXECUTE SOLVIN.UpdateEnsureAllSynonyms

*/
END;
GO

EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.ReplaceDatabaseInSynonyms';
GO
ALTER PROCEDURE SOLVIN.ReplaceDatabaseInSynonyms
(
    @fromDB nvarchar(max),
    @toDB nvarchar(max)
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    -- updates Synonyms that referenece database @fromDB to the new database @toDb.
    --
    SET NOCOUNT ON;
    SET @fromDB = PARSENAME(@fromDB, 1);
    SET @toDB = PARSENAME(@toDB, 1);
    --SELECT
    --	synonymName = (QUOTENAME(SCHEMA_NAME(s.schema_id)) + N'.' + QUOTENAME(s.name))
    --	, objectName = QUOTENAME(@toDB) + N'.' + QUOTENAME(PARSENAME(s.base_object_name, 2)) + N'.' + QUOTENAME(PARSENAME(s.base_object_name, 1))
    --	, localName = QUOTENAME(PARSENAME(s.base_object_name, 2)) + N'.' + QUOTENAME(PARSENAME(s.base_object_name, 1))
    --	FROM sys.synonyms s
    --	WHERE (PARSENAME(s.base_object_name, 3) = @fromDB)
    --	;

    DECLARE c CURSOR LOCAL READ_ONLY FORWARD_ONLY
    FOR
    SELECT
        stmt = REPLACE(REPLACE(
            CASE
                WHEN i.synonymName = i.localName
                    THEN N'EXECUTE SOLVIN.EnsureSynonym NULL, N''#objectname#'';'
                ELSE
                    N'EXECUTE SOLVIN.EnsureSynonym N''#synonymname#'', N''#objectname#'';'
            END
        , N'#synonymname#', i.synonymName )
        , N'#objectname#', i.objectName )
    FROM (
        SELECT TOP (9223372036854775807)
        synonymName = (QUOTENAME(SCHEMA_NAME(s.schema_id)) + N'.' + QUOTENAME(s.name))
        , objectName = QUOTENAME(@toDB) + N'.' + QUOTENAME(PARSENAME(s.base_object_name, 2)) + N'.' + QUOTENAME(PARSENAME(s.base_object_name, 1))
        , localName = QUOTENAME(PARSENAME(s.base_object_name, 2)) + N'.' + QUOTENAME(PARSENAME(s.base_object_name, 1))
        FROM sys.synonyms s
        WHERE (PARSENAME(s.base_object_name, 3) = @fromDB)
        ORDER BY SCHEMA_NAME(s.schema_id), s.name
    ) as i;

    DECLARE @stmts nvarchar(max) = N'';

    DECLARE @stmt nvarchar(max);
    OPEN c;
    FETCH NEXT FROM c INTO @stmt;
    WHILE (@@fetch_status <> -1)
    BEGIN
        IF (@@fetch_status <> -2)
        BEGIN
            PRINT @stmt;
            EXEC sys.sp_executesql @stmt;
        END
        FETCH NEXT FROM c INTO @stmt
    END;
    CLOSE c;
    DEALLOCATE c;

/**
 updates Synonyms that referenece database @fromDB to the new database @toDb.

 SOLVIN.ReplaceDatabaseInSynonyms 'TestPWA', '[DATABASE_PWA]'

**/
END;
GO

EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.ResolveSynonym';
GO
ALTER PROCEDURE [SOLVIN].[ResolveSynonym]
(
    @objectName NVARCHAR(MAX),
    @result NVARCHAR(MAX) OUTPUT
)
AS
BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-09-17 Flori
    --

    SET NOCOUNT ON;
    --
    DECLARE @databaseName NVARCHAR(MAX) = NULLIF(PARSENAME(@objectName,3), '');
    SET @result = NULL;
    IF (NULLIF(@databaseName, DB_NAME()) IS NULL) BEGIN
        SELECT TOP(1) @result = s.base_object_name FROM sys.synonyms s WHERE (s.object_id = OBJECT_ID(@objectName));
    END;
    IF  (@result IS NULL) BEGIN
        DECLARE @part3 NVARCHAR(MAX) = PARSENAME(@objectName,3);
        DECLARE @part2 NVARCHAR(MAX) = PARSENAME(@objectName,2);
        DECLARE @part1 NVARCHAR(MAX) = PARSENAME(@objectName,1);
        SET @result
            = ISNULL(QUOTENAME(@part3)+'.', '')
            + ISNULL(QUOTENAME(@part2)+'.', '')
            + QUOTENAME(@part1);
    END;
/*
    DECLARE @objectName NVARCHAR(MAX);
    SET @objectName = '[dbo].[MSP_EpmProject_UserView]';
    SET @objectName = '[Maumere_PWADE_WSSSOLVINReportingDB].[srcpjrep].[MSP_EpmProject]';
    EXECUTE [SOLVIN].[ResolveSynonym] @objectName, @objectName OUTPUT
    SELECT @objectName;
*/
END;
GO

-----------------------------------------------------------
--
-- Utilities
--
-----------------------------------------------------------
GO
EXECUTE [SOLVIN].[CreateProcedureIfNeeded] 'SOLVIN.InsertSysTablesByObjectId'
GO
ALTER PROCEDURE [SOLVIN].[InsertSysTablesByObjectId]
(
    @databaseName sysname,
    @objectid int
)
AS
BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-15 Flori
    -- 2017-02-08 Flori add IF as valid type for #columns
    -- 2017-02-27 Flori add TF as valid type for #columns
    --
    DECLARE @verbose int = 0;
    --
    IF ((NULLIF(@databaseName, N'') IS NULL) OR (NULLIF(@databaseName, N'.') IS NULL)) BEGIN
        SET @databaseName = DB_NAME();
    END ELSE BEGIN
        SET @databaseName = PARSENAME(@databaseName, 1);
    END;
    DECLARE @databaseNameQ sysname = QUOTENAME(@databaseName);
    --
    DECLARE @stmt as NVARCHAR(MAX);
    --
    --
    IF (OBJECT_ID('tempdb..#columns') IS NOT NULL) BEGIN
        /*
        CREATE TABLE #columns (
            [object_id] int not null,
            [name] [nvarchar](128) NULL,
            [column_id] [int] NOT NULL,
            [is_nullable] [bit] NULL,
            [sqlexpression] [nvarchar](4000) NULL,
            [sqlempty] [nvarchar](4000) NULL,
            [sqltype] [nvarchar](4000) NULL
        );
        */

        IF (OBJECT_ID('tempdb..#sys_all_objects') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_all_objects FROM sys.all_objects; END;
        IF (OBJECT_ID('tempdb..#sys_all_columns') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_all_columns FROM sys.all_columns; END;
        IF (OBJECT_ID('tempdb..#sys_types') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_types FROM sys.types; END;
    END;

    --
    -- sys.schemas
    IF (OBJECT_ID('tempdb..#sys_schemas') IS NOT NULL) BEGIN
        /*
        SELECT * FROM sys.schemas;
        */
        SET @stmt = N'
        IF (NOT EXISTS(SELECT * FROM #sys_schemas)) BEGIN
            INSERT INTO #sys_schemas SELECT * FROM #DatabaseQ#.sys.schemas;
        END;
        ';
        SET @stmt = REPLACE(@stmt, N'#DatabaseQ#', @databaseNameQ);
        IF (@verbose >= 1) BEGIN PRINT @stmt; END;
        EXECUTE sys.sp_executesql @stmt, N'@objectid int', @objectid=@objectid;
    END;
    --
    -- sys.all_objects
    IF (OBJECT_ID('tempdb..#sys_all_objects') IS NOT NULL) BEGIN
        /*
            SELECT * FROM sys.all_objects
            WHERE ((@objectid IS NOT NULL) AND (object_id = @objectid))
                OR ((@objectid IS NULL) AND (object_id > 0))
            ;
        */
        SET @stmt = N'
        INSERT INTO #sys_all_objects
            SELECT * FROM #DatabaseQ#.sys.all_objects
            WHERE ((@objectid IS NOT NULL) AND (object_id = @objectid))
                OR ((@objectid IS NULL) AND (object_id > 0))
            ;
        ';
        SET @stmt = REPLACE(@stmt, N'#DatabaseQ#', @databaseNameQ);
        IF (@verbose >= 1) BEGIN PRINT @stmt; END;
        EXECUTE sys.sp_executesql @stmt, N'@objectid int', @objectid=@objectid;
    END;
    --
    -- sys.all_columns
    IF (OBJECT_ID('tempdb..#sys_all_columns') IS NOT NULL) BEGIN
        /*
            SELECT * FROM sys.all_columns
            WHERE ((@objectid IS NOT NULL) AND (object_id = @objectid))
                OR ((@objectid IS NULL) AND (object_id > 0))
            ;
        */
        SET @stmt = N'
        INSERT INTO #sys_all_columns
            SELECT * FROM #DatabaseQ#.sys.all_columns
            WHERE ((@objectid IS NOT NULL) AND (object_id = @objectid))
                OR ((@objectid IS NULL) AND (object_id > 0))
            ;
        ';
        SET @stmt = REPLACE(@stmt, N'#DatabaseQ#', @databaseNameQ);
        IF (@verbose >= 1) BEGIN PRINT @stmt; END;
        EXECUTE sys.sp_executesql @stmt, N'@objectid int', @objectid=@objectid;
    END;
    --
    -- sys.indexes
    IF (OBJECT_ID('tempdb..#sys_indexes') IS NOT NULL) BEGIN
        /*
            SELECT * FROM sys.indexes
            WHERE ((@objectid IS NOT NULL) AND (object_id = @objectid))
                OR ((@objectid IS NULL) AND (object_id > 0))
            ;
        */
        SET @stmt = N'
        INSERT INTO #sys_indexes
            SELECT * FROM #DatabaseQ#.sys.indexes
            WHERE ((@objectid IS NOT NULL) AND (object_id = @objectid))
                OR ((@objectid IS NULL) AND (object_id > 0))
            ;
        ';
        SET @stmt = REPLACE(@stmt, N'#DatabaseQ#', @databaseNameQ);
        IF (@verbose >= 1) BEGIN PRINT @stmt; END;
        EXECUTE sys.sp_executesql @stmt, N'@objectid int', @objectid=@objectid;
    END;
    --
    -- sys.index_columns
    IF (OBJECT_ID('tempdb..#sys_index_columns') IS NOT NULL) BEGIN
        /*
            SELECT * FROM sys.index_columns
            WHERE ((@objectid IS NOT NULL) AND (object_id = @objectid))
                OR ((@objectid IS NULL) AND (object_id > 0))
            ;
        */
        SET @stmt = N'
        INSERT INTO #sys_index_columns
            SELECT * FROM #DatabaseQ#.sys.index_columns
            WHERE ((@objectid IS NOT NULL) AND (object_id = @objectid))
                OR ((@objectid IS NULL) AND (object_id > 0))
            ;
        ';
        SET @stmt = REPLACE(@stmt, N'#DatabaseQ#', @databaseNameQ);
        IF (@verbose >= 1) BEGIN PRINT @stmt; END;
        EXECUTE sys.sp_executesql @stmt, N'@objectid int', @objectid=@objectid;
    END;
    --
    -- sys.synonyms
    IF (OBJECT_ID('tempdb..#sys_synonyms') IS NOT NULL) BEGIN
        /*
            SELECT * FROM sys.synonyms
            WHERE ((@objectid IS NOT NULL) AND (object_id = @objectid))
                OR ((@objectid IS NULL) AND (object_id > 0))
            ;
        */
        SET @stmt = N'
        INSERT INTO #sys_synonyms
            SELECT * FROM #DatabaseQ#.sys.synonyms
            WHERE ((@objectid IS NOT NULL) AND (object_id = @objectid))
                OR ((@objectid IS NULL) AND (object_id > 0))
            ;
        ';
        SET @stmt = REPLACE(@stmt, N'#DatabaseQ#', @databaseNameQ);
        IF (@verbose >= 1) BEGIN PRINT @stmt; END;
        EXECUTE sys.sp_executesql @stmt, N'@objectid int', @objectid=@objectid;
    END;
    --
    -- sys.database_permissions
    IF (OBJECT_ID('tempdb..#sys_database_permissions') IS NOT NULL) BEGIN
        /*
            SELECT * FROM sys.database_permissions;
        */
        SET @stmt = N'
        IF (NOT EXISTS(SELECT * FROM #sys_database_permissions)) BEGIN
            INSERT INTO #sys_database_permissions
                SELECT * FROM #DatabaseQ#.sys.database_permissions;
        END;
        ';
        SET @stmt = REPLACE(@stmt, N'#DatabaseQ#', @databaseNameQ);
        IF (@verbose >= 1) BEGIN PRINT @stmt; END;
        EXECUTE sys.sp_executesql @stmt, N'@objectid int', @objectid=@objectid;
    END;
    --
    -- sys.database_principals
    IF (OBJECT_ID('tempdb..#sys_database_principals') IS NOT NULL) BEGIN
        /*
            SELECT * FROM sys.database_principals;
        */
        SET @stmt = N'
        IF (NOT EXISTS(SELECT * FROM #sys_database_principals)) BEGIN
            INSERT INTO #sys_database_principals
                SELECT * FROM #DatabaseQ#.sys.database_principals;
        END;
        ';
        SET @stmt = REPLACE(@stmt, N'#DatabaseQ#', @databaseNameQ);
        IF (@verbose >= 1) BEGIN PRINT @stmt; END;
        EXECUTE sys.sp_executesql @stmt, N'@objectid int', @objectid=@objectid;
    END;
    --
    -- sys.sql_modules
    IF (OBJECT_ID('tempdb..#sys_sql_modules') IS NOT NULL) BEGIN
        /*
            SELECT * FROM sys.sql_modules
            WHERE ((@objectid IS NOT NULL) AND (object_id = @objectid))
                OR ((@objectid IS NULL) AND (object_id > 0))
            ;
        */
        SET @stmt = N'
        INSERT INTO #sys_sql_modules
            SELECT * FROM #DatabaseQ#.sys.sql_modules
            WHERE ((@objectid IS NOT NULL) AND (object_id = @objectid))
                OR ((@objectid IS NULL) AND (object_id > 0))
            ;
        ';
        SET @stmt = REPLACE(@stmt, N'#DatabaseQ#', @databaseNameQ);
        IF (@verbose >= 1) BEGIN PRINT @stmt; END;
        EXECUTE sys.sp_executesql @stmt, N'@objectid int', @objectid=@objectid;
    END;
    --
    -- sys.table_types
    IF (OBJECT_ID('tempdb..#sys_table_types') IS NOT NULL) BEGIN
        /*
            SELECT * FROM sys.table_types;
        */
        SET @stmt = N'
        IF (NOT EXISTS(SELECT * FROM #sys_table_types)) BEGIN
            INSERT INTO #sys_table_types
                SELECT * FROM sys.table_types;
        END;
        ';
        SET @stmt = REPLACE(@stmt, N'#DatabaseQ#', @databaseNameQ);
        IF (@verbose >= 1) BEGIN PRINT @stmt; END;
        EXECUTE sys.sp_executesql @stmt, N'@objectid int', @objectid=@objectid;
    END;
    --
    -- sys.types
    IF (OBJECT_ID('tempdb..#sys_types') IS NOT NULL) BEGIN
        /*
            SELECT * FROM sys.types
            ;
        */
        SET @stmt = N'
        IF (NOT EXISTS(SELECT * FROM #sys_types)) BEGIN
            INSERT INTO #sys_types
                SELECT * FROM #DatabaseQ#.sys.types
                ;
        END;
        ';
        SET @stmt = REPLACE(@stmt, N'#DatabaseQ#', @databaseNameQ);
        IF (@verbose >= 1) BEGIN PRINT @stmt; END;
        EXECUTE sys.sp_executesql @stmt, N'@objectid int', @objectid=@objectid;
    END;
    --
    --
    IF (OBJECT_ID('tempdb..#columns') IS NOT NULL) BEGIN
        --SELECT * FROM #sys_all_columns
        INSERT INTO #columns
            ([object_id]
            ,[name]
            ,[column_id]
            ,[is_nullable]
            ,[sqlexpression]
            ,[sqlempty]
            ,[sqltype]
            )

        SELECT
            [object_id] = o.[object_id]
            , [name] = o.[columnName]
            , [column_id] = o.[column_id]
            , [is_nullable] = o.is_nullable
            , sqlexpression =  REPLACE(
                CASE WHEN o.castneeded = 1 THEN 'CAST(#fieldname# as #fmt#)' ELSE '#fieldname#' END
                , '#fmt#', REPLACE(REPLACE(REPLACE(REPLACE(o.fmt , '#name#', o.[typename]), '#max_length#', o.max_length), '#scale#', o.scale), '#precision#', o.[precision]))
            , sqlempty = REPLACE(REPLACE( 'CAST(#sqlempty# as #fmt#)', '#sqlempty#', o.sqlempty)
                        , '#fmt#', REPLACE(REPLACE(REPLACE(REPLACE(o.fmt , '#name#', o.[typename]), '#max_length#', o.max_length), '#scale#', o.scale), '#precision#', o.[precision]))
            , [sqltype] = REPLACE(REPLACE(REPLACE(REPLACE(o.fmt , '#name#', o.[typename]), '#max_length#', o.max_length), '#scale#', o.scale), '#precision#', o.[precision])
        FROM (
            SELECT
                [object_id]   = c.[object_id],
                [columnName]  = c.[name],
                [column_id]   = c.[column_id],
                [is_nullable] = c.is_nullable,
                [fmt]         = case WHEN y.[name] IN ('varchar', 'nvarchar') AND (c.max_length=-1) THEN REPLACE(N'#name#(max)', N'#name#', y.[name]) ELSE y.[fmt] END,
                [typename]    = case WHEN y.[name] IN ('varchar', 'nvarchar') AND (c.max_length=-1) THEN REPLACE(N'#name#(max)', N'#name#', y.[name]) ELSE y.[name] END,
                [max_length]  = case WHEN y.[name] IN ('nchar', 'nvarchar')  AND (c.max_length!=-1) THEN c.[max_length] / 2 ELSE c.[max_length] END,
                [scale]       = c.[scale],
                [precision]   = c.[precision],
                [castneeded]  = y.[castneeded],
                [sqlempty]    = y.[sqlempty]
            FROM #sys_all_objects t
            INNER JOIN #sys_all_columns c
                ON t.object_id = c.object_id
            INNER JOIN (
                SELECT
                    u.user_type_id,
                    [name] = CASE
                        WHEN s.[name] = 'text' THEN 'varchar(max)'
                        WHEN s.[name] = 'ntext' THEN 'nvarchar(max)'
                        ELSE s.[name] END,
                    [castneeded] = CASE
                        WHEN s.[name] = 'text' THEN 1
                        WHEN s.[name] = 'ntext' THEN 1
                        ELSE 0 END,
                    fmt = CASE
                        WHEN s.[name] = 'text' THEN 'varchar(max)'
                        WHEN s.[name] = 'ntext' THEN 'nvarchar(max)'
                        WHEN s.[name] IN ('varchar','nvarchar') THEN '#name#(#max_length#)'
                        WHEN s.[name] IN ('decimal','numeric') THEN '#name#(#precision#,#scale#)'
                        ELSE s.[name]
                        --ELSE '#name#'
                        END,
                    sqlempty = CASE
                        WHEN s.[name] = 'text' THEN ' '''' '
                        WHEN s.[name] = 'ntext' THEN ' '''' '
                        WHEN s.[name] = 'uniqueidentifier' THEN ' ''00000000-0000-0000-0000-000000000000'' '
                        WHEN s.[name] IN ('varchar','nvarchar') THEN ' '''' '
                        ELSE ' 0 '
                        END

                FROM #sys_types u
                LEFT JOIN #sys_types s
                ON u.system_type_id = s.user_type_id
            ) AS y
                ON c.user_type_id = y.user_type_id
            WHERE (t.type IN ('U', 'V', 'IF', 'TF'))
                AND  ((@objectid IS NOT NULL) AND (t.object_id = @objectid))
                    OR ((@objectid IS NULL) AND (t.object_id > 0))
        ) as o
            ;
    END;
    --
/*

--	sys.all_columns
--	sys.database_permissions
--	sys.database_principals
--	sys.index_columns
--	sys.indexes
--	sys.objects
--	sys.schemas
--	sys.sql_modules
--	sys.synonyms
--	sys.table_types
--	sys.triggers
--	sys.types

    IF (OBJECT_ID('tempdb..#sys_schemas') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_schemas FROM sys.schemas; END;
    IF (OBJECT_ID('tempdb..#sys_all_objects') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_all_objects FROM sys.all_objects; END;
    IF (OBJECT_ID('tempdb..#sys_all_columns') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_all_columns FROM sys.all_columns; END;
    IF (OBJECT_ID('tempdb..#sys_index_columns') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_index_columns FROM sys.index_columns; END;
    IF (OBJECT_ID('tempdb..#sys_indexes') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_indexes FROM sys.indexes; END;
    IF (OBJECT_ID('tempdb..#sys_synonyms') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_synonyms FROM sys.synonyms; END;
    IF (OBJECT_ID('tempdb..#sys_database_permissions') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_database_permissions FROM sys.database_permissions; END;
    IF (OBJECT_ID('tempdb..#sys_database_principals') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_database_principals FROM sys.database_principals; END;
    IF (OBJECT_ID('tempdb..#sys_sql_modules') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_sql_modules FROM sys.sql_modules; END;
    IF (OBJECT_ID('tempdb..#sys_table_types') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_table_types FROM sys.table_types; END;
    IF (OBJECT_ID('tempdb..#sys_triggers') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_triggers FROM sys.triggers; END;
    IF (OBJECT_ID('tempdb..#sys_types') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_types FROM sys.types; END;
    EXECUTE SOLVIN.InsertSysTablesByObjectId '[Maumere_PWADE_TTS]', NULL;
    SELECT * FROM #sys_schemas;
    SELECT * FROM #sys_all_objects;
    SELECT * FROM #sys_all_columns;
    SELECT * FROM #sys_index_columns;
    SELECT * FROM #sys_indexes;
    SELECT * FROM #sys_synonyms;
    SELECT * FROM #sys_database_permissions;
    SELECT * FROM #sys_database_principals;
    SELECT * FROM #sys_sql_modules;
    SELECT * FROM #sys_table_types;
    SELECT * FROM #sys_triggers;
    SELECT * FROM #sys_types;

    IF (OBJECT_ID('tempdb..#sys_schemas') IS NOT NULL) BEGIN DROP TABLE #sys_schemas; END;
    IF (OBJECT_ID('tempdb..#sys_all_objects') IS NOT NULL) BEGIN DROP TABLE #sys_all_objects END;
    IF (OBJECT_ID('tempdb..#sys_all_columns') IS NOT NULL) BEGIN DROP TABLE #sys_all_columns END;
    IF (OBJECT_ID('tempdb..#sys_index_columns') IS NOT NULL) BEGIN DROP TABLE #sys_index_columns END;
    IF (OBJECT_ID('tempdb..#sys_indexes') IS NOT NULL) BEGIN DROP TABLE #sys_indexes END;
    IF (OBJECT_ID('tempdb..#sys_synonyms') IS NOT NULL) BEGIN DROP TABLE #sys_synonyms END;
    IF (OBJECT_ID('tempdb..#sys_database_permissions') IS NOT NULL) BEGIN DROP TABLE #sys_database_permissions END;
    IF (OBJECT_ID('tempdb..#sys_database_principals') IS NOT NULL) BEGIN DROP TABLE #sys_database_principals END;
    IF (OBJECT_ID('tempdb..#sys_sql_modules') IS NOT NULL) BEGIN DROP TABLE #sys_sql_modules END;
    IF (OBJECT_ID('tempdb..#sys_table_types') IS NOT NULL) BEGIN DROP TABLE #sys_table_types END;
    IF (OBJECT_ID('tempdb..#sys_triggers') IS NOT NULL) BEGIN DROP TABLE #sys_triggers END;
    IF (OBJECT_ID('tempdb..#sys_types') IS NOT NULL) BEGIN DROP TABLE #sys_types END;
    --

    IF (OBJECT_ID('tempdb..#sys_schemas') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_schemas FROM sys.schemas; END;
    EXECUTE SOLVIN.InsertSysTablesByObjectId '[Maumere_PWADE_TTS]', NULL;
    SELECT * FROM #sys_schemas
    EXECUTE SOLVIN.InsertSysTablesByObjectId '[Maumere_PWADE_TTS]', NULL;
    SELECT * FROM #sys_schemas
    IF (OBJECT_ID('tempdb..#sys_schemas') IS NOT NULL) BEGIN DROP TABLE #sys_schemas; END;

*/
END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] 'SOLVIN.InsertSysTablesByName'
GO
ALTER PROCEDURE [SOLVIN].[InsertSysTablesByName]
(
    @objectName nvarchar(max)
)
AS
BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-15 Flori
    --
    DECLARE @objectid int = OBJECT_ID(@objectName);
    IF (@objectid IS NULL AND @objectName IS NOT NULL) BEGIN
        PRINT (REPLACE('ERROR NOT FOUND #objectName#.', '#objectName#', @objectName));
        RETURN 0;
    END ELSE BEGIN
        DECLARE @databaseName NVARCHAR(MAX) = PARSENAME(@objectName,3);
        --SELECT @objectid
        EXECUTE [SOLVIN].[InsertSysTablesByObjectId] @databaseName=@databaseName, @objectid = @objectid;
        RETURN ISNULL(@objectid,0);
    END;
/*

    DECLARE @objectid int;
    EXECUTE @objectid = [SOLVIN].[InsertSysTablesByName] '[dbo].[MSP_EpmProject_UserView]';
    SELECT @objectid;
    EXECUTE @objectid = [SOLVIN].[InsertSysTablesByName] '[Maumere_PWADE_PRJ].[dbo].[MSP_EpmProject_UserView]';
    SELECT @objectid;

    --

    IF (OBJECT_ID('tempdb..#columns') IS NULL) BEGIN
        CREATE TABLE #columns (
            [object_id] int not null,
            [name] [nvarchar](128) NULL,
            [column_id] [int] NOT NULL,
            [is_nullable] [bit] NULL,
            [sqlexpression] [nvarchar](4000) NULL,
            [sqlempty] [nvarchar](4000) NULL,
            [sqltype] [nvarchar](4000) NULL
        );
    END;
    DECLARE @objectid int;
    EXECUTE @objectid = [SOLVIN].[InsertSysTablesByName] '[SOLVIN].[DDLChanges]';
    SELECT N'#columns - DDLChanges',[ATobjectid] = @objectid, * FROM #columns ORDER BY column_id;
    DELETE FROM #columns;
    EXECUTE @objectid = [SOLVIN].[InsertSysTablesByName] '[Maumere_PWADE_PRJ].[dbo].[MSP_EpmProject_UserView]';
    SELECT N'#columns - MSP_EpmProject_UserView', [ATobjectid] = @objectid, * FROM #columns ORDER BY column_id;
    DROP TABLE #columns;

    --
*/
END;
GO

-----------------------------------------------------------
--
-- Utilities
--
-----------------------------------------------------------
GO
EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.GetColumns';
GO

ALTER PROCEDURE [SOLVIN].[GetColumns]
(
    @object3Name nvarchar(MAX),
    @columns nvarchar(MAX) OUTPUT
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    -- return column
    --
    SET NOCOUNT ON;
    DECLARE @sql nvarchar(MAX) = N'
        DECLARE columncursor CURSOR READ_ONLY LOCAL FOR
        SELECT
                c.[name], c.[column_id]
            FROM [#DATABASE#].sys.schemas s
            INNER JOIN [#DATABASE#].sys.all_objects t
                ON s.schema_id = t.schema_id
            INNER JOIN [#DATABASE#].sys.all_columns c
                ON t.object_id = c.object_id
            WHERE (t.type IN (''U'', ''V''))
                AND(s.[name] = @objectschema)
                AND (t.[name] = @objectname)
            ORDER BY [column_id] ASC;
        SET @columns = N'''';
        DECLARE @name nvarchar(MAX);
        DECLARE @column_id int;
        OPEN columncursor;
        FETCH NEXT FROM columncursor INTO @name,@column_id;
        WHILE (@@fetch_status <> -1) BEGIN
            IF (@@fetch_status <> -2) BEGIN
                SET @columns = (@columns + CAST(N''
    , '' as nvarchar(max)) + QUOTENAME(@name) + CAST(N'' = src.'' as nvarchar(max)) + QUOTENAME(@name) );
            END;
            FETCH NEXT FROM columncursor INTO @name,@column_id;
        END;
        CLOSE columncursor;
        DEALLOCATE columncursor;
        IF (LEN(@columns)>2) BEGIN
            SET @columns = ltrim(@columns);
            SET @columns = SUBSTRING(@columns, 3, LEN(@columns)-2);
            SET @columns = ltrim(@columns);
            SET @columns = SUBSTRING(@columns, 2, LEN(@columns)-1);
        END;
    ';
    DECLARE @objectDatabase nvarchar(MAX) = PARSENAME(@object3Name, 3);
    DECLARE @objectSchema nvarchar(MAX) = PARSENAME(@object3Name, 2);
    DECLARE @objectName nvarchar(MAX) = PARSENAME(@object3Name, 1);
    IF (@objectDatabase IS NOT NULL) BEGIN
        SET @sql = REPLACE(@sql, N'#DATABASE#', @objectDatabase);
        EXECUTE sys.sp_executesql @sql, N'@objectSchema nvarchar(MAX), @objectName nvarchar(MAX), @columns nvarchar(MAX) OUTPUT', @objectSchema = @objectSchema, @objectName = @objectName, @columns = @columns OUTPUT;
    END ELSE BEGIN
        SET @sql = REPLACE(@sql, N'[#DATABASE#].', '');
        EXECUTE sys.sp_executesql @sql, N'@objectSchema nvarchar(MAX), @objectName nvarchar(MAX), @columns nvarchar(MAX) OUTPUT', @objectSchema = @objectSchema, @objectName = @objectName, @columns = @columns OUTPUT;
    END;

/** This procedure lists all columns of a database object seperated by comma.

declare  @columns2 nvarchar(MAX)
EXECUTE [SOLVIN].[GetColumns] @object3Name='[DATABASE_PWA].[pjrep].[MSP_EpmProject_userView]',@columns=@columns2 OUTPUT
print @columns2
**/
END;
GO

EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.[GetTableColumns_Nullable]';
GO
ALTER PROCEDURE [SOLVIN].[GetTableColumns_Nullable]
(
    @object3Name nvarchar(MAX),
    @columns nvarchar(MAX) OUTPUT
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-22 NK
    --
    -- return column
    --
    SET NOCOUNT ON;
    DECLARE @sql nvarchar(MAX) = N'
        DECLARE columncursor CURSOR READ_ONLY LOCAL FOR
        SELECT
                c.[name], c.[column_id]
            FROM [#DATABASE#].sys.schemas s
            INNER JOIN [#DATABASE#].sys.all_objects t
                ON s.schema_id = t.schema_id
            INNER JOIN [#DATABASE#].sys.all_columns c
                ON t.object_id = c.object_id
            WHERE (t.type IN (''U'', ''V''))
                AND(s.[name] = @objectschema)
                AND (t.[name] = @objectname)
                AND c.is_nullable=1
            ORDER BY [column_id] ASC;
        SET @columns = N'''';
        DECLARE @name nvarchar(MAX);
        DECLARE @column_id int;
        OPEN columncursor;
        FETCH NEXT FROM columncursor INTO @name,@column_id;
        WHILE (@@fetch_status <> -1) BEGIN
            IF (@@fetch_status <> -2) BEGIN
                SET @columns = (@columns + CAST(N''
    , '' as nvarchar(max)) + QUOTENAME(@name));
            END;
            FETCH NEXT FROM columncursor INTO @name,@column_id;
        END;
        CLOSE columncursor;
        DEALLOCATE columncursor;
        IF (LEN(@columns)>2) BEGIN
            SET @columns = ltrim(@columns);
            SET @columns = SUBSTRING(@columns, 3, LEN(@columns)-2);
            SET @columns = ltrim(@columns);
            SET @columns = SUBSTRING(@columns, 2, LEN(@columns)-1);
        END;
    ';
    DECLARE @objectDatabase nvarchar(MAX) = PARSENAME(@object3Name, 3);
    DECLARE @objectSchema nvarchar(MAX) = PARSENAME(@object3Name, 2);
    DECLARE @objectName nvarchar(MAX) = PARSENAME(@object3Name, 1);
    IF (@objectDatabase IS NOT NULL) BEGIN
        SET @sql = REPLACE(@sql, N'#DATABASE#', @objectDatabase);
        EXECUTE sys.sp_executesql @sql, N'@objectSchema nvarchar(MAX), @objectName nvarchar(MAX), @columns nvarchar(MAX) OUTPUT', @objectSchema = @objectSchema, @objectName = @objectName, @columns = @columns OUTPUT;
    END ELSE BEGIN
        SET @sql = REPLACE(@sql, N'[#DATABASE#].', '');
        EXECUTE sys.sp_executesql @sql, N'@objectSchema nvarchar(MAX), @objectName nvarchar(MAX), @columns nvarchar(MAX) OUTPUT', @objectSchema = @objectSchema, @objectName = @objectName, @columns = @columns OUTPUT;
    END;

/** This procedure lists all columns of a database object seperated by comma.

declare  @columns2 nvarchar(MAX)
EXECUTE [SOLVIN].[GetTableColumns_Nullable] @object3Name='[SweetPoint_PWA].[pjrep].[MSP_EpmAssignment_userView]',@columns=@columns2 OUTPUT
print @columns2
**/
END;
GO

EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.CreateViewFor';
GO
ALTER PROCEDURE [SOLVIN].[CreateViewFor]
(
    @name nvarchar(MAX),
    @for nvarchar(MAX)
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    -- 2016-12-12 Flori add support for synonyms
    --
    -- Create a view name @name for @for.
    --
    SET NOCOUNT ON;

    DECLARE @QName nvarchar(MAX) = ISNULL(QUOTENAME(PARSENAME(@name,2)) + '.', '') + QUOTENAME(PARSENAME(@name,1));
    DECLARE @QSchema nvarchar(MAX) = ISNULL(QUOTENAME(PARSENAME(@name,2)), 'dbo');
    DECLARE @sql nvarchar(MAX);
    DECLARE @forQ nvarchar(MAX);
    EXECUTE [SOLVIN].[ResolveSynonym] @for, @forQ OUTPUT;
    IF (OBJECT_ID('tempdb..#columns') IS NULL) BEGIN
        -- DROP TABLE #columns;
        CREATE TABLE #columns (
            [object_id] int not null,
            [name] [nvarchar](128) NULL,
            [column_id] [int] NOT NULL,
            [is_nullable] [bit] NULL,
            [sqlexpression] [nvarchar](4000) NULL,
            [sqlempty] [nvarchar](4000) NULL,
            [sqltype] [nvarchar](4000) NULL
        );
    END;
    DECLARE @objectid int;
    EXECUTE @objectid = [SOLVIN].[InsertSysTablesByName] @forQ;

    --SELECT @for, @forQ, @objectid , CASE WHEN @objectid=0 THEN 'NOT FOUND' ELSE 'FOUND' END;

    IF (@objectid = 0) BEGIN
        PRINT REPLACE('ERROR #for# NOT found', N'#for#', @for);
    END ELSE BEGIN
        DECLARE @columns nvarchar(MAX) = '';
        DECLARE cursorColumn CURSOR LOCAL READ_ONLY
        FOR SELECT line = REPLACE(N'#nameQ# = src.#nameQ#', N'#nameQ#', QUOTENAME(c.[name])) FROM #columns c ORDER BY c.[column_id];
        DECLARE @line nvarchar(max);
        OPEN cursorColumn;
        FETCH NEXT FROM cursorColumn INTO @line;
        WHILE (@@fetch_status <> -1) BEGIN
            IF (@@fetch_status <> -2) BEGIN
                SET @columns = (@columns + CAST(N', ' as nvarchar(max)) + @line +'
          ');
            END
            FETCH NEXT FROM cursorColumn INTO @line;
        END
        IF (LEN(@columns)>2) BEGIN
            SET @columns = SUBSTRING(@columns, 2, LEN(@columns)-1);
        END;

        CLOSE cursorColumn;
        DEALLOCATE cursorColumn;


        SET @sql = N'ALTER VIEW #name#
WITH VIEW_METADATA AS
SELECT
        #columns#
FROM #for# as src;
';
        SET @sql = REPLACE(@sql, N'#name#', @QName);
        SET @sql = REPLACE(@sql, N'#for#', @for);
        SET @sql = REPLACE(@sql, N'#columns#', @columns);
        EXECUTE Solvin.EnsureSchema @QSchema;
        EXECUTE Solvin.CreateViewIfNeeded @QName
        PRINT @sql;
        --EXEC sys.sp_executesql @sql;
    END;
/* This procedure creates a view.
-- Input parameters
    @name: name of view
        --> [srcpjrep].[MSP_EpmProject]
    @for: name of source
        --> [pjrep].[MSP_EpmProject]

    EXECUTE [SOLVIN].[CreateViewFor] '[srcpjrep].[MSP_EpmProject]', '[pjrep].[MSP_EpmProject]'
    EXECUTE [SOLVIN].[CreateViewFor] '[srcpjrep].[MSP_EpmProject]', '[Maumere_PWADE_PRJ].[pjrep].[MSP_EpmProject]'
    EXECUTE [SOLVIN].[CreateViewFor] '[srcpjrep].[MSP_EpmProject]', '[Maumere_PWADE_PRJ].[dbo].[MSP_EpmProject]'
*/

END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] 'SOLVIN.EnsureIndex';
GO
ALTER PROCEDURE [SOLVIN].[EnsureIndex]
(
    @indexName sysname,
    @tableName sysname,
    @columns nvarchar(max),
    @include nvarchar(max),
    @indexType varchar(64)
) AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-27 Flori
    -- 2017-10-12 Flori improved @indexName handling (with space)
    --
    -- Creates an Index if needed.
    --
    -- @indexName
    -- @tableName
    -- @columns
    -- @include
    -- @indexType
    --      PRIMARY KEY
    --      PRIMARY KEY CLUSTERED
    --      PRIMARY KEY NONCLUSTERED
    --      CLUSTERED
    --      NONCLUSTERED
    --      UNIQUE CLUSTERED
    --      UNIQUE NONCLUSTERED
    --
    DECLARE @sql nvarchar(max);
    DECLARE @exists bit=0;
    SELECT @exists = 1
    FROM sys.all_objects o INNER JOIN sys.indexes i ON i.object_id = o.object_id
    WHERE (o.object_id = object_id(@tableName)) AND (i.name = PARSENAME(@indexName,1));
    --
    IF @exists = 0 BEGIN
             SET @indexName=QUOTENAME(PARSENAME(@indexName,1));
             SET @sql = N'    -- CREATE INDEX #indexName#.';
        SET @sql = REPLACE(@sql, N'#indexName#', @indexName );
        PRINT @sql;
        SET @indexType = ISNULL(NULLIF(@indexType, ''), 'NONCLUSTERED');
        IF (@indexType = 'PRIMARY KEY') BEGIN SET @indexType = 'PRIMARY KEY CLUSTERED'; END;
        --
        IF (@indexType IN ('PRIMARY KEY NONCLUSTERED', 'PRIMARY KEY CLUSTERED')) BEGIN
            SET @sql = N'ALTER TABLE #tableName# ADD CONSTRAINT #indexName# #indexType# ( #columns# ) ON [PRIMARY];';

        END ELSE IF (@indexType IN ('CLUSTERED', 'NONCLUSTERED', 'UNIQUE CLUSTERED', 'UNIQUE NONCLUSTERED')) BEGIN
            SET @sql = N'CREATE NONCLUSTERED INDEX #indexName# ON #tableName# (#columns#) INCLUDE (#include#) ON [PRIMARY]';
        END ELSE BEGIN
            SET @sql = NULL;
        END;
        --
        SET @sql = REPLACE(@sql, N'#indexName#', @indexName );
        SET @sql = REPLACE(@sql, N'#tableName#', @tableName );
        SET @sql = REPLACE(@sql, N'#columns#',   @columns   );
        SET @sql = REPLACE(@sql, N'#include#',   ISNULL(@include, ''));
        SET @sql = REPLACE(@sql, N'#indexType#', @indexType );
        SET @sql = REPLACE(@sql, N'INCLUDE ()', '' );
        --
        PRINT @sql;
        EXECUTE sys.sp_executesql @sql;
    END ELSE BEGIN
             SET @sql = N'    -- INDEX #indexName# exists.';
        SET @sql = REPLACE(@sql, N'#indexName#', @indexName );
        PRINT @sql;
       END;
/*

EXECUTE [SOLVIN].[EnsureIndex] @indexName='PK_dbo_MSPLT_Custom_UserView', @tableName='dbo.[MSPLT_Custom_UserView]', @columns='LookupMemberUID', @include='', @indexType='PRIMARY KEY CLUSTERED';

*/
END;
GO

-----------------------------------------------------------
--
-- DDL Logging
--
-----------------------------------------------------------
/** Creates a set of object to track changes on database **/
GO
IF (OBJECT_ID(N'SOLVIN.DDLChanges', N'u') IS NULL) BEGIN
    CREATE TABLE SOLVIN.DDLChanges (
        Id int IDENTITY(1,1) NOT NULL,
        EventTime datetime NOT NULL,
        UntilTime datetime NOT NULL,
        DBUser nvarchar(100) NOT NULL,
        EventType varchar(32),
        SchemaName sysname,
        ObjectName sysname,
        ObjectType sysname,
        TSQL nvarchar(max),
        SerialVersion timestamp NOT NULL,
    CONSTRAINT PK_SOLVIN_DDLChanges PRIMARY KEY CLUSTERED (Id ASC)
    ) ON [PRIMARY]
    ;
    CREATE NONCLUSTERED INDEX IX_SOLVIN_DDLChanges ON SOLVIN.DDLChanges
    (
        SchemaName,
        ObjectName,
        ObjectType
    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ;
    PRINT ('    -- [SOLVIN].[DDLChanges] is a new able.');
END ELSE BEGIN
    PRINT ('    -- [SOLVIN].[DDLChanges] exists.');
END;
GO

EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.InsertDDLChanges';
GO
ALTER PROCEDURE [SOLVIN].[InsertDDLChanges]
(
    @data XML
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    -- Insert DDL change tracking
    --
    SET NOCOUNT ON;
    --
    DECLARE @EventTime datetime;
    DECLARE @UntilTime datetime;
    DECLARE @DBUser nvarchar(100);
    DECLARE @EventType varchar(100);
    DECLARE @SchemaName sysname;
    DECLARE @ObjectName sysname;
    DECLARE @ObjectType sysname;
    DECLARE @TSQL nvarchar(max);
    --
    SET @EventTime = @data.value('(/EVENT_INSTANCE/PostTime)[1]', 'datetime');
    SET @UntilTime = CAST('9999-12-31' AS datetime);
    SET @DBUser = @data.value('(/EVENT_INSTANCE/LoginName)[1]', 'nvarchar(100)');
    SET @EventType = @data.value('(/EVENT_INSTANCE/EventType)[1]', 'varchar(100)');
    SET @SchemaName = @data.value('(/EVENT_INSTANCE/SchemaName)[1]', 'sysname');
    SET @ObjectName = @data.value('(/EVENT_INSTANCE/ObjectName)[1]', 'sysname');
    SET @ObjectType = @data.value('(/EVENT_INSTANCE/ObjectType)[1]', 'sysname');
    SET @TSQL = @data.value('(/EVENT_INSTANCE/TSQLCommand)[1]', 'nvarchar(max)');
    SET @TSQL = ltrim(rtrim(@TSQL));
    --

    DECLARE @OldTSQL nvarchar(max) = NULL;
    IF (@SchemaName IS NOT NULL OR @ObjectName IS NOT NULL OR @ObjectType IS NOT NULL) BEGIN
        SELECT @OldTSQL = [TSQL]
        FROM SOLVIN.DDLChanges
        WHERE SchemaName = @SchemaName AND ObjectName = @ObjectName AND ObjectType = @ObjectType AND UntilTime = @UntilTime;
    END;
    IF (@OldTSQL IS NOT NULL AND @OldTSQL = @TSQL) BEGIN
        RETURN;
    END ELSE BEGIN
        SET @EventTime = ISNULL(@EventTime, N'');
        SET @UntilTime = ISNULL(@UntilTime, N'');
        SET @DBUser = ISNULL(@DBUser, N'');
        SET @EventType = ISNULL(@EventType, N'');
        SET @SchemaName = ISNULL(@SchemaName, N'');
        SET @ObjectName = ISNULL(@ObjectName, N'');
        SET @ObjectType = ISNULL(@ObjectType, N'');
        SET @TSQL = ISNULL(@TSQL, N'');
        --
        IF (@OldTSQL IS NOT NULL) BEGIN
            UPDATE SOLVIN.DDLChanges
                SET UntilTime = @EventTime
                WHERE SchemaName = @SchemaName AND ObjectName = @ObjectName AND ObjectType = @ObjectType AND UntilTime = @UntilTime
            ;
        END;
        INSERT SOLVIN.DDLChanges
            ( EventTime, UntilTime, DBUser, EventType, SchemaName, ObjectName, ObjectType, [TSQL] )
            VALUES
            ( @EventTime, @UntilTime, @DBUser, @EventType, @SchemaName, @ObjectName, @ObjectType, @TSQL );
        RETURN;
    END;
END;
GO

EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.EnableDDLChangeTracking';
GO
ALTER PROCEDURE SOLVIN.EnableDDLChangeTracking
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    -- Enable DDL change tracking
    --
    SET NOCOUNT ON;
    --
    DECLARE @sql nvarchar(max);
    IF (NOT EXISTS(SELECT * FROM sys.triggers WHERE (name = 'Trigger_DDLChangeTracking') AND (parent_class_desc = 'DATABASE'))) BEGIN
        SET @sql = N'
CREATE TRIGGER Trigger_DDLChangeTracking
    ON DATABASE
    --FOR DDL_DATABASE_LEVEL_EVENT
    FOR CREATE_TABLE
        , ALTER_TABLE
        , DROP_TABLE
        , CREATE_INDEX
        , ALTER_INDEX
        , DROP_INDEX
        , CREATE_STATISTICS
        , UPDATE_STATISTICS
        , DROP_STATISTICS
        , CREATE_SYNONYM
        , DROP_SYNONYM
        , CREATE_VIEW
        , ALTER_VIEW
        , DROP_VIEW
        , CREATE_PROCEDURE
        , ALTER_PROCEDURE
        , DROP_PROCEDURE
        , CREATE_FUNCTION
        , ALTER_FUNCTION
        , DROP_FUNCTION
        , CREATE_TRIGGER
        , ALTER_TRIGGER
        , DROP_TRIGGER
        , CREATE_TYPE
        , DROP_TYPE
        , CREATE_USER
        , ALTER_USER
        , DROP_USER
        , CREATE_ROLE
        , ALTER_ROLE
        , DROP_ROLE
        , CREATE_SCHEMA
        , ALTER_SCHEMA
        , DROP_SCHEMA
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    -- The Trigger fo DDL Changes work is done via SOLVIN.InsertDDLChanges.
    --
    BEGIN TRY
        SET NOCOUNT ON;
        --
        DECLARE @data XML;
        SET @data = EVENTDATA();
        IF (@data IS NOT NULL) BEGIN
            EXECUTE SOLVIN.InsertDDLChanges @data;
        END;
    END TRY
    BEGIN CATCH
         PRINT ''ERROR in Trigger_DDLChangeTracking'';
    END CATCH
END;
';
        EXECUTE sys.sp_executesql @sql;
        -- PRINT @sql;
    END;
    IF (EXISTS(SELECT * FROM sys.triggers WHERE (name = 'Trigger_DDLChangeTracking') AND (parent_class_desc = 'DATABASE'))) BEGIN
        SET @sql = N'ENABLE TRIGGER Trigger_DDLChangeTracking ON DATABASE;';
        EXECUTE sys.sp_executesql @sql;
        PRINT @sql;
    END;
/*

EXECUTE SOLVIN.EnableDDLChangeTracking;

*/
END;
GO

EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.DisableDDLChangeTracking';
GO
ALTER PROCEDURE SOLVIN.DisableDDLChangeTracking
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    -- Disable DDL change tracking.
    --
    SET NOCOUNT ON;
    --
    DECLARE @sql nvarchar(max);
    IF (EXISTS(SELECT * FROM sys.triggers WHERE (name = 'Trigger_DDLChangeTracking') AND (parent_class_desc = 'DATABASE'))) BEGIN
        SET @sql = N'DISABLE TRIGGER Trigger_DDLChangeTracking ON DATABASE;';
        EXECUTE sys.sp_executesql @sql;
        PRINT @sql;
        SET @sql = N'DROP TRIGGER Trigger_DDLChangeTracking ON DATABASE;';
        EXECUTE sys.sp_executesql @sql;
        PRINT @sql;
    END;
/*

EXECUTE SOLVIN.DisableDDLChangeTracking;

*/
END;
GO

-----------------------------------------------------------
--
-- Search in object-definition
--
-----------------------------------------------------------
GO
/** Creates a set of objects to search for database objects **/
IF (OBJECT_ID(N'SOLVIN.SearchHistory', N'u') IS NULL) BEGIN
    CREATE TABLE SOLVIN.[SearchHistory](
        [searchtime] [datetime] NOT NULL,
        [searchterm] [nvarchar](max) NOT NULL,
        [name] [nvarchar](387) NOT NULL,
        [definition] [nvarchar](max) NOT NULL,
        [comment] [nvarchar](max) DEFAULT (''),
        CONSTRAINT [PK_SOLVIN_SearchHistory] PRIMARY KEY CLUSTERED ( [searchtime] ASC, [name] ASC) ON [PRIMARY]
    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];
    PRINT ('    -- [SOLVIN].[SearchHistory] is a new able.');
END ELSE BEGIN
    PRINT ('    -- [SOLVIN].[SearchHistory] exists.');
END;
GO

EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.SearchInObjects';
GO
ALTER PROCEDURE SOLVIN.SearchInObjects
(
       @searchterm AS NVARCHAR(MAX)
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    -- Search in sql object definition.
    --
SELECT name=schema_name(o.schema_id) + '.' + QUOTENAME( o.name ), m.definition FROM sys.sql_modules m inner JOIN sys.all_objects o on m.object_id = o.object_id
WHERE m.definition LIKE ('%'+@searchterm+'%');
/*

EXECUTE SOLVIN.SearchInObjects 'CFS_WORKSPACE_AUDIT_VALUES_RELEVANT_RESP'
EXECUTE SOLVIN.SearchInObjectsHistory 'CFS_WORKSPACE_AUDIT_VALUES_RELEVANT_RESP'

*/
END;
GO

EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.SearchInObjectsHistory';
GO
ALTER PROCEDURE SOLVIN.SearchInObjectsHistory
(
    @searchterm AS NVARCHAR(MAX)
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    -- Search in sql object definition and store it in SOLVIN.SearchHistory.
    --
    SET NOCOUNT ON;
    --
    DECLARE @now as datetime=getdate();
    INSERT INTO [SOLVIN].[SearchHistory] (searchtime, searchterm, name, [definition], [comment])
        SELECT searchtime=@now, searchterm=@searchterm, name=schema_name(o.schema_id) + '.' + QUOTENAME( o.name ), m.definition, comment=''
            FROM sys.sql_modules m inner JOIN sys.all_objects o on m.object_id = o.object_id
            WHERE m.definition LIKE ('%'+@searchterm+'%');
    SELECT
        [searchtime]
        ,[searchterm]
        ,[name]
        ,[definition]
        ,[comment]
    FROM [SOLVIN].[SearchHistory]
    WHERE searchtime = @now;
/*

EXECUTE SOLVIN.SearchInObjects 'CFS_WORKSPACE_AUDIT_VALUES_RELEVANT_RESP'
EXECUTE SOLVIN.SearchInObjectsHistory 'CFS_WORKSPACE_AUDIT_VALUES_RELEVANT_RESP'

SELECT * FROM [SOLVIN].[SearchHistory];
*/

END;
GO

-----------------------------------------------------------
--
-- Snapshot
--
-----------------------------------------------------------
GO
/** Creates a set of objects to ceate snapshots of the database. **/
GO
IF (OBJECT_ID(N'SOLVIN.Snapshot', N'u') IS NULL) BEGIN
    CREATE TABLE SOLVIN.[Snapshot] (
        SnapshotId int identity(1,1) NOT NULL,
        SnapshotDateTime datetime NOT NULL,
        SnapshotName nvarchar(255) NOT NULL,
        CONSTRAINT PK_SOLVIN_Snapshot PRIMARY KEY NONCLUSTERED (SnapshotId Asc)
    )  ON [PRIMARY]
    ;

    CREATE UNIQUE NONCLUSTERED INDEX IX_SnapshotName ON SOLVIN.Snapshot
    (
        SnapshotName
    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ;

    PRINT ('    -- [SOLVIN].[Snapshot] is a new table.');
END ELSE BEGIN
    PRINT ('    -- [SOLVIN].[Snapshot] exists.');
END;
GO
IF (OBJECT_ID(N'SOLVIN.SnapshotObjectDefinition', N'u') IS NULL) BEGIN
    CREATE TABLE SOLVIN.SnapshotObjectDefinition (
        SnapshotDateTime datetime NOT NULL,
        SnapshotId int,
        Id int identity(1,1) NOT NULL,
        ObjectName nvarchar(517) NOT NULL,
        ObjectDefinition nvarchar(max) NOT NULL,
        CONSTRAINT PK_SOLVIN_SnapshotObjectDefinition PRIMARY KEY NONCLUSTERED (SnapshotId ASC, Id Asc)
    )  ON [PRIMARY]
    ;

    ALTER TABLE SOLVIN.SnapshotObjectDefinition ADD CONSTRAINT
        FK_SnapshotObjectDefinition_Snapshot FOREIGN KEY
        (
            SnapshotId
        ) REFERENCES SOLVIN.Snapshot
        (
            SnapshotId
        )
        ON UPDATE  CASCADE
        ON DELETE  CASCADE
    ;

    CREATE UNIQUE NONCLUSTERED INDEX IX_SnapshotObjectDefinition_IdName ON SOLVIN.SnapshotObjectDefinition
    (
        SnapshotId, [ObjectName]
    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ;

    PRINT ('    -- [SOLVIN].[SnapshotObjectDefinition] is a new able.');
END ELSE BEGIN
    PRINT ('    -- [SOLVIN].[SnapshotObjectDefinition] exists.');
END;
GO

EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.CreateSnapshot';
GO
ALTER PROCEDURE SOLVIN.CreateSnapshot
(
    @SnapshotName nvarchar(400)
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    -- Create a snapshot named @SnapshotName and store object.
    --
    SET NOCOUNT ON;
    DECLARE @SnapshotDateTime DATETIME = getdate();
    --
    DELETE FROM [SOLVIN].[Snapshot] WHERE SnapshotName = @SnapshotName;
    --
    INSERT INTO [SOLVIN].[Snapshot]
        ([SnapshotDateTime],[SnapshotName])
    VALUES
        (@SnapshotDateTime, ISNULL(@SnapshotName,'Snapshot'));
    --
    DECLARE @SnapshotId int = SCOPE_IDENTITY();
    --
    INSERT INTO [SOLVIN].[SnapshotObjectDefinition]
               ([SnapshotDateTime]
               ,[SnapshotId]
               ,[ObjectName]
               ,[ObjectDefinition])
    SELECT
        [SnapshotDateTime] = @SnapshotDateTime
        , [SnapshotId] = @SnapshotId
        , [ObjectName] = QUOTENAME(schema_name(o.schema_id)) + '.' + QUOTENAME( o.name )
        , [ObjectDefinition] = m.definition
    FROM sys.sql_modules m
    INNER JOIN sys.all_objects o
        ON m.object_id = o.object_id
    WHERE (CHARINDEX(N'SolvinReportingCommon', m.definition) = 0)
    ;
END;
/**
    Create a snapshot named @SnapshotName and store object.
    EXECUTE SOLVIN.CreateSnapshot 'SecondSnapShot'

**/
GO

EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.CompareSnapshots';
GO
ALTER PROCEDURE SOLVIN.CompareSnapshots
(
    @SnapshotNameBase NVARCHAR(max),
    @SnapshotNameCurrent NVARCHAR(max)
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    -- 2016-12-12 Flori bugfix
    --
    -- Compare two snapshots named @SnapshotNameBase and @SnapshotNameCurrent.
    --
    SET NOCOUNT ON;
    --
    SELECT
        sA.[SnapshotId]
        ,sB.[SnapshotId]
        ,sA.[SnapshotDateTime]
        ,sB.[SnapshotDateTime]
        ,sA.[SnapshotName]
        ,sB.[SnapshotName]

        FROM (SELECT a=@SnapshotNameBase, b=@SnapshotNameCurrent) as p
        INNER JOIN [SOLVIN].[Snapshot] sA
            ON p.a = sA.[SnapshotName]
        INNER JOIN [SOLVIN].[Snapshot] sB
            ON p.b = sB.[SnapshotName]
        ;

    SELECT
        i.state
        , i.ObjectName
        , i.ObjectDefinition
        , i.OldObjectDefinition
    FROM (
    SELECT
        state = CASE
            WHEN SnapshotBase.[SnapshotId] IS NULL THEN 'CREATE'
            WHEN SnapshotCurrent.[SnapshotId] IS NULL THEN 'DROP'
            WHEN SnapshotBase.[ObjectDefinition] = SnapshotCurrent.[ObjectDefinition] THEN 'EQUAL'
            ELSE 'ALTER'
            END
        , [ObjectName] = ISNULL(SnapshotBase.[ObjectName], SnapshotCurrent.[ObjectName])
        , [ObjectDefinition] = ISNULL(SnapshotCurrent.[ObjectDefinition], N'')
        , [OldObjectDefinition] = ISNULL(SnapshotBase.[ObjectDefinition], N'')
        FROM
            (
                SELECT
                    d.[SnapshotId]
                    , d.[ObjectName]
                    , d.[ObjectDefinition]
                FROM [SOLVIN].[Snapshot] s
                INNER JOIN [SOLVIN].[SnapshotObjectDefinition] d
                    ON s.[SnapshotId] = d.[SnapshotId]
                WHERE s.[SnapshotName] = @SnapshotNameBase
            ) as SnapshotBase
        FULL OUTER JOIN
            (
                SELECT
                    d.[SnapshotId]
                    , d.[ObjectName]
                    , d.[ObjectDefinition]
                FROM [SOLVIN].[Snapshot] s
                INNER JOIN [SOLVIN].[SnapshotObjectDefinition] d
                    ON s.[SnapshotId] = d.[SnapshotId]
                WHERE s.[SnapshotName] = @SnapshotNameCurrent
            ) as SnapshotCurrent
        ON (SnapshotBase.[ObjectName] = SnapshotCurrent.[ObjectName])
    ) as i
    ORDER BY i.state, i.ObjectName
        --ORDER BY  CASE
        --	WHEN dA.[ObjectDefinition] = dB.[ObjectDefinition] THEN 1
        --	ELSE 0
        --	END,
        --	ISNULL(dA.[ObjectName], dB.[ObjectName])
        ;
END;

/**
    Compare two snapshots named @SnapshotNameBase and @SnapshotNameCurrent.
    EXECUTE SOLVIN.CompareSnapshots 'FirstSnapShot', 'SecondSnapShot'

**/
GO

-----------------------------------------------------------
--
-- Migration
--
-----------------------------------------------------------
GO
IF (OBJECT_ID(N'SOLVIN.MigrationReplacements', N'u') IS NULL) BEGIN
    CREATE TABLE SOLVIN.MigrationReplacements (
        OldText nvarchar(400) NOT NULL,
        NewText nvarchar(400) NOT NULL,
        CONSTRAINT PK_SOLVIN_MigrationReplacements PRIMARY KEY NONCLUSTERED (OldText ASC)
    )  ON [PRIMARY];
    PRINT ('    -- [SOLVIN].[MigrationReplacements] is a new able.');
END ELSE BEGIN
    PRINT ('    -- [SOLVIN].[MigrationReplacements] exists.');
END;
GO

EXEC SOLVIN.CreateScalarValuedFunctionIfNeeded 'SOLVIN.HelperSQLStmtConvertCreateToAlter';
GO
ALTER FUNCTION SOLVIN.HelperSQLStmtConvertCreateToAlter
(
    @type varchar(2),
    @stmt nvarchar(max)
)
RETURNS nvarchar(max)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    -- Change CREATE TO ALTER
    --
    DECLARE @createPos int;
    DECLARE @createPart [nvarchar](max);
    DECLARE @alterPart [nvarchar](max);

    SET @stmt = ltrim(@stmt);
    IF (@type = 'P') BEGIN
        SET @createPart = N'CREATE PROC';
        SET @alterPart = N'ALTER PROC';
    END ELSE IF (@type = 'V') BEGIN
        SET @createPart = N'CREATE VIEW';
        SET @alterPart = N'ALTER VIEW';
    END ELSE BEGIN
        SET @createPart = N'CREATE ';
        SET @alterPart = N'ALTER ';
    END;
    IF (@createPart IS NOT NULL) BEGIN
        SET @createPos = 1;
        WHILE @createPos>0 BEGIN
            SET @createPos = CHARINDEX(N'CREATE  ', @stmt);
            IF @createPos>0 BEGIN
                SET @stmt = STUFF(@stmt, @createPos, len(N'CREATE  '), N'CREATE ');
            END;
        END;
        SET @createPos = CHARINDEX(@createPart, @stmt);
        IF @createPos>0 BEGIN
            SET @stmt = STUFF(@stmt, @createPos, len(@createPart), @alterPart);
            RETURN @stmt;
        END;
    END;
    RETURN NULL;
END;
/**
    Change CREATE TO ALTER by diffrent object types
    P -->  Proc
    V --> View
      --> only create statement

    EXECUTE SOLVIN.HelperSQLStmtConvertCreateToAlter '','CREATE VIEW abs AS SELECT * FROM ABC'

**/
GO

EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.AddMigrationReplacements';
GO
ALTER PROCEDURE SOLVIN.AddMigrationReplacements
(
    @OldText nvarchar(400),
    @NewText nvarchar(400)
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    -- Add a replacement for migration.
    --
    SET NOCOUNT ON;
    --
    IF (@OldText IS NOT NULL AND @NewText IS NOT NULL) BEGIN
        INSERT INTO [SOLVIN].[MigrationReplacements]
            ([OldText],[NewText])
        VALUES
            (@OldText, @NewText);
    END;
    --
    SELECT [OldText]
          ,[NewText]
    FROM [SOLVIN].[MigrationReplacements]
    ORDER BY [OldText];

/*

EXECUTE SOLVIN.AddMigrationReplacements '[SOLVINReportingDB].[SOLVIN]', '[SOLVIN]';

*/
END;
GO

EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.SearchForMigrationReplacements';
GO
ALTER PROCEDURE SOLVIN.SearchForMigrationReplacements
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    -- Search for replacements
    -- see: SOLVIN.AddMigrationReplacements
    --
    SET NOCOUNT ON;
    --
    SELECT foundText=mr.OldText, name=schema_name(o.schema_id) + '.' + QUOTENAME( o.name ), m.definition
        FROM sys.sql_modules m
        INNER JOIN sys.all_objects o
            on m.object_id = o.object_id
        INNER JOIN SOLVIN.MigrationReplacements mr
            --ON m.definition LIKE ('%'+mr.OldText+'%');
            ON CHARINDEX(+mr.OldText, m.definition) >0
/*

EXECUTE SOLVIN.SearchForMigrationReplacements;

*/
END;
GO

EXEC SOLVIN.CreateProcedureIfNeeded N'SOLVIN.ReplaceMigrationReplacementsInObjects';
GO
ALTER PROCEDURE SOLVIN.ReplaceMigrationReplacementsInObjects
(
    @name nvarchar(max),
    @execute bit
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    -- Replace in object the terms defined in MigrationReplacements
    -- see: SOLVIN.AddMigrationReplacements
    --
    SET NOCOUNT ON;
    --
    DECLARE @schemaName sysname;
    DECLARE @objectName sysname;
    SET @schemaName = ISNULL(PARSENAME(@name, 2), N'dbo');
    SET @objectName = PARSENAME(@name, 1);
    SET @name = QUOTENAME(@schemaName) + N'.' + QUOTENAME(@objectName);
    --

    DECLARE @t TABLE (
        [type] [varchar](2) NULL,
        [object2name] [nvarchar](387) NULL,
        [oldDefinition] [nvarchar](max) NULL,
        [newDefinition] [nvarchar](max) NULL
    );
    INSERT INTO @t
        ([type]
        --,[foundText]
        ,[object2name]
        ,[oldDefinition]
        ,[newDefinition])
    SELECT
        type = o.type
        , object2name = schema_name(o.schema_id) + '.' + QUOTENAME( o.name )
        , oldDefinition = m.definition
        , newDefinition = m.definition
    FROM sys.sql_modules m
        INNER JOIN sys.all_objects o
            on m.object_id = o.object_id
        WHERE (
                (@name IS NULL)
            OR  (SCHEMA_NAME(o.schema_id) = @schemaName AND o.name = @objectName)
            )
            AND (EXISTS (
                SELECT * FROM SOLVIN.MigrationReplacements mr
                WHERE CHARINDEX(mr.OldText, m.definition) > 0
            ));

    DECLARE @oldText nvarchar(max);
    DECLARE @newText nvarchar(max);
    DECLARE cmr CURSOR LOCAL READ_ONLY FORWARD_ONLY
    FOR SELECT [OldText], [NewText] FROM SOLVIN.MigrationReplacements ORDER BY DATALENGTH([OldText]), [OldText];
    OPEN cmr;
    FETCH NEXT FROM cmr INTO @oldText, @newText;
    WHILE (@@fetch_status <> -1)
    BEGIN
        IF (@@fetch_status <> -2)
        BEGIN
            UPDATE @t
                SET [newDefinition] = REPLACE(newDefinition, @oldText, @newText)
                WHERE ([newDefinition] != REPLACE(newDefinition, @oldText, @newText))
            ;
        END
        FETCH NEXT FROM cmr INTO @oldText, @newText;
    END;

    CLOSE cmr;
    DEALLOCATE cmr;

    -- apply changed
    DECLARE @type [varchar](2);
    DECLARE @foundText [nvarchar](400);
    DECLARE @object2name [nvarchar](387);
    DECLARE @oldDefinition [nvarchar](max);
    DECLARE @newDefinition [nvarchar](max);
    DECLARE @alterStmt [nvarchar](max);
    DECLARE @createPos int;
    DECLARE @createPart [nvarchar](max);
    DECLARE @alterPart [nvarchar](max);
    DECLARE c CURSOR LOCAL READ_ONLY FORWARD_ONLY
    FOR SELECT [type]
            ,[object2name]
            ,[newDefinition]
        FROM @t
        WHERE ([oldDefinition] != [newDefinition]);
    OPEN c;
    FETCH NEXT FROM c INTO 	@type, @object2name, @newDefinition;
    WHILE (@@fetch_status <> -1) BEGIN
        IF (@@fetch_status <> -2) BEGIN
            SET @newDefinition = ltrim(@newDefinition);
            SET @alterStmt = SOLVIN.HelperSQLStmtConvertCreateToAlter(@type, @newDefinition);
            IF (@alterStmt IS NOT NULL) BEGIN
                PRINT (N'    -- name : ' + @object2name)
                BEGIN TRY
                    IF @execute = 1 BEGIN
                        EXEC sys.sp_executesql @alterStmt;
                    END ELSE BEGIN
                        PRINT @alterStmt;
                    END;
                END TRY
                BEGIN CATCH
                END CATCH
            END ELSE BEGIN
                SET @newDefinition = CAST(('/*'+@type+'*/') AS nvarchar(max)) + @newDefinition;
                PRINT '-- newDefinition';
                PRINT @newDefinition;
            END;
        END;
        FETCH NEXT FROM c INTO 	@type, @object2name, @newDefinition;
    END;

    CLOSE c;
    DEALLOCATE c;

/*

EXECUTE SOLVIN.ReplaceMigrationReplacementsInObjects NULL, 0;

EXECUTE SOLVIN.ReplaceMigrationReplacementsInObjects NULL, 1;

EXECUTE SOLVIN.ReplaceMigrationReplacementsInObjects 'dbo.spx', 0;

*/
END;
GO

EXEC SOLVIN.CreateScalarValuedFunctionIfNeeded N'SOLVIN.ReplaceMigrationReplacementsInString';
GO
ALTER FUNCTION SOLVIN.ReplaceMigrationReplacementsInString
(
    @text nvarchar(max)
)
RETURNS NVARCHAR(MAX)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    -- Replace one string the terms defined in MigrationReplacements
    -- see: SOLVIN.AddMigrationReplacements
    --
    DECLARE @oldText nvarchar(max);
    DECLARE @newText nvarchar(max);
    DECLARE cmr CURSOR LOCAL READ_ONLY FORWARD_ONLY
    FOR SELECT [OldText], [NewText] FROM SOLVIN.MigrationReplacements ORDER BY DATALENGTH([OldText]), [OldText];
    OPEN cmr;
    FETCH NEXT FROM cmr INTO @oldText, @newText;
    WHILE (@@fetch_status <> -1) BEGIN
        IF (@@fetch_status <> -2) BEGIN
            SET @text = REPLACE(@text, @oldText, @newText);
        END
        FETCH NEXT FROM cmr INTO @oldText, @newText;
    END;

    CLOSE cmr;
    DEALLOCATE cmr;

    RETURN @text;

/*

SELECT SOLVIN.ReplaceMigrationReplacementsInString(N'SELECT * FROM [SOLVINReportingDB].[SOLVIN].[Setting];');

*/
END;
GO

---------------------------------------
--
-- SOLVIN.MSPSourceSetting
--
---------------------------------------
GO
IF (OBJECT_ID(N'SOLVIN.MSPSourceSetting', N'u') IS NULL) BEGIN
    PRINT '    -- CREATE TABLE SOLVIN.MSPSourceSetting'
    CREATE TABLE SOLVIN.MSPSourceSetting
        (
        [Index] int NOT NULL CONSTRAINT CHECK_SOLVIN_MSPSourceSetting_Index CHECK ([Index] = 1),
        SiteId uniqueidentifier NULL,
        DatabaseName nvarchar(255) NULL,
        Version int NULL,
        SerialVersion timestamp NOT NULL
        )  ON [PRIMARY]
        ;
    ALTER TABLE SOLVIN.MSPSourceSetting ADD CONSTRAINT
        PK_SOLVIN_MSPSourceSetting PRIMARY KEY CLUSTERED
        (
        [Index]
        ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
        ;
END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] 'SOLVIN.SetMSPSourceSetting'
GO
ALTER PROCEDURE SOLVIN.SetMSPSourceSetting
(
    @SiteId uniqueidentifier,
    @DatabaseName nvarchar(255),
    @Version int
)
AS
BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-15 Flori
    --
    IF (0 = (SELECT COUNT(*) FROM [SOLVIN].[MSPSourceSetting])) BEGIN
        INSERT INTO [SOLVIN].[MSPSourceSetting] ([Index], [SiteId], [DatabaseName]) VALUES (1, NULL, NULL)
    END;
    --
    IF (@SiteId IS NOT NULL) BEGIN
        UPDATE [SOLVIN].[MSPSourceSetting] SET [SiteId] = @SiteId;
    END;
    IF (@DatabaseName IS NOT NULL) BEGIN
        UPDATE [SOLVIN].[MSPSourceSetting] SET [DatabaseName] = PARSENAME(@DatabaseName, 1);
    END;
    IF (@Version IS NOT NULL) BEGIN
        IF (@Version = 2013) SET @Version = 15;
        IF (@Version = 2016) SET @Version = 16;
        UPDATE [SOLVIN].[MSPSourceSetting] SET [Version] = @Version;
    END;
    --
END;
GO
EXECUTE SOLVIN.SetMSPSourceSetting NULL, NULL, NULL;
GO
EXECUTE [SOLVIN].[CreateScalarValuedFunctionIfNeeded] 'SOLVIN.GetSiteId'
GO
ALTER FUNCTION [SOLVIN].[GetSiteId]()
RETURNS uniqueidentifier AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-27 Flori
    --
    -- reads the site set via [SOLVIN].[SetMSPSourceSetting]
    --
    RETURN (SELECT TOP (1) [SiteId] FROM [SOLVIN].[MSPSourceSetting]);
/*

-- Example:
-----------
EXECUTE  [SOLVIN].[SetMSPSourceSetting] @SiteId = '00000000-0000-0000-0000-000000000000', @DatabaseName = N'[ProjectDB]', Version=16

SELECT [SOLVIN].[GetSiteId]()

*/
END;
GO

---------------------------------------
--
-- Logging
--
---------------------------------------

IF (OBJECT_ID('[SOLVIN].[Log]') IS NOT NULL) AND (COL_LENGTH('[SOLVIN].[Log]', 'LogStart') IS NULL)
BEGIN
    DROP TABLE [SOLVIN].[Log];
END;
GO
IF (OBJECT_ID(N'SOLVIN.Log', N'u') IS NULL) BEGIN
    CREATE TABLE [SOLVIN].[Log](
        [LogIndex] [int] IDENTITY(1,1) NOT NULL,
        [LogOccurrence] [datetime2] NOT NULL,
        [LogCategory] [varchar](128) NOT NULL,
        [LogMessage] [nvarchar](max) NOT NULL,
        [LogStart] [datetime] NULL,
        [LogPROCID] int NULL,
        [LogProcName] sysname NULL,
        [LogSPID] int NULL
    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

    ALTER TABLE [SOLVIN].[Log] ADD  CONSTRAINT [DF_SOLVIN_Log_occurrence]  DEFAULT (getdate()) FOR [LogOccurrence];

    PRINT '    -- create table[SOLVIN].[Log]';
END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.InsertLog';
GO
ALTER PROCEDURE SOLVIN.InsertLog
    @LogCategory varchar(128),
    @LogMessage nvarchar(max),
    @LogStart datetime2 = NULL,
    @LogPROCID int = NULL
AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-15 Flori
    -- 2017-09-28 Flori add @LogStart and @LogPROCID
    --
    DECLARE @LogProcName sysname = NULL;
    DECLARE @LogSPID int = @@SPID;
    IF (@LogPROCID IS NOT NULL) BEGIN
        SET @LogProcName = OBJECT_SCHEMA_NAME(@LogPROCID) + N'.' + OBJECT_NAME(@LogPROCID);
    END;
    INSERT INTO [SOLVIN].[Log]
        ([LogCategory], [LogMessage], [LogStart], [LogPROCID], [LogProcName], [LogSPID])
    VALUES
        (ISNULL(@LogCategory, ''), ISNULL(@LogMessage, ''), @LogStart, @LogPROCID, @LogProcName, @LogSPID);
/*

    DECLARE @eventName nvarchar(max) = N'TEST';
    DECLARE @siteId uniqueidentifier = NULL;
    DECLARE @userName nvarchar(max) = N'hugo';
    DECLARE @entityGuid uniqueidentifier = NULL;

    DECLARE @msg nvarchar(max);
    SET @msg = CONCAT(N'method:', @eventName, N'; siteId:',  @siteId, N'; userName:', @userName, N'; ', @entityGuid, N'; projectGuid');
    EXECUTE SOLVIN.InsertLog 'SOLVIN.ProcedureName', @msg;
*/
END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.LimitLog';
GO
ALTER PROCEDURE SOLVIN.LimitLog
AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-15 Flori
    --
    DECLARE @count int = 0;
    DECLARE @lower int = 0;
    -- for no rights
    -- SELECT @count = COUNT(1) FROM [SOLVIN].[Log];
    -- for perfomance
    SELECT @count = Row_Count FROM sys.dm_db_partition_stats WHERE object_id = OBJECT_ID('[SOLVIN].[Log]')
    IF (@count > 2000) BEGIN
        SELECT @lower = MIN(i.LogIndex) FROM (SELECT TOP (1000) LogIndex FROM [SOLVIN].[Log] ORDER BY [LogIndex] DESC) as i;
        DELETE FROM [SOLVIN].[Log] WHERE LogIndex > @lower;
    END;
/*
EXECUTE SOLVIN.LimitLog
*/
END;
GO
EXECUTE SOLVIN.CreateProcedureIfNeeded 'SOLVIN.ShowLogs'
GO
ALTER PROCEDURE SOLVIN.ShowLogs
AS
BEGIN
    SET NOCOUNT ON;
   --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-03-16 Flori
    -- 2017-09-28 Flori bugfix
    --
    SELECT [LogIndex]
          ,[LogOccurrence]
          ,[LogCategory]
          ,[LogMessage]
          ,[LogStart]
          ,[LogProcName]
          ,[LogSPID]
      FROM [SOLVIN].[Log] WITH (READUNCOMMITTED)
      ORDER BY [LogIndex] DESC;
END;
GO

-----------------------------------------------------------
--
-- Usage
--
-----------------------------------------------------------
GO
/*
EXECUTE SOLVIN.EnableDDLChangeTracking;

EXECUTE SOLVIN.GeneratorSynonym 'Maumere_PWADE_PRJ', 'MSP_Epm%', ''
EXECUTE SOLVIN.GeneratorSynonym 'Maumere_PWADE_PRJ', 'USERVIEW', ''

EXECUTE SOLVIN.ReplaceDatabaseInSynonyms 'Maumere_PWADE_PRJ', 'Maumere_PWAEN_PRJ';

EXECUTE SOLVIN.UpdateEnsureAllSynonyms

EXECUTE SOLVIN.CreateViewFor 'dbo.MSP_EpmResource_special', 'Maumere_PWADE_PRJ.dbo.MSP_EpmResource'

*/
-----------------------------------------------------------
--
-- Utilities to create database objects
--
-----------------------------------------------------------
/***********TABLES****************************************/
/** Creates table "SQLObjectDefinition" **/
GO
IF (OBJECT_ID(N'SOLVIN.SQLObjectDefinition', N'u') IS NULL) BEGIN

    CREATE TABLE [SOLVIN].[SQLObjectDefinition](
        [objecttype] [nvarchar](50) NOT NULL,
        [objectname] [nvarchar](255) NOT NULL,
        [SQL] [nvarchar](max) NOT NULL,
        [objectgroup] [nvarchar](255) NULL,
        [priority] [int] NOT NULL,
        [createdate] [datetime2](7) NOT NULL,
        [modifydate] [datetime2](7) NOT NULL,
        [SerialVersion] [timestamp] NOT NULL,
     CONSTRAINT [PK_SQLObjectDefinition] PRIMARY KEY CLUSTERED
    (
        [objecttype] ASC,
        [objectname] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

    ALTER TABLE [SOLVIN].[SQLObjectDefinition] ADD  CONSTRAINT [DF_SQLObjectDefinition_createdate]  DEFAULT (getdate()) FOR [createdate]

    ALTER TABLE [SOLVIN].[SQLObjectDefinition] ADD  CONSTRAINT [DF_SQLObjectDefinition_modifydate]  DEFAULT (getdate()) FOR [modifydate]
    PRINT ('    -- [SOLVIN].[SQLObjectDefinition] is a new able.');
END ELSE BEGIN
    PRINT ('    -- [SOLVIN].[SQLObjectDefinition] exists.');
END;
GO

/** Creates table "SQLObjectGenerator" **/
GO
IF (OBJECT_ID(N'SOLVIN.SQLObjectGenerator', N'u') IS NULL) BEGIN


    CREATE TABLE [SOLVIN].[SQLObjectGenerator](
        [Id] [int] IDENTITY(1,1) NOT NULL,
        [objecttype] [nvarchar](50) NOT NULL,
        [objectname] [nvarchar](255) NOT NULL,
        [SQL] [nvarchar](max) NULL,
        [objectgroup] [nvarchar](255) NOT NULL,
        [priority] [int] NOT NULL,
        [createdate] [datetime2](7) NOT NULL,
        [modifydate] [datetime2](7) NOT NULL,
        [SerialVersion] [timestamp] NOT NULL,
     CONSTRAINT [PK_SQLObjectGenerator]]] PRIMARY KEY CLUSTERED
    (
        [Id] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

    ALTER TABLE [SOLVIN].[SQLObjectGenerator] ADD  CONSTRAINT [DF_SQLObjectGenerator_createdate]  DEFAULT (getdate()) FOR [createdate]

    ALTER TABLE [SOLVIN].[SQLObjectGenerator] ADD  CONSTRAINT [DF_SQLObjectGenerator_modifydate]  DEFAULT (getdate()) FOR [modifydate]

    PRINT ('    -- [SOLVIN].[SQLObjectGenerator] is a new able.');
END ELSE BEGIN
    PRINT ('    -- [SOLVIN].[SQLObjectGenerator] exists.');
END;
GO

/***********PROCEDURES****************************************/
EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.UpsertObjectDescription';
GO
ALTER PROCEDURE [SOLVIN].[UpsertObjectDescription]
    @value nvarchar(4000)		= NULL,
    @level0type	varchar(128)	= NULL,
    @level0name	sysname			= NULL,
    @level1type	varchar(128)	= NULL,
    @level1name	sysname			= NULL,
    @level2type	varchar(128)	= NULL,
    @level2name	sysname			= NULL
AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-19 Flori
    --
    -- see https://msdn.microsoft.com/en-us/library/ms180047.aspx
    -- Is the type of level 0 object. level0_object_type is varchar(128), with a default of NULL.
    --    Valid inputs are ASSEMBLY, CONTRACT, EVENT NOTIFICATION, FILEGROUP, MESSAGE TYPE, PARTITION FUNCTION, PARTITION SCHEME, REMOTE SERVICE BINDING, ROUTE, SCHEMA, SERVICE, USER, TRIGGER, TYPE, PLAN GUIDE, and NULL.
    --
    -- Is the type of level 1 object. level1_object_type is varchar(128), with a default of NULL.
    --     Valid inputs are AGGREGATE, DEFAULT, FUNCTION, LOGICAL FILE NAME, PROCEDURE, QUEUE, RULE, SYNONYM, TABLE, TABLE_TYPE, TYPE, VIEW, XML SCHEMA COLLECTION, and NULL.
    --
    -- [ @level2type= ] { 'level2_object_type' }
    -- Is the type of level 2 object. level2_object_type is varchar(128), with a default of NULL. Valid inputs are COLUMN, CONSTRAINT, EVENT NOTIFICATION, INDEX, PARAMETER, TRIGGER, and NULL.
    --
    IF (NOT EXISTS(SELECT [value]  FROM fn_listextendedproperty (N'MS_Description', @level0type, @level0name, @level1type, @level1name,@level2type, @level2name))) BEGIN
        EXECUTE sp_addextendedproperty N'MS_Description', @value, @level0type, @level0name, @level1type, @level1name,@level2type, @level2name;
    END ELSE BEGIN
        EXECUTE sp_updateextendedproperty N'MS_Description', @value, @level0type, @level0name, @level1type, @level1name,@level2type, @level2name;
    END;
/* This procedure adds for all objects of a objectgroup (synonyms, tables, views) the name of object group as decription of object.

EXECUTE SOLVIN.UpsertObjectDescription 'SolvinReporting-ObjectGroup:', 'SCHEMA', 'SOLVIN', 'TABLE', N'SQLObjectDefinition'

*/
END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.UpsertSQLObjectDefinition';
GO
ALTER PROCEDURE [SOLVIN].[UpsertSQLObjectDefinition]
    @objecttype nvarchar(50),
    @objectname nvarchar(255),
    @SQL nvarchar(max),
    @objectgroup nvarchar(255),
    @priority int
AS BEGIN
    SET NOCOUNT ON
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-18 Nadine & Flori
    --

    -- helper
    -- EXECUTE [SOLVIN].[procHelperMergeGenerator] '[SOLVIN].[SQLObjectDefinition]', '[SOLVIN].[SQLObjectDefinition]', '[SOLVIN].[SQLObjectDefinition]', '[objectname],[objecttype]','[Id],[SerialVersion]',0

    DECLARE @now DATETIME2 = getdate();

    MERGE INTO [SOLVIN].[SQLObjectDefinition] as dst
        USING (
            SELECT
                  [objecttype]  = @objecttype  -- 1
                , [objectname]  = @objectname  -- 2
                , [SQL]         = @SQL         -- 3
                , [objectgroup] = @objectgroup -- 4
                , [priority]    = @priority    -- 5
                , [createdate]  = @now  -- 6
                , [modifydate]  = @now  -- 7
            ) as src
        ON (
            (dst.[objecttype] = src.[objecttype]) -- 1
        AND (dst.[objectname] = src.[objectname]) -- 2
        )          WHEN MATCHED AND (
                (dst.[SQL] <> src.[SQL]) -- 3
            OR  (ISNULL(NULLIF(dst.[objectgroup], src.[objectgroup]),NULLIF(src.[objectgroup], dst.[objectgroup])) IS NOT NULL) -- 4
            OR  (dst.[priority] <> src.[priority]) -- 5
        ) THEN UPDATE SET
                  [SQL] = src.[SQL] -- 3
                , [objectgroup] = src.[objectgroup] -- 4
                , [priority] = src.[priority] -- 5
                , [modifydate] = src.[modifydate] -- 7
        WHEN NOT MATCHED BY TARGET THEN INSERT (
                  [objecttype] -- 1
                , [objectname] -- 2
                , [SQL] -- 3
                , [objectgroup] -- 4
                , [priority] -- 5
                , [createdate] -- 6
                , [modifydate] -- 7
            ) VALUES (
                  src.[objecttype] -- 1
                , src.[objectname] -- 2
                , src.[SQL] -- 3
                , src.[objectgroup] -- 4
                , src.[priority] -- 5
                , src.[createdate] -- 6
                , src.[modifydate] -- 7
            )
        -- WHEN NOT MATCHED BY SOURCE THEN DELETE
    ;
/* By executing this procedure data will be written or updated in table [SOLVIN].[SQLObjectDefinition]. */

END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.UpsertSQLObjectGenerator';
GO

ALTER PROCEDURE [SOLVIN].[UpsertSQLObjectGenerator]

    @objecttype nvarchar(50),
    @objectname nvarchar(255),
    @SQL nvarchar(max) ,
    @objectgroup nvarchar(255),
    @priority int

AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-18 Nadine & Flori
    --

    -- helper
    -- EXECUTE [SOLVIN].[procHelperMergeGenerator] '[SOLVIN].[SQLObjectGenerator]', '[SOLVIN].[SQLObjectGenerator]', '[SOLVIN].[SQLObjectGenerator]', '[objectname],[objecttype]','[Id],[SerialVersion]',0
    DECLARE @now DATETIME2 = getdate();

    MERGE INTO [SOLVIN].[SQLObjectGenerator] as dst
        USING (
        SELECT
                  [objecttype]  = @objecttype -- 1
                , [objectname]  = @objectname -- 2
                , [SQL]         = @SQL -- 3
                , [objectgroup] = @objectgroup -- 4
                , [priority]    = @priority -- 5
                , [createdate]  = @now -- 6
                , [modifydate]  = @now -- 7
            ) as src
        ON (
            (dst.[objecttype] = src.[objecttype])
        AND (dst.[objectname] = src.[objectname])
        )          WHEN MATCHED AND (
                (ISNULL(NULLIF(dst.[SQL], src.[SQL]),NULLIF(src.[SQL], dst.[SQL])) IS NOT NULL) -- 3
            OR  (dst.[objectgroup] <> src.[objectgroup]) -- 4
            OR  (dst.[priority] <> src.[priority]) -- 5
        ) THEN UPDATE SET
                  [SQL] = src.[SQL] -- 3
                , [objectgroup] = src.[objectgroup] -- 4
                , [priority] = src.[priority] -- 5
                , [modifydate] = src.[modifydate] -- 7
        WHEN NOT MATCHED BY TARGET THEN INSERT (
                  [objecttype] -- 1
                , [objectname] -- 2
                , [SQL] -- 3
                , [objectgroup] -- 4
                , [priority] -- 5
                , [createdate] -- 6
                , [modifydate] -- 7
            ) VALUES (
                  src.[objecttype] -- 1
                , src.[objectname] -- 2
                , src.[SQL] -- 3
                , src.[objectgroup] -- 4
                , src.[priority] -- 5
                , src.[createdate] -- 6
                , src.[modifydate] -- 7
            )
    ;
/* By executing this procedure data will be written or updated in table [SOLVIN].[SQLObjectGenerator]. */

END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.GetPrimaryKeyColumns';
GO
ALTER PROCEDURE [SOLVIN].[GetPrimaryKeyColumns]
(
    @objectid int,
    @DeleteSiteId bit,
    @columns nvarchar(MAX) OUTPUT
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    -- 2017-02-07 Flori using SOLVIN.InsertSysTablesByName
    --
    -- return column
    --
    SET NOCOUNT ON;

    SET @DeleteSiteId = ISNULL(@DeleteSiteId, 0);

    -- only for editing
    IF (OBJECT_ID('tempdb..#sys_schemas') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_schemas FROM sys.schemas; END;
    IF (OBJECT_ID('tempdb..#sys_all_objects') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_all_objects FROM sys.all_objects; END;
    IF (OBJECT_ID('tempdb..#sys_all_columns') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_all_columns FROM sys.all_columns; END;
    IF (OBJECT_ID('tempdb..#sys_index_columns') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_index_columns FROM sys.index_columns; END;
    IF (OBJECT_ID('tempdb..#sys_indexes') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_indexes FROM sys.indexes; END;

    DECLARE columncursor CURSOR READ_ONLY LOCAL FOR

        SELECT c.name
        FROM  #sys_schemas s
        INNER JOIN #sys_all_objects o
                    ON s.schema_id=o.schema_id
        INNER JOIN #sys_indexes i
                    ON i.object_id = o.object_id
        INNER JOIN #sys_index_columns AS ic
                    ON i.object_id = ic.object_id AND i.index_id = ic.index_id
        INNER JOIN #sys_all_columns c
                ON i.object_id=c.object_id and ic.column_id=c.column_id
        WHERE (i.is_primary_key = 1)
            AND (o.object_id = @objectid)
            AND ((@DeleteSiteId = 0)
                OR ((@DeleteSiteId = 1) AND (c.name!='SiteId')))
            AND (ic.is_included_column = 0)

        ORDER BY ic.key_ordinal;


    SET @columns = N'';
    DECLARE @name nvarchar(MAX);
    DECLARE @column_id int;
    OPEN columncursor;
    FETCH NEXT FROM columncursor INTO @name;
    WHILE (@@fetch_status <> -1) BEGIN
        IF (@@fetch_status <> -2) BEGIN
            SET @columns = (@columns + CAST(N', ' as nvarchar(max)) + QUOTENAME(@name));
        END;
        FETCH NEXT FROM columncursor INTO @name;
    END;
    CLOSE columncursor;
    DEALLOCATE columncursor;
    IF (LEN(@columns)>2) BEGIN
        SET @columns = SUBSTRING(@columns, 2, LEN(@columns)-1);
    END;

/**
This procedure delivers a comma seperated variable @columns with all index columns and @includes with all index includes.
    Input parameter:
        @objectid: object_id
            --> OBJECT_ID('[DATABASE_PWA].[pjrep].[PK_MSP_EpmProject]')
        @indexname: the index name
        @DeleteSiteId:
             1 --> columns / includes without SiteId
             NULL / 0 --> columns / includes with SiteId if exits
    Output parameter:
        @columns nvarchar(MAX) OUTPUT,
        @includes nvarchar(MAX) OUTPUT

Example:

DECLARE	@objectid INT,
        @columns nvarchar(max);

IF (OBJECT_ID('tempdb..#sys_schemas') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_schemas FROM sys.schemas; END;
IF (OBJECT_ID('tempdb..#sys_all_objects') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_all_objects FROM sys.all_objects; END;
IF (OBJECT_ID('tempdb..#sys_all_columns') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_all_columns FROM sys.all_columns; END;
IF (OBJECT_ID('tempdb..#sys_index_columns') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_index_columns FROM sys.index_columns; END;
IF (OBJECT_ID('tempdb..#sys_indexes') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_indexes FROM sys.indexes; END;

--/*2013*/ EXECUTE @objectid = [SOLVIN].[InsertSysTablesByName] @objectName = N'[DATABASE_PWA].[dbo].[MSP_EpmProject]'
--/*2016*/ EXECUTE @objectid = [SOLVIN].[InsertSysTablesByName] @objectName = N'[DATABASE_PWA].[pjrep].[MSP_EpmProject]'

EXEC	[SOLVIN].[GetPrimaryKeyColumns]
        @objectid = @objectid,
        @DeleteSiteId = 1,
        @columns = @columns OUTPUT

SELECT	@columns as [@columns], @objectid as [@objectid]

IF (OBJECT_ID('tempdb..#sys_schemas') IS NOT NULL) BEGIN DROP TABLE #sys_schemas; END;
IF (OBJECT_ID('tempdb..#sys_all_objects') IS NOT NULL) BEGIN DROP TABLE #sys_all_objects END;
IF (OBJECT_ID('tempdb..#sys_all_columns') IS NOT NULL) BEGIN DROP TABLE #sys_all_columns END;
IF (OBJECT_ID('tempdb..#sys_index_columns') IS NOT NULL) BEGIN DROP TABLE #sys_index_columns END;
IF (OBJECT_ID('tempdb..#sys_indexes') IS NOT NULL) BEGIN DROP TABLE #sys_indexes END;

**/

END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.GetIndexColumns';
GO
ALTER PROCEDURE [SOLVIN].[GetIndexColumns]
(
    @objectid int,
    @indexname nvarchar(MAX),
    @DeleteSiteId bit,
    @columns nvarchar(MAX) OUTPUT,
    @includes nvarchar(MAX) OUTPUT
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    -- 2017-02-07 Flori using SOLVIN.InsertSysTablesByName
    --
    -- return column
    --
    SET NOCOUNT ON;

    SET @DeleteSiteId = ISNULL(@DeleteSiteId, 0);
    SET @indexname = PARSENAME(@indexname, 1);

    -- only for editing
    IF (OBJECT_ID('tempdb..#sys_schemas') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_schemas FROM sys.schemas; END;
    IF (OBJECT_ID('tempdb..#sys_all_objects') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_all_objects FROM sys.all_objects; END;
    IF (OBJECT_ID('tempdb..#sys_all_columns') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_all_columns FROM sys.all_columns; END;
    IF (OBJECT_ID('tempdb..#sys_index_columns') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_index_columns FROM sys.index_columns; END;
    IF (OBJECT_ID('tempdb..#sys_indexes') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_indexes FROM sys.indexes; END;

    -- columns:
    DECLARE columncursor CURSOR READ_ONLY LOCAL FOR
    SELECT c.[name]
        /* DEBUGING ,o.object_id,i.[name],ic.is_included_column */
    FROM  #sys_schemas s
    INNER JOIN #sys_all_objects o
                ON s.schema_id=o.schema_id
    INNER JOIN #sys_indexes i
                ON i.object_id = o.object_id
    INNER JOIN #sys_index_columns AS ic
                ON i.object_id = ic.object_id AND i.index_id = ic.index_id
    INNER JOIN #sys_all_columns c
            ON i.object_id=c.object_id and ic.column_id=c.column_id

    WHERE 	(o.object_id = @objectid)
        AND (i.[name]= @indexname)
        AND ((@DeleteSiteId = 0)
            OR ((@DeleteSiteId = 1) AND (c.[name]!='SiteId')))
        AND (ic.is_included_column = 0)
    ORDER BY ic.key_ordinal;

    SET @columns = N'';
    DECLARE @name nvarchar(MAX);
    DECLARE @column_id int;
    OPEN columncursor;
    FETCH NEXT FROM columncursor INTO @name;
    WHILE (@@fetch_status <> -1) BEGIN
        IF (@@fetch_status <> -2) BEGIN
            SET @columns = (@columns + CAST(N', ' as nvarchar(max)) + QUOTENAME(@name));
        END;
        FETCH NEXT FROM columncursor INTO @name;
    END;
    CLOSE columncursor;
    DEALLOCATE columncursor;
    IF (LEN(@columns)>2) BEGIN
        SET @columns = SUBSTRING(@columns, 2, LEN(@columns)-1);
    END;

-- includes
    DECLARE columncursor CURSOR READ_ONLY LOCAL FOR
        SELECT c.name
    FROM  #sys_schemas s
    INNER JOIN #sys_all_objects o
        ON s.schema_id=o.schema_id
    INNER JOIN #sys_indexes i
        ON i.object_id = o.object_id
    INNER JOIN #sys_index_columns AS ic
        ON i.object_id = ic.object_id AND i.index_id = ic.index_id
    INNER JOIN #sys_all_columns c
        ON i.object_id=c.object_id and ic.column_id=c.column_id

    WHERE 	(o.object_id = @objectid)
        AND (i.[name]= @indexname)
        AND ((@DeleteSiteId = 0)
            OR ((@DeleteSiteId = 1) AND (c.name!='SiteId')))
        AND (ic.is_included_column = 1)

    ORDER BY ic.key_ordinal;

    SET @includes = N'';
    DECLARE @iname nvarchar(MAX);
    DECLARE @includes_id int;
    OPEN columncursor;
    FETCH NEXT FROM columncursor INTO @iname;
    WHILE (@@fetch_status <> -1) BEGIN
        IF (@@fetch_status <> -2) BEGIN
            SET @includes = (@includes + CAST(N', ' as nvarchar(max)) + QUOTENAME(@iname));
        END;
        FETCH NEXT FROM columncursor INTO @iname;
    END;
    CLOSE columncursor;
    DEALLOCATE columncursor;
    IF (LEN(@includes)>2) BEGIN
        SET @includes = SUBSTRING(@includes, 2, LEN(@includes)-1);
    END;


/**
This procedure delivers a comma seperated variable @columns with all index columns and @includes with all index includes.
    Input parameter:
        @objectid: object_id
            --> OBJECT_ID('[DATABASE_PWA].[pjrep].[PK_MSP_EpmProject]')
        @indexname: the index name
        @DeleteSiteId:
             1 --> columns / includes without SiteId
             NULL / 0 --> columns / includes with SiteId if exits
    Output parameter:
        @columns comma separeted column names
        @includes comma separeted column names

        @objectname : databasename.schemaname.indexname

Example:
------------
DECLARE	@objectid INT,
        @columns nvarchar(max),
        @includes nvarchar(max);


IF (OBJECT_ID('tempdb..#sys_schemas') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_schemas FROM sys.schemas; END;
IF (OBJECT_ID('tempdb..#sys_all_objects') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_all_objects FROM sys.all_objects; END;
IF (OBJECT_ID('tempdb..#sys_all_columns') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_all_columns FROM sys.all_columns; END;
IF (OBJECT_ID('tempdb..#sys_index_columns') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_index_columns FROM sys.index_columns; END;
IF (OBJECT_ID('tempdb..#sys_indexes') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_indexes FROM sys.indexes; END;
--/*2013*/ EXECUTE @objectid = [SOLVIN].[InsertSysTablesByName] @objectName = N'[DATABASE_PWA].[dbo].[MSP_EpmProject]'
--/*2016*/ EXECUTE @objectid = [SOLVIN].[InsertSysTablesByName] @objectName = N'[DATABASE_PWA].[pjrep].[MSP_EpmProject]'


EXEC	[SOLVIN].[GetIndexColumns]
        @objectid = @objectid,
        @indexname = N'[IX_MSP_EpmProject_BY_HREF]',
        @DeleteSiteId=1,
        @columns = @columns OUTPUT,
        @includes = @includes OUTPUT

SELECT	@objectid as [@objectid],
        @columns as [@columns],
        @includes as [@includes]

    IF (OBJECT_ID('tempdb..#sys_schemas') IS NOT NULL) BEGIN DROP TABLE #sys_schemas; END;
    IF (OBJECT_ID('tempdb..#sys_all_objects') IS NOT NULL) BEGIN DROP TABLE #sys_all_objects END;
    IF (OBJECT_ID('tempdb..#sys_all_columns') IS NOT NULL) BEGIN DROP TABLE #sys_all_columns END;
    IF (OBJECT_ID('tempdb..#sys_index_columns') IS NOT NULL) BEGIN DROP TABLE #sys_index_columns END;
    IF (OBJECT_ID('tempdb..#sys_indexes') IS NOT NULL) BEGIN DROP TABLE #sys_indexes END;

**/
END;
GO

EXECUTE [SOLVIN].[CreateScalarValuedFunctionIfNeeded] 'SOLVIN.DoesColumnExists';
GO
ALTER FUNCTION [SOLVIN].[DoesColumnExists]
(
    @object_id INT,
    @columnName nvarchar(255)
)
RETURNS BIT AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    --
    -- return 1 if the column exits
    --
    RETURN (
        SELECT
            CASE WHEN EXISTS(SELECT * FROM sys.all_columns c WHERE (c.object_id = @object_id) AND (c.[name] COLLATE Latin1_General_CI_AS_KS_WS = @columnName COLLATE Latin1_General_CI_AS_KS_WS))
                THEN CAST(1 AS BIT)
            ELSE CAST(0 AS BIT)
            END
        );
    /*
    SELECT [SOLVIN].[DoesColumnExists] (OBJECT_ID('[SOLVIN].[DDLChanges]'), 'Id')
    */
END;
GO

EXECUTE SOLVIN.CreateScalarValuedFunctionIfNeeded N'SOLVIN.GeneratorSchemaTranslation';
GO
ALTER FUNCTION [SOLVIN].[GeneratorSchemaTranslation]
(
    @schemaName nvarchar(max),
    @defaultValue nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-07 Nadine magic schema transformation
    --
    DECLARE @Result nvarchar(max) = @schemaName;

    SET @schemaName = PARSENAME(@schemaName, 1);

    IF NULLIF(@schemaName, '') IS NOT NULL BEGIN
        -- Schema given
        SET @Result = QUOTENAME(@schemaName);

    END ELSE IF @schemaName='pjrep' BEGIN
        -- Schema pjrep
        SET @Result = 'dbo';

    END ELSE IF @schemaName='pjdraft' BEGIN
        -- Schema pjdraft
        SET @Result = 'draft';

    END ELSE IF @schemaName='pjpub' BEGIN
        -- Schema pjdraft
        SET @Result = 'pub';

    END ELSE BEGIN
        SET @Result = @defaultValue;

    END;

    RETURN @Result
END
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.GenerateSynonym';
GO
ALTER PROCEDURE [SOLVIN].[GenerateSynonym]
(
    @name sysname,
    @for nvarchar(MAX),
    @objectgroup as nvarchar(255)
)
AS BEGIN
    SET NOCOUNT ON;
    /*
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-10-13 Flori
    -- 2017-01-10 Flori bugfix
    -- 2017-01-20 NK: grant permission for synonym / Ensure Schema via SP [SOLVIN].[EnsureSynonym]
    -- 2017-02-07 Flori remove mode
    -- 2017-02-23 Flori ReplaceText for @for
    --
    -- drop and create of SYNONYM if needed
    */
    DECLARE @forNow nvarchar(MAX);
    DECLARE @sql nvarchar(MAX);
    DECLARE @type char(2);
    DECLARE @type_desc nvarchar(60);
    DECLARE @grantStmts [SOLVIN].[TVP_NVarCharMAX];
    DECLARE @gensql as nvarchar(max);

    IF (NULLIF(@name, N'') is NULL) BEGIN
        SET @name = QUOTENAME(PARSENAME(@for, 2))+N'.'+QUOTENAME(PARSENAME(@for, 1));
    END;

    DECLARE @replace SOLVIN.TVP_Replace;
    INSERT INTO @replace (Match, Replacement) SELECT Match, Replacement FROM SOLVIN.GetReplacementsFromSettings()
    SET @name = SOLVIN.ReplaceText(@name, @replace);
    SET @for = SOLVIN.ReplaceText(@for, @replace);

    -- 2017-01-26 flori
    IF (NULLIF(@objectgroup, N'') IS NULL) BEGIN
        SET @objectgroup = ISNULL(PARSENAME(@for, 2)+'.', '') + PARSENAME(@for, 1);
    END;

    -- auto generate schema
    DECLARE @schema sysname = ISNULL(PARSENAME(@name, 2), N'dbo');


    SET @gensql = N'EXECUTE [SOLVIN].[GenerateSynonym] @name=N''#name#'', @for=N''#for#'', @objectgroup=''#objectgroup#'';';
    SET @gensql = REPLACE(@gensql, N'#name#', @name);
    SET @gensql = REPLACE(@gensql, N'#for#', @for);
    SET @gensql = REPLACE(@gensql, N'#objectgroup#', @objectgroup);
    EXECUTE SOLVIN.UpsertSQLObjectGenerator 'SYNONYM', @name, @gensql, @objectgroup, 1

    SET @sql = N'EXECUTE [SOLVIN].[EnsureSynonym] N''#name#'', N''#for#'';';
    SET @sql = REPLACE(@sql, N'#name#', @name);
    SET @sql = REPLACE(@sql, N'#for#', @for);
    EXECUTE SOLVIN.UpsertSQLObjectDefinition  'SYNONYM', @name, @sql, @objectgroup, 1

    PRINT ('    INFO: '+@sql);
    EXECUTE sys.sp_executesql @sql;
    EXECUTE SOLVIN.ExecuteSqlStmts @grantStmts;


/** This stroed procedure drops an existing synonym and creates a synonym if needed
-- Input parameters
    @name: name of synonym
        --> [pjrep].[MSP_EpmProject]
        --> NULL / '': same name as for

    @for: name of source
        --> [DATABASE_PWA].[pjrep].[MSP_EpmProject]

    @objectgroup: alias name for reporting objects
        --> RT_EpmProject

--> Exapmle Reporting to dublicate Reporting tables:
-- **Tables**
        EXECUTE SOLVIN.GenerateSynonym '[pjrep].[MSP_EpmProject]' , '[DATABASE_PWA].[pjrep].[MSP_EpmProject]',1,'MSP_EpmProject'
        EXECUTE SOLVIN.GenerateSynonym '' , '[DATABASE_PWA].[pjrep].[MSP_EpmResource]',1,'MSP_EpmResource'
        EXECUTE SOLVIN.GenerateSynonym NULL , '[DATABASE_PWA].[pjrep].[MSP_EpmAssignment]',1,'MSP_EpmAssignment'
        EXECUTE SOLVIN.GenerateSynonym NULL , '[DATABASE_PWA].[pjrep].[MSP_EpmTask]',1,'MSP_EpmTask'
        EXECUTE SOLVIN.GenerateSynonym NULL , '[DATABASE_PWA].[pjrep].[MSP_EpmAssignmentByDay]',1,'MSP_EpmAssignmentByDay'
        EXECUTE SOLVIN.GenerateSynonym NULL , '[DATABASE_PWA].[pjrep].[MSP_EpmResourceByDay]',1,'MSP_EpmResourceByDay'
        EXECUTE SOLVIN.GenerateSynonym NULL , '[DATABASE_PWA].[pjrep].[MSP_TimeByDay]',1,'TimeByDay'

    -- **Views**
        EXECUTE SOLVIN.GenerateSynonym '[pjrep].[MSP_EpmProject_UserView]' , '[DATABASE_PWA].[pjrep].[MSP_EpmProject_UserView]',1,'MSP_EpmProject_UserView'
        EXECUTE SOLVIN.GenerateSynonym '' , '[DATABASE_PWA].[pjrep].[MSP_EpmResource_UserView]',1,'MSP_EpmResource_UserView'
        EXECUTE SOLVIN.GenerateSynonym NULL , '[DATABASE_PWA].[pjrep].[MSP_EpmTask_UserView]',1,'MSP_EpmTask_UserView'
**/
END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] '[SOLVIN].[GetViewColumnLine]'
GO
ALTER PROCEDURE SOLVIN.GetViewColumnLine
(
    @line nvarchar(MAX),
    @column_name nvarchar(MAX),
    @column_id int,
    @column_is_nullable bit,
    @column_sqlexpression nvarchar(MAX),
    @column_sqlempty nvarchar(MAX),
    @result nvarchar(MAX) OUTPUT
) AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-27 Flori init
    -- 2017-01-27 Flori bug fix add missing @column_sqlexpression  and  @columnname
    --
    -- Create column line in for [SOLVIN].[GenerateView]
    -- to customize: copy modify and add to @spGetViewColumnLine
    --
    SET @column_sqlexpression = REPLACE(@column_sqlexpression, N'#fieldname#', 'src.'+QUOTENAME(@column_name));
    SET @line = REPLACE(@line, N'#column_id#', @column_id);
    SET @line = REPLACE(@line, N'#fieldname#', QUOTENAME(@column_name));
    SET @line = REPLACE(@line, N'#columnname#', QUOTENAME(@column_name));
    SET @line = REPLACE(@line, N'#sqlexpression#', @column_sqlexpression);
    SET @line = REPLACE(@line, N'#defaultValue#', @column_sqlempty);
    --
    SET @result = @line;
END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] '[SOLVIN].[GetViewColumnLineIgnoreProjectBaseline2To10]'
GO
ALTER PROCEDURE SOLVIN.GetViewColumnLineIgnoreProjectBaseline2To10
(
    @line nvarchar(MAX),
    @column_name nvarchar(MAX),
    @column_id int,
    @column_is_nullable bit,
    @column_sqlexpression nvarchar(MAX),
    @column_sqlempty nvarchar(MAX),
    @result nvarchar(MAX) OUTPUT
) AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-27 Flori
    --
    -- Create column line in for [SOLVIN].[GenerateView]
    -- Ignore all ProjectBaseline2..10 columns
    --
    IF (   (@column_name LIKE 'ProjectBaseline2%')
        OR (@column_name LIKE 'ProjectBaseline3%')
        OR (@column_name LIKE 'ProjectBaseline4%')
        OR (@column_name LIKE 'ProjectBaseline5%')
        OR (@column_name LIKE 'ProjectBaseline6%')
        OR (@column_name LIKE 'ProjectBaseline7%')
        OR (@column_name LIKE 'ProjectBaseline8%')
        OR (@column_name LIKE 'ProjectBaseline9%')
        OR (@column_name LIKE 'ProjectBaseline10%')
        ) BEGIN
        SET @result = '';
    END ELSE BEGIN
        SET @result = NULL;
    END;
END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] '[SOLVIN].[GetViewColumnLineIgnoreTaskBaseline2To10]'
GO
ALTER PROCEDURE SOLVIN.GetViewColumnLineIgnoreTaskBaseline2To10
(
    @line nvarchar(MAX),
    @column_name nvarchar(MAX),
    @column_id int,
    @column_is_nullable bit,
    @column_sqlexpression nvarchar(MAX),
    @column_sqlempty nvarchar(MAX),
    @result nvarchar(MAX) OUTPUT
) AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-27 Flori
    --
    -- Create column line in for [SOLVIN].[GenerateView]
    -- Ignore all TaskBaseline2..10 columns
    --
    IF (   (@column_name LIKE 'TaskBaseline2%')
        OR (@column_name LIKE 'TaskBaseline3%')
        OR (@column_name LIKE 'TaskBaseline4%')
        OR (@column_name LIKE 'TaskBaseline5%')
        OR (@column_name LIKE 'TaskBaseline6%')
        OR (@column_name LIKE 'TaskBaseline7%')
        OR (@column_name LIKE 'TaskBaseline8%')
        OR (@column_name LIKE 'TaskBaseline9%')
        OR (@column_name LIKE 'TaskBaseline10%')
        ) BEGIN
        SET @result = '';
    END ELSE BEGIN
        SET @result = NULL;
    END;
END;
GO

EXECUTE SOLVIN.CreateProcedureIfNeeded '[SOLVIN].[GetViewColumnLineIgnoreAssignmentBaseline2To10]';
GO
ALTER PROCEDURE [SOLVIN].[GetViewColumnLineIgnoreAssignmentBaseline2To10]
(
    @line nvarchar(MAX),
    @column_name nvarchar(MAX),
    @column_id int,
    @column_is_nullable bit,
    @column_sqlexpression nvarchar(MAX),
    @column_sqlempty nvarchar(MAX),
    @result nvarchar(MAX) OUTPUT
) AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-27 Flori
    --
    -- Create column line in for [SOLVIN].[GenerateView]
    -- Ignore all ProjectBaseline2..10 columns
    --
    IF (   (@column_name LIKE 'AssignmentBaseline2%')
        OR (@column_name LIKE 'AssignmentBaseline3%')
        OR (@column_name LIKE 'AssignmentBaseline4%')
        OR (@column_name LIKE 'AssignmentBaseline5%')
        OR (@column_name LIKE 'AssignmentBaseline6%')
        OR (@column_name LIKE 'AssignmentBaseline7%')
        OR (@column_name LIKE 'AssignmentBaseline8%')
        OR (@column_name LIKE 'AssignmentBaseline9%')
        OR (@column_name LIKE 'AssignmentBaseline10%')
        ) BEGIN
        SET @result = '';
    END ELSE BEGIN
        SET @result = NULL;
    END;
END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] '[SOLVIN].[GetViewColumnLineAdjustResourceNTAccount]'
GO
ALTER PROCEDURE SOLVIN.GetViewColumnLineAdjustResourceNTAccount
(
    @line nvarchar(MAX),
    @column_name nvarchar(MAX),
    @column_id int,
    @column_is_nullable bit,
    @column_sqlexpression nvarchar(MAX),
    @column_sqlempty nvarchar(MAX),
    @result nvarchar(MAX) OUTPUT
) AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-27 Flori
    -- 2017-02-27 Flori handle also WRES_ACCOUNT
    --
    -- Create column line in for [SOLVIN].[GenerateView]
    -- project modified UserClaimsAccount to ResourceNTAccount
    --

    IF (@column_name = 'WRES_ACCOUNT') BEGIN
        -- name in the pub/pjpub schema
        SET @result = '';
        SET @line = N'#columnname# = CASE
        WHEN LEFT(src.[WRES_CLAIMS_ACCOUNT], 7) = ''i:0#.w|''
            THEN SUBSTRING(src.[WRES_CLAIMS_ACCOUNT], 8, LEN(src.[WRES_CLAIMS_ACCOUNT])-7)
        ELSE src.[WRES_CLAIMS_ACCOUNT] END  /* #column_id# */'
        EXECUTE SOLVIN.GetViewColumnLine
                    @line                 = @line                 ,
                    @column_name          = @column_name          ,
                    @column_id            = @column_id            ,
                    @column_is_nullable   = @column_is_nullable   ,
                    @column_sqlexpression = @column_sqlexpression ,
                    @column_sqlempty      = @column_sqlempty      ,
                    @result               = @result               OUTPUT;
    END ELSE IF (@column_name = 'ResourceNTAccount') BEGIN
        -- name in the dbo/pjrep schema
        SET @result = '';
        SET @line = N'#columnname# = CASE
        WHEN LEFT(src.[UserClaimsAccount], 7) = ''i:0#.w|''
            THEN SUBSTRING(src.[UserClaimsAccount], 8, LEN(src.[UserClaimsAccount])-7)
        ELSE src.[UserClaimsAccount] END  /* #column_id# */'
        EXECUTE SOLVIN.GetViewColumnLine
                    @line                 = @line                 ,
                    @column_name          = @column_name          ,
                    @column_id            = @column_id            ,
                    @column_is_nullable   = @column_is_nullable   ,
                    @column_sqlexpression = @column_sqlexpression ,
                    @column_sqlempty      = @column_sqlempty      ,
                    @result               = @result               OUTPUT;
    END ELSE BEGIN
        SET @result = NULL;
    END;
END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] '[SOLVIN].[GetViewCombine]'
GO
ALTER PROCEDURE [SOLVIN].[GetViewCombine]
(
    @statementAppendix nvarchar(MAX),
    @prjForObjectName nvarchar(MAX),
    @columns nvarchar(MAX),
    @result nvarchar(MAX) OUTPUT
) AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-27 Flori
    --
    -- Combine the SELECT for [SOLVIN].[GenerateView]
    -- to customize: copy modify and set as @spCombine
    --
    DECLARE @sql nvarchar(max)= N'
    SELECT
         #columns#
    FROM #for# as src
    #statementAppendix#
    ;
    ';
    SET @sql = REPLACE(@sql, N'#statementAppendix#', ISNULL(@statementAppendix, ''));
    SET @sql = REPLACE(@sql, N'#for#', @prjForObjectName);
    SET @sql = REPLACE(@sql, N'#columns#', ISNULL(@columns, ''));
    --
    SET @result = @sql;
END;
GO


EXECUTE [SOLVIN].[CreateProcedureIfNeeded] '[SOLVIN].[GetViewCombineAddSiteId]'
GO
ALTER PROCEDURE [SOLVIN].[GetViewCombineAddSiteId]
(
    @statementAppendix nvarchar(MAX),
    @prjForObjectName nvarchar(MAX),
    @columns nvarchar(MAX),
    @result nvarchar(MAX) OUTPUT
) AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-27 Flori
    --
    -- Combine the SELECT for [SOLVIN].[GenerateView]
    -- to add the column SiteId of MSP 2016
    --
    DECLARE @sql nvarchar(max)= N'
    SELECT
        SiteId=[SOLVIN].[MSPSourceSetting].SiteId
        ,#columns#
    FROM #for# as src
    CROSS JOIN [SOLVIN].[MSPSourceSetting]
    #statementAppendix#
    ;
    ';
    SET @sql = REPLACE(@sql, N'#statementAppendix#', ISNULL(@statementAppendix, ''));
    SET @sql = REPLACE(@sql, N'#for#', @prjForObjectName);
    SET @sql = REPLACE(@sql, N'#columns#', ISNULL(@columns, ''));
    --
    SET @result = @sql;
END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] '[SOLVIN].[GetViewCombine_TVF]';
GO
ALTER PROCEDURE [SOLVIN].[GetViewCombine_TVF]
(
    @statementAppendix nvarchar(MAX),
    @prjForObjectName nvarchar(MAX),
    @columns nvarchar(MAX),
    @result nvarchar(MAX) OUTPUT
) AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-27 Flori : add SOLVIN.GetViewCombine_TVF
    --
    -- Combine the SELECT for [SOLVIN].[GenerateView]
    -- for functions of MSP
    --
    DECLARE @sql nvarchar(max)= N'
    SELECT
        #columns#
    FROM #for#() as src
    #statementAppendix#
    ;';
    SET @sql = REPLACE(@sql, N'#statementAppendix#', ISNULL(@statementAppendix, ''));
    SET @sql = REPLACE(@sql, N'#for#', @prjForObjectName);
    SET @sql = REPLACE(@sql, N'#columns#', ISNULL(@columns, ''));
    PRINT @sql;
    --
    SET @result = @sql;
END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] '[SOLVIN].[GetViewCombine_MSP_TVF]';
GO
ALTER PROCEDURE [SOLVIN].[GetViewCombine_MSP_TVF]
(
    @statementAppendix nvarchar(MAX),
    @prjForObjectName nvarchar(MAX),
    @columns nvarchar(MAX),
    @result nvarchar(MAX) OUTPUT
) AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-27 Flori
    --
    -- Combine the SELECT for [SOLVIN].[GenerateView]
    -- for the MSP_TVF_* functions of MSP 2016
    --
    DECLARE @sql nvarchar(max)= N'
    SELECT
        #columns#
    FROM #for#( [SOLVIN].[GetSiteId]() ) as src
    #statementAppendix#
    ;';
    SET @sql = REPLACE(@sql, N'#statementAppendix#', ISNULL(@statementAppendix, ''));
    SET @sql = REPLACE(@sql, N'#for#', @prjForObjectName);
    SET @sql = REPLACE(@sql, N'#columns#', ISNULL(@columns, ''));
    PRINT @sql;
    --
    SET @result = @sql;
END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.GenerateView';
GO
ALTER PROCEDURE [SOLVIN].[GenerateView]
(
    @srdbViewName nvarchar(MAX),
    @prjForObjectName nvarchar(MAX),
    @statementAppendix nvarchar(MAX),
    @columnsNotNull nvarchar(MAX),
    @columnsToIgnore nvarchar(MAX),
    @spGetViewColumnLine nvarchar(MAX),
    @spCombine nvarchar(MAX),
    @objectgroup nvarchar(255)
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2016-11-28 Flori
    -- 2016-12-12 Flori add support for synonyms
    -- 2017-01-23 NK: grant permission for view / Ensure Schema by SP [SOLVIN].[CreateViewIfNeeded]
    -- 2017-01-27 Flori add ISNULL
    --
    -- Create a view name @srdbViewName for @prjForObjectName.
    --
    SET NOCOUNT ON;

    DECLARE @verbose int = 0; -- set to 1  for debug messages.

    -- 2017-01-26 flori
    IF (NULLIF(@objectgroup, N'') IS NULL) BEGIN
        SET @objectgroup = ISNULL(PARSENAME(@srdbViewName, 2)+'.', '') + PARSENAME(@srdbViewName, 1);
    END;

    DECLARE @gensql as nvarchar(max) = N'EXECUTE [SOLVIN].[GenerateView] @srdbViewName = N''#name#'', @prjForObjectName = N''#for#'', @statementAppendix = N''#statementAppendix#'', @columnsNotNull = N''#columnsNotNull#'', @columnsToIgnore = N''#columnsToIgnore#'', @spGetViewColumnLine = N''#spGetViewColumnLine#'', @spCombine = N''#spCombine#'', @objectgroup = ''#objectgroup#'' ;';

    SET @gensql = REPLACE(@gensql, N'#name#', @srdbViewName);
    SET @gensql = REPLACE(@gensql, N'#for#', @prjForObjectName);
    SET @gensql = REPLACE(@gensql, N'#statementAppendix#', ISNULL(@statementAppendix, ''));
    SET @gensql = REPLACE(@gensql, N'#columnsNotNull#', ISNULL(@columnsNotNull, ''));
    SET @gensql = REPLACE(@gensql, N'#columnsToIgnore#', ISNULL(@columnsToIgnore, ''));
    SET @gensql = REPLACE(@gensql, N'#spGetViewColumnLine#', ISNULL(@spGetViewColumnLine, ''));
    SET @gensql = REPLACE(@gensql, N'#spCombine#', ISNULL(@spCombine, ''));
    SET @gensql = REPLACE(@gensql, N'#objectgroup#', ISNULL(@objectgroup, ''));


    DECLARE @replace SOLVIN.TVP_Replace;
    INSERT INTO @replace (Match, Replacement) SELECT Match, Replacement FROM SOLVIN.GetReplacementsFromSettings()
    SET @srdbViewName = SOLVIN.ReplaceText(@srdbViewName, @replace);
    SET @prjForObjectName = SOLVIN.ReplaceText(@prjForObjectName, @replace);
    SET @statementAppendix = SOLVIN.ReplaceText(@statementAppendix, @replace);
    SET @columnsNotNull = SOLVIN.ReplaceText(@columnsNotNull, @replace);
    SET @columnsToIgnore = SOLVIN.ReplaceText(@columnsToIgnore, @replace);
    SET @spGetViewColumnLine = SOLVIN.ReplaceText(@spGetViewColumnLine, @replace);
    SET @spCombine = SOLVIN.ReplaceText(@spCombine, @replace);

    Declare @msg as nvarchar(max);
    DECLARE @QName nvarchar(MAX) = ISNULL(QUOTENAME(PARSENAME(@srdbViewName,2)) + '.', '') + QUOTENAME(PARSENAME(@srdbViewName,1));
    DECLARE @QSchema nvarchar(MAX) = ISNULL(QUOTENAME(PARSENAME(@srdbViewName,2)), 'dbo');
    DECLARE @columns nvarchar(MAX) = NULL;


    DECLARE @prjForObjectNameQ nvarchar(MAX) = ISNULL(QUOTENAME(PARSENAME(@prjForObjectName,4)) + '.', '') + ISNULL(QUOTENAME(PARSENAME(@prjForObjectName,3)) + '.', '') + ISNULL(QUOTENAME(PARSENAME(@prjForObjectName,2)) + '.', '') + QUOTENAME(PARSENAME(@prjForObjectName,1));
    SELECT TOP (1) @prjForObjectNameQ = s.base_object_name FROM sys.synonyms s WHERE s.object_id =  object_id(@prjForObjectName);

    DECLARE @tabspGetViewColumnLine [SOLVIN].[TVP_NVarCharMAX];
    INSERT INTO @tabspGetViewColumnLine ([Item]) SELECT Item FROM (SELECT Item=RTRIM(LTRIM(Item)) FROM [SOLVIN].[FN_split_ReportParameter](@spGetViewColumnLine)) as i WHERE NULLIF(Item, '') IS NOT NULL;
    INSERT INTO @tabspGetViewColumnLine ([Item]) VALUES ( N'SOLVIN.GetViewColumnLine' );

    DECLARE @tabColumnsNotNull [SOLVIN].[TVP_NVarCharMAX];
    INSERT INTO @tabColumnsNotNull ([Item]) SELECT DISTINCT PARSENAME(SOLVIN.FN_Trim(Item), 1) FROM [SOLVIN].[FN_split_ReportParameter](@columnsNotNull) where NULLIF(PARSENAME(SOLVIN.Fn_Trim(Item), 1), '') IS NOT NULL;
    -- SELECT Item FROM @tabColumnsNotNull;

    DECLARE @tabColumnsToIgnore [SOLVIN].[TVP_NVarCharMAX];
    INSERT INTO @tabColumnsToIgnore ([Item]) SELECT DISTINCT PARSENAME(SOLVIN.Fn_Trim(Item), 1) FROM [SOLVIN].[FN_split_ReportParameter](@columnsToIgnore) where NULLIF(PARSENAME(SOLVIN.Fn_Trim(Item), 1), '') IS NOT NULL;
    -- SELECT Item FROM @tabColumnsToIgnore;


    IF (OBJECT_ID('tempdb..#columns') IS NULL) BEGIN
        CREATE TABLE #columns (
            [object_id] int not null,
            [name] [nvarchar](128) NULL,
            [column_id] [int] NOT NULL,
            [is_nullable] [bit] NULL,
            [sqlexpression] [nvarchar](4000) NULL,
            [sqlempty] [nvarchar](4000) NULL,
            [sqltype] [nvarchar](4000) NULL
        );
    END;

    IF (@verbose >= 1) BEGIN
        IF (OBJECT_ID(@prjForObjectNameQ) IS NULL) BEGIN
            PRINT (REPLACE(N'Source #forQ# NOT found.', N'#forQ#', @prjForObjectNameQ));
        END ELSE BEGIN
            PRINT (REPLACE(N'Source #forQ# found.', N'#forQ#', @prjForObjectNameQ));
        END;
    END;
    --

    DECLARE @objectid int;
    EXECUTE @objectid = [SOLVIN].[InsertSysTablesByName] @prjForObjectNameQ;

    IF (@verbose >= 2) BEGIN
        SELECT name, column_id, is_nullable, sqlexpression, sqlempty FROM #columns ORDER BY column_id;
    END;

    SET @columns = null;
    DECLARE @line nvarchar(MAX);
    DECLARE @result nvarchar(MAX);
    DECLARE @column_name nvarchar(MAX);
    DECLARE @column_id int;
    DECLARE @column_is_nullable bit;
    DECLARE @column_sqlexpression nvarchar(MAX);
    DECLARE @column_sqlempty nvarchar(MAX);
    DECLARE columncursor CURSOR READ_ONLY LOCAL FOR
        SELECT name, column_id, is_nullable, sqlexpression, sqlempty FROM #columns ORDER BY column_id;
    OPEN columncursor;
    FETCH NEXT FROM columncursor INTO @column_name, @column_id, @column_is_nullable, @column_sqlexpression, @column_sqlempty;
    WHILE (@@fetch_status <> -1) BEGIN
        if (NOT EXISTS(SELECT Item FROM @tabColumnsToIgnore WHERE Item = @column_name)) BEGIN
            SET @line = N'#columnname# = #sqlexpression# /* #column_id# */';
            IF (@column_is_nullable = 1) BEGIN
                IF (EXISTS(SELECT * FROM @tabColumnsNotNull t WHERE (t.Item = @column_name)) ) BEGIN
                    SET @line = N'#columnname# = ISNULL(#sqlexpression#, #defaultValue#) /* #column_id# */';
                END;
            END;
            SET @result = NULL;
            DECLARE @spname nvarchar(MAX);
            DECLARE spcursor CURSOR READ_ONLY LOCAL FOR
                SELECT Item FROM @tabspGetViewColumnLine;
            OPEN spcursor;
            FETCH NEXT FROM spcursor INTO @spname;
            WHILE (@@fetch_status <> -1) AND (@result IS NULL) BEGIN
                IF (@verbose >= 2) BEGIN
                    PRINT (REPLACE(N'EXECUTE #spname#;', N'#spname#', @spname));
                END;
                SET @spname = REPLACE(
                    N'EXECUTE #spname#
                    @line                 = @line                 ,
                    @column_name          = @column_name          ,
                    @column_id            = @column_id            ,
                    @column_is_nullable   = @column_is_nullable   ,
                    @column_sqlexpression = @column_sqlexpression ,
                    @column_sqlempty      = @column_sqlempty      ,
                    @result               = @result               OUTPUT'
                    , N'#spname#', @spname);
                EXECUTE sys.sp_executesql @spname, N'
                    @line nvarchar(MAX),
                    @column_name nvarchar(MAX),
                    @column_id int,
                    @column_is_nullable bit,
                    @column_sqlexpression nvarchar(MAX),
                    @column_sqlempty nvarchar(MAX),
                    @result nvarchar(MAX) OUTPUT
                    ',
                    @line                 = @line                 ,
                    @column_name          = @column_name          ,
                    @column_id            = @column_id            ,
                    @column_is_nullable   = @column_is_nullable   ,
                    @column_sqlexpression = @column_sqlexpression ,
                    @column_sqlempty      = @column_sqlempty      ,
                    @result               = @result               OUTPUT
                    ;
                FETCH NEXT FROM spcursor INTO @spname;
            END;
            CLOSE spcursor;
            DEALLOCATE spcursor;

            /*
            IF (@result IS NULL) BEGIN
                SET @line = REPLACE(@line, N'#column_id#', @column_id);
                SET @line = REPLACE(@line, N'#fieldname#', QUOTENAME(@column_name));
                SET @line = REPLACE(@line, N'#sqlexpression#', @column_sqlexpression);
                SET @line = REPLACE(@line, N'#defaultValue#', @column_sqlempty);
            END;
            */

            IF (@result != '') BEGIN
                IF (@verbose >= 1) BEGIN
                    PRINT @result;
                END;
                SET @columns = ISNULL(@columns + CAST(N'
    , ' as nvarchar(max)), CAST(N'' as nvarchar(max))) + @result;
            END ELSE BEGIN
                IF (@verbose >= 1) BEGIN
                    PRINT ('SKIP '+@column_name);
                END;
            END;
        END ELSE BEGIN
            IF (@verbose >= 1) BEGIN
                PRINT ('IGNORE '+@column_name);
            END;
        END;
        FETCH NEXT FROM columncursor INTO @column_name, @column_id, @column_is_nullable, @column_sqlexpression, @column_sqlempty;
    END;
    CLOSE columncursor;
    DEALLOCATE columncursor;

    -- @columns is now calculated
    IF (@verbose >= 1) BEGIN
        PRINT '@columns';
        PRINT '------------------';
        PRINT @columns;
    END;

    -- something like
    -- EXECUTE SOLVIN.GetViewCombine @statementAppendix = @statementAppendix, @prjForObjectName = @prjForObjectName, @columns = @columns, @result = @result OUTPUT;
    SET @spCombine = REPLACE(
        N'EXECUTE #spname#
        @statementAppendix = @statementAppendix,
        @prjForObjectName  = @prjForObjectName,
        @columns           = @columns,
        @result            = @result OUTPUT'
        , N'#spname#', ISNULL(NULLIF(@spCombine, ''), 'SOLVIN.GetViewCombine'));

    EXECUTE sys.sp_executesql @spCombine, N'
        @statementAppendix nvarchar(MAX),
        @prjForObjectName nvarchar(MAX),
        @columns nvarchar(MAX),
        @result nvarchar(MAX) OUTPUT
        ',
        @statementAppendix = @statementAppendix,
        @prjForObjectName  = @prjForObjectName,
        @columns           = @columns,
        @result            = @result OUTPUT
        ;
    DECLARE @sql nvarchar(max);
    if (@result is not null) BEGIN
        SET @sql = N'
ALTER VIEW #name#
WITH VIEW_METADATA AS
#result#
;
    ';
    END ELSE BEGIN
        SET @sql = N'
ALTER VIEW #name#
WITH VIEW_METADATA AS
SELECT
    #columns#
FROM #for# as src
#statementAppendix#
;
    ';
    END;

    SET @sql = REPLACE(@sql, N'#statementAppendix#', ISNULL(@statementAppendix, ''));
    SET @sql = REPLACE(@sql, N'#name#', @QName);
    SET @sql = REPLACE(@sql, N'#for#', @prjForObjectName);
    SET @sql = REPLACE(@sql, N'#columns#', ISNULL(NULLIF(@columns,''), '*'));
    SET @sql = REPLACE(@sql, N'#result#', ISNULL(@result, ''));

    -- create a new schema if not already exists
    EXECUTE Solvin.EnsureSchema @QSchema;

    EXECUTE SOLVIN.UpsertSQLObjectGenerator 'VIEW', @srdbViewName, @gensql, @objectgroup, 2
    EXECUTE SOLVIN.UpsertSQLObjectDefinition 'VIEW', @srdbViewName, @sql, @objectgroup, 2

    IF len(@columns) = 0 BEGIN
        SET @sql=N'
        INFO: No colums found for object #for#!';
        print Replace(
            @sql
            ,N'#for#',@prjForObjectName);
    END

    -- creates a empty view if not already exits
    EXECUTE Solvin.CreateViewIfNeeded @QName;
    -- print @sql;
    EXEC sys.sp_executesql @sql;
    SET @msg=N'  -- #name# was updated.';
    SET @msg=  REPLACE(
        @msg
        ,N'#name#', @srdbViewName);
    PRINT @msg;

    /*
This procedure creates a view.
-- Input parameters
    @srdbViewName: name of view
        --> [srcpjrep].[MSP_EpmProject]
    @prjForObjectName: name of source
        --> [pjrep].[MSP_EpmProject]
    @statementAppendix: SQL - Text append at the end
        --> ''
    @columnsNotNull: ColumnNames ','-separated - add ISNULL() to ensure that this colmun is not null
        --> ''

    @columnsToIgnore: ColumnNames ','-separated - not added to the view
        --> 'fieldname1,fieldname2'
    @spGetViewColumnLine: : StoredProcedure-Names ','-separated
        --> ''
    @spCombine : StoredProcedure-Name for an alternate combining the sql view text
        --> ''
    @objectgroup: alias name for reporting objects
        --> RT_EpmProject

--> Exapmle Reporting to dublicate Reporting tables:

-- **Tables** -- OLD
        EXECUTE [SOLVIN].[GenerateView] '[srcpjrep].[MSP_EpmProject]', '[pjrep].[MSP_EpmProject]',1,'MSP_EpmProject'
        EXECUTE [SOLVIN].[GenerateView] '[srcpjrep].[MSP_EpmResource]', '[pjrep].[MSP_EpmResource]',1,'MSP_EpmResource'
        EXECUTE [SOLVIN].[GenerateView] '[srcpjrep].[MSP_EpmTask]', '[pjrep].[MSP_EpmTask]',1,'MSP_EpmTask'
        EXECUTE [SOLVIN].[GenerateView] '[srcpjrep].[MSP_EpmAssignment]', '[pjrep].[MSP_EpmAssignment]',1,'MSP_EpmAssignment'
        EXECUTE [SOLVIN].[GenerateView] '[srcpjrep].[MSP_EpmAssignmentByDay]', '[pjrep].[MSP_EpmAssignmentByDay]',1,'MSP_EpmAssignmentByDay'
        EXECUTE [SOLVIN].[GenerateView] '[srcpjrep].[MSP_EpmResourceByDay]', '[pjrep].[MSP_EpmResourceByDay]',1,'MSP_EpmResourceByDay'
        EXECUTE [SOLVIN].[GenerateView] '[srcpjrep].[MSP_TimeByDay]', '[pjrep].[MSP_TimeByDay]',1,'MSP_TimeByDay'

    -- **Views** --OLD
        EXECUTE [SOLVIN].[GenerateView] '[srcpjrep].[MSP_EpmProject_UserView]', '[pjrep].[MSP_EpmProject_UserView]',1,'MSP_EpmProject_UserView'
        EXECUTE [SOLVIN].[GenerateView] '[srcpjrep].[MSP_EpmResource_UserView]', '[pjrep].[MSP_EpmResource_UserView]',1,'MSP_EpmResource_UserView'
        EXECUTE [SOLVIN].[GenerateView] '[srcpjrep].[MSP_EpmTask_UserView]', '[pjrep].[MSP_EpmTask_UserView]',1,'MSP_EpmTask_UserView'


    -- new
        EXECUTE [SOLVIN].[GenerateView] @srdbViewName = N'[dboView].[MSP_EpmTask_UserView]', @prjForObjectName = N'[dboSynonym].[MSP_EpmTask_UserView]', @statementAppendix = N'', @columnsNotNull = N'', @columnsToIgnore = N'
[TaskParentUID], [ProjectUID], [TaskUID], [FixedCostAssignmentUID], [TaskName], [TaskIndex], [TaskIsOverallocated], [TaskIsProjectSummary], [TaskIsMilestone], [TaskIsCritical], [TaskIsSummary]
, [TaskStatusManagerUID], [TaskDurationIsEstimated], [TaskIsEffortDriven], [TaskIsExternal], [TaskIsRecurring], [TaskIsMarked], [TaskIsActive], [TaskIsManuallyScheduled]
, [TaskCreatedRevisionCounter], [TaskModifiedRevisionCounter], [TaskCreatedDate], [TaskModifiedDate], [TaskStatusManagerUID]', @spGetViewColumnLine = N'SOLVIN.GetViewColumnLineIgnoreTaskBaseline2To10', @spCombine = N'', @objectgroup = null ;
*/
END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.GenerateTable';
GO
ALTER PROCEDURE [SOLVIN].[GenerateTable]
(
    @prjObjectName nvarchar(max),
    @srdbTableName nvarchar(max),
    @objectgroup as nvarchar(255)
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-06 Flori
    -- 2017-02-20 add SerialVersion - column
    --

    SET NOCOUNT ON;
    DECLARE @verbose int = 0;
    DECLARE @prjObjectId int = 0;
    DECLARE @sql nvarchar(max);
    DECLARE @gensql nvarchar(max);
    DECLARE @SQLPremissions nvarchar(max);
    DECLARE @msg nvarchar(max);
    IF (NULLIF(@objectgroup, N'') IS NULL) BEGIN
        SET @objectgroup = ISNULL(PARSENAME(@srdbTableName, 2)+'.', '') + PARSENAME(@srdbTableName, 1);
    END;
    SET @gensql = N'EXECUTE [SOLVIN].[GenerateTable] @prjObjectName = ''#prjObjectName#'', @srdbTableName = ''#srdbObjectName#'', @objectgroup = ''#objectgroup#''; ';
    SET @gensql = REPLACE(REPLACE(REPLACE(
        @gensql
        ,N'#prjObjectName#', @prjObjectName )
        ,N'#srdbObjectName#', @srdbTableName)
        ,N'#objectgroup#', @objectgroup)
        ;
    IF (@verbose >= 1) BEGIN PRINT @gensql; END;

    DECLARE @replace SOLVIN.TVP_Replace;
    INSERT INTO @replace (Match, Replacement) SELECT Match, Replacement FROM SOLVIN.GetReplacementsFromSettings()
    SET @prjObjectName = SOLVIN.ReplaceText(@prjObjectName, @replace);
    SET @srdbTableName = SOLVIN.ReplaceText(@srdbTableName, @replace);

    DECLARE @prjObjectNameQ nvarchar(max);
    EXECUTE [SOLVIN].[ResolveSynonym] @prjObjectName, @prjObjectNameQ OUTPUT

    IF (@verbose >= 1) BEGIN
        PRINT 'prjObjectName';
        PRINT @prjObjectName;
        PRINT '@prjObjectNameQ';
        PRINT @prjObjectNameQ;
    END;

    IF (OBJECT_ID('tempdb..#columns') IS NULL) BEGIN
        CREATE TABLE #columns (
            [object_id] int not null,
            [name] [nvarchar](128) NULL,
            [column_id] [int] NOT NULL,
            [is_nullable] [bit] NULL,
            [sqlexpression] [nvarchar](4000) NULL,
            [sqlempty] [nvarchar](4000) NULL,
            [sqltype] [nvarchar](4000) NULL
        );
    END;
    DECLARE @srdbTableNameQ NVARCHAR(MAX);
    set @srdbTableNameQ = ISNULL(QUOTENAME(PARSENAME(@srdbTableName, 2)) + '.' , 'dbo')
        + QUOTENAME(PARSENAME(@srdbTableName, 1))
    ;

    EXECUTE @prjObjectId = [SOLVIN].[InsertSysTablesByName] @prjObjectNameQ;
    IF (@prjObjectId IS NULL) BEGIN
        SET @msg = N'
        INFO: Object #prjObjectName#/#prjObjectNameQ# not found!';

        PRINT Replace(Replace(
            @msg
            ,N'#prjObjectName#', @prjObjectName)
            ,N'#prjObjectNameQ#', @prjObjectNameQ)
            ;

    END ELSE IF (NOT EXISTS(SELECT * FROM #columns WHERE [object_id]=@prjObjectId)) BEGIN

        SET @msg = N'
        INFO: No colums found for object #prjObjectName#/#prjObjectNameQ#!';

        PRINT Replace(Replace(
            @msg
            ,N'#prjObjectName#', @prjObjectName)
            ,N'#prjObjectNameQ#', @prjObjectNameQ)
            ;

    END ELSE BEGIN
        DECLARE @schemaName sysname = PARSENAME(@srdbTableName, 2);
        EXECUTE [SOLVIN].[EnsureSchema] @schemaName;
        --
        DECLARE @cobject_id int;
        DECLARE @cname nvarchar(128);
        DECLARE @ccolumn_id int;
        DECLARE @cis_nullable bit;
        DECLARE @csqlexpression nvarchar(4000);
        DECLARE @csqlempty nvarchar(4000);
        DECLARE @csqltype nvarchar(4000);
        --
        DECLARE @sqlCreate nvarchar(max) = NULL;
        DECLARE @sqlAlter nvarchar(max) = '';
        DECLARE @sqlColumn nvarchar(max);
        INSERT INTO #columns ([object_id], [name], [column_id], [is_nullable], [sqlexpression], [sqlempty], [sqltype])
            VALUES (-1, 'SerialVersion', 1000, 0, NULL, NULL, 'rowversion');
        DECLARE cursorColumn CURSOR LOCAL READ_ONLY
            FOR SELECT [object_id],[name],[column_id],[is_nullable],[sqlexpression],[sqlempty],[sqltype] FROM #columns ORDER BY [column_id],[name];
        OPEN cursorColumn;
        FETCH NEXT FROM cursorColumn INTO @cobject_id,@cname,@ccolumn_id,@cis_nullable,@csqlexpression,@csqlempty,@csqltype;
        WHILE (@@fetch_status <> -1) BEGIN
            IF (@@fetch_status <> -2) BEGIN
                SET @sqlColumn = N'#columnNameQ# #sqltype# #NOT_NULL#';
                SET @sqlColumn = REPLACE(REPLACE(REPLACE(REPLACE(
                    @sqlColumn
                    ,N'#columnName#', @cname)
                    ,N'#columnNameQ#', QUOTENAME(@cname))
                    ,N'#sqltype#', @csqltype)
                    ,N'#NOT_NULL#', CASE WHEN @cis_nullable=1 THEN N'NULL' ELSE N'NOT NULL' END)
                    ;
                SET @sqlCreate = ISNULL((@sqlCreate + N', '), N'') + @sqlColumn;
                IF (@verbose >= 1) BEGIN PRINT @sqlColumn; END;
                --
                SET @sqlColumn = N'
        IF (0 = (SELECT [SOLVIN].[DoesColumnExists] (OBJECT_ID(''#TableNameQ#''), ''#columnName#''))) BEGIN
            PRINT ''Existing TABLE #TableNameQ# adding #columnNameQ#.'';
            ALTER TABLE #TableNameQ# ADD #columnNameQ# #sqltype# #NOT_NULL#;
        END;';
                SET @sqlColumn = REPLACE(REPLACE(REPLACE(REPLACE(
                    @sqlColumn
                    ,N'#columnName#', @cname)
                    ,N'#columnNameQ#', QUOTENAME(@cname))
                    ,N'#sqltype#', @csqltype)
                    ,N'#NOT_NULL#', CASE WHEN @cis_nullable=1 THEN N'NULL' ELSE N'NOT NULL' END)
                    ;
                SET @sqlAlter = @sqlAlter + @sqlColumn;
                IF (@verbose >= 1) BEGIN PRINT @sqlColumn; END;
            END
            FETCH NEXT FROM cursorColumn INTO @cobject_id,@cname,@ccolumn_id,@cis_nullable,@csqlexpression,@csqlempty,@csqltype;
        END
        CLOSE cursorColumn;
        DEALLOCATE cursorColumn;

            --
        SET @sql = N'
    IF (OBJECT_ID(''#TableNameQ#'') IS NULL) BEGIN
        PRINT ''Creating Table #TableNameQ#.'';
        CREATE TABLE #TableNameQ# ( #sqlCreateColumns# );
    END ELSE BEGIN
        #sqlAlterColumns#
    END;
    ';
        SET @sql = REPLACE(@sql, N'#sqlCreateColumns#', @sqlCreate);
        SET @sql = REPLACE(@sql, N'#sqlAlterColumns#', @sqlAlter);
        SET @sql = REPLACE(@sql, N'#TableNameQ#', @srdbTableName);
        --
    END;

    IF  ((NULLIF(@sqlCreate, '') IS NULL) OR (NULLIF(@sqlAlter, '') IS NULL)) BEGIN
        PRINT 'ERROR NO Coumns??'
    END ELSE BEGIN
        SET @SQLPremissions= N'EXECUTE SOLVIN.GrantPermission ''#TableNameQ#'';';
        SET @SQLPremissions = REPLACE(
                @SQLPremissions
                ,N'#NewObject#', @srdbTableNameQ)
                ;


        EXECUTE SOLVIN.UpsertSQLObjectGenerator  'TABLE', @srdbTableName, @gensql, @objectgroup, 3;
        EXECUTE SOLVIN.UpsertSQLObjectDefinition 'TABLE', @srdbTableName, @sql, @objectgroup, 3;
        EXECUTE SOLVIN.UpsertSQLObjectDefinition 'PERMISSION', @srdbTableName, @SQLPremissions, @objectgroup, 3;

        IF (@verbose >= 1) BEGIN
            PRINT '@sql'
            PRINT '------------------------'
            PRINT @sql
            SELECT @sql;
        END;
        EXECUTE sys.sp_executesql @sql;
        IF (@verbose >= 1) BEGIN
            PRINT '@SQLPremissions'
            PRINT '------------------------'
            PRINT @SQLPremissions
        END;
        EXECUTE sys.sp_executesql @SQLPremissions;
    END;

/*
This procedure copies the definition of a table append a special field [SerialVersion].

Input parameters
    @srdbTableName:Name of source object - can be a synonym
        --> [pwaDB].[pjrep].[MSP_EpmProject]
    @srdbTableName:Name of the table in this SOLVIN Reporting DB
        --> [dbo].[MSP_EpmProject]

    @objectgroup: alias name for reporting objects
        --> RT_EpmProject

--> Example Reporting to dublicate Reporting tables / views:

        EXECUTE [SOLVIN].[GenerateSynonym] @name=N'[prjSynonympub].[MSP_PROJECTS]', @for=N'[Maumere_PWADE_PRJ].[pub].[MSP_PROJECTS]', @objectgroup='[pub].[MSP_PROJECTS]';

        EXECUTE [SOLVIN].[GenerateView] @srdbViewName = N'[prjViewpub].[MSP_PROJECTS]', @prjForObjectName = N'[prjSynonympub].[MSP_PROJECTS]', @statementAppendix = N'', @columnsNotNull = N'', @columnsToIgnore = N'[RESERVED_BINARY_DATA],[PROJ_DEF_CAL]', @spGetViewColumnLine = N'', @spCombine = N'', @objectgroup = '[pub].[MSP_PROJECTS]' ;

        EXECUTE [SOLVIN].[GenerateTable] @prjObjectName = '[prjViewpub].[MSP_PROJECTS]', @srdbTableName = N'[pub].[MSP_PROJECTS]', @objectgroup = '[pub].[MSP_PROJECTS]';

-- **Tables**
        EXECUTE [SOLVIN].[GenerateTable] @prjObjectName = '[prjViewrep].[MSP_EpmProject]',         @srdbTableName = N'dbo.MSP_EpmProject'            , @objectgroup = NULL;
        EXECUTE [SOLVIN].[GenerateTable] @prjObjectName = '[prjViewrep].[MSP_EpmResource]',        @srdbTableName = N'dbo.MSP_EpmResource'			 , @objectgroup = NULL;
        EXECUTE [SOLVIN].[GenerateTable] @prjObjectName = '[prjViewrep].[MSP_EpmTask]',            @srdbTableName = N'dbo.MSP_EpmTask'				 , @objectgroup = NULL;
        EXECUTE [SOLVIN].[GenerateTable] @prjObjectName = '[prjViewrep].[MSP_EpmAssignment]',      @srdbTableName = N'dbo.'MSP_EpmAssignment'		 , @objectgroup = NULL;
        EXECUTE [SOLVIN].[GenerateTable] @prjObjectName = '[prjViewrep].[MSP_EpmResourceByDay]',   @srdbTableName = N'dbo.MSP_EpmResourceByDay'		 , @objectgroup = NULL;
        EXECUTE [SOLVIN].[GenerateTable] @prjObjectName = '[prjViewrep].[MSP_EpmAssignmentByDay]', @srdbTableName = N'dbo.MSP_EpmAssignmentByDay'	 , @objectgroup = NULL;
        EXECUTE [SOLVIN].[GenerateTable] @prjObjectName = '[prjViewrep].[MSP_TimeByDay]',          @srdbTableName = N'dbo.MSP_TimeByDay'			 , @objectgroup = NULL;

    -- **Views**
        EXECUTE [SOLVIN].[GenerateTable] @prjObjectName = '[prjViewrep].[MSP_TimeByDay]',            @srdbTableName = N'dbo.[MSP_TimeByDay]',            @objectgroup = NULL;
        EXECUTE [SOLVIN].[GenerateTable] @prjObjectName = '[prjViewrep].[MSP_EpmProject_UserView]',  @srdbTableName = N'dbo.[MSP_EpmProject_UserView]',  @objectgroup = NULL;
        EXECUTE [SOLVIN].[GenerateTable] @prjObjectName = '[prjViewrep].[MSP_EpmResource_UserView]', @srdbTableName = N'dbo.[MSP_EpmResource_UserView]', @objectgroup = NULL;
        EXECUTE [SOLVIN].[GenerateTable] @prjObjectName = '[prjViewrep].[MSP_EpmTask_UserView]',     @srdbTableName = N'dbo.[MSP_EpmTask_UserView]',     @objectgroup = NULL;

    EXECUTE [SOLVIN].[GenerateTable] @prjObjectName='[srcpjrep].[MSP_EpmProject_UserView]', @srdbTableName='[dbo].[MSP_EpmProject_UserView]', @objectgroup=null;

    EXECUTE [SOLVIN].[GenerateTable] @prjObjectName='[Maumere_PWADE_PRJ].[dbo].[MSP_EpmProject_UserView]', @srdbTableName='[dbo].[MSP_EpmProject_UserView]', @objectgroup=null;
*/
END;

GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.GenerateTableIndexes';
GO
ALTER PROCEDURE [SOLVIN].[GenerateTableIndexes]
    @prjObjectName nvarchar(max),
    @srdbTableName nvarchar(max),
    @DeleteSiteId bit,
    @objectgroup as nvarchar(255)

AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-11 Nadine
    -- 2017-02-06 Flori using InsertSysTablesByName

    DECLARE @verbose INT = 0;

    -- input parameter normalization

    DECLARE @srdbTableNameQ nvarchar(max)
        = QUOTENAME(PARSENAME(@srdbTableName,2))
        + N'.' + QUOTENAME(PARSENAME(@srdbTableName,1));
    SET @DeleteSiteId = ISNULL(@DeleteSiteId, 0);
    IF (NULLIF(@objectgroup, N'') IS NULL) BEGIN
        SET @objectgroup = ISNULL(PARSENAME(@prjObjectName, 2)+'.', '') + PARSENAME(@prjObjectName, 1);

    END;

    DECLARE @gensql as nvarchar(max)
    SET @gensql =  N'EXECUTE [SOLVIN].[GenerateTableIndexes] @prjObjectName = ''#prjObjectName#'', @srdbTableName = ''#srdbTableName#'', @DeleteSiteId = ''#DeleteSiteId#'', @objectgroup = ''#objectgroup#''; ';
    SET @gensql = REPLACE(@gensql, N'#prjObjectName#', @prjObjectName);
    SET @gensql = REPLACE(@gensql, N'#srdbTableName#', @srdbTableNameQ);
    SET @gensql = REPLACE(@gensql, N'#DeleteSiteId#', @DeleteSiteId);
    SET @gensql = REPLACE(@gensql, N'#objectgroup#', @objectgroup);
    EXECUTE SOLVIN.UpsertSQLObjectGenerator 'PK/INDEX', @srdbTableNameQ, @gensql, @objectgroup, 4

    DECLARE @replace SOLVIN.TVP_Replace;
    INSERT INTO @replace (Match, Replacement) SELECT Match, Replacement FROM SOLVIN.GetReplacementsFromSettings()
    SET @prjObjectName = SOLVIN.ReplaceText(@prjObjectName, @replace);
    SET @srdbTableName = SOLVIN.ReplaceText(@srdbTableName, @replace);

    DECLARE @prjObjectNameQ nvarchar(max);
    EXECUTE [SOLVIN].[ResolveSynonym] @prjObjectName, @prjObjectNameQ OUTPUT;

    IF (OBJECT_ID('tempdb..#sys_schemas') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_schemas FROM sys.schemas; END;
    IF (OBJECT_ID('tempdb..#sys_all_objects') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_all_objects FROM sys.all_objects; END;
    IF (OBJECT_ID('tempdb..#sys_all_columns') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_all_columns FROM sys.all_columns; END;
    IF (OBJECT_ID('tempdb..#sys_index_columns') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_index_columns FROM sys.index_columns; END;
    IF (OBJECT_ID('tempdb..#sys_indexes') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_indexes FROM sys.indexes; END;

    DECLARE @prjObjectId int = 0;
    EXECUTE @prjObjectId = [SOLVIN].[InsertSysTablesByName] @prjObjectNameQ;

    DECLARE @sql nvarchar(max);
    CREATE TABLE #index  (tblname nvarchar(255), schemaname nvarchar(255), ixname nvarchar(255), ixtype nvarchar(50), iisprimarykey bit);

    INSERT INTO #index (tblname, schemaname, ixname, ixtype, iisprimarykey)
    SELECT
        tblname = o.name
        , schemaname= s.name
        , ixname = i.name
        , ixtype = i.type_desc
        , iisprimarykey = i.is_primary_key
    FROM #sys_schemas s
    INNER JOIN 	#sys_all_objects o
        ON s.schema_id=o.schema_id
    INNER JOIN #sys_indexes i
        ON i.object_id = o.object_id
    WHERE o.object_id=@prjObjectId;

    DECLARE @ctblname nvarchar(255);
    DECLARE @cschemaname nvarchar(255);
    DECLARE @cixname nvarchar(255);
    DECLARE @cixtype nvarchar(50);

    DECLARE @ccolumns nvarchar(MAX) = NULL;
    DECLARE @cincludes nvarchar(max);
    DECLARE @indexname nvarchar(max);
    DECLARE @indexnameQ nvarchar(max);

    IF NOT EXISTS (SELECT 1 FROM #index) BEGIN
        SET @sql=N'
        No index(es) found for table #prjObjectNameQ#!'

        PRINT Replace(@sql, N'#prjObjectNameQ#', @prjObjectNameQ);
    END ELSE BEGIN
        -- Cursor for primary key
        DECLARE CursorPrimaryKey CURSOR
            LOCAL FORWARD_ONLY READ_ONLY
            FOR SELECT tblname, schemaname, ixname, ixtype FROM #index WHERE iisprimarykey=1;

        OPEN CursorPrimaryKey;
        FETCH NEXT FROM CursorPrimaryKey INTO @ctblname, @cschemaname, @cixname, @cixtype;
        WHILE (@@fetch_status <> -1) BEGIN
            IF (@@fetch_status <> -2) BEGIN

                EXECUTE [SOLVIN].[GetPrimaryKeyColumns]
                    @objectid = @prjObjectId,
                    @DeleteSiteId = @DeleteSiteId,
                    @columns = @ccolumns OUTPUT;

                IF len(@ccolumns)=0  BEGIN
                    SET @SQL=N'';
                END ELSE BEGIN

                    --SET @indexname = N''+@cschemaname+'.'+@cixname;
                    SET @indexname =
                        N'PK_'
                        + PARSENAME(@srdbTableName, 2)
                        + '_'
                        + PARSENAME(@srdbTableName, 1)
                        ;
                    SET @indexnameQ = QUOTENAME( @indexname );
                    -- IF EXISTS
                    SET @sql = N'
                    IF (NOT EXISTS(SELECT * FROM [sys].[indexes] i WHERE (i.object_id = OBJECT_ID(''#srdbTableName#'')) AND ((i.is_primary_key = 1) OR (i.[name] = ''#indexname#'')))) BEGIN
                        PRINT ''CREATE PRIMARY KEY #indexnameQ# on #srdbTableName#.'';
                        ALTER TABLE  #srdbTableName# ADD CONSTRAINT #indexnameQ# PRIMARY KEY ( #ccolumns# ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                    END;
                    ';
                    SET @sql = REPLACE(@sql, N'#srdbTableName#', @srdbTableNameQ);
                    SET @sql = REPLACE(@sql, N'#indexnameQ#', @indexnameQ);
                    SET @sql = REPLACE(@sql, N'#indexname#', @indexname);
                    SET @sql = REPLACE(@sql, N'#ccolumns#', @ccolumns);

                    IF (@verbose >= 1) BEGIN
                        SELECT
                            [srdbTableName] = @srdbTableNameQ,
                            [indexnameQ] = @indexnameQ,
                            [indexname] = @indexname,
                            [ccolumns] = @ccolumns
                            ;
                    END;

                    IF (@sql IS NOT NULL) BEGIN
                        EXECUTE SOLVIN.UpsertSQLObjectDefinition  'PK/INDEX', @indexname, @sql, @objectgroup, 4
                        PRINT @sql;
                    END ELSE BEGIN
                        PRINT 'ERROR PK Index';
                        PRINT @indexname;
                    END;
                    EXECUTE sys.sp_executesql @sql;
                END;

            END
            FETCH NEXT FROM CursorPrimaryKey INTO @ctblname, @cschemaname, @cixname, @cixtype;
        END

        CLOSE CursorPrimaryKey;
        DEALLOCATE CursorPrimaryKey;

        -- Cursor for clusterd / non clustered index
        DECLARE CursorIndex CURSOR
            LOCAL FORWARD_ONLY READ_ONLY
            FOR SELECT tblname, schemaname, ixname, ixtype FROM #index WHERE iisprimarykey=0;
        OPEN CursorIndex;
        FETCH NEXT FROM CursorIndex INTO @ctblname, @cschemaname, @cixname, @cixtype;
        WHILE (@@fetch_status <> -1) BEGIN
            IF (@@fetch_status <> -2) BEGIN
                --SET @indexname= N'.'+@cschemaname+'.'+@cixname
                SET @indexname =
                    N'IX_'
                    + PARSENAME(@srdbTableName, 2)
                    + '_'
                    + PARSENAME(@srdbTableName, 1)
                    + REPLACE( ('_' + (
                            REPLACE( @cixname,
                                PARSENAME(@prjObjectName, 1), N''))
                            ), '__', '_')
                    ;
                SET @indexnameQ = QUOTENAME( @indexname );

                EXECUTE SOLVIN.GetIndexColumns
                    @objectid = @prjObjectId
                    , @indexname = @cixname
                    , @DeleteSiteId = @DeleteSiteId
                    , @columns = @ccolumns OUTPUT
                    , @includes = @cincludes OUTPUT
                    ;

                IF len(@ccolumns)=0  BEGIN
                    SET @SQL=N'';
                END ELSE IF (len(@cincludes) > 0) BEGIN
                    SET @sql = N'CREATE #cixtype# INDEX #indexnameQ# ON #srdbTableName# ( #ccolumns# ) INCLUDE ( #cincludes# ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY];'
                END ELSE BEGIN
                    SET @sql = N'CREATE #cixtype# INDEX #indexnameQ# ON #srdbTableName# ( #ccolumns# ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY];'
                END;

                SET @sql = REPLACE(N'
                    IF (NOT EXISTS(SELECT * FROM [sys].[indexes] i WHERE (i.object_id = OBJECT_ID(''#srdbTableName#'')) AND ((i.is_primary_key = 1) OR (i.[name] = ''#indexname#'')))) BEGIN
                        PRINT ''CREATE #indexnameQ# KEY #indexnameQ# on #srdbTableName#.'';
                        #sql#
                    END;
                ', N'#sql#', @sql);

                SET @sql = REPLACE(@sql, N'#cixtype#', @cixtype);
                SET @sql = REPLACE(@sql, N'#srdbTableName#', @srdbTableNameQ);
                SET @sql = REPLACE(@sql, N'#indexnameQ#', @indexnameQ);
                SET @sql = REPLACE(@sql, N'#indexname#', @indexname);
                SET @sql = REPLACE(@sql, N'#ccolumns#', @ccolumns);
                SET @sql = REPLACE(@sql, N'#cincludes#', @cincludes);

                IF (@verbose >= 1) BEGIN
                    SELECT
                        [cixtype] = @cixtype,
                        [indexnameQ] = @srdbTableNameQ,
                        [indexname] = @indexnameQ,
                        [ccolumns] = @ccolumns,
                        [cincludes] = @cincludes
                        ;
                END;

                -- name of (new) index / PK schema
                IF (@sql IS NOT NULL) BEGIN
                    EXECUTE SOLVIN.UpsertSQLObjectDefinition 'PK/INDEX', @indexname, @sql, @objectgroup, 4
                    PRINT @sql;
                END ELSE BEGIN
                    PRINT 'ERROR Index';
                    PRINT @indexnameQ;
                END;
                EXECUTE sys.sp_executesql @sql;
            END
            FETCH NEXT FROM CursorIndex INTO @ctblname, @cschemaname, @cixname, @cixtype;
        END
        CLOSE CursorIndex;
        DEALLOCATE CursorIndex;

    END;

/*
This procedure delivers a lits of statements to copy index(es) of a existing table  to a table on reporting database with SiteId / without SiteId.
Input parameters
    @databasename: Name of database from source table
        --> [DATABASE_PWA]
    @tablename: Name of table where PK / indexes to be copied
        --> [pjrep].[MSP_EpmProject]
    @srdbTableName: name of table where PK / Index to be added
        --> [pjrep].[MSP_EpmProject]
    @DeleteSiteId:
        - 1: without SiteId
        - 0 / NULL: with SiteId
    @new schema
        --> custom schema: 'newSchema'
        --> ''
            schemaname of source object
                pjrep --> dbo
                pjpub --> pub
                pjdraft  --> draft
                '' --> dbo

    @objectgroup: alias name for reporting objects
        --> RT_EpmProject

--> Example Reporting to dublicate Reporting tables:

    -- **Tables**
        EXECUTE [SOLVIN].[GenerateTableIndexes] '[DATABASE_PWA]', '[pjrep].[MSP_EpmProject]','[dbo].[MSP_EpmProject]',1,'dbo',1,'MSP_EpmProject'
        EXECUTE [SOLVIN].[GenerateTableIndexes] '[DATABASE_PWA]', '[pjrep].[MSP_EpmResource]','[dbo].[MSP_EpmResource]',1,'dbo',1,'MSP_EpmResource'
        EXECUTE [SOLVIN].[GenerateTableIndexes] '[DATABASE_PWA]', '[pjrep].[MSP_EpmAssignment]','[dbo].[MSP_EpmAssignment]',1,'',1,'MSP_EpmAssignment'
        EXECUTE [SOLVIN].[GenerateTableIndexes] '[DATABASE_PWA]', '[pjrep].[MSP_EpmTask]','[dbo].[MSP_EpmTask]',1,'dbo',1,'MSP_EpmTask'
        EXECUTE [SOLVIN].[GenerateTableIndexes] '[DATABASE_PWA]', '[pjrep].[MSP_EpmResourceByDay]','[dbo].[MSP_EpmResourceByDay]',1,'dbo',1,'MSP_EpmResourceByDay'
        EXECUTE [SOLVIN].[GenerateTableIndexes] '[DATABASE_PWA]', '[pjrep].[MSP_EpmAssignmentByDay]','[dbo].[MSP_EpmAssignmentByDay]',1,'',1,'MSP_EpmAssignmentByDay'
        EXECUTE [SOLVIN].[GenerateTableIndexes] '[DATABASE_PWA]', '[pjrep].[MSP_TimeByDay]','[dbo].[MSP_TimeByDay]',1,'',1,'MSP_TimeByDay'

    -- **Views**
        EXECUTE [SOLVIN].[GenerateTableIndexes] '[DATABASE_PWA]', '[pjrep].[MSP_EpmProject]','[dbo].[MSP_EpmProject_UserView]',1,'dbo',1,'MSP_EpmProject_UserView'
        EXECUTE [SOLVIN].[GenerateTableIndexes] '[DATABASE_PWA]', '[pjrep].[MSP_EpmTask]','[dbo].[MSP_EpmTask_UserView]',1,'',1,'MSP_EpmTask_UserView'
        EXECUTE [SOLVIN].[GenerateTableIndexes] '[DATABASE_PWA]', '[pjrep].[MSP_EpmResource]','[dbo].[MSP_EpmResource_UserView]',1,'',1,'MSP_EpmResource_UserView'

        EXECUTE [SOLVIN].[GenerateTableIndexes] @prjObjectName = '[Maumere_PWADE_PRJ].[dbo].[MSP_TimeByDay]', @srdbTableName = '[dbo].[MSP_TimeByDay]', @DeleteSiteId = 1, @objectgroup = NULL;
        EXECUTE [SOLVIN].[GenerateTableIndexes] @prjObjectName = '[Maumere_PWADE_PRJ].[dbo].[MSP_EpmTask]', @srdbTableName = '[dbo].[MSP_EpmTask]', @DeleteSiteId = 1, @objectgroup = NULL;

*/
END;
GO

EXECUTE SOLVIN.CreateProcedureIfNeeded N'[SOLVIN].[GenerateMerge]';
GO
ALTER PROCEDURE [SOLVIN].[GenerateMerge]
    @srdbTableName nvarchar(MAX),
    @sourceName nvarchar(MAX),
    @columnsPK nvarchar(MAX) = NULL,
    @columnsMatch nvarchar(MAX) = NULL,
    @columnsIgnore nvarchar(MAX) = NULL,
    @columnProjectUID nvarchar(MAX) = NULL,
    @columnResourceUID nvarchar(MAX) = NULL,
    @columnModifiedDate nvarchar(MAX) = NULL,
    @lazyDefault bit = NULL,
    @objectgroup as nvarchar(255) = NULL
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-19 Flori
    -- 2017-01-23 NK: Grant Permissions / Ensure Schema for new SPs via SP [SOLVIN].[CreateViewIfNeeded]
    -- 2017-02-07 Flori bugfix; remove @mode
    -- 2017-02-20 Flori bugfix; SerialVersion
    -- 2017-08-15 Flori selectiv merge
    --
    SET NOCOUNT ON;
    DECLARE @verbose bit = 0; -- set to 1  for debug messages.
    Declare @msg as nvarchar(max);
    DECLARE @tid as int;
    SET @srdbTableName = QUOTENAME(PARSENAME(@srdbTableName,2)) + N'.'+ QUOTENAME(PARSENAME(@srdbTableName,1) );
    if (NULLIF(@objectgroup, '') IS NULL) BEGIN SET @objectgroup = @srdbTableName; END;
    IF (NULLIF(@columnProjectUID, '') IS NULL) BEGIN SET @columnProjectUID = ''; END ELSE BEGIN SET @columnProjectUID = QUOTENAME(PARSENAME(RTRIM(@columnProjectUID),1)); END;
    IF (NULLIF(@columnResourceUID, '') IS NULL) BEGIN SET @columnResourceUID = ''; END ELSE BEGIN SET @columnResourceUID = QUOTENAME(PARSENAME(RTRIM(@columnResourceUID),1)); END;
    IF (NULLIF(@columnModifiedDate, '') IS NULL) BEGIN SET @columnModifiedDate = ''; END ELSE BEGIN SET @columnModifiedDate = QUOTENAME(PARSENAME(RTRIM(@columnModifiedDate),1)); END;
    SET @tid = OBJECT_ID(@srdbTableName);
    DECLARE @ProcedureName as nvarchar(MAX);
    SET @ProcedureName = QUOTENAME( ISNULL(PARSENAME(@srdbTableName,2), 'dbo')  ) + N'.'+ QUOTENAME(N'Merge' + PARSENAME(@srdbTableName,1) );
    IF (@verbose >= 1) BEGIN
        PRINT (REPLACE(N'Generate #ProcedureName#.', N'#ProcedureName#', @ProcedureName));
    END;
    -- 2017-01-26 flori
    IF (NULLIF(@objectgroup, N'') IS NULL) BEGIN
        SET @objectgroup = ISNULL(PARSENAME(@srdbTableName, 2)+'.', '') + PARSENAME(@srdbTableName, 1);
    END;
    DECLARE @gensql as nvarchar(max);
    SET @gensql = N'EXECUTE [SOLVIN].[GenerateMerge] @srdbTableName = ''#srdbTableName#'', @sourceName = ''#sourceName#'', @columnsPK = ''#columnsPK#'', @columnsMatch = ''#columnsMatch#'', @columnsIgnore = ''#columnsIgnore#'', @columnProjectUID = ''#columnProjectUID#'', @columnResourceUID = ''#columnResourceUID#'', @columnModifiedDate = ''#columnModifiedDate#'', @lazyDefault = #lazyDefault# @objectgroup = ''#objectgroup#'';';
    SET @gensql = REPLACE(@gensql, N'#srdbTableName#',  ISNULL(@srdbTableName, ''));
    SET @gensql = REPLACE(@gensql, N'#sourceName#', ISNULL(@sourceName, ''));
    SET @gensql = REPLACE(@gensql, N'#columnsPK#', ISNULL(@columnsPK, ''));
    SET @gensql = REPLACE(@gensql, N'#columnsMatch#', ISNULL(@columnsMatch, ''));
    SET @gensql = REPLACE(@gensql, N'#columnsIgnore#', ISNULL(@columnsIgnore, ''));
    SET @gensql = REPLACE(@gensql, N'#columnProjectUID#', ISNULL(@columnProjectUID, ''));
    SET @gensql = REPLACE(@gensql, N'#columnResourceUID#', ISNULL(@columnResourceUID, ''));
    SET @gensql = REPLACE(@gensql, N'#columnModifiedDate#', ISNULL(@columnModifiedDate, ''));
    SET @gensql = REPLACE(@gensql, N'#lazyDefault#', case @lazyDefault WHEN 0 THEN '0' WHEN 1 THEN '1' ELSE 'NULL' END);
    SET @gensql = REPLACE(@gensql, N'#objectgroup#', ISNULL(@objectgroup, ''));
    EXECUTE SOLVIN.UpsertSQLObjectGenerator 'MERGE', @srdbTableName, @gensql, @objectgroup, 5
    --
    IF (NULLIF(@columnsPK, '') IS NULL) BEGIN SET @columnsPK = ''; END ELSE BEGIN SET @columnsPK = REPLACE(REPLACE(REPLACE(@columnsPK, CHAR(9), ''), CHAR(10), ''), CHAR(13), ''); END;
    IF (NULLIF(@columnsMatch, '') IS NULL) BEGIN SET @columnsMatch = ''; END ELSE BEGIN SET @columnsMatch = REPLACE(REPLACE(REPLACE(@columnsMatch, CHAR(9), ''), CHAR(10), ''), CHAR(13), ''); END;
    IF (NULLIF(@columnsIgnore, '') IS NULL) BEGIN SET @columnsIgnore = ''; END ELSE BEGIN SET @columnsIgnore = REPLACE(REPLACE(REPLACE(@columnsIgnore, CHAR(9), ''), CHAR(10), ''), CHAR(13), ''); END;
    --
    DECLARE @replace SOLVIN.TVP_Replace;
    INSERT INTO @replace (Match, Replacement) SELECT Match, Replacement FROM SOLVIN.GetReplacementsFromSettings()
    SET @srdbTableName = SOLVIN.ReplaceText(@srdbTableName, @replace);
    SET @sourceName = SOLVIN.ReplaceText(@sourceName, @replace);
    SET @columnsPK = SOLVIN.ReplaceText(@columnsPK, @replace);
    SET @columnsMatch = SOLVIN.ReplaceText(@columnsMatch, @replace);
    SET @columnsIgnore = SOLVIN.ReplaceText(@columnsIgnore, @replace);
    -- the output
    DECLARE @o TABLE(
        rn int identity(1,1),
        l nvarchar(MAX),
        PRIMARY KEY CLUSTERED (rn ASC)
    );
    DECLARE @colsNamesPK TABLE(
         name sysname NOT NULL,
         PRIMARY KEY CLUSTERED (name ASC)
    );
    DECLARE @colsNamesIgnore TABLE(
         name sysname NOT NULL,
         PRIMARY KEY CLUSTERED (name ASC)
    );
    DECLARE @colsNamesMatchSplit TABLE(
         name sysname NOT NULL,
         addRemove bit NOT NULL,
         PRIMARY KEY CLUSTERED (name ASC)
    );
    DECLARE @colsNamesMatch TABLE(
         name sysname NOT NULL,
         PRIMARY KEY CLUSTERED (name ASC)
    );
    DECLARE @colsAll TABLE(
         rn INT NOT NULL ,
         name nvarchar(max) NOT NULL,
         is_nullable bit NOT NULL,
         is_PK bit NOT NULL,
         firstCol bit DEFAULT (0) NOT NULL,
         comma nvarchar(max) DEFAULT (', ') NOT NULL,
         comment nvarchar(max) NOT NULL,
         collation_name sysname NULL,
         PRIMARY KEY CLUSTERED (rn ASC)
    );
    DECLARE @colsPK TABLE(
         rn INT NOT NULL ,
         name nvarchar(max) NOT NULL,
         is_nullable bit NOT NULL,
         is_PK bit NOT NULL,
         firstCol bit DEFAULT (0) NOT NULL,
         comma nvarchar(max) DEFAULT (', ') NOT NULL,
         comment nvarchar(max) NOT NULL,
         collation_name sysname NULL,
         PRIMARY KEY CLUSTERED (rn ASC)
    );
    DECLARE @colsOther TABLE(
         rn INT NOT NULL ,
         name nvarchar(max) NOT NULL,
         is_nullable bit NOT NULL,
         is_PK bit NOT NULL,
         firstCol bit DEFAULT (0) NOT NULL,
         comma nvarchar(max) DEFAULT (', ') NOT NULL,
         comment nvarchar(max) NOT NULL,
         collation_name sysname NULL,
         PRIMARY KEY CLUSTERED (rn ASC)
    );
    --
    if (NULLIF(@columnsPK, '') IS NULL) BEGIN
        INSERT INTO @colsNamesPK
        SELECT
                c.name
        FROM sys.schemas s
        INNER JOIN 	sys.all_objects o
            ON s.schema_id=o.schema_id
        INNER JOIN sys.indexes i
            ON i.object_id = o.object_id
        INNER JOIN sys.index_columns AS ic
            ON i.object_id = ic.object_id AND i.index_id = ic.index_id
        INNER JOIN sys.all_columns c
            ON ic.object_id = c.object_id AND ic.column_id = c.column_id
        WHERE (i.is_primary_key = 1) AND (ic.is_included_column = 0)
            AND (o.object_id=@tid)
        ORDER BY ic.key_ordinal;
    END ELSE BEGIN
        INSERT INTO @colsNamesPK SELECT DISTINCT PARSENAME(LTRIM(RTRIM(Item)), 1) FROM SOLVIN.FN_split_by(@columnsPK, ',');
    END;
    if ((SELECT COUNT(1) FROM @colsNamesPK) = 0) BEGIN
        PRINT 'ERROR no merge keys';
    END ELSE BEGIN
        IF (NULLIF(@columnsIgnore, '') IS NOT NULL) BEGIN
            INSERT INTO @colsNamesIgnore SELECT DISTINCT PARSENAME(LTRIM(RTRIM(Item)), 1) FROM SOLVIN.FN_split_by(@columnsIgnore, ',');
        END;
        INSERT INTO @colsAll (rn, name, is_nullable, is_PK, comment, collation_name)
             SELECT ROW_NUMBER() OVER (ORDER BY column_id) as rn
             --, name
             , QUOTENAME(name, ']') as name
             , ISNULL(is_nullable,1) as is_nullable
             , CASE WHEN (name IN (SELECT name FROM @colsNamesPK)) THEN 1 ELSE 0 END as is_PK
             , ' -- '+CAST(ROW_NUMBER() OVER (ORDER BY column_id) as nvarchar(MAX)) as comment
             , collation_name
             FROM sys.all_columns
             WHERE object_id=@tid AND (name NOT IN (SELECT name FROM @colsNamesIgnore)) AND (name <> 'SerialVersion')
             ORDER BY column_id
        ;
        INSERT INTO @colsPK (rn, name, is_nullable, is_PK,comment, collation_name) SELECT rn, name, is_nullable, is_PK,comment, collation_name FROM @colsAll WHERE is_PK=1;
        INSERT INTO @colsOther (rn, name, is_nullable, is_PK,comment, collation_name) SELECT rn, name, is_nullable, is_PK,comment, collation_name FROM @colsAll WHERE is_PK=0;
        UPDATE TOP (1) @colsAll SET firstCol = 1, comma='  ' WHERE rn = (SELECT MIN(rn) FROM @colsAll);
        UPDATE TOP (1) @colsPK SET firstCol = 1, comma='  ' WHERE rn = (SELECT MIN(rn) FROM @colsPK);
        UPDATE TOP (1) @colsOther SET firstCol = 1, comma='  ' WHERE rn = (SELECT MIN(rn) FROM @colsOther);
        IF (NULLIF(@columnsMatch, '') IS NOT NULL) BEGIN
            INSERT INTO @colsNamesMatchSplit
                SELECT
                    ParsedName = CASE LEFT(Item, 1)
                        WHEN '+' THEN QUOTENAME(PARSENAME(LTRIM(SUBSTRING(Item, 2, LEN(Item) -1)), 1))
                        WHEN '-' THEN QUOTENAME(PARSENAME(LTRIM(SUBSTRING(Item, 2, LEN(Item) -1)), 1))
                        ELSE QUOTENAME(PARSENAME(Item, 1))
                    END,
                    addRemove = CASE LEFT(Item, 1)
                        WHEN '+' THEN 0
                        WHEN '-' THEN 1
                        ELSE 0
                    END
                FROM
                    (
                        SELECT
                            Item = LTRIM(RTRIM(Item))
                        FROM SOLVIN.FN_split_by(REPLACE(REPLACE(REPLACE(@columnsMatch, CHAR(13), ''), CHAR(10), ''), CHAR(9), ''), ',')
                        WHERE (NULLIF(LTRIM(RTRIM(Item)), '') IS NOT NULL)
                    ) as splitted;
            IF (NOT EXISTS(SELECT * FROM @colsNamesMatchSplit WHERE name IN (SELECT name FROM @colsNamesMatchSplit))) BEGIN
                INSERT @colsNamesMatch
                    SELECT name FROM @colsAll;
            END ELSE IF (EXISTS(SELECT * FROM @colsNamesMatchSplit WHERE (addRemove = 1))) BEGIN
                -- a,b,c  -b  -> a,c
                INSERT @colsNamesMatch
                    SELECT name FROM @colsAll
                    WHERE name NOT IN (SELECT name FROM @colsNamesMatchSplit WHERE (addRemove = 1));
            END ELSE BEGIN
                -- a,b,c   +b -> b
                INSERT @colsNamesMatch
                    SELECT name FROM @colsAll
                    WHERE name IN (SELECT name FROM @colsNamesMatchSplit WHERE (addRemove = 0));
            END;
        END ELSE BEGIN
            INSERT @colsNamesMatch
                SELECT name FROM @colsAll;
        END;
        --
        -- DEBUG Info
        --
        /*
        SELECT
            colsAll = colsAll.name
            , colsNamesMatchSplit = colsNamesMatchSplit.name
            , addRemove = colsNamesMatchSplit.addRemove
            , colsNamesMatch = colsNamesMatch.name
        FROM @colsAll as colsAll
        FULL OUTER JOIN  @colsNamesMatchSplit as colsNamesMatchSplit
        ON colsAll.name = colsNamesMatchSplit.name
        FULL OUTER JOIN  @colsNamesMatch as colsNamesMatch
            ON colsAll.name = colsNamesMatch.name;
        */
        DECLARE @SiteIdExists bit = CAST((CASE WHEN EXISTS(SELECT * FROM @colsAll WHERE name = '[SiteId]') THEN 1 ELSE 0 END) as BIT);
        DECLARE @Separator nvarchar(max) = '';
        DECLARE @SelectCount as nvarchar(max) = NULL;
        IF (NULLIF(@columnModifiedDate, '') IS NOT NULL) BEGIN
            SET @SelectCount = N'SELECT @rowsCount = COUNT(1), @LastModified = CAST(MAX(src.'+@columnModifiedDate+N') AS datetime2) FROM ' + @sourceName + N' as src WITH (READUNCOMMITTED)';
            IF ((@SiteIdExists = 1) OR (NULLIF(@columnProjectUID, '') IS NOT NULL) OR (NULLIF(@columnResourceUID, '') IS NOT NULL)) BEGIN
                SET @SelectCount = @SelectCount + N' WHERE (';
                IF (@SiteIdExists = 1) BEGIN
                    SET @SelectCount = @SelectCount + N' ((@SiteId IS NULL) OR (src.[SiteId] = @SiteId))';
                    SET @Separator = N'AND ';
                END ELSE BEGIN
                    SET @Separator = N' ';
                END;
                IF (NULLIF(@columnProjectUID, '') IS NOT NULL) BEGIN
                    SET @SelectCount = @SelectCount + @Separator + N'((@ProjectUID IS NULL) OR (src.'+@columnProjectUID+' = @ProjectUID))';
                    SET @Separator = N'AND ';
                END;
                IF (NULLIF(@columnResourceUID, '') IS NOT NULL) BEGIN
                    SET @SelectCount = @SelectCount + @Separator+N'((@ResourceUID IS NULL) OR (src.'+@columnResourceUID+' = @ResourceUID))';
                END;
                SET @SelectCount = @SelectCount + N')';
            END;
            SET @SelectCount = @SelectCount + N';';
        END;
        --
        --
        IF 'REGION' != 'INIT' BEGIN
            INSERT INTO @o SELECT N'ALTER PROCEDURE ' + @ProcedureName;
            INSERT INTO @o SELECT N'(';
            INSERT INTO @o SELECT N'    @eventName varchar(255) = NULL,';
            INSERT INTO @o SELECT N'    @siteId uniqueidentifier = NULL,';
            INSERT INTO @o SELECT N'    @userId uniqueidentifier = NULL,';
            INSERT INTO @o SELECT N'    @userName nvarchar(255) = NULL,';
            INSERT INTO @o SELECT N'    @entityTypeName nvarchar(32) = NULL,';
            INSERT INTO @o SELECT N'    @entityGuid uniqueidentifier = NULL,';
            INSERT INTO @o SELECT N'    @entityName nvarchar(255) = NULL,';
            INSERT INTO @o SELECT N'    @eventArgs nvarchar(max) = NULL,';
            INSERT INTO @o SELECT N'    @Lazy bit = NULL';
            INSERT INTO @o SELECT N')';
            INSERT INTO @o SELECT N'AS BEGIN';
            INSERT INTO @o SELECT N'    SET NOCOUNT ON;';
            INSERT INTO @o SELECT N'    --';
            INSERT INTO @o SELECT N'    DECLARE @start datetime = getdate();';
            INSERT INTO @o SELECT N'    DECLARE @msg nvarchar(max);';
            INSERT INTO @o SELECT N'    DECLARE @Verbose bit = 0;';
            INSERT INTO @o SELECT N'    DECLARE @cnt INT = 0;';
            IF (@SelectCount IS NOT NULL) BEGIN
                INSERT INTO @o SELECT N'    DECLARE @rowsCount INT = -1;';
                INSERT INTO @o SELECT N'    DECLARE @LastModified datetime2 = ''1-1-1'';';
                INSERT INTO @o SELECT N'    DECLARE @EntityObject INT = OBJECT_ID(''' + @srdbTableName + N''');';
                INSERT INTO @o SELECT N'    DECLARE @rowCountLazyState int = -1;';
                INSERT INTO @o SELECT N'    DECLARE @LastModifiedLazyState datetime2 = ''1-1-1'';';
                INSERT INTO @o SELECT N'    --';
                INSERT INTO @o SELECT N'    IF (@SiteId IS NULL) BEGIN SELECT @SiteId = [SOLVIN].[GetSiteId](); END;';
                INSERT INTO @o SELECT N'    IF (@SiteId IS NULL) BEGIN SET @SiteId = ''00000000-0000-0000-0000-000000000000'';	END;';
            END;
            INSERT INTO @o SELECT N'    --';
            IF (NULLIF(@lazyDefault, 0) IS NULL) BEGIN
                INSERT INTO @o SELECT N'    SET @Lazy = ISNULL(@Lazy, CAST(0 as BIT));';
            END ELSE BEGIN
                INSERT INTO @o SELECT N'    SET @Lazy = ISNULL(@Lazy, CAST(1 as BIT));';
            END;
            INSERT INTO @o SELECT N'    IF (@Verbose = 1) BEGIN';
            INSERT INTO @o SELECT N'        PRINT (N''Lazy State: @Lazy:''+CAST(@Lazy as nvarchar(36))+N'';'');';
            INSERT INTO @o SELECT N'    END;';
            INSERT INTO @o SELECT N'    DECLARE @ProjectUID uniqueidentifier = NULL;';
            INSERT INTO @o SELECT N'    DECLARE @ResourceUID uniqueidentifier = NULL;';
            IF (NULLIF(@columnProjectUID, '') IS NOT NULL) BEGIN
                INSERT INTO @o SELECT N'    IF ((@Lazy = 0) AND (@entityTypeName = ''Project'')) BEGIN';
                INSERT INTO @o SELECT N'        SET @ProjectUID = @entityGuid;';
                INSERT INTO @o SELECT N'        IF (@Verbose = 1) BEGIN';
                INSERT INTO @o SELECT N'            PRINT (N''@entityTypeName = Project : ''+CAST(@ProjectUID as nvarchar(36)));';
                INSERT INTO @o SELECT N'        END;';
                INSERT INTO @o SELECT N'    END;';
            END;
            IF (NULLIF(@columnResourceUID, '') IS NOT NULL) BEGIN
                INSERT INTO @o SELECT N'    IF ((@Lazy = 0) AND (@entityTypeName = ''Resource'')) BEGIN';
                INSERT INTO @o SELECT N'        SET @ResourceUID = @entityGuid;';
                INSERT INTO @o SELECT N'        IF (@Verbose = 1) BEGIN';
                INSERT INTO @o SELECT N'            PRINT (N''@entityTypeName = Resource: ''+CAST(@ResourceUID as nvarchar(36)));';
                INSERT INTO @o SELECT N'        END;';
                INSERT INTO @o SELECT N'    END;';
            END;
            INSERT INTO @o SELECT N'    --';
            --
        END;
        IF 'REGION' != 'Merge' BEGIN
        -- SELECT @rowCountLazyState = [Count], @LastModifiedLazyState = [LastModified] FROM [SOLVIN].[LazyState] as LazyState WHERE (LazyState.EntityObject = @EntityObject);
            IF (@SelectCount IS NOT NULL) BEGIN
                INSERT INTO @o SELECT N'    IF (@Lazy = 1) BEGIN';
                INSERT INTO @o SELECT N'        SELECT @rowCountLazyState = [Count], @LastModifiedLazyState = [LastModified] FROM [SOLVIN].[LazyState] as LazyState WHERE (LazyState.EntityObject = @EntityObject);';
                INSERT INTO @o SELECT N'        IF (@rowCountLazyState IS NOT NULL) BEGIN';
                INSERT INTO @o SELECT N'            '+@SelectCount;
                INSERT INTO @o SELECT N'        END;';
                INSERT INTO @o SELECT N'        IF (@Verbose = 1) BEGIN';
                INSERT INTO @o SELECT N'            PRINT (N''Lazy State Init: @rowCountLazyState:''+CAST(@rowCountLazyState as nvarchar(36))+N''; @LastModifiedLazyState:''+CAST(@LastModifiedLazyState as nvarchar(36))+N''; @rowsCount:''+CAST(@rowsCount as nvarchar(36))+N''; @LastModified:''+CAST(@LastModified as nvarchar(36)));';
                INSERT INTO @o SELECT N'        END;';
                INSERT INTO @o SELECT N'    END;';
            END ELSE BEGIN
                INSERT INTO @o SELECT N'    /* non lazy */';
            END;
            INSERT INTO @o SELECT N'    --';
            IF (@SelectCount IS NOT NULL) BEGIN
                INSERT INTO @o SELECT N'    IF ((@Lazy = 0)';
                INSERT INTO @o SELECT N'    OR	(';
                INSERT INTO @o SELECT N'        NOT	(   (@Lazy = 1)';
                INSERT INTO @o SELECT N'            AND (@rowsCount = @rowCountLazyState)';
                INSERT INTO @o SELECT N'            AND (@LastModified = @LastModifiedLazyState)))';
                INSERT INTO @o SELECT N'    ) BEGIN';
            END;
            INSERT INTO @o SELECT N'        WITH cteDst AS (';
            INSERT INTO @o SELECT N'            SELECT';
            INSERT INTO @o SELECT N'                ' + comma+name+comment FROM @colsAll;
            INSERT INTO @o SELECT N'            FROM ' + @srdbTableName + N' as dst';
            IF ((@SiteIdExists = 1) OR (NULLIF(@columnProjectUID, '') IS NOT NULL) OR (NULLIF(@columnResourceUID, '') IS NOT NULL)) BEGIN
                INSERT INTO @o SELECT N'            WHERE (';
                IF (@SiteIdExists = 1) BEGIN
                    INSERT INTO @o SELECT N'                        ((@SiteId IS NULL) OR (dst.[SiteId] = @SiteId))';
                    SET @Separator = N'AND ';
                END ELSE BEGIN
                    SET @Separator = N'    ';
                END;
                IF (NULLIF(@columnProjectUID, '') IS NOT NULL) BEGIN
                    INSERT INTO @o SELECT N'                    '+@Separator+N'((@ProjectUID IS NULL) OR (dst.'+@columnProjectUID+' = @ProjectUID))';
                    SET @Separator = N'AND ';
                END;
                IF (NULLIF(@columnResourceUID, '') IS NOT NULL) BEGIN
                    INSERT INTO @o SELECT N'                    '+@Separator+N'((@ResourceUID IS NULL) OR (dst.'+@columnResourceUID+' = @ResourceUID))';
                END;
                INSERT INTO @o SELECT N'            )';
            END;
            INSERT INTO @o SELECT N'        )';
            INSERT INTO @o SELECT N'        MERGE INTO cteDst as dst';
            INSERT INTO @o SELECT N'            USING (';
            INSERT INTO @o SELECT N'                SELECT';
            INSERT INTO @o SELECT N'                    ' + comma+name+comment FROM @colsAll;
            INSERT INTO @o SELECT N'                FROM ' + @sourceName + N' as src';
            IF ((@SiteIdExists = 1) OR (NULLIF(@columnProjectUID, '') IS NOT NULL) OR (NULLIF(@columnResourceUID, '') IS NOT NULL)) BEGIN
                INSERT INTO @o SELECT N'                WHERE (';
                IF (@SiteIdExists = 1) BEGIN
                    INSERT INTO @o SELECT N'                        ((@SiteId IS NULL) OR (src.[SiteId] = @SiteId))';
                    SET @Separator = N'AND ';
                END ELSE BEGIN
                    SET @Separator = N'    ';
                END;
                IF (NULLIF(@columnProjectUID, '') IS NOT NULL) BEGIN
                    INSERT INTO @o SELECT N'                    '+@Separator+N'((@ProjectUID IS NULL) OR (src.'+@columnProjectUID+' = @ProjectUID))';
                    SET @Separator = N'AND ';
                END;
                IF (NULLIF(@columnResourceUID, '') IS NOT NULL) BEGIN
                    INSERT INTO @o SELECT N'                    '+@Separator+N'((@ResourceUID IS NULL) OR (src.'+@columnResourceUID+' = @ResourceUID))';
                END;
                INSERT INTO @o SELECT N'                )';
            END;
            INSERT INTO @o SELECT N'            ) as src';
            INSERT INTO @o SELECT N'        ON (';
            INSERT INTO @o
            SELECT N'        '+
            CASE WHEN firstCol=1 THEN N'    ' ELSE 'AND ' END
                --+ '(dst.' + name + ISNULL(' COLLATE '+collation_name, '') + ' = src.' + name + ISNULL(' COLLATE '+collation_name, '') + ')'+ comment
                + REPLACE(REPLACE(
                    N'(dst.#name# = src.#name# #collate#)'
                    , N'#name#', name)
                    , N'#collate#', ISNULL(' COLLATE '+collation_name, '') )
                + comment
            FROM @colsPK ORDER BY rn
            ;
            INSERT INTO @o SELECT N'        )';
            IF (EXISTS(
                    SELECT TOP (9223372036854775807) *
                    FROM @colsOther AS c
                    WHERE (c.name IN (SELECT name FROM @colsNamesMatch)))
                AND EXISTS(SELECT 1 FROM @colsOther)) BEGIN
                INSERT INTO @o SELECT N'        WHEN MATCHED AND (';
                INSERT INTO @o
                    SELECT N'            ' +
                        CASE WHEN rn = 1 THEN N'    ' ELSE 'OR  ' END +
                        CASE
                                WHEN is_nullable=1 THEN
                                        -- not equal if null
                                        REPLACE(REPLACE(
                                            N'(ISNULL(NULLIF(dst.#name#, src.#name# #collate#),NULLIF(src.#name# #collate#, dst.#name#)) IS NOT NULL)'
                                            , N'#name#', name),N'#collate#', ISNULL(' COLLATE '+collation_name, '') ) + comment
                                ELSE
                                    -- not equal if not null
                                    REPLACE(REPLACE(
                                        '(dst.#name# <> src.#name# #collate#)'
                                        , N'#name#', name)
                                        ,N'#collate#', ISNULL(' COLLATE '+collation_name, '') ) + comment
                        END
                    FROM (
                        SELECT TOP (9223372036854775807) rn =  ROW_NUMBER() OVER (ORDER BY c.rn), c.name, c.is_nullable, c.comment, c.collation_name
                        FROM @colsOther AS c
                        WHERE (c.name IN (SELECT name FROM @colsNamesMatch))
                        ORDER BY c.rn
                    ) as c
                    ;
                INSERT INTO @o SELECT N'        ) THEN UPDATE SET ';
                INSERT INTO @o SELECT N'            ' + comma+name+' = src.'+name+comment FROM @colsOther;
            END;
            INSERT INTO @o SELECT N'        WHEN NOT MATCHED BY TARGET THEN INSERT (';
            INSERT INTO @o SELECT N'                ' + comma+name+comment FROM @colsAll;
            INSERT INTO @o SELECT N'            ) VALUES (';
            INSERT INTO @o SELECT N'                ' + comma+'src.'+name+comment FROM @colsAll;
            INSERT INTO @o SELECT N'            )';
            --
            --INSERT INTO @o SELECT N'        WHEN NOT MATCHED BY SOURCE THEN DELETE';
            INSERT INTO @o SELECT N'        ;';
            INSERT INTO @o SELECT N'        SET @cnt = @@ROWCOUNT;';
            IF (@SelectCount IS NOT NULL) BEGIN
                INSERT INTO @o SELECT N'        IF (@Lazy = 1) BEGIN'
                INSERT INTO @o SELECT N'            ' + @SelectCount;
                INSERT INTO @o SELECT N'            IF (@Verbose = 1) BEGIN';
                INSERT INTO @o SELECT N'                PRINT (N''Lazy State Merge: @rowCountLazyState:''+CAST(@rowCountLazyState as nvarchar(36))+N''; @LastModifiedLazyState:''+CAST(@LastModifiedLazyState as nvarchar(36))+N''; @rowsCount:''+CAST(@rowsCount as nvarchar(36))+N''; @LastModified:''+CAST(@LastModified as nvarchar(36)));';
                INSERT INTO @o SELECT N'            END;';
                INSERT INTO @o SELECT N'        END;';
                INSERT INTO @o SELECT N'    END;';
            END;
            INSERT INTO @o SELECT N'    --';
        END;
        IF 'REGION' != 'DELETE' BEGIN
            IF (@SelectCount IS NOT NULL) BEGIN
                INSERT INTO @o SELECT N'    IF ((@Lazy = 0)';
                INSERT INTO @o SELECT N'        OR (NOT (   (@Lazy = 1)';
                INSERT INTO @o SELECT N'                AND (@rowsCount = @rowCountLazyState)';
                INSERT INTO @o SELECT N'                AND (@LastModified = @LastModifiedLazyState)))';
                INSERT INTO @o SELECT N'        ) BEGIN';
                INSERT INTO @o SELECT N'        --';
            END;
            INSERT INTO @o SELECT N'        DELETE FROM '+@srdbTableName;
            INSERT INTO @o SELECT N'        FROM '+@srdbTableName;
            INSERT INTO @o SELECT N'        LEFT OUTER JOIN '+@sourceName+' AS src ';
            INSERT INTO @o SELECT N'        ON';
            INSERT INTO @o
                SELECT N'        ' +
                    CASE WHEN firstCol=1 THEN N'    ' ELSE N'AND ' END
                    + N'('+@srdbTableName + '.' + name + N' = src.' + name + ISNULL(N' COLLATE '+collation_name, '') + ')'
                FROM @colsPK ORDER BY rn
            ;
            INSERT INTO @o SELECT N'        WHERE';
            INSERT INTO @o
                SELECT N'            '+
                    CASE WHEN firstCol=1 THEN N'    ' ELSE 'AND ' END
                        -- +'('+@srdbTableName+'.'+name+' IS NULL)'
                        + REPLACE(REPLACE(REPLACE(
                            N'(src.#name# IS NULL)'
                            , N'#name#', name)
                            , N'#collate#', ISNULL(' COLLATE '+collation_name, '') )
                            , N'#srdbTableName#', @srdbTableName)
                        + comment
                FROM @colsPK ORDER BY rn
            ;
            IF (@SelectCount IS NOT NULL) BEGIN
                INSERT INTO @o SELECT N'        ;';
                INSERT INTO @o SELECT N'        SET @cnt = @@ROWCOUNT + @cnt;';
                INSERT INTO @o SELECT N'        IF (@Lazy = 1) BEGIN';
                INSERT INTO @o SELECT N'            ' + @SelectCount;
                INSERT INTO @o SELECT N'            IF (@Verbose = 1) BEGIN';
                INSERT INTO @o SELECT N'                PRINT (N''Lazy State DELETE: @rowCountLazyState:''+CAST(@rowCountLazyState as nvarchar(36))+N''; @LastModifiedLazyState:''+CAST(@LastModifiedLazyState as nvarchar(36))+N''; @rowsCount:''+CAST(@rowsCount as nvarchar(36))+N''; @LastModified:''+CAST(@LastModified as nvarchar(36)));';
                INSERT INTO @o SELECT N'            END;';
                INSERT INTO @o SELECT N'        END;';
                INSERT INTO @o SELECT N'    END;';
                INSERT INTO @o SELECT N'    IF (@Lazy = 0) BEGIN';
                INSERT INTO @o SELECT N'        ' + @SelectCount;
                INSERT INTO @o SELECT N'        IF (@Verbose = 1) BEGIN';
                INSERT INTO @o SELECT N'            IF ((@ProjectUID IS NULL) AND (@ResourceUID IS NULL)) BEGIN';
                INSERT INTO @o SELECT N'                PRINT (N''Lazy State Full Merge: @rowsCount:''+CAST(@rowsCount as nvarchar(36))+N''; @LastModified:''+CAST(@LastModified as nvarchar(36)));';
                INSERT INTO @o SELECT N'            END ELSE BEGIN';
                INSERT INTO @o SELECT N'                PRINT (N''Lazy State Partial Merge: @rowsCount:''+CAST(@rowsCount as nvarchar(36))+N''; @LastModified:''+CAST(@LastModified as nvarchar(36)));';
                INSERT INTO @o SELECT N'            END;';
                INSERT INTO @o SELECT N'        END;';
                INSERT INTO @o SELECT N'    END;';
                INSERT INTO @o SELECT N'    IF (@rowsCount IS NULL) BEGIN SET @rowsCount = 0; END;';
                INSERT INTO @o SELECT N'    IF (@LastModified IS NULL) BEGIN SET @LastModified = ''1-1-1''; END;';
                INSERT INTO @o SELECT N'    IF ((@ProjectUID IS NULL) AND (@ResourceUID IS NULL)) BEGIN';
                INSERT INTO @o SELECT N'        EXECUTE [SOLVIN].[UpsertLazyState] @EntityObject = @EntityObject, @SiteId = @SiteId, @EntityPK = ''00000000-0000-0000-0000-000000000000'', @Count = @rowsCount, @LastModified = @LastModified;';
                INSERT INTO @o SELECT N'    END ELSE BEGIN';
                INSERT INTO @o SELECT N'        EXECUTE [SOLVIN].[UpsertLazyState] @EntityObject = @EntityObject, @SiteId = @SiteId, @EntityPK = @entityGuid, @Count = @rowsCount, @LastModified = @LastModified;';
                INSERT INTO @o SELECT N'    END;';
            END;
        END;
        INSERT INTO @o SELECT REPLACE(N'    SET @msg = CONCAT(N''#targetName#:'', @cnt, '';'', ''PsEventID:'', @eventName,''; EntityTypeName:'', @entityTypeName,''; EntityGuid:'', @entityGuid ,''; EntityName:'', @entityName,'';'');', '#targetName#', REPLACE(@srdbTableName, '''', '''''' ));
        INSERT INTO @o SELECT N'    SELECT [target] = @msg + '' Duration:''+ CAST(DATEDIFF(SECOND, @start, GETDATE()) AS NVARCHAR(20));';
        --INSERT INTO @o SELECT N'    EXECUTE [SOLVIN].[InsertLog] ''Merge'', @msg, @start, @@PROCID;';
        INSERT INTO @o SELECT N'    RETURN @cnt;';
        INSERT INTO @o SELECT N'END;';
    END;
    --
    -- DEBUG Info
    --
    /*
    SELECT * FROM @o ORDER BY rn;
    */
    --
    -- join lines in @o
    DECLARE @containsNULLLine bit =0;
    DECLARE c CURSOR
        LOCAL FORWARD_ONLY READ_ONLY
        FOR SELECT l FROM @o ORDER BY rn;
    DECLARE @l nvarchar(max);
    DECLARE @sql nvarchar(max) = N'';
    OPEN c;
    FETCH NEXT FROM c INTO @l;
    WHILE (@@fetch_status <> -1) BEGIN
        IF (@@fetch_status <> -2) BEGIN
            IF (@verbose = 1) BEGIN
                IF (@l IS NULL) BEGIN
                    PRINT N'--!!NULL!!';
                END ELSE BEGIN
                    PRINT @l;
                END;
            END;
            IF (@l IS NULL) BEGIN
                PRINT N'ERROR !!NULL!!';
                SET @verbose=1;
                SET @containsNULLLine=1;
            END ELSE BEGIN
                SET @sql = @sql+ CAST(N'
' AS NVARCHAR(MAX)) + @l;
            END;
        END
        FETCH NEXT FROM c INTO @l
    END
    CLOSE c;
    DEALLOCATE c;
    IF (@containsNULLLine = 0) BEGIN
        EXECUTE SOLVIN.UpsertSQLObjectDefinition  'MERGE', @ProcedureName, @sql, @objectgroup, 5
        --SELECT @SQL;
        -- creates a empty procedure if not already exits
        EXECUTE [SOLVIN].[CreateProcedureIfNeeded] @ProcedureName;
        -- print @sql;
        EXECUTE sys.sp_executesql @sql;
        SET @msg=N'    -- #name# was updated.';
        SET @msg=  REPLACE(
            @msg
            ,N'#name#', @ProcedureName);
        PRINT @msg;
    END ELSE BEGIN
        RAISERROR (15600,-1,-1, @ProcedureName);
    END;
/*
This procedure creates a SQL statement to define a merge.
Input parameters
    @srdbTableName: NameOf Table Or View
        --> [dbo].[MSP_EpmProject]
    @sourceName: Name OF Source
        --> [srcpjrep].[MSP_EpmProject]
    @columnsPK: Column(s) of primary key
        --> [ProjectUID]
    @columnsMatch
        --> ''
    @columnsIgnore
        --> ''
    @objectgroup: alias name for reporting objects
        --> RT_EpmProject
--> Example Reporting to dublicate Reporting tables / views:
        /* Standard-TABLES*/
            EXECUTE SOLVIN.GenerateMerge @srdbTableName = N'[dbo].[MSP_EpmProject]'                 , @sourceName = N'[dboView].[MSP_EpmProject]'                  , @columnsPK = N'' , @columnsMatch = N'' , @columnsIgnore = N'' , @columnProjectUID = 'ProjectUID',    @columnResourceUID = '',             @columnModifiedDate = N'[ProjectModifiedDate]'      , @objectgroup = N'[dbo].[MSP_EpmProject]'                ;
*/
END;
GO

EXECUTE SOLVIN.CreateProcedureIfNeeded '[SOLVIN].[GenerateMerge2]'
GO
ALTER PROCEDURE [SOLVIN].[GenerateMerge2]
    @srdbTableName nvarchar(MAX),
    @sourceName nvarchar(MAX),
    @columnsPK nvarchar(MAX) = NULL,
    @columnsMatch nvarchar(MAX) = NULL,
    @columnsIgnore nvarchar(MAX) = NULL,
    @columnProjectUID nvarchar(MAX) = NULL,
    @columnResourceUID nvarchar(MAX) = NULL,
    @columnModifiedDate nvarchar(MAX) = NULL,
    @lazyDefault bit = NULL,
    @objectgroup as nvarchar(255) = NULL
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- do not use this
    --
    SET NOCOUNT ON;

    EXECUTE [SOLVIN].[GenerateMerge]
        @srdbTableName      = @srdbTableName ,
        @sourceName         = @sourceName    ,
        @columnsPK          = @columnsPK     ,
        @columnsMatch       = @columnsMatch  ,
        @columnsIgnore      = @columnsIgnore ,
        @columnProjectUID   = @columnProjectUID,
        @columnResourceUID  = @columnResourceUID,
        @columnModifiedDate = @columnModifiedDate,
        @lazyDefault        = @lazyDefault,
        @objectgroup        = @objectgroup
        ;
END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.ExecuteSQLObjectDefinition';
GO
ALTER PROCEDURE [SOLVIN].[ExecuteSQLObjectDefinition]
(
    @ObjectType as nvarchar(50)
)
AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-17 Nadine
    -- 2017-01-19 Flori change cursors ORDER BY
    -- 2017-02-21 Flori remove @mode
    --
    DECLARE @sql as nvarchar(max);
    DECLARE @csql as nvarchar(max);
    DECLARE @cname as nvarchar(255);
    DECLARE @cobjecttype as nvarchar(50);
    DECLARE @cobjectgroup as nvarchar(255);
    DECLARE @cmodifydate as datetime2;
    DECLARE @msg as nvarchar(max);
    DECLARE @viewdef as nvarchar(max);
    DECLARE @modify_date as datetime2;
    Declare @descripton as nvarchar(max);
    Declare @schemaName as nvarchar(max);
    Declare @objectName as nvarchar(max);
    Declare @sqlObjectType as nvarchar(max);

    SET @ObjectType = NULLIF(@ObjectType, '');


    -- special object type
    DECLARE cursorExecute CURSOR
        LOCAL FORWARD_ONLY READ_ONLY
        FOR SELECT [objecttype], [objectname], [SQL], [modifydate], objectgroup
            FROM [SOLVIN].[SQLObjectDefinition]
            WHERE (@ObjectType IS NULL) OR  (objecttype LIKE @ObjectType + '%')
            ORDER BY [priority], [SerialVersion];

    OPEN cursorExecute;

    FETCH NEXT FROM cursorExecute INTO @cobjecttype, @cname, @csql, @cmodifydate, @cobjectgroup;
    WHILE (@@fetch_status <> -1) BEGIN
        Declare @objectexists as bit=0;
        SET @modify_date=NULL
        IF @cobjecttype='PK/INDEX' BEGIN
                SELECT TOP (1) @modify_date = o.modify_date
                FROM sys.all_objects as o
                INNER JOIN sys.indexes as i ON o.object_id=i.object_id
                INNER JOIN sys.schemas as s on s.schema_id=o.schema_id
                WHERE i.Name = PARSENAME (@cname,1)
                AND s.name = PARSENAME (@cname,2)

            IF (@modify_date IS NOT NULL) BEGIN
                SET @objectexists=1;
            END;
        END ELSE BEGIN
            SELECT TOP (1) @modify_date = o.modify_date
                FROM sys.all_objects as o
                WHERE o.object_id = OBJECT_ID(@cname);

            IF (@modify_date IS NOT NULL) BEGIN
                SET @objectexists=1;
            END;
        END;

        IF @objectexists = 0 BEGIN
            EXECUTE sys.sp_executesql @csql;
            SET @msg=N'    -- #name# is a new #ot#.'
            SET @msg=  REPLACE(REPLACE(
                @msg
                ,N'#name#', @cname)
                ,N'#ot#', @cobjecttype);

            print @msg;
        END ELSE BEGIN
            IF (@modify_date < @cmodifydate) BEGIN
                SET @msg=N'    -- #name# is an existing #ot# - UPDATE NEEDED.';
            END ELSE BEGIN
                SET @msg=N'    -- #name# is an existing #ot#.';
            END;
            SET @msg=  REPLACE(REPLACE(
                @msg
                ,N'#name#', @cname)
                ,N'#ot#', @cobjecttype);

            print @msg;

            IF (@modify_date < @cmodifydate) BEGIN
                EXECUTE sys.sp_executesql @csql;
                PRINT N'    -- altered.';
                --
            END;
        END	;
        IF @objectexists = 1 BEGIN
            SET @descripton = 'SolvinReporting-ObjectGroup:'+ @cobjectgroup;
            SET @schemaName = PARSENAME(@cname, 2);
            SET @objectName = PARSENAME(@cname, 1);
            SET @sqlObjectType=NULL;

            IF @cobjecttype='SYNONYM_CREATE' BEGIN
                SET @sqlObjectType='SYNONYM';
                EXECUTE SOLVIN.UpsertObjectDescription @descripton, 'SCHEMA', @schemaName, 'SYNONYM', @objectName, NULL, NULL;
            END;
            IF @cobjecttype='VIEW' BEGIN
                SET @sqlObjectType='VIEW';
                EXECUTE SOLVIN.UpsertObjectDescription @descripton, 'SCHEMA', @schemaName, 'VIEW', @objectName, NULL, NULL;
            END;
            IF @cobjecttype='TABLE' BEGIN
                SET @sqlObjectType='TABLE';
                EXECUTE SOLVIN.UpsertObjectDescription @descripton, 'SCHEMA', @schemaName, 'TABLE', @objectName, NULL, NULL;
            END;
        END;

        FETCH NEXT FROM cursorExecute INTO @cobjecttype, @cname, @csql, @cmodifydate, @cobjectgroup;
    END

    CLOSE cursorExecute;
    DEALLOCATE cursorExecute;

/** This procedure excutes all sql statements of table [SOLVIN].[SQLObjectDefinition].
Input parameter:
    @ObjectType
        - SYNONYM: executes SQL to create only synonym(s)
        - VIEW: executes SQL to create only view(s)
        - TABLE: executes SQL to create only table(s)
        - PK/INDEX: excutes SQL to create only primary key(s) and index(es) of table(s)
        - NULL / '': excutes all SQL statements
        ... of table [SOLVIN].[SQLObjectDefinition].

--> Example Reporting to dublicate Reporting tables / views:
-- 1. Create all synonymys with SP [SOLVIN].[GenerateSynonym]
    EXECUTE [SOLVIN].[ExecuteSQLObjectDefinition] 'SYNONYM'
-- 2. Create all views with SP [SOLVIN].[GenerateView]
    EXECUTE [SOLVIN].[ExecuteSQLObjectDefinition] 'VIEW'
-- 3. Create all tables with SP [SOLVIN].[GenerateTable]
    EXECUTE [SOLVIN].[ExecuteSQLObjectDefinition] 'TABLE'
-- 4. Create all table PKs / Indexes with SP [SOLVIN].[GenerateTableIndexes]
    EXECUTE [SOLVIN].[ExecuteSQLObjectDefinition] 'PK/INDEX'
-- 5. Create all merges for tables [SOLVIN].[GenerateMerge]
    EXECUTE [SOLVIN].[ExecuteSQLObjectDefinition] 'MERGE'

**/
END;

GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.UpdateSQLObjects';
GO
ALTER PROCEDURE [SOLVIN].[UpdateSQLObjects]
    @objectgroup as nvarchar(255)
AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-11 Nadine
    -- 2017-01-19 Flori change ORDER By
    --
    -- if objectgroup is null or '' --> all objects
    SET @objectgroup = NULLIF(@objectgroup, N'');

    Declare @cobjecttype as nvarchar(50);
    Declare @ccsql nvarchar(max);

    -- Cursor for SYNONYM, VIEW, TABLE, PK/INDEX, MERGE
    DECLARE cursorObjectType CURSOR
        LOCAL FORWARD_ONLY READ_ONLY
        FOR SELECT objecttype
            FROM (SELECT DISTINCT objecttype, [priority] FROM [SOLVIN].[SQLObjectGenerator]) as o
            ORDER BY
                CASE
                    WHEN objecttype = 'SYNONYM' THEN 0
                    WHEN objecttype = 'VIEW' THEN 1
                    WHEN objecttype = 'TABLE' THEN 2
                    WHEN objecttype = 'PK/INDEX' THEN 3
                    WHEN objecttype = 'MERGE' THEN 4
                    WHEN objecttype = 'PERMISSION' THEN 5
                    ELSE 100 END,
                [priority];

    OPEN cursorObjectType;

    FETCH NEXT FROM cursorObjectType INTO @cobjecttype;
    WHILE (@@fetch_status <> -1) BEGIN
        IF (@@fetch_status <> -2) BEGIN
            -- Cursor for each object group item
            DECLARE cursorSQL CURSOR
                LOCAL FORWARD_ONLY READ_ONLY
                FOR SELECT [SQL]
                    FROM [SOLVIN].[SQLObjectGenerator]
                    WHERE ([objecttype] = @cobjecttype)
                        AND (NULLIF(@objectgroup, [objectgroup]) IS NULL)
                    ORDER BY [priority],[objecttype],[objectname];

            OPEN cursorSQL;

            FETCH NEXT FROM cursorSQL INTO @ccsql;
            WHILE (@@fetch_status <> -1) BEGIN
                IF (@@fetch_status <> -2) BEGIN
                    SELECT @ccsql;
                    EXECUTE sys.sp_executesql @ccsql;
                END
                FETCH NEXT FROM cursorSQL INTO @ccsql;
            END

            -- the sql of this object type are executed - so apply them.
            EXECUTE [SOLVIN].[ExecuteSQLObjectDefinition] @cobjecttype;

            CLOSE cursorSQL;
            DEALLOCATE cursorSQL;

        END
        FETCH NEXT FROM cursorObjectType INTO @cobjecttype;
    END

    CLOSE cursorObjectType;
    DEALLOCATE cursorObjectType;

/* This procedure updates all related SQL statement of a object group if necessary.
INFO: Name of object group for tables / synonyms and views can be found in extended properties of each object.
Input parameters

    @objectgroup: alias name for reporting objects
        --> [dbo].[MSP_EpmProject_UserView]

    EXECUTE SOLVIN.UpdateSQLObjects NULL

*/

END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.UpdateAllSQLObjects';
GO
ALTER PROCEDURE [SOLVIN].[UpdateAllSQLObjects]
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-29
    --
    -- update all generate -ed objectes
    --
    SET NOCOUNT ON;
    EXECUTE [SOLVIN].[UpdateSQLObjects] '';
END;
GO

-----------------------------------------------------------
--
-- Lazy
--
-----------------------------------------------------------
/** Creates table "LazyState" **/
GO
IF (OBJECT_ID(N'SOLVIN.LazyState', N'u') IS NULL) BEGIN
    CREATE TABLE [SOLVIN].[LazyState](
        [EntityObject] [int] NOT NULL,
        [SiteId] [uniqueidentifier] NOT NULL,
        [EntityPK] [uniqueidentifier] NOT NULL,
        [Count] [int] NOT NULL,
        [LastModified] [datetime2] NOT NULL,
        [SerialVersion] [timestamp] NOT NULL,
     CONSTRAINT [PK_LazyState] PRIMARY KEY CLUSTERED ( [EntityObject] ASC, [SiteId] ASC, [EntityPK] ASC)
    ) ON [PRIMARY]
    PRINT ('    -- [SOLVIN].[LazyState] is a new table.');
END ELSE BEGIN
    PRINT ('    -- [SOLVIN].[LazyState] exists.');
END;
GO

EXECUTE SOLVIN.CreateProcedureIfNeeded '[SOLVIN].[UpsertLazyState]'
GO
ALTER PROCEDURE [SOLVIN].[UpsertLazyState]
(
    @EntityObject int,
    @SiteId uniqueidentifier,
    @EntityPK uniqueidentifier,
    @Count int,
    @LastModified datetime2
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-08-15 Flori - added for selectiv merge(2)
    --

    SET NOCOUNT ON;
    --
    IF (@EntityPK IS NULL) BEGIN SET @EntityPK = '00000000-0000-0000-0000-000000000000'; END;
    --
    IF (@EntityPK = '00000000-0000-0000-0000-000000000000') BEGIN
        WITH cteDst AS
        (
            SELECT
                 [EntityObject]
                ,[SiteId]
                ,[EntityPK]
                ,[Count]
                ,[LastModified]
                ,[SerialVersion]
            FROM [SOLVIN].[LazyState]
            WHERE
                    (EntityObject = @EntityObject)
                AND (SiteId = @SiteId)
                --AND (EntityPK = @EntityPK)
        )
        MERGE INTO cteDst as dst
            USING (SELECT
                 [EntityObject] = @EntityObject
                ,[SiteId] = @SiteId
                ,[EntityPK] = @EntityPK
                ,[Count] = @Count
                ,[LastModified] = @LastModified
            ) as src
        ON (    (dst.[EntityObject] = src.[EntityObject])
            AND (dst.[SiteId] = src.[SiteId])
            AND (dst.[EntityPK] = src.[EntityPK])
        )
        WHEN MATCHED AND (dst.[EntityPK] = '00000000-0000-0000-0000-000000000000')
            THEN UPDATE SET
                [Count] = src.[Count],
                [LastModified] = src.[LastModified]
        WHEN MATCHED AND (dst.[EntityPK] != '00000000-0000-0000-0000-000000000000')
            THEN DELETE
        WHEN NOT MATCHED BY TARGET
            THEN INSERT (
                 [EntityObject]
                ,[SiteId]
                ,[EntityPK]
                ,[Count]
                ,[LastModified]
            ) VALUES (
                @EntityObject,
                @SiteId,
                @EntityPK,
                @Count,
                @LastModified
            )
        WHEN NOT MATCHED BY SOURCE AND (dst.[EntityPK] != '00000000-0000-0000-0000-000000000000')
            THEN DELETE
        ;
        --DELETE FROM [SOLVIN].[LazyState]
        --WHERE ([EntityObject] = @EntityObject)
        --AND ([SiteId] = @SiteId)
        --AND ([EntityPK] != '00000000-0000-0000-0000-000000000000');
    END ELSE BEGIN
        WITH cteDst AS
        (
            SELECT
                 [EntityObject]
                ,[SiteId]
                ,[EntityPK]
                ,[Count]
                ,[LastModified]
                ,[SerialVersion]
            FROM [SOLVIN].[LazyState]
            WHERE
                    (EntityObject = @EntityObject)
                AND (SiteId = @SiteId)
                AND (EntityPK IN ('00000000-0000-0000-0000-000000000000', @EntityPK))
        )
        MERGE INTO cteDst as dst
            USING (
                SELECT
                     [EntityObject] = @EntityObject
                    ,[SiteId] = @SiteId
                    ,[EntityPK] = @EntityPK
                    ,[Count] = @Count
                    ,[LastModified] = @LastModified
                UNION ALL
                SELECT
                     [EntityObject] = @EntityObject
                    ,[SiteId] = @SiteId
                    ,[EntityPK] = '00000000-0000-0000-0000-000000000000'
                    ,[Count] = NULL
                    ,[LastModified] = NULL
            ) as src
        ON (    (dst.[EntityObject] = src.[EntityObject])
            AND (dst.[SiteId] = src.[SiteId])
            AND (dst.[EntityPK] = src.[EntityPK])
        )
        WHEN MATCHED AND (dst.[EntityPK] != '00000000-0000-0000-0000-000000000000')
            THEN UPDATE SET
                [Count] = src.[Count],
                [LastModified] = src.[LastModified]
        WHEN MATCHED AND (dst.[EntityPK] = '00000000-0000-0000-0000-000000000000')
            THEN DELETE
        WHEN NOT MATCHED BY TARGET AND (src.[EntityPK] != '00000000-0000-0000-0000-000000000000')
            THEN INSERT (
                 [EntityObject]
                ,[SiteId]
                ,[EntityPK]
                ,[Count]
                ,[LastModified]
            ) VALUES (
                @EntityObject,
                @SiteId,
                @EntityPK,
                @Count,
                @LastModified
            )
        ;
    END;
END;
GO

-----------------------------------------------------------
--
-- SECURITY
--
-----------------------------------------------------------
GO

IF (OBJECT_ID('[pubView].[MSP_WEB_SECURITY_GGMC]') IS NULL) BEGIN
    EXECUTE [SOLVIN].[CreateViewIfNeeded] '[pubView].[MSP_WEB_SECURITY_GGMC]';

    EXECUTE sys.sp_executesql N'ALTER VIEW [pubView].[MSP_WEB_SECURITY_GGMC]
AS
    SELECT DUMMY=1;
    /*
    SELECT
          res.RES_UID
        , res.WRES_ACCOUNT
        , grp.[WSEC_GRP_UID]
        , grp.[WSEC_GRP_GUID]
        , grp.[WSEC_GRP_NAME]
        , grp.[WSEC_GRP_DESC]
        , [Group_CREATED_DATE] = grp.[CREATED_DATE]
        , [Group_MOD_DATE] = grp.[MOD_DATE]
        , [Group_CREATED_REV_COUNTER] = grp.[CREATED_REV_COUNTER]
        , [Group_MOD_REV_COUNTER] = grp.[MOD_REV_COUNTER]
        , [Group_SerialVersion] = CAST(grp.[SerialVersion] AS BIGINT)
        , [Member_CREATED_DATE] = gm.[CREATED_DATE]
        , [Member_MOD_DATE] = gm.[MOD_DATE]
        , [Member_CREATED_REV_COUNTER] = gm.[CREATED_REV_COUNTER]
        , [Member_MOD_REV_COUNTER] = gm.[MOD_REV_COUNTER]
        , [Member_SerialVersion] = CAST(gm.[SerialVersion] AS BIGINT)
        , [Claim_SECURITY_GUID] = claim.[SECURITY_GUID]
        , [Claim_ENCODED_CLAIM] = claim.[ENCODED_CLAIM]
        , [Claim_SerialVersion] = CAST(claim.[SerialVersion] AS BIGINT)
    FROM [pub].[MSP_WEB_SECURITY_GROUPS] grp
    INNER JOIN [pub].[MSP_WEB_SECURITY_GROUP_MEMBERS] gm
        ON grp.[WSEC_GRP_GUID] = gm.[WSEC_GRP_GUID]
    INNER JOIN  [pub].[MSP_WEB_SECURITY_CLAIMS] claim
        ON gm.WRES_GUID = claim.SECURITY_GUID
    INNER JOIN [pub].[MSP_RESOURCES] res
        ON claim.[ENCODED_CLAIM] = res.WRES_CLAIMS_ACCOUNT
    ;
    */
'
END;
GO

-----------------------------------------------------------
--
-- Generator
--
-----------------------------------------------------------
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] 'SOLVIN.GeneratorModeSynonym2016'
GO
ALTER PROCEDURE SOLVIN.GeneratorModeSynonym2016
(
    @databaseName nvarchar(MAX),
    @filterName nvarchar(MAX),
    @filterType nvarchar(MAX)
)
AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-07 Flori
    --
    -- The output is TSQL statements to execute the genterateXYZ
    --
    IF (NULLIF(@filterType, N'') IS NULL) BEGIN
        SET @filterType = N'U,V';
    END;
    SET @databaseName = PARSENAME(@databaseName,1);
    DECLARE @databaseNameQ as nvarchar(max) = QUOTENAME(@databaseName);
    IF (NULLIF(@filterName, N'') IS NULL) BEGIN
        SET @filterName = N'%';
    END;
    SET @filterName = REPLACE(REPLACE(@filterName, N'[', N''), N']', N'');

    IF (OBJECT_ID('tempdb..#sys_schemas') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_schemas FROM sys.schemas; END;
    IF (OBJECT_ID('tempdb..#sys_all_objects') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_all_objects FROM sys.all_objects; END;
    EXECUTE [SOLVIN].[InsertSysTablesByObjectId] @databaseNameQ, NULL
    SELECT
        [GenerateSynonym] = CAST(N'EXECUTE [SOLVIN].[GenerateSynonym] @name=N''#synObjectNameQ#'', @for=N''#object3NameQ#'', @objectgroup=''#objectgroup#''; /* #object3NameQ# */' AS nvarchar(max))
        , [GenerateView] = CAST(N'EXECUTE [SOLVIN].[GenerateView] @srdbViewName = N''#tableObjectNameQ#'', @prjForObjectName = N''#synObjectNameQ#'', @statementAppendix = N'''', @columnsNotNull = N'''', @columnsToIgnore = N'''', @spGetViewColumnLine = N'''', @spCombine = N'''', @objectgroup = ''#objectgroup#''; /* #object3NameQ# */' AS nvarchar(max))
    INTO #templates
    ;
    SELECT
        synObjectNameQ = prjSynonymSchemaNameQ + '.' + objectNameQ
        , viewObjectNameQ = prjViewchemaNameQ + '.' + objectNameQ
        , tableObjectNameQ = srdbTableSchemaNameQ + '.' + objectNameQ
        , objectgroup = o.objectName
        , object2NameQ = o.object2NameQ
        , object3NameQ = o.object3NameQ
    INTO #filteredObjects
    FROM (
        SELECT
            i.schemaName
            , i.objectName
            , i.objectNameQ
            , i.object2NameQ
            , i.object3NameQ
            , prjSynonymschemaNameQ = QUOTENAME(i.schemaName + 'Synonym')
            , prjViewchemaNameQ = QUOTENAME(i.schemaName + 'View')
            , srdbTableSchemaNameQ = i.schemaNameMagicQ
        FROM (
            SELECT
                schemaName =s.name
                , schemaNameMagicQ = [SOLVIN].[GeneratorSchemaTranslation](s.name, s.name)
                , objectName = o.name
                , objectNameQ = QUOTENAME(o.name)
                , object2NameQ = (QUOTENAME(s.name) + N'.' + QUOTENAME(o.name))
                , object3NameQ = (@databaseNameQ + N'.' + QUOTENAME(s.name) + N'.' + QUOTENAME(o.name))
                , o.type
            FROM #sys_schemas s
            INNER JOIN #sys_all_objects o
                ON s.schema_id = o.schema_id

            WHERE (s.name <> 'sys')
                AND (o.type in (SELECT Item FROM SOLVIN.FN_split_ReportParameter(@filterType)))
                AND (EXISTS(
                    SELECT Item
                    FROM SOLVIN.FN_split_ReportParameter(@filterName)
                    WHERE ((((s.name) + N'.' + (o.name))) LIKE Item)
                ))
        ) as i
    ) as o
    ORDER BY o.object2NameQ;

    --SELECT * FROM #filteredObjects;

    SELECT
        [--name] = '/* ' + o.object2NameQ + ' */'
    FROM #filteredObjects o
    CROSS JOIN #templates t;

    SELECT
        [--GenerateSynonym] = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
            t.GenerateSynonym
            ,N'#synObjectNameQ#', o.synObjectNameQ)
            ,N'#viewObjectNameQ#', o.viewObjectNameQ)
            ,N'#tableObjectNameQ#', o.tableObjectNameQ)
            ,N'#objectgroup#', o.objectgroup)
            ,N'#object2NameQ#', o.object2NameQ)
            ,N'#object3NameQ#', o.object3NameQ)
    FROM #filteredObjects o
    CROSS JOIN #templates t;

    SELECT
        [--GenerateView] = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
            t.[GenerateView]
            ,N'#synObjectNameQ#', o.synObjectNameQ)
            ,N'#viewObjectNameQ#', o.viewObjectNameQ)
            ,N'#tableObjectNameQ#', o.tableObjectNameQ)
            ,N'#objectgroup#', o.objectgroup)
            ,N'#object2NameQ#', o.object2NameQ)
            ,N'#object3NameQ#', o.object3NameQ)
    FROM #filteredObjects o
    CROSS JOIN #templates t;

/*

EXECUTE SOLVIN.GeneratorModeSynonym2016 '[ProjectDB]', '[pjrep].[MSP_TimeByDay]',NULL

*/
END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] 'SOLVIN.GeneratorModeMirror2016'
GO
ALTER PROCEDURE [SOLVIN].[GeneratorModeMirror2016]
(
    @databaseName nvarchar(MAX),
    @filterName nvarchar(MAX),
    @filterType nvarchar(MAX)
)
AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-07 Flori
    -- 2017-10-12 Flori bugfix adding COLLATE DATABASE_DEFAULT for crazy sql admins
    --
    -- The output is TSQL statements to execute the genterateXYZ
    --
    IF (NULLIF(@filterType, N'') IS NULL) BEGIN
        SET @filterType = N'U,V';
    END;

    DECLARE @replace SOLVIN.TVP_Replace;
    IF (@databaseName IS NOT NULL) BEGIN
        INSERT INTO @replace (Match, Replacement) SELECT Match, Replacement FROM SOLVIN.GetReplacementsFromSettings();
        SET @databaseName = SOLVIN.ReplaceText(@databaseName, @replace);
        DELETE FROM @replace;
    END;

    SET @databaseName = PARSENAME(@databaseName,1);
    DECLARE @databaseNameQ as nvarchar(max) = QUOTENAME(@databaseName);
    IF (NULLIF(@filterName, N'') IS NULL) BEGIN
        SET @filterName = N'%';
    END;
    SET @filterName = REPLACE(REPLACE(@filterName, N'[', N''), N']', N'');

    --
    -- Create target reflection table
    IF (OBJECT_ID('tempdb..#sys_schemas') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_schemas FROM sys.schemas; END;
    IF (OBJECT_ID('tempdb..#sys_all_objects') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_all_objects FROM sys.all_objects; END;
    IF (OBJECT_ID('tempdb..#sys_index_columns') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_index_columns FROM sys.index_columns; END;
    IF (OBJECT_ID('tempdb..#sys_indexes') IS NULL) BEGIN SELECT TOP(0) * INTO #sys_indexes FROM sys.indexes; END;
    IF (OBJECT_ID('tempdb..#columns') IS NULL) BEGIN
        CREATE TABLE #columns (
            [object_id] int not null,
            [name] [nvarchar](128) COLLATE DATABASE_DEFAULT NULL ,
            [column_id] [int] NOT NULL,
            [is_nullable] [bit] NULL,
            [sqlexpression] [nvarchar](4000) COLLATE DATABASE_DEFAULT NULL,
            [sqlempty] [nvarchar](4000) COLLATE DATABASE_DEFAULT NULL,
            [sqltype] [nvarchar](4000) COLLATE DATABASE_DEFAULT NULL
        );
    END;
    -- fill reflection tables
    EXECUTE [SOLVIN].[InsertSysTablesByObjectId] @databaseNameQ, NULL;
    --

    -- SELECT * FROM #sys_all_objects;

    SELECT
              a_schema_id = a.schema_id
            , a_object_id = a.object_id
            , a_name      = a.name
            , b_object_id = ISNULL(b.object_id, a.object_id)
            , b_name      = ISNULL(b.name, a.name)
            , columns     = CAST(NULL as NVARCHAR(max))
            , pkcolumns   = CAST(NULL as NVARCHAR(max))
        INTO #objectColumns
        FROM #sys_schemas s
        INNER JOIN #sys_all_objects a
            ON s.schema_id = a.schema_id
        LEFT JOIN #sys_all_objects b
            ON (a.schema_id = b.schema_id)
            AND (a.name = (b.name+'_UserView'))

        WHERE (
                    (s.name <> 'sys')
                AND (a.name <> 'sysdiagrams')
                AND (a.type in (SELECT Item = Item COLLATE DATABASE_DEFAULT FROM SOLVIN.FN_split_ReportParameter(@filterType)))
                AND (EXISTS(
                    SELECT Item
                    FROM SOLVIN.FN_split_ReportParameter(@filterName)
                    WHERE ((((s.name) + N'.' + (a.name))) LIKE Item)
                ))
            );
       IF (NOT EXISTS(SELECT * FROM #objectColumns)) BEGIN
             SELECT NOTFOUND = s.name + '.' + a.name
        FROM #sys_schemas s
        INNER JOIN #sys_all_objects a
            ON s.schema_id = a.schema_id
       END;

    --  SELECT * FROM #objectColumns;
    DELETE FROM #sys_all_objects
        FROM #sys_all_objects
        LEFT JOIN #objectColumns o
            ON #sys_all_objects.object_id = o.a_object_id OR #sys_all_objects.object_id = o.b_object_id
            WHERE o.a_object_id IS NULL
    -- SELECT * FROM #objectColumns;

    IF ('region' != 'fill columns') BEGIN
        --
        SELECT objectColumns.a_object_id, rn = ROW_NUMBER() OVER (PARTITION BY objectColumns.a_object_id ORDER BY columns.column_id), name = QUOTENAME( columns.name )
            INTO #viewAllColumns
            FROM #objectColumns objectColumns
            INNER JOIN #columns columns
                ON objectColumns.a_object_id = columns.object_id
            WHERE (columns.is_nullable = 0)
            ORDER BY objectColumns.a_object_id, columns.column_id;
        --
        DECLARE @object_id int;
        DECLARE @rn INT;
        DECLARE @name nvarchar(MAX);

        DECLARE c CURSOR LOCAL READ_ONLY FORWARD_ONLY
        FOR SELECT objectColumns.a_object_id, viewAllColumns.rn, viewAllColumns.name
            FROM #objectColumns objectColumns
            INNER JOIN #viewAllColumns viewAllColumns
                ON objectColumns.a_object_id = viewAllColumns.a_object_id
            ORDER BY objectColumns.a_object_id, viewAllColumns.rn;
        OPEN c;
        FETCH NEXT FROM c INTO @object_id, @rn, @name;
        WHILE (@@fetch_status <> -1) BEGIN
            IF (@@fetch_status <> -2) BEGIN
                --
                UPDATE #objectColumns
                SET columns = ISNULL(#objectColumns.columns + ',', '') + @name
                WHERE  #objectColumns.a_object_id = @object_id
                ;
                --
            END;
            FETCH NEXT FROM c INTO @object_id, @rn, @name;
        END;
        CLOSE c;
        DEALLOCATE c;
    END;
    --
    IF ('region' != 'fill pkcolumns') BEGIN
        SELECT
            object_id = objectColumns.a_object_id,
            ic.index_column_id,
            nameQ=QUOTENAME(columns.name)
        INTO #objectpkcolumns
        FROM #objectColumns objectColumns
        INNER JOIN #columns columns
            ON objectColumns.b_object_id = columns.object_id
        INNER JOIN #sys_index_columns ic
            ON columns.object_id = ic.object_id AND columns.column_id = ic.column_id
        INNER JOIN #sys_indexes i
            ON ic.object_id = i.object_id AND ic.index_id = i.index_id
        INNER JOIN #sys_all_objects o
            ON i.object_id = o.object_id
        WHERE (i.is_primary_key = 1) AND (ic.is_included_column = 0)
        ORDER BY o.object_id, ic.index_column_id
        ;
        /*

          SELECT pk.object_id, pk.index_column_id, pk.nameQ
              FROM #objectpkcolumns pk
              ORDER BY pk.object_id, pk.index_column_id;

        */
        DECLARE c CURSOR LOCAL READ_ONLY FORWARD_ONLY
        FOR SELECT pk.object_id, pk.index_column_id, pk.nameQ
            FROM #objectpkcolumns pk
            ORDER BY pk.object_id, pk.index_column_id;
        OPEN c;
        FETCH NEXT FROM c INTO @object_id, @rn, @name;
        WHILE (@@fetch_status <> -1) BEGIN
            IF (@@fetch_status <> -2) BEGIN
                --
                UPDATE #objectColumns
                SET pkcolumns = ISNULL(#objectColumns.pkcolumns + ',', '') + @name
                WHERE  #objectColumns.a_object_id = @object_id
                ;
                --
            END;
            FETCH NEXT FROM c INTO @object_id, @rn, @name;
        END;
        CLOSE c;
        DEALLOCATE c;
    END;

    -- SELECT * FROM #objectColumns;

    SELECT
        [GenerateSynonym] = CAST(N'    EXECUTE [SOLVIN].[GenerateSynonym]
        @name=N''#synObjectNameQ#'',
        @for=N''#object3NameQ#'',
        @objectgroup=''#objectgroup#'';' AS nvarchar(max))
        , [GenerateView] = CAST(N'    EXECUTE [SOLVIN].[GenerateView]
        @srdbViewName = N''#viewObjectNameQ#'',
        @prjForObjectName = N''#synObjectNameQ#'',
        @statementAppendix = N'''',
        @columnsNotNull = N''#columnsNotNull#'',
        @columnsToIgnore = N'''',
        @spGetViewColumnLine = N'''',
        @spCombine = N'''',
        @objectgroup = ''#objectgroup#'';' AS nvarchar(max))
        , [GenerateTable] = CAST(N'    EXECUTE [SOLVIN].[GenerateTable]
        @prjObjectName = ''#viewObjectNameQ#'',
        @srdbTableName = ''#tableObjectNameQ#'',
        @objectgroup = ''#objectgroup#'';' AS nvarchar(max))
        , [GeneratePKIndex] = CAST(N'    EXECUTE [SOLVIN].[GenerateTableIndexes]
        @prjObjectName = ''#synObjectNameQ#'',
        @srdbTableName = ''#tableObjectNameQ#'',
        @DeleteSiteId = ''1'',
        @objectgroup = ''#objectgroup#'';' AS nvarchar(max))
        , [GenerateMerge] = CAST(N'    EXECUTE [SOLVIN].[GenerateMerge]
        @srdbTableName = ''#tableObjectNameQ#'',
        @sourceName = ''#viewObjectNameQ#'',
        @columnsPK = ''#pkcolumns#'',
        @columnsMatch = '''',
        @columnsIgnore = '''',
        @objectgroup = ''#objectgroup#'';' AS nvarchar(max))
    INTO #templates
    ;
    CREATE TABLE #filteredObjects (
          RowId INT IDENTITY(1,1)
        , synObjectNameQ    nvarchar(max)
        , viewObjectNameQ   nvarchar(max)
        , tableObjectNameQ  nvarchar(max)
        , objectgroup       nvarchar(max)
        , object2NameQ      nvarchar(max)
        , object3NameQ      nvarchar(max)
        , PROJ_UID_NameQ    nvarchar(max)
        , columnsNotNull    nvarchar(max)
        , pkcolumns         nvarchar(max)
    );

    INSERT INTO #filteredObjects (
          synObjectNameQ
        , viewObjectNameQ
        , tableObjectNameQ
        , objectgroup
        , object2NameQ
        , object3NameQ
        , PROJ_UID_NameQ
        , columnsNotNull
        , pkcolumns
    )
    SELECT
          synObjectNameQ   = CAST(prjSynonymSchemaNameQ + '.' + objectNameQ AS nvarchar(max))
        , viewObjectNameQ  = CAST(prjViewchemaNameQ + '.' + objectNameQ AS nvarchar(max))
        , tableObjectNameQ = CAST(srdbTableSchemaNameQ + '.' + objectNameQ AS nvarchar(max))
        , objectgroup      = CAST(o.objectName AS nvarchar(max))
        , object2NameQ     = CAST(o.object2NameQ AS nvarchar(max))
        , object3NameQ     = CAST(o.object3NameQ AS nvarchar(max))
        , PROJ_UID_NameQ   = CAST(o.PROJ_UID_NameQ AS nvarchar(max))
        , columnsNotNull   = CAST(o.columnsNotNull AS nvarchar(max))
        , pkcolumns        = CAST(o.pkcolumns AS nvarchar(max))
    FROM (
        SELECT
              i.schemaName
            , i.objectName
            , i.objectNameQ
            , i.object2NameQ
            , i.object3NameQ
            , prjSynonymschemaNameQ = QUOTENAME(i.schemaNameMagic+'Synonym')
            , prjViewchemaNameQ = QUOTENAME(i.schemaNameMagic+'View')
            , srdbTableSchemaNameQ = QUOTENAME(i.schemaNameMagic)
            , PROJ_UID_NameQ = QUOTENAME(PROJ_UID_Name)
            , columnsNotNull = ISNULL(columnsNotNull, '')
            , pkcolumns = ISNULL(pkcolumns, '')
        FROM (
            SELECT
                  schemaName = s.name
                , schemaNameMagic = PARSENAME([SOLVIN].[GeneratorSchemaTranslation](s.name, s.name),1)
                , objectName = o.name
                , objectNameQ = QUOTENAME(o.name)
                , object2NameQ = (QUOTENAME(s.name) + N'.' + QUOTENAME(o.name))
                , object3NameQ = (@databaseNameQ + N'.' + QUOTENAME(s.name) + N'.' + QUOTENAME(o.name))
                , o.type
                , PROJ_UID_Name = (SELECT TOP (1) [name] FROM #columns c WHERE (c.[name] IN ('PROJ_UID', 'ProjectUid')))
                , columnsNotNull = objectColumns.columns
                , pkcolumns = objectColumns.pkcolumns
            FROM #sys_schemas s
            INNER JOIN #sys_all_objects o
                ON s.schema_id = o.schema_id
            INNER JOIN #objectColumns objectColumns
                ON o.object_id = objectColumns.a_object_id
        ) as i
    ) as o
    ORDER BY o.object2NameQ;

    -- SELECT * FROM #filteredObjects;

    DECLARE  @multiReplace [SOLVIN].[TVP_MultiReplace];
    INSERT INTO @multiReplace (RowId, Match, Replacement)
        SELECT u.RowId, '#'+u.Match+'#', u.Replacement
        FROM
        (
            SELECT TOP 100 PERCENT
                  o.RowId
                , o.synObjectNameQ
                , o.viewObjectNameQ
                , o.tableObjectNameQ
                , o.objectgroup
                , o.object2NameQ
                , o.object3NameQ
                , o.PROJ_UID_NameQ
                , o.columnsNotNull
                , o.pkcolumns
            FROM #filteredObjects o
            ORDER BY o.RowId
        ) as p
        UNPIVOT
        ( Replacement FOR Match IN (
                  synObjectNameQ
                , viewObjectNameQ
                , tableObjectNameQ
                , objectgroup
                , object2NameQ
                , object3NameQ
                , PROJ_UID_NameQ
                , columnsNotNull
                , pkcolumns
        ) ) as u
        ;

    SELECT
            [--name] = '/* ' + o.object2NameQ + ' */'
        FROM #filteredObjects o
        ORDER BY o.RowId
        ;

    SELECT
            [--GenerateSynonym] = mr.ReplacedText
        FROM #templates t
        CROSS APPLY [SOLVIN].[MultiReplaceText](t.GenerateSynonym, @replace, @multiReplace) as mr
        ORDER BY mr.RowId
        ;

    SELECT
            [--GenerateView] = mr.ReplacedText
        FROM #templates t
        CROSS APPLY [SOLVIN].[MultiReplaceText](t.[GenerateView], @replace, @multiReplace) as mr
        ORDER BY mr.RowId
        ;

    SELECT
            [--GenerateTable] = mr.ReplacedText
        FROM #templates t
        CROSS APPLY [SOLVIN].[MultiReplaceText](t.[GenerateTable], @replace, @multiReplace) as mr
        ORDER BY mr.RowId
        ;

    SELECT
            [--GeneratePKIndex] = mr.ReplacedText
        FROM #templates t
        CROSS APPLY [SOLVIN].[MultiReplaceText](t.[GeneratePKIndex], @replace, @multiReplace) as mr
        ORDER BY mr.RowId
        ;

    SELECT
            [--GenerateMerge] = mr.ReplacedText
        FROM #templates t
        CROSS APPLY [SOLVIN].[MultiReplaceText](t.[GenerateMerge], @replace, @multiReplace) as mr
        ORDER BY mr.RowId
        ;


/*
    EXECUTE SOLVIN.GeneratorModeMirror2016 '[pwadeDB]', '[pjrep].%MSP_%PROJECT%',NULL
    EXECUTE SOLVIN.GeneratorModeMirror2016 '[pwadeDB]', '[pjrep].%[MSP_TimeByDay]',NULL
    EXECUTE SOLVIN.GeneratorModeMirror2016 '[pwadeDB]', 'dbo.MSP_EpmAssignment_UserView,dbo.MSP_EpmAssignment',NULL
*/
END;
GO

-----------------------------------------------------------
--
-- RollOut
--
-----------------------------------------------------------
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.RollOutReportTables';
--
-- DO NOT OVERWRITE the customers one !!
--
GO

-----------------------------------------------------------
--
-- SOLVIN Reporting Database Part II
--
-----------------------------------------------------------
-- Version History:
-- 2016-01-14 - Flori : adding log
-- 2017-01-26 - Flori : tune Smart Depoly
-- 2017-01-30 - Flori : add OnProjectServerEventHandler
-- 2017-01-30 - Flori : adding SOLVIN.AddProjectServerEventHandler
-- 2017-02-04 - Flori : enhanced OnProjectServerEventHandler
-- 2017-02-04 - Flori : adding OnProjectPublished
-- 2017-02-04 - NK    : rename OnProjectPublished to SyncAllByMerges
-- 2017-09-17 - Flori : add SOLVIN.UtilityContent
-- 2017-12-14 - Flori : add [SOLVIN].[UtilitySettingInsertDefault]
-- 2017-12-17 - Flori : add [SOLVIN].[FN_GetParameter]
--

EXECUTE SOLVIN.SettingInsertDefault 'UtilityRequestDelete-DaysUntilDelete-Waiting', '-33'
EXECUTE SOLVIN.SettingInsertDefault 'UtilityRequestDelete-DaysUntilDelete-Finished', '-66'

---------------------------------------
--
-- ProjectServerEvent
--
---------------------------------------

IF (OBJECT_ID(N'SOLVIN.OnProjectServerEventHandler', N'u') IS NULL) BEGIN
    CREATE TABLE [SOLVIN].[OnProjectServerEventHandler](
        [EventName] varchar(64) NOT NULL,
        [Order] int NOT NULL,
        [EventHandlerSP] nvarchar(517) NOT NULL,
        [RowVersion] timestamp NOT NULL,
     CONSTRAINT [PK_SOLVIN_OnProjectServerEventHandler] PRIMARY KEY CLUSTERED
    (
        [EventName] ASC,
        [Order] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY]
END;
GO
EXECUTE [SOLVIN].[CreateProcedureIfNeeded] 'SOLVIN.AddProjectServerEventHandler'
GO
ALTER PROCEDURE SOLVIN.AddProjectServerEventHandler
(
    @EventName varchar(64),
    @Order int,
    @EventHandlerSP nvarchar(517)
)
AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-30 Flori
    -- 2017-09-28 Flori add set
    --
    -- Add a Route Event to stored procedure.
    --
    IF (NULLIF(@EventName, '') IS NULL) BEGIN
        PRINT '@EventName is NULL';
    END ELSE IF (NULLIF(@EventHandlerSP, '') IS NULL) BEGIN
        PRINT '@EventHandlerSP is NULL';
    END ELSE BEGIN
        DECLARE @notFound as nvarchar(517);
        SELECT TOP (1) @notFound = Item FROM (
            SELECT Item = LTRIM(rtrim(Item))
            FROM SOLVIN.FN_split_by(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@EventHandlerSP, CHAR(9), ' '), CHAR(10), ';'), CHAR(13), ';'), '{', ';'), '}', ';'), '--sequential', ';'), '--parallel', ';'), '--Lazy=0', ';'), '--Lazy=1', ';'), ';')
            WHERE (NULLIF(LTRIM(rtrim(Item)), '') IS NOT NULL)
        ) as splitted
        WHERE OBJECT_ID(Item, 'P') IS NULL
        IF (@notFound IS NOT NULL) BEGIN
            PRINT 'Eventhandler Procedure '+@notFound+' does not exists.'
        END ELSE BEGIN
            PRINT 'Eventhandler Procedure '+@EventName+' exists.'

            IF (EXISTS(
                    SELECT 1
                    FROM [SOLVIN].[OnProjectServerEventHandler]
                    WHERE @EventName=[EventName] AND @EventHandlerSP=[EventHandlerSP] )) BEGIN
                PRINT 'Eventhandler already registered.'
            END ELSE IF (EXISTS(
                    SELECT 1
                    FROM [SOLVIN].[OnProjectServerEventHandler]
                    WHERE @EventName=[EventName] AND @Order=[Order] )) BEGIN
                UPDATE [SOLVIN].[OnProjectServerEventHandler]
                    SET [EventHandlerSP] = @EventHandlerSP
                    WHERE @EventName=[EventName] AND @Order=[Order]
                    ;
                PRINT 'Eventhandler updated.'
            END ELSE BEGIN
                IF (@Order IS NULL) BEGIN
                    SELECT @ORDER = MAX([Order]) FROM [SOLVIN].[OnProjectServerEventHandler] WHERE @EventName=[EventName];
                    SET @Order = ISNULL(@Order, 0) + 1;

                END ELSE BEGIN
                    WHILE (EXISTS(SELECT 1
                            FROM [SOLVIN].[OnProjectServerEventHandler]
                            WHERE @EventName=[EventName] AND @Order=[Order])) BEGIN
                        SET @Order = @Order + 1;
                    END;
                END;
                INSERT INTO [SOLVIN].[OnProjectServerEventHandler]
                    ([EventName], [Order], [EventHandlerSP])
                VALUES
                    (@EventName, @Order, @EventHandlerSP);
                PRINT 'Eventhandler newly registered.'
            END;
        END;
    END;


/** SOLVIN.OnProjectServerEvent is called from the ProjectServerEvent via the Service Application.
-- [SOLVIN].[OnProjectServerEventHandler] is checked
-- the wired EventHandler - SP will be called
--
-- use SOLVIN.AddProjectServerEventHandler to wire a event
--
-- the prototyp of the EventHandlerSP is the same this (same parameters as this SP).

EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ProjectAdded', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ProjectActivityUpgraded', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ProjectEntitiesDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ProjectSaveFailed', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ProjectPublishing', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ProjectSummaryPublishing', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ProjectSyncedProjectEnterpriseEntities', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ProjectUpdated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ProjectUpdatingScheduledProject', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ProjectCheckIn', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ProjectCreated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ProjectDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ProjectSummaryPublished', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ProjectPublished', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ProjectSaved', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ProjectUpdatedPwaProject', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ProjectWssWorkspaceAddressDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ProjectWssWorkspaceAddressUpdated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingCommittedSolutionDecisionChanged', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingCustomFieldChanged', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingCustomFieldCreated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingCustomFieldDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingEnterpriseProjectTypeDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingEnterpriseProjectTypeUpdated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingFiscalPeriodChanged', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingFiscalPeriodDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingLookupTableChanged', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingLookupTableCreated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingLookupTableDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingProjectChanged', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingProjectCreated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingProjectDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingProjectSummaryChanged', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingProjectWorkflowInformationChanged', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingProjectWorkspaceChanged', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingProjectWorkspaceCreated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingProjectWorkspaceDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingResourceCapacitiesChanged', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingResourceCapacityTimeRangeChanged', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingResourceChanged', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingResourceCreated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingResourceDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingTimesheetAdjusted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingTimesheetClassChanged', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingTimesheetDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingTimesheetPeriodChanged', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingTimesheetPeriodCreated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingTimesheetPeriodDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingTimesheetProjectAggregated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingTimesheetSaved', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingTimesheetStatusChanged', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingUserViewChanged', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingWorkflowPhaseDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingWorkflowPhaseUpdated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingWorkflowStageDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ReportingWorkflowStageUpdated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ResourceActivated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ResourceChanged', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ResourceCheckedIn', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ResourceCheckedOut', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ResourceCreated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ResourceDeactivated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ResourceDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ResourceActivating', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ResourceCheckingIn', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ResourceCheckingOut', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ResourceDeactivating', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ResourceDeleting', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'CustomFieldsCheckedIn', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'CustomFieldsCheckedOut', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'CustomFieldsCreated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'CustomFieldsDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'CustomFieldsUpdated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'SecurityCategoryCreated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'SecurityCategoryDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'SecurityCategoryUpdated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'SecurityGroupCreated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'SecurityGroupDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'SecurityGroupUpdated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'SecurityOrganizationalPermissionsUpdated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'SecurityCategoryCreated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'SecurityCategoryDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'SecurityTemplateCreated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'SecurityTemplateUpdated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'SecurityTemplateDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'StatusingApplied', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'StatusingApprovalsUpdated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'StatusingAssignmentDelegated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'StatusingAssignmentDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'StatusingAssignmentWorkDataSet', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'StatusingHistoryDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'StatusingStatusSubmitted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'StatusingStatusUpdated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'StatusingTaskCreated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'TimesheetCreated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'TimesheetDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'TimesheetLineApproved', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'TimesheetRecalled', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'TimesheetReviewed', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'TimesheetSubmitted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'TimesheetUpdated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'UserDelegationActivated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'UserDelegationChanged', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'UserDelegationCreated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'UserDelegationDeactivated', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'UserDelegationDeleted', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';
EXECUTE [SOLVIN].[AddProjectServerEventHandler]	@EventName = 'ResourcePlanResourcePlanPublished', @Order =1, @EventHandlerSP = '[SOLVIN].[SyncAllByMerges]';


*/
END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] 'SOLVIN.GetOnProjectServerEventHandler';
GO

ALTER PROCEDURE [SOLVIN].[GetOnProjectServerEventHandler]
(
    @eventName varchar(255)
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-09-17 Flori
    --

    SELECT
          [EventName]
        , [Order]
        , [EventHandlerSP]
        , [RowVersion]
    FROM [SOLVIN].[OnProjectServerEventHandler]
    WHERE [EventName] = @eventName
    ORDER BY [Order]
    ;
END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.OnProjectServerEvent';
GO

ALTER PROCEDURE SOLVIN.OnProjectServerEvent
(
    @eventName varchar(255),
    @siteId uniqueidentifier,
    @userId uniqueidentifier,
    @userName nvarchar(255),
    @entityTypeName varchar(32),
    @entityGuid uniqueidentifier,
    @entityName nvarchar(255),
    @eventArgs nvarchar(max)
)
AS
BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-14 Flori
    --
    -- Route Event
    --
    -- use SOLVIN.AddProjectServerEventHandler to wire a event
    --
    DECLARE @verbose int = 1;
    DECLARE @msg nvarchar(max);
    EXECUTE SOLVIN.LimitLog;
    SET @msg = CONCAT(N'method:', @eventName, N'; siteId:',  @siteId, N'; userName:', @userName, N'; ', @entityGuid, N'; projectGuid');
    IF (@verbose = 1) BEGIN	PRINT @msg;	END;
    EXECUTE SOLVIN.InsertLog 'SOLVIN.OnProjectServerEvent', @msg;
    --
    DECLARE spCursor CURSOR
        LOCAL READ_ONLY
        FOR SELECT [EventHandlerSP] FROM [SOLVIN].[OnProjectServerEventHandler] WHERE @eventName = [EventName] ORDER BY [Order];
    DECLARE @EventHandlerSP nvarchar(517);
    OPEN spCursor;

    FETCH NEXT FROM spCursor INTO @EventHandlerSP;
    WHILE (@@fetch_status <> -1)
    BEGIN
        IF (OBJECT_ID(@EventHandlerSP) IS NOT NULL) BEGIN
            --
            SET @msg  = REPLACE(N'EventHandlerSP calling #EventHandlerSP#.',N'#EventHandlerSP#', @EventHandlerSP);
            IF (@verbose = 1) BEGIN	PRINT @msg;	END;
            EXECUTE SOLVIN.InsertLog 'SOLVIN.OnProjectServerEvent', @msg;
            --
            DECLARE @stmt nvarchar(max);
            SET @stmt = N'EXECUTE #EventHandlerSP#
                  @eventName       = @eventName
                , @siteId        = @siteId
                , @userId        = @userId
                , @userName        = @userName
                , @entityTypeName = @entityTypeName
                , @entityGuid     = @entityGuid
                , @entityName     = @entityName
                , @eventArgs       = @eventArgs
                ';
            SET @stmt = REPLACE(@stmt, N'#EventHandlerSP#', @EventHandlerSP);
            IF (@verbose = 2) BEGIN	PRINT @stmt;	END;

            EXECUTE sys.sp_executesql @stmt,N'
                @eventName       varchar(255),
                @siteId        uniqueidentifier,
                @userId        uniqueidentifier,
                @userName        nvarchar(255),
                @entityTypeName varchar(32),
                @entityGuid     uniqueidentifier,
                @entityName     nvarchar(255),
                @eventArgs       nvarchar(max)
                ',
                  @eventName       = @eventName
                , @siteId        = @siteId
                , @userId        = @userId
                , @userName        = @userName
                , @entityGuid     = @entityGuid
                , @entityTypeName = @entityTypeName
                , @entityName     = @entityName
                , @eventArgs       = @eventArgs
                ;
            --
        END ELSE BEGIN
            --
            SET @msg  = REPLACE(N'EventHandlerSP #EventHandlerSP# does not exists.',N'#EventHandlerSP#', @EventHandlerSP);
            IF (@verbose = 1) BEGIN	PRINT @msg;	END;
            EXECUTE SOLVIN.InsertLog 'SOLVIN.OnProjectServerEvent', @msg;
            --
        END;
        FETCH NEXT FROM spCursor INTO @EventHandlerSP;
    END;

    CLOSE spCursor;
    DEALLOCATE spCursor;
/** SOLVIN.OnProjectServerEvent is called from the ProjectServerEvent via the Service Application.
-- [SOLVIN].[OnProjectServerEventHandler] is checked
-- the wired EventHandler - SP will be called
--
-- use SOLVIN.AddProjectServerEventHandler to wire a event
--
-- the prototyp of the EventHandlerSP is the same this (same parameters as this SP).
--
-- helper for merge:
-----------------------
SELECT REPLACE(N'EXECUTE #name#;', N'#name#', QUOTENAME(s.name) + N'.' + QUOTENAME(p.name))
FROM sys.schemas s INNER JOIN sys.procedures p on s.schema_id=p.schema_id
WHERE p.name LIKE 'MERGE_%' ORDER BY p.name;

-- helper for test:
-----------------------
EXECUTE [SOLVIN].[OnProjectServerEvent] 'ReportingProjectChanged', NULL, NULL, NULL, NULL, NULL, NULL
*/
END;
GO

EXECUTE SOLVIN.CreateProcedureIfNeeded 'SOLVIN.GenerateMergeExecute';
GO
ALTER PROCEDURE SOLVIN.GenerateMergeExecute
AS
BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-09-17 Flori
    --
    SELECT REPLACE(N'    EXECUTE @cnt = #name#  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;
        SET @sum = @sum + @cnt;', N'#name#', QUOTENAME(s.name) + N'.' + QUOTENAME(p.name))
    FROM sys.schemas s INNER JOIN sys.procedures p on s.schema_id=p.schema_id
    WHERE p.name LIKE 'MERGE_%' ORDER BY p.name;
END;
GO

IF (OBJECT_ID('[SOLVIN].[SyncAllByMerges]') IS NULL) BEGIN
    PRINT '    -- [SOLVIN].[SyncAllByMerges] is created.'
    EXEC sys.sp_executesql N'
CREATE PROCEDURE [SOLVIN].[SyncAllByMerges]

(
    @eventName varchar(255) = NULL,
    @siteId uniqueidentifier = NULL,
    @userId uniqueidentifier = NULL,
    @userName nvarchar(255) = NULL,
    @entityTypeName nvarchar(32) = NULL,
    @entityGuid uniqueidentifier = NULL,
    @entityName nvarchar(255) = NULL,
    @eventArgs nvarchar(max) = NULL,
    @Lazy bit = NULL
)
AS
BEGIN
    SET NOCOUNT ON;
    --
    DECLARE @cnt AS INT;
    DECLARE @sum AS INT = 0;
    -- optional
    -- SET @Lazy = 0

    --
    /*

    1) Exceute this to get a list of all existing Merges:
        EXECUTE SOLVIN.GenerateMergeExecute;

    2) Execute this to add the Prozedure [SOLVIN].[SyncAllByMerges] to the sync (see table [SOLVIN].[OnProjectServerEventHandler]):
        see [SOLVIN].[AddProjectServerEventHandler]

    */

    -- Add here all prozedures to be executed to update / sync data (get the list from 1)):

    IF ((@entityTypeName != ''Project'') AND (@entityTypeName != ''Resource'')) BEGIN
        SET @entityTypeName = NULL;
    END;

    IF (@entityTypeName IS NULL) BEGIN
        EXECUTE @cnt = [dbo].[MergeMSP_TimeByDay]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
    END;
    IF (NULLIF(@entityTypeName, ''Resource'') IS NULL) BEGIN
        EXECUTE @cnt = [dbo].[MergeMSP_EpmResource]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [dbo].[MergeMSP_EpmResource_UserView]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [dbo].[MergeMSP_EpmResourceByDay]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
    END;

    IF (NULLIF(@entityTypeName, ''Project'') IS NULL) BEGIN
        EXECUTE @cnt = [dbo].[MergeMSP_EpmProject]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [dbo].[MergeMSP_EpmProject_UserView]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [dbo].[MergeMSP_EpmTask]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [dbo].[MergeMSP_EpmTask_UserView]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [dbo].[MergeMSP_EpmAssignment]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [dbo].[MergeMSP_EpmAssignment_UserView]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [dbo].[MergeMSP_EpmAssignmentByDay]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
    END;

    IF (NULLIF(@entityTypeName, ''Resource'') IS NULL) BEGIN
        EXECUTE @cnt = [pub].[MergeMSP_RESOURCES]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [pub].[MergeMSP_WEB_SECURITY_CLAIMS]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [pub].[MergeMSP_WEB_SECURITY_GROUP_MEMBERS]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [pub].[MergeMSP_WEB_SECURITY_GROUPS]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
    END;
    --
    RETURN @sum;
/*
    -- all
    DECLARE @sum AS INT = 0;
    EXECUTE @sum = [SOLVIN].[SyncAllByMerges];
    SELECT sum=@sum;

    -- project selectiv
    DECLARE @sum AS INT = 0;
    EXECUTE @sum = [SOLVIN].[SyncAllByMerges] @entityTypeName=''Project'', @entityGuid=''replace this'';
    SELECT sum=@sum;

    -- resource selectiv
    DECLARE @sum AS INT = 0;
    EXECUTE @sum = [SOLVIN].[SyncAllByMerges] @entityTypeName=''Resource'', @entityGuid=''replace this'';
    SELECT sum=@sum;


*/
END;
    ';
END;
GO
EXECUTE [SOLVIN].[GrantPermission] N'[SOLVIN].[SyncAllByMerges]';
GO
EXECUTE SOLVIN.CreateProcedureIfNeeded '[SOLVIN].[SyncAllByMergesTemplate]'
GO
ALTER PROCEDURE [SOLVIN].[SyncAllByMergesTemplate]

(
    @eventName varchar(255) = NULL,
    @siteId uniqueidentifier = NULL,
    @userId uniqueidentifier = NULL,
    @userName nvarchar(255) = NULL,
    @entityTypeName nvarchar(32) = NULL,
    @entityGuid uniqueidentifier = NULL,
    @entityName nvarchar(255) = NULL,
    @eventArgs nvarchar(max) = NULL,
    @Lazy bit = NULL
)
AS
BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-11-09 Flori
    --
    -- a template for SyncAllByMerges
    -- SyncAllByMerges will NOT be updated from the service.
    -- SyncAllByMergesTemplate WILL be updated from the service.
    --
    DECLARE @cnt AS INT;
    DECLARE @sum AS INT = 0;
    -- optional
    -- SET @Lazy = 0

    /*

    1) Exceute this to get a list of all existing Merges:
        EXECUTE SOLVIN.GenerateMergeExecute;

    2) Execute this to add the Prozedure [SOLVIN].[SyncAllByMerges] to the sync (see table [SOLVIN].[OnProjectServerEventHandler]):
        see [SOLVIN].[AddProjectServerEventHandler]

    */

    -- Add here all prozedures to be executed to update / sync data (get the list from 1)):

    IF ((@entityTypeName != 'Project') AND (@entityTypeName != 'Resource')) BEGIN
        SET @entityTypeName = NULL;
    END;

    IF (@entityTypeName IS NULL) BEGIN
        EXECUTE @cnt = [dbo].[MergeMSP_TimeByDay]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
    END;
    IF (NULLIF(@entityTypeName, 'Resource') IS NULL) BEGIN
        EXECUTE @cnt = [dbo].[MergeMSP_EpmResource]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [dbo].[MergeMSP_EpmResource_UserView]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [dbo].[MergeMSP_EpmResourceByDay]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
    END;

    IF (NULLIF(@entityTypeName, 'Project') IS NULL) BEGIN
        EXECUTE @cnt = [dbo].[MergeMSP_EpmProject]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [dbo].[MergeMSP_EpmProject_UserView]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [dbo].[MergeMSP_EpmTask]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [dbo].[MergeMSP_EpmTask_UserView]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [dbo].[MergeMSP_EpmAssignment]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [dbo].[MergeMSP_EpmAssignment_UserView]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [dbo].[MergeMSP_EpmAssignmentByDay]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
    END;

    IF (NULLIF(@entityTypeName, 'Resource') IS NULL) BEGIN
        EXECUTE @cnt = [pub].[MergeMSP_RESOURCES]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [pub].[MergeMSP_WEB_SECURITY_CLAIMS]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [pub].[MergeMSP_WEB_SECURITY_GROUP_MEMBERS]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
        EXECUTE @cnt = [pub].[MergeMSP_WEB_SECURITY_GROUPS]  @SiteId=@SiteId, @entityGuid=@entityGuid, @entityTypeName=@entityTypeName, @Lazy=@Lazy;          SET @sum = @sum + @cnt;
    END;
    --
    RETURN @sum;
/*
    -- all
    DECLARE @sum AS INT = 0;
    EXECUTE @sum = [SOLVIN].[SyncAllByMerges];
    SELECT sum=@sum;

    -- project selectiv
    DECLARE @sum AS INT = 0;
    EXECUTE @sum = [SOLVIN].[SyncAllByMerges] @entityTypeName='Project', @entityGuid='replace this';
    SELECT sum=@sum;

    -- resource selectiv
    DECLARE @sum AS INT = 0;
    EXECUTE @sum = [SOLVIN].[SyncAllByMerges] @entityTypeName='Resource', @entityGuid='replace this';
    SELECT sum=@sum;


*/
END;
GO
---------------------------------------
--
-- SmartDeploy
--
---------------------------------------
IF (OBJECT_ID(N'[SOLVIN].[SmartDeploy]', N'u') IS NOT NULL) BEGIN
    IF (NOT EXISTS(SELECT * FROM sys.all_columns WHERE object_id = OBJECT_ID('[SOLVIN].[SmartDeploy]') and [name]='username')) BEGIN
        DROP TABLE [SOLVIN].[SmartDeploy];
    END;
END;
GO
IF (OBJECT_ID(N'[SOLVIN].[SmartDeploy]', N'u') IS NULL) BEGIN
    CREATE TABLE [SOLVIN].[SmartDeploy](
        id int IDENTITY(1,1) NOT NULL,
        sqlindex int not null,
        sqlcontent nvarchar(max) NOT NULL,
        username nvarchar(max) NOT NULL,
        createdate datetime2 NOT NULL
    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];
    ALTER TABLE [SOLVIN].[SmartDeploy] ADD  CONSTRAINT [DF_SmartDeploy_createdate]  DEFAULT (getdate()) FOR [createdate];
END;
GO
IF (OBJECT_ID('SOLVIN.SmartDeployUser') IS NULL) BEGIN
    PRINT '      -- Create Table SOLVIN.SmartDeployUser';
    EXEC sys.sp_executesql N'
CREATE TABLE SOLVIN.SmartDeployUser
    (
    Username nvarchar(255) NOT NULL,
    createdate datetime2(7) NOT NULL,
    SerialVersion timestamp NOT NULL
    )  ON [PRIMARY];
';
    EXEC sys.sp_executesql N'
ALTER TABLE SOLVIN.SmartDeployUser ADD CONSTRAINT
    DF_SmartDeployUser_createdate DEFAULT (getdate()) FOR createdate
';
    EXEC sys.sp_executesql N'
ALTER TABLE SOLVIN.SmartDeployUser ADD CONSTRAINT
    PK_SmartDeployUser PRIMARY KEY CLUSTERED
    (
    Username
    ) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
';
END;
GO
EXECUTE [SOLVIN].[CreateScalarValuedFunctionIfNeeded] 'SOLVIN.IsSmartDeployUser'
GO
EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.SQLSmartDeployStart';
GO
EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.SQLSmartDeployBatch';
GO
EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.SQLSmartDeployFinish';
GO

ALTER FUNCTION [SOLVIN].[IsSmartDeployUser]
(
    @Username as nvarchar(255)
)
RETURNS bit AS
BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-09 Flori
    --
    -- Check username exists in [SmartDeployUser].
    --
RETURN CASE
    WHEN (EXISTS(
            SELECT u.Username
            FROM [SOLVIN].[SmartDeployUser] as u
            WHERE (@Username = u.Username)))
        THEN CAST(1 as bit)
    WHEN (@Username = 'SmartDeploy:Administrator')
        THEN CAST(1 as bit)
    WHEN (EXISTS(
            SELECT dp.name
              FROM sys.database_role_members AS m
              INNER JOIN sys.database_principals AS dp
              ON m.role_principal_id = dp.principal_id
              INNER JOIN sys.database_principals AS u
              ON u.principal_id = m.member_principal_id
              WHERE (u.name IN (
                  SELECT dp.name
                  FROM sys.database_principals AS dp
                  INNER JOIN sys.server_principals AS s
                  ON dp.sid = s.sid
                  WHERE (s.name = (SELECT login_name FROM sys.dm_exec_sessions WHERE session_id = @@SPID)))
                  )
            AND (dp.name IN ('db_owner', 'SmartDepoly'))))
        THEN CAST(1 as bit)
    ELSE CAST(0 as bit)
    END
    ;
END;
GO
ALTER PROCEDURE SOLVIN.SQLSmartDeployStart
(
    @username as NVARCHAR(255),
    @takeSnapshot as bit,
    @createdate as datetime2
)
AS
BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-14 Flori
    -- 2017-02-09 Flori security
    --
    -- Start Smart Deploy
    --
    DECLARE @msg nvarchar(max);
    IF ([SOLVIN].[IsSmartDeployUser](@username) = 1) BEGIN
        EXECUTE SOLVIN.LimitLog;
        SET @msg = CONCAT(N'Allowed @username:', @username, N'; @createdate:',  @createdate);
        EXECUTE SOLVIN.InsertLog 'SOLVIN.SQLSmartDeployStart', @msg;
        --
        IF (@takeSnapshot = 1) BEGIN
            DECLARE @SnapshotName nvarchar(400) = N'SmartDeploy start #UserName# at #createdate#';
            SET  @SnapshotName = REPLACE(@SnapshotName, N'#UserName#', @username);
            SET  @SnapshotName = REPLACE(@SnapshotName, N'#createdate#', @createdate);
            EXECUTE [SOLVIN].[CreateSnapshot] @SnapshotName = @SnapshotName;
        END;
        --
        RETURN 0;
        --
    END ELSE BEGIN
        --
        SET @msg = CONCAT(N'NOT allowed @username:', @username, N'; @createdate:',  @createdate);
        EXECUTE SOLVIN.InsertLog 'SOLVIN.SQLSmartDeployStart', @msg;
        --
        RETURN 1;
        --
    END;
END;
GO
ALTER PROCEDURE SOLVIN.SQLSmartDeployBatch
(
    @sqlindex as int,
    @sqlcontent AS NVARCHAR(MAX),
    @username as NVARCHAR(255),
    @createdate as datetime2
)
AS
BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-14 Flori
    --
    -- Smart Deploy  -- needs improvement
    --
    DECLARE @msg nvarchar(max);
    IF ([SOLVIN].[IsSmartDeployUser](@username) = 1) BEGIN
        IF (NULLIF(LTRIM(RTRIM(@sqlcontent)), '') IS NOT NULL) BEGIN
            INSERT INTO [SOLVIN].[SmartDeploy] (sqlindex, sqlcontent, username, createdate) VALUES (ISNULL(@sqlindex,1), @sqlcontent, ISNULL(@username, 'NA'), ISNULL(@createdate, GETDATE()));
            --DECLARE @id INT = SCOPE_IDENTITY();
            EXEC sys.sp_executesql @sqlcontent;
        END;
        --
        SELECT 'OK';
        --
        RETURN 0;
    END ELSE BEGIN
        --
        SET @msg = CONCAT(N'NOT allowed @username:', @username, N'; @createdate:',  @createdate);
        EXECUTE SOLVIN.InsertLog 'SOLVIN.SQLSmartDeployBatch', @msg;
        --
        RETURN 1;
    END;
END;
GO
ALTER PROCEDURE SOLVIN.SQLSmartDeployFinish
(
    @username as NVARCHAR(255),
    @takeSnapshot as bit,
    @createdate as datetime2
)
AS
BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-01-14 Flori
    --
    -- Smart Deploy  -- needs improvement
    --
    DECLARE @msg nvarchar(max);
    IF ([SOLVIN].[IsSmartDeployUser](@username) = 1) BEGIN
        SET @msg = CONCAT(N'@username:', @username, N'; @createdate:',  @createdate);
        EXECUTE SOLVIN.InsertLog 'SOLVIN.SQLSmartDeployFinish', @msg;
        --
        IF (@takeSnapshot = 1) BEGIN
            DECLARE @SnapshotName nvarchar(400) = N'SmartDeploy finish #UserName# at #createdate#';
            SET  @SnapshotName = REPLACE(@SnapshotName, N'#UserName#', @username);
            SET  @SnapshotName = REPLACE(@SnapshotName, N'#createdate#', @createdate);
            EXECUTE [SOLVIN].[CreateSnapshot] @SnapshotName = @SnapshotName;
        END;
        --
    END ELSE BEGIN
        --
        SET @msg = CONCAT(N'NOT allowed @username:', @username, N'; @createdate:',  @createdate);
        EXECUTE SOLVIN.InsertLog 'SOLVIN.SQLSmartDeployFinish', @msg;
        --
        RETURN 1;
    END;
END;
GO

---------------------------------------
--
-- Utility
--
---------------------------------------
IF (EXISTS(SELECT * FROM sys.all_columns c WHERE c.object_id = OBJECT_ID('[SOLVIN].[UtilityDefinition]') AND (c.name = 'ContentSPName'))) BEGIN
    EXECUTE sys.sp_executesql N'DROP TABLE [SOLVIN].[UtilityDefinition]';
END;
IF (OBJECT_ID(N'SOLVIN.UtilityDefinition', N'u') IS NULL) BEGIN
    PRINT '    -- CREATE TABLE [SOLVIN].[UtilityDefinition]';
    CREATE TABLE [SOLVIN].[UtilityDefinition](
        [UtilityName] varchar(50) NOT NULL,
        [Configuration] nvarchar(100) NOT NULL,
        [ContentHTML] nvarchar(max) NULL,
        [ContentName] nvarchar(517) NULL,
        [LookupName] nvarchar(517) NULL,
        [ActionName] nvarchar(517) NULL,
        [PowershellContent] nvarchar(MAX) NULL,
        [RowVersion] timestamp NOT NULL,
     CONSTRAINT [PK_SOLVIN_UtilityDefinition] PRIMARY KEY CLUSTERED
    (
        [UtilityName] ASC,
        [Configuration] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
END;
GO
IF (OBJECT_ID(N'SOLVIN.UtilitySetting', N'u') IS NULL) BEGIN
    CREATE TABLE [SOLVIN].[UtilitySetting](
        [UtilityName] varchar(50) NOT NULL,
        [SettingKey] varchar(50) NOT NULL,
        [SettingValue] nvarchar(max) NOT NULL,
        [RowVersion] timestamp NOT NULL,
     CONSTRAINT [PK_SOLVIN_UtilitySetting] PRIMARY KEY CLUSTERED
    (
        [UtilityName] ASC,
        [SettingKey] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
END;
GO
EXECUTE SOLVIN.CreateProcedureIfNeeded '[SOLVIN].[UtilitySettingGet]';
GO
ALTER PROCEDURE [SOLVIN].[UtilitySettingGet]
(
      @UtilityName varchar(50)
    , @SettingKey varchar(50)
) AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-10-23 Flori
    --
    SELECT
          [UtilityName]
        , [SettingKey]
        , [SettingValue]
     FROM [SOLVIN].[UtilitySetting]
     WHERE ([UtilityName] = @UtilityName)
       AND (NULLIF(@SettingKey,[SettingKey]) IS NULL)
       ;
END;
GO
EXECUTE SOLVIN.CreateProcedureIfNeeded '[SOLVIN].[UtilitySettingUpsert]';
GO
ALTER PROCEDURE [SOLVIN].[UtilitySettingUpsert]
(
      @UtilityName varchar(50)
    , @SettingKey varchar(50)
    , @SettingValue nvarchar(max)
) AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-10-23 Flori
    --
    IF (EXISTS(SELECT 1 FROM [SOLVIN].[UtilitySetting] WHERE ([UtilityName] = @UtilityName) AND ([SettingKey] = @SettingKey))) BEGIN
        UPDATE [SOLVIN].[UtilitySetting]
        SET [SettingValue] = @SettingValue
        WHERE ([UtilityName] = @UtilityName)
          AND ([SettingKey] = @SettingKey)
          ;
    END ELSE BEGIN
        INSERT INTO [SOLVIN].[UtilitySetting]
            ([UtilityName]
            ,[SettingKey]
            ,[SettingValue])
        VALUES
            (@UtilityName
            ,@SettingKey
            ,@SettingValue)
        ;
    END;
END;
GO
EXECUTE SOLVIN.CreateProcedureIfNeeded '[SOLVIN].[UtilitySettingInsertDefault]';
GO
ALTER PROCEDURE [SOLVIN].[UtilitySettingInsertDefault]
(
      @UtilityName varchar(50)
    , @SettingKey varchar(50)
    , @SettingValue nvarchar(max)
) AS BEGIN
    SET NOCOUNT ON;
    --
    -- Add a UtilitySetting if it NOT exists
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-12-14 Flori
    --
    IF (NOT EXISTS(SELECT 1 FROM [SOLVIN].[UtilitySetting] WHERE ([UtilityName] = @UtilityName) AND ([SettingKey] = @SettingKey))) BEGIN        
        INSERT INTO [SOLVIN].[UtilitySetting]
            ([UtilityName]
            ,[SettingKey]
            ,[SettingValue])
        VALUES
            (@UtilityName
            ,@SettingKey
            ,@SettingValue)
        ;
    END;
END;
GO
EXECUTE SOLVIN.CreateScalarValuedFunctionIfNeeded 'SOLVIN.FN_UtilitySettingGet'
GO
ALTER FUNCTION SOLVIN.FN_UtilitySettingGet(
    @UtilityName  varchar(50),
    @SettingKey  varchar(255)
) 
RETURNS NVARCHAR(MAX) 
AS BEGIN
    --
    -- Get a UtilitySetting - SettingValue by its [UtilityName] and [SettingKey]
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2018-01-25 Flori
    -- 
RETURN (
    SELECT TOP (1)
          [SettingValue]
     FROM [SOLVIN].[UtilitySetting]
     WHERE ([UtilityName] = @UtilityName)
       AND ([SettingKey] = @SettingKey)
);
END;
GO
--
EXECUTE [SOLVIN].[CreateProcedureIfNeeded] 'SOLVIN.UtilityGetDisplayContent';
EXECUTE [SOLVIN].[CreateProcedureIfNeeded] 'SOLVIN.UtilityLookup';
EXECUTE [SOLVIN].[CreateProcedureIfNeeded] 'SOLVIN.UtilityExecuteAction';
EXECUTE [SOLVIN].[CreateProcedureIfNeeded] 'SOLVIN.UtilityGetDefinition';
EXECUTE [SOLVIN].[CreateProcedureIfNeeded] 'SOLVIN.UtilityUpsertDefinition';
EXECUTE [SOLVIN].[CreateProcedureIfNeeded] 'SOLVIN.UtilityDeleteDefinition';
GO
ALTER PROCEDURE [SOLVIN].[UtilityGetDefinition]
(
    @utilityName as varchar(50),
    @configuration as nvarchar(255)
)
WITH RECOMPILE
AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-07-12 Flori
    -- 2017-09-21 Flori add query
    --
    IF ((CHARINDEX('%', @utilityName) > 0) AND (CHARINDEX('%', @configuration) > 0)) BEGIN
        SELECT
            ud.[UtilityName]
          , ud.[Configuration]
          , ud.[ContentHTML]
          , ud.[ContentName]
          , ud.[LookupName]
          , ud.[ActionName]
          , ud.[PowershellContent]
          , [RowVersion] = CAST(ud.[RowVersion] AS BIGINT)
        FROM [SOLVIN].[UtilityDefinition] ud
        WHERE ((ud.UtilityName LIKE @utilityName))
            AND ((ud.[Configuration] LIKE @configuration))
            ;
    END ELSE BEGIN
        SELECT TOP (1)
            ud.[UtilityName]
          , ud.[Configuration]
          , ud.[ContentHTML]
          , ud.[ContentName]
          , ud.[LookupName]
          , ud.[ActionName]
          , ud.[PowershellContent]
          , [RowVersion] = CAST(ud.[RowVersion] AS BIGINT)
        FROM [SOLVIN].[UtilityDefinition] ud
        WHERE (ud.UtilityName = @utilityName)
            AND (ud.[Configuration] = @configuration);
    END;
END;
GO
ALTER PROCEDURE [SOLVIN].[UtilityUpsertDefinition]
    @UtilityName varchar(50),
    @Configuration nvarchar(100),
    @ContentHTML nvarchar(max),
    @ContentName nvarchar(517),
    @LookupName nvarchar(517),
    @ActionName nvarchar(517),
    @PowershellContent nvarchar(max)
AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-07-24 Flori
    -- 2017-11-11 Flori autocreate sp
    SET @UtilityName = LTRIM(RTRIM(@UtilityName));
    SET @Configuration = LTRIM(RTRIM(@Configuration));
    if ( (NULLIF(@UtilityName, '') IS NOT NULL) AND (NULLIF(@Configuration, '') IS NOT NULL)) BEGIN
        UPDATE [SOLVIN].[UtilityDefinition]
        SET [UtilityName] = @UtilityName
          ,[Configuration] = @Configuration
          ,[ContentHTML] = @ContentHTML
          ,[ContentName] = @ContentName
          ,[LookupName] = @LookupName
          ,[ActionName] = @ActionName
          ,[PowershellContent] = @PowershellContent
          WHERE ([UtilityName]= @UtilityName) AND ([Configuration]=@Configuration)
        IF (@@ROWCOUNT = 0) BEGIN
            INSERT INTO [SOLVIN].[UtilityDefinition]
               ([UtilityName]
               ,[Configuration]
               ,[ContentHTML]
               ,[ContentName]
               ,[LookupName]
               ,[ActionName]
               ,[PowershellContent])
            VALUES
               (@UtilityName
               ,@Configuration
               ,@ContentHTML
               ,@ContentName
               ,@LookupName
               ,@ActionName
               ,@PowershellContent)
            ;
        END;
        --
        IF (@ContentName = 'SQL') BEGIN
            EXECUTE [SOLVIN].[CreateUtilityProcedure] @utilityName=@UtilityName, @configuration=@Configuration, @actionName = 'GetDisplayContent';
        END;
        IF (@LookupName = 'SQL') BEGIN
            EXECUTE [SOLVIN].[CreateUtilityProcedure] @utilityName=@UtilityName, @configuration=@Configuration, @actionName = 'Lookup';
        END;
        IF (@ActionName = 'SQL') BEGIN
            EXECUTE [SOLVIN].[CreateUtilityProcedure] @utilityName=@UtilityName, @configuration=@Configuration, @actionName = 'ExecuteAction';
        END;
    END;
/*


*/
END;
GO
ALTER PROCEDURE [SOLVIN].[UtilityDeleteDefinition]
(
    @utilityName as varchar(50),
    @configuration as nvarchar(255)
)
WITH RECOMPILE
AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-09-29 Flori
    --
    DELETE FROM [SOLVIN].[UtilityDefinition]
    WHERE (UtilityName = @utilityName)
     AND ([Configuration] = @configuration);
END;
GO
--
ALTER PROCEDURE [SOLVIN].[UtilityGetDisplayContent]
(
    @parameter [SOLVIN].[TVP_KeyValue] READONLY
) AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-09 Flori
    --
    DECLARE @utilityName as varchar(50);
    SELECT @utilityName=[Value] FROM @parameter WHERE [Key] = N'UtilityName';
    DECLARE @configuration as nvarchar(100);
    SELECT @configuration=[Value] FROM @parameter WHERE [Key] = N'Configuration';
    --
    DECLARE @ContentHTML as nvarchar(max);
    DECLARE @spName as nvarchar(517);
    SELECT
        @ContentHTML = ud.[ContentHTML]
        , @spName = ud.[ContentName]
        FROM [SOLVIN].[UtilityDefinition] ud
        WHERE (ud.UtilityName = @utilityName)
        AND (ud.[Configuration] = @configuration);
    IF ((NULLIF(@spName, '') IS NOT NULL) AND (OBJECT_ID(@spName, 'P') IS NOT NULL)) BEGIN
        DECLARE @sql as nvarchar(max);
        SET @sql = N'
            EXECUTE #name# @parameter = @parameter;';
        SET @sql = REPLACE(@sql, N'#name#', @spName);
        EXECUTE sys.sp_executesql @sql, N'@parameter [SOLVIN].[TVP_KeyValue]', @parameter =  @parameter;
    END ELSE BEGIN
        SELECT [text/html] = @ContentHTML;
    END;
END;
GO
ALTER PROCEDURE [SOLVIN].[UtilityLookup](
    @parameter [SOLVIN].[TVP_KeyValue] READONLY
) AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-09 Flori
    --
    DECLARE @utilityName as varchar(50);
    SELECT @utilityName=[Value] FROM @parameter WHERE [Key] = N'UtilityName';
    DECLARE @configuration as nvarchar(100);
    SELECT @configuration=[Value] FROM @parameter WHERE [Key] = N'Configuration';

    DECLARE @spName as nvarchar(517);
    SELECT @spName = ud.[LookupName]
        FROM [SOLVIN].[UtilityDefinition] ud
        WHERE (ud.UtilityName = @utilityName)
        AND (ud.[Configuration] = @configuration);
    IF ((NULLIF(@spName, '') IS NOT NULL) AND (OBJECT_ID(@spName, 'P') IS NOT NULL)) BEGIN
        DECLARE @sql as nvarchar(max);
        SET @sql = N'EXECUTE #name# @parameter = @parameter;';
        SET @sql = REPLACE(@sql, N'#name#', @spName);
        EXECUTE sys.sp_executesql @sql, N'@parameter as [SOLVIN].[TVP_KeyValue]', @parameter = @parameter;
    END;
END;
GO
ALTER PROCEDURE SOLVIN.UtilityExecuteAction
(
    @parameter [SOLVIN].[TVP_KeyValue] READONLY
) AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-03-11 Flori
    --
    DECLARE @utilityName as varchar(50);
    SELECT @utilityName=[Value] FROM @parameter WHERE [Key] = N'UtilityName';
    DECLARE @configuration as nvarchar(100);
    SELECT @configuration=[Value] FROM @parameter WHERE [Key] = N'Configuration';
    DECLARE @projectUid as nvarchar(100);
    SELECT @projectUid=[Value] FROM @parameter WHERE [Key] = N'ProjectUid';
    DECLARE @userInput as nvarchar(MAX);
    SELECT @userInput=[Value] FROM @parameter WHERE [Key] = N'UserInput';

    DECLARE @spName as nvarchar(517);
    SELECT @spName = ud.[ActionName]
        FROM [SOLVIN].[UtilityDefinition] ud
        WHERE (ud.UtilityName = @utilityName)
        AND (ud.[Configuration] = @configuration);
    IF ((NULLIF(@spName, '') IS NOT NULL) AND (OBJECT_ID(@spName, 'P') IS NOT NULL)) BEGIN
        DECLARE @msg as nvarchar(max);
        SET @msg = N'EXECUTE #name# @utilityName = #utilityName#, @configuration = #configuration#, @projectUid=#projectUid#, @userInput = #userInput#;';
        SET @msg = REPLACE(@msg, N'#utilityName#', @utilityName);
        SET @msg = REPLACE(@msg, N'#configuration#', @configuration);
        SET @msg = REPLACE(@msg, N'#projectUid#', @projectUid);
        SET @msg = REPLACE(@msg, N'#name#', @spName);
        SET @msg = REPLACE(@msg, N'#userInput#', @userInput);
        EXECUTE SOLVIN.InsertLog 'SOLVIN.UtilityExecuteAction', @msg;

        DECLARE @sql as nvarchar(max);
        SET @sql = N'EXECUTE #name# @parameter = @parameter;';
        SET @sql = REPLACE(@sql, N'#name#', @spName);
        EXECUTE sys.sp_executesql @sql, N'@parameter as [SOLVIN].[TVP_KeyValue]', @parameter = @parameter;
    END;
END;
GO
EXECUTE [SOLVIN].[CreateProcedureIfNeeded] '[SOLVIN].CreateUtilityProcedure';
GO
ALTER PROCEDURE [SOLVIN].[CreateUtilityProcedure]
    @utilityName as nvarchar(50),
    @configuration as nvarchar(100),
    @actionName as nvarchar(32)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-09-17 Flori
    --
    -- GetDisplayContent ExecuteAction
    DECLARE @sql nvarchar(max);
    if (NULLIF(@utilityName, '') IS NULL) BEGIN
        SET @utilityName = 'ActionButton';
    END;
    if (NULLIF(@actionName, '') IS NULL) BEGIN
        SET @actionName = 'ExecuteAction';
    END;
    SET @utilityName = QUOTENAME(PARSENAME(@utilityName,1));
    SET @configuration =  QUOTENAME(PARSENAME(@configuration,1)+N'_'+@actionName);
    DECLARE @Name nvarchar(max) = @utilityName + N'.' + @configuration;
    IF (OBJECT_ID(@Name) IS NULL) BEGIN
        --
        set @sql = 'EXECUTE [SOLVIN].[CreateProcedureIfNeeded] ''[Utility].[template]'';';
        set @sql = REPLACE(@sql, '[Utility].[template]', @Name);
        EXECUTE sys.sp_executesql @sql;
        --
        set @sql = '
ALTER PROCEDURE [Utility].[template]
  @parameter [SOLVIN].[TVP_KeyValue] READONLY
AS BEGIN
    SELECT ''returns text'' as Text
    --SELECT ''returns html'' as HTML
    --SELECT ''returns html'' as OutputContent;
END;';
        set @sql = REPLACE(@sql, '[Utility].[template]', @Name);
        EXECUTE sys.sp_executesql @sql;
    END;
/*
EXECUTE [SOLVIN].CreateUtilityProcedure 'ActionButton', 'History', 'GetDisplayContent'
EXECUTE [SOLVIN].CreateUtilityProcedure 'ActionButton', 'History', 'ExecuteAction'
*/
END;
GO

IF (OBJECT_ID(N'SOLVIN.UtilityContent', N'u') IS NULL) BEGIN
    CREATE TABLE [SOLVIN].[UtilityContent](
        [Name] nvarchar(400) NOT NULL,
        [mimetype] nvarchar(100) NOT NULL,
        [etag] varchar(32) NOT NULL,
        [Content] [image] NOT NULL,
        [ModifiedDate] datetime2 NOT NULL,
        [RowVersion] timestamp NOT NULL,
     CONSTRAINT [PK_SOLVIN_UtilityContent] PRIMARY KEY CLUSTERED
    (
        [Name] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];
END;
GO

EXECUTE SOLVIN.CreateProcedureIfNeeded '[SOLVIN].[UtilityGetUtilityContent]';
GO
ALTER PROCEDURE [SOLVIN].[UtilityGetUtilityContent]
    @Name nvarchar(400)
WITH RECOMPILE AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-09-17 Flori
    --
    IF (CHARINDEX('%', @Name) > 0) BEGIN
        SELECT
             [Name]
            , [mimetype]
            , [etag]
            , [Content]
            , [ModifiedDate]
            , [RowVersion] = CAST([RowVersion] AS BIGINT)
        FROM [SOLVIN].[UtilityContent]
        WHERE ([Name] LIKE @Name);
    END ELSE BEGIN
        SELECT TOP (1)
             [Name]
            , [mimetype]
            , [etag]
            , [Content]
            , [ModifiedDate]
            , [RowVersion] = CAST([RowVersion] AS BIGINT)
        FROM [SOLVIN].[UtilityContent]
        WHERE (@Name = [Name]);
    END;
END;
GO
EXECUTE SOLVIN.CreateProcedureIfNeeded '[SOLVIN].[UtilityUpsertUtilityContent]';
GO
ALTER PROCEDURE [SOLVIN].UtilityUpsertUtilityContent
    @Name nvarchar(400)
    ,@mimetype nvarchar(100)
    ,@etag varchar(32)
    ,@Content image
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-09-17 Flori
    --

    DECLARE @now datetime2 = GetDATE();

    UPDATE [SOLVIN].[UtilityContent]
       SET [Name] = @Name
          ,[mimetype] = @mimetype
          ,[etag] = @etag
          ,[Content] = @Content
          ,[ModifiedDate] = @now
    WHERE @Name = [Name];
    IF (@@ROWCOUNT = 0) BEGIN
        INSERT INTO [SOLVIN].[UtilityContent]
            ([Name]
            ,[mimetype]
            ,[etag]
            ,[Content]
            ,[ModifiedDate])
        VALUES
            (@Name
            ,@mimetype
            ,@etag
            ,@Content
            ,@now);
    END;
END;
GO
EXECUTE SOLVIN.CreateProcedureIfNeeded '[SOLVIN].[UtilityDeleteUtilityContent]'
GO
ALTER PROCEDURE [SOLVIN].[UtilityDeleteUtilityContent]
    @Name nvarchar(400)
WITH RECOMPILE AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-09-30 Flori
    --
    DELETE FROM [SOLVIN].[UtilityContent] WHERE (@Name = [Name]);
END;
GO
--
IF (OBJECT_ID(N'[SOLVIN].[UtilityRequest]', N'u') IS NULL) BEGIN
    CREATE TABLE [SOLVIN].[UtilityRequest](
        [Id] uniqueidentifier NOT NULL,
        [LoginName] nvarchar(255) NULL,
        [SiteId] uniqueidentifier NULL,
        [SiteUrl] nvarchar(255) NULL,
        [WebId] uniqueidentifier NULL,
        [ListId] uniqueidentifier NULL,
        [ItemID] int NULL,
        [ListItemId] uniqueidentifier NULL,
        [UtilityName] varchar(50) NULL,
        [Configuration] varchar(100) NULL,
        [ProjectUid] uniqueidentifier NULL,
        [Filter] nvarchar(max) NULL,
        [UserInput] nvarchar(max) NULL,
        [State] int NOT NULL,
        [PreconditionId] varchar(max) NULL,
        [NextId] uniqueidentifier NULL,
        [RequestGroupId] uniqueidentifier NULL,
        [CreationDate] datetime2(7) NOT NULL,
        [FinishDate] datetime2(7) NULL,
        [RowVersion] timestamp NOT NULL,
     CONSTRAINT [PK_UtilityRequest] PRIMARY KEY CLUSTERED
    (
        [Id] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

    ALTER TABLE [SOLVIN].[UtilityRequest] ADD  CONSTRAINT [DF_SPSync_UtilityRequest_Id]  DEFAULT (newid()) FOR [Id]
    ALTER TABLE [SOLVIN].[UtilityRequest] ADD  CONSTRAINT [DF_SPSync_UtilityRequest_State]  DEFAULT ((0)) FOR [State]
    ALTER TABLE [SOLVIN].[UtilityRequest] ADD  CONSTRAINT [DF_SPSync_UtilityRequest_CreationDate]  DEFAULT (getdate()) FOR [CreationDate]
END;
GO
IF (OBJECT_ID('[SOLVIN].[UtilityRequest]') IS NOT NULL) BEGIN
    IF (NOT EXISTS(SELECT 1 FROM sys.all_columns WHERE object_id = OBJECT_ID('[SOLVIN].[UtilityRequest]') and (name = 'PreconditionId'))) BEGIN
        EXEC (N'ALTER TABLE SOLVIN.UtilityRequest ADD PreconditionId varchar(MAX) NULL;');
    END;
    IF (NOT EXISTS(SELECT 1 FROM sys.all_columns WHERE object_id = OBJECT_ID('[SOLVIN].[UtilityRequest]') and (name = 'NextId'))) BEGIN
        EXEC (N'ALTER TABLE SOLVIN.UtilityRequest ADD [NextId] uniqueidentifier NULL;');
    END;
    IF (NOT EXISTS(SELECT 1 FROM sys.all_columns WHERE object_id = OBJECT_ID('[SOLVIN].[UtilityRequest]') and (name = 'RequestGroupId'))) BEGIN
        EXEC (N'ALTER TABLE SOLVIN.UtilityRequest ADD [RequestGroupId] uniqueidentifier NULL;');
    END;
END;
GO

EXECUTE SOLVIN.CreateProcedureIfNeeded '[SOLVIN].[UtilityRequestGet]';
GO
ALTER PROCEDURE [SOLVIN].[UtilityRequestGet]
(
@Id uniqueidentifier = NULL
)
WITH RECOMPILE AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-10-16 Flori
    --
    IF (NULLIF(@Id, '00000000-0000-0000-0000-000000000000') IS NULL) BEGIN
        SELECT  src.[Id]
              , src.[LoginName]
              , src.[SiteId]
              , src.[SiteUrl]
              , src.[WebId]
              , src.[ListId]
              , src.[ItemID]
              , src.[ListItemId]
              , src.[UtilityName]
              , src.[Configuration]
              , src.[ProjectUid]
              , src.[Filter]
              , src.[UserInput]
              , src.[State]
              , src.[PreconditionId]
              , src.[NextId]
              , src.[RequestGroupId]
              , src.[CreationDate]
              , src.[FinishDate]
              , [RowVersion]=CAST(src.[RowVersion] as bigint)
          FROM [SOLVIN].[UtilityRequest] src
          WHERE ([State] = 1)
          AND (
                  (NULLIF(src.[PreconditionId], '') IS NULL)
              OR  (   (NULLIF(src.[PreconditionId], '') IS NOT NULL)
                  AND (3 = ALL(SELECT pre.[State] FROM [SOLVIN].[UtilityRequest] pre
                    WHERE pre.ID IN (SELECT Item FROM SOLVIN.FN_split_ReportParameterAsUid(src.[PreconditionId]))
                  ))));
    END ELSE BEGIN
        SELECT  src.[Id]
              , src.[LoginName]
              , src.[SiteId]
              , src.[SiteUrl]
              , src.[WebId]
              , src.[ListId]
              , src.[ItemID]
              , src.[ListItemId]
              , src.[UtilityName]
              , src.[Configuration]
              , src.[ProjectUid]
              , src.[Filter]
              , src.[UserInput]
              , src.[State]
              , src.[PreconditionId]
              , src.[NextId]
              , src.[RequestGroupId]
              , src.[CreationDate]
              , src.[FinishDate]
              , [RowVersion] = CAST(src.[RowVersion] as bigint)
          FROM [SOLVIN].[UtilityRequest] src
          WHERE (src.[Id] = @Id);
    END;
END;
GO
EXECUTE SOLVIN.CreateProcedureIfNeeded '[SOLVIN].[UtilityRequestInsert]';
GO
ALTER PROCEDURE [SOLVIN].[UtilityRequestInsert]
(
      @Id uniqueidentifier = NULL
    , @LoginName nvarchar(255) = NULL
    , @SiteId uniqueidentifier = NULL
    , @SiteUrl nvarchar(255) = NULL
    , @WebId uniqueidentifier = NULL
    , @ListId uniqueidentifier = NULL
    , @ItemID int = NULL
    , @ListItemId uniqueidentifier = NULL
    , @UtilityName varchar(50) = NULL
    , @Configuration varchar(100) = NULL
    , @ProjectUid uniqueidentifier = NULL
    , @Filter nvarchar(max) = NULL
    , @UserInput nvarchar(max) = NULL
    , @State int = NULL
    , @PreconditionId varchar(max) = NULL
    , @NextId uniqueidentifier = NULL
    , @RequestGroupId uniqueidentifier = NULL
    , @CreationDate datetime2(7) = NULL
    , @FinishDate datetime2(7) = NULL
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-10-10 Flori
    --
    SET NOCOUNT ON;
    IF (@UtilityName IS NOT NULL AND @Configuration IS NOT NULL) BEGIN
        INSERT INTO [SOLVIN].[UtilityRequest]
            ( [Id]
            , [LoginName]
            , [SiteId]
            , [SiteUrl]
            , [WebId]
            , [ListId]
            , [ItemID]
            , [ListItemId]
            , [UtilityName]
            , [Configuration]
            , [ProjectUid]
            , [Filter]
            , [UserInput]
            , [State]
            , [PreconditionId]
            , [NextId]
            , [RequestGroupId]
            , [CreationDate]
            , [FinishDate])
         VALUES
            ( ISNULL(@Id, NEWID())
            , @LoginName
            , @SiteId
            , @SiteUrl
            , @WebId
            , @ListId
            , @ItemID
            , @ListItemId
            , @UtilityName
            , @Configuration
            , @ProjectUid
            , @Filter
            , @UserInput
            , ISNULL(@State,0)
            , @PreconditionId
            , @NextId
            , @RequestGroupId
            , ISNULL(@CreationDate, GETDATE())
            , ISNULL(@FinishDate, CASE WHEN @State<0 THEN GETDATE() ELSE NULL END)
            );
    END;
END;
GO

EXECUTE SOLVIN.CreateProcedureIfNeeded '[SOLVIN].[UtilityRequestUpsert]';
GO
ALTER PROCEDURE [SOLVIN].[UtilityRequestUpsert]
(
    @Id uniqueidentifier,
    @State int
)
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-10-10 Flori
    --
    SET NOCOUNT ON;

    DECLARE @limitFinish datetime2 = DATEADD(day, -60, GETDATE());
    DELETE FROM [SOLVIN].[UtilityRequest] WHERE FinishDate < @limitFinish;
    DECLARE @limitCreate datetime2 = DATEADD(day, -60, @limitFinish);
    DELETE FROM [SOLVIN].[UtilityRequest] WHERE CreationDate < @limitCreate;

    DECLARE @NextId uniqueidentifier;
    DECLARE @PreId uniqueidentifier;
    DECLARE @PreState int;
    DECLARE @PreconditionId varchar(max);

    IF (@State = 3) BEGIN

        UPDATE [SOLVIN].[UtilityRequest]
           SET
            [State] = @State
            , [FinishDate] = GETDATE()
        WHERE
            [Id] = @Id;

        -- Enable the next
            SELECT TOP (1)
                 @NextId = [NextId]
            FROM [SOLVIN].[UtilityRequest]
            WHERE Id = @Id;

        IF (@NextId IS NOT NULL) BEGIN
            UPDATE [SOLVIN].[UtilityRequest]
               SET
                   [State] = 1
            WHERE   ([Id] = @NextId)
                AND ([State] = 0)
                ;
        END;

        -- handle [PreconditionId]
        DECLARE c CURSOR LOCAL
        FOR  SELECT [PreconditionId], [State]
            FROM [SOLVIN].[UtilityRequest]
            WHERE (CHARINDEX([PreconditionId], CAST(@Id as varchar(36)))>=0)
            FOR UPDATE of [PreconditionId], [State];
        OPEN c;
        FETCH NEXT FROM c INTO @PreconditionId, @PreState;
        WHILE (@@fetch_status <> -1) BEGIN
            IF (@@fetch_status <> -2) BEGIN
                SET @PreconditionId = REPLACE(REPLACE(@PreconditionId, CAST(@Id as varchar(36)), ''), ',,', ',')
                IF (@PreconditionId = ',') BEGIN
                    SET @PreconditionId = '';
                    IF (@PreState = 0) BEGIN
                        SET @PreState = 1;
                    END;
                END;
                UPDATE [SOLVIN].[UtilityRequest]
                SET PreconditionId = @PreconditionId, State = @PreState
                WHERE CURRENT OF c;
            END;
            FETCH NEXT FROM c INTO @PreconditionId, @PreState;
        END
        CLOSE c;
        DEALLOCATE c;
    END ELSE IF (@State <0) BEGIN
        UPDATE [SOLVIN].[UtilityRequest]
           SET
            [State] = @State
            , [FinishDate] = GETDATE()
        WHERE
            [Id] = @Id;
    END ELSE BEGIN
        UPDATE [SOLVIN].[UtilityRequest]
           SET
            [State] = @State
            , [FinishDate] = NULL
        WHERE
            [Id] = @Id;
    END;
/*
DELETE FROM [SOLVIN].[UtilityRequest];

EXECUTE [SOLVIN].[UtilityRequestInsert] @Id = '00000000-0000-0000-0000-000000000001', @UtilityName='a', @Configuration='a', @NextId='00000000-0000-0000-0000-000000000002', @State=1;
EXECUTE [SOLVIN].[UtilityRequestInsert] @Id = '00000000-0000-0000-0000-000000000002', @UtilityName='a', @Configuration='b';
EXECUTE [SOLVIN].[UtilityRequestInsert] @Id = '00000000-0000-0000-0000-000000000003', @UtilityName='a', @Configuration='c', @PreconditionId = '00000000-0000-0000-0000-000000000001,00000000-0000-0000-0000-000000000002';

SELECT * FROM [SOLVIN].[UtilityRequest];EXECUTE [SOLVIN].[UtilityRequestGet];

EXECUTE [SOLVIN].[UtilityRequestUpsert] @Id = '00000000-0000-0000-0000-000000000001', @State=2; -- running
EXECUTE [SOLVIN].[UtilityRequestUpsert] @Id = '00000000-0000-0000-0000-000000000001', @State=3; -- done

SELECT * FROM [SOLVIN].[UtilityRequest];EXECUTE [SOLVIN].[UtilityRequestGet];

EXECUTE [SOLVIN].[UtilityRequestUpsert] @Id = '00000000-0000-0000-0000-000000000002', @State=2; -- running
EXECUTE [SOLVIN].[UtilityRequestUpsert] @Id = '00000000-0000-0000-0000-000000000002', @State=3; -- done

SELECT * FROM [SOLVIN].[UtilityRequest];EXECUTE [SOLVIN].[UtilityRequestGet];

*/
END;
GO
EXECUTE SOLVIN.CreateProcedureIfNeeded '[SOLVIN].[UtilityRequestDelete]';
GO
ALTER PROCEDURE [SOLVIN].[UtilityRequestDelete]
AS BEGIN
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-10-10 Flori
    -- 2018-01-25 Flori add settings.
    --
    SET NOCOUNT ON;
    DECLARE @now datetime2 = GETDATE();
    DECLARE @ttlWaiting int = CAST(SOLVIN.FN_SettingGet('UtilityRequestDelete-DaysUntilDelete-Waiting', '-33') as int);
    DECLARE @ttlFinish int = CAST(SOLVIN.FN_SettingGet('UtilityRequestDelete-DaysUntilDelete-Finished', '-66') as int);
    DECLARE @limitWaiting datetime2 = DATEADD(DAY, @ttlWaiting, @now);
    DECLARE @limitFinish datetime2 = DATEADD(DAY, @ttlFinish, @now);

    DELETE FROM [SOLVIN].[UtilityRequest]
    WHERE (([FinishDate] IS NULL) AND ([CreationDate] < @limitWaiting))
    OR    (([FinishDate] IS NOT NULL) AND ([FinishDate] < @limitFinish));
END;
GO
--
EXECUTE SOLVIN.CreateScalarValuedFunctionIfNeeded 'SOLVIN.FN_GetParameter';
GO
ALTER FUNCTION [SOLVIN].[FN_GetParameter](
    @parameter [SOLVIN].[TVP_KeyValue] READONLY,
    @Key nvarchar(max)
) RETURNS NVARCHAR(MAX) AS BEGIN 
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-12-17 Flori
    --
    DECLARE @result NVARCHAR(MAX);
    SELECT TOP(1) @result = p.Value FROM @parameter p WHERE p.[Key] = @Key;
    RETURN @result;
/*
DECLARE @parameter [SOLVIN].[TVP_KeyValue];
INSERT @parameter ([Key], [Value]) VALUES ('LoginName', 'LoginName-value');
INSERT @parameter ([Key], [Value]) VALUES ('SiteId', '49812337-A153-4E83-B099-C35022E867B4');
SELECT [SOLVIN].[FN_GetParameter](@parameter, 'LoginName')
--> LoginName-value
*/
END;
GO
--
EXECUTE SOLVIN.AddRoleMember null,null;
GO
--
EXECUTE [SOLVIN].[EnableDDLChangeTracking];
GO
--
-- That's the end my friend.
--
-----------------------------------------------------------
--
-- SOLVIN Reporting Database
--
-----------------------------------------------------------
-- Version History:
-- 2017-09-04 - Flori : Split for 2013
-- 2017-09-21 - Flori : pimp full
-- 2017-09-28 - Flori : bugfixes ProjectID
--
EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.RollOutReportTablesStarterLight2013';
GO
ALTER PROCEDURE [SOLVIN].[RollOutReportTablesStarterLight2013] -- (***1.***)
AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-23 Flori
    -- 2017-02-23 NK
    -- 2017-09-04 Flori
    --
    /*
        -- 1. Change this stored procedure from [SOLVIN].[RollOutReportTablesStarterLight2013] to [SOLVIN].[RollOutReportTables] (***1.***)
        -- 2. Replace the database name [Test-PWA] to your source databasename (***2.***)
        -- 3. Mark the EXECUTE-Statement (***3.***) and excute it to change the source settings
        -- 4. Execute the changed stored procedure to save it (or press F5)
        -- 5. Mark and execute the EXECUTE statement at the end of this stored procedure (***5.***) to create standard database object

        (***3.***):
        EXECUTE  [SOLVIN].[SetMSPSourceSetting]
          @SiteId = '00000000-0000-0000-0000-000000000000'
        , @DatabaseName = N'[Test-PWA]' -- (***2.***)
        , @Version = 15;


        SELECT * FROM SOLVIN.MSPSourceSetting;
    */
    /*
        -- helpers
        -----------

        can be ignored

        SELECT * FROM [SOLVIN].[SQLObjectGenerator]
        SELECT * FROM [SOLVIN].[SQLObjectDefinition]

        DELETE FROM [SOLVIN].[SQLObjectGenerator]
        DELETE FROM [SOLVIN].[SQLObjectDefinition]
    */


    --------------------------
    -- Synonyms
    --------------------------
        ---- Write in table [SOLVIN].[SQLObjectDefinition]
        --
        /*Standard-TABLES*/

            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_EpmProject]'                         , @for = N'[#DatabaseName#].[dbo].[MSP_EpmProject]'                                  , @objectgroup = '[dbo].[MSP_EpmProject]'                       ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_EpmResource]'                        , @for = N'[#DatabaseName#].[dbo].[MSP_EpmResource]'                                 , @objectgroup = '[dbo].[MSP_EpmResource]'                      ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_EpmAssignment]'                      , @for = N'[#DatabaseName#].[dbo].[MSP_EpmAssignment]'                               , @objectgroup = '[dbo].[MSP_EpmAssignment]'                    ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_EpmTask]'                            , @for = N'[#DatabaseName#].[dbo].[MSP_EpmTask]'                                     , @objectgroup = '[dbo].[MSP_EpmTask]'                          ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_EpmAssignmentByDay]'                 , @for = N'[#DatabaseName#].[dbo].[MSP_EpmAssignmentByDay]'                          , @objectgroup = '[dbo].[MSP_EpmAssignmentByDay]'               ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_EpmResourceByDay]'                   , @for = N'[#DatabaseName#].[dbo].[MSP_EpmResourceByDay]'                            , @objectgroup = '[dbo].[MSP_EpmResourceByDay]'                 ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_TimeByDay]'                          , @for = N'[#DatabaseName#].[dbo].[MSP_TimeByDay]'                                   , @objectgroup = '[dbo].[MSP_TimeByDay]'                        ;

        /*Standard-VIEWS*/
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_EpmProject_UserView]'                , @for = N'[#DatabaseName#].[dbo].[MSP_EpmProject_UserView]'                         , @objectgroup = '[dbo].[MSP_EpmProject_UserView]'              ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_EpmResource_UserView]'               , @for = N'[#DatabaseName#].[dbo].[MSP_EpmResource_UserView]'                        , @objectgroup = '[dbo].[MSP_EpmResource_UserView]'             ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_EpmTask_UserView]'                   , @for = N'[#DatabaseName#].[dbo].[MSP_EpmTask_UserView]'                            , @objectgroup = '[dbo].[MSP_EpmTask_UserView]'                 ;

        /*Tables for group membership*/
            EXECUTE SOLVIN.GenerateSynonym @name = N'[pubSynonym].[MSP_WEB_SECURITY_GROUPS]'                , @for = N'[#DatabaseName#].[pub].[MSP_WEB_SECURITY_GROUPS]'                         , @objectgroup = '[pub].[MSP_WEB_SECURITY_GROUPS]'              ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[pubSynonym].[MSP_WEB_SECURITY_GROUP_MEMBERS]'         , @for = N'[#DatabaseName#].[pub].[MSP_WEB_SECURITY_GROUP_MEMBERS]'                  , @objectgroup = '[pub].[MSP_WEB_SECURITY_GROUP_MEMBERS]'       ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[pubSynonym].[MSP_WEB_SECURITY_CLAIMS]'                , @for = N'[#DatabaseName#].[pub].[MSP_WEB_SECURITY_CLAIMS]'                         , @objectgroup = '[pub].[MSP_WEB_SECURITY_CLAIMS]'              ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[pubSynonym].[MSP_RESOURCES]'                          , @for = N'[#DatabaseName#].[pub].[MSP_RESOURCES]'                                   , @objectgroup = '[pub].[MSP_RESOURCES]'                        ;

        /* customfield meta data*/
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MFN_Epm_GetAllCustomFieldsInformation]'  , @for = N'[#DatabaseName#].[dbo].[MFN_Epm_GetAllCustomFieldsInformation]'           , @objectgroup = '[dbo].[MFN_Epm_GetAllCustomFieldsInformation]';

        /*Examples Custom Lookup Tables (Single / MultiValue)*/
            --EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSPLT_RBS_UserView]'                   , @for = '[#DatabaseName#].[dbo].[MSPLT_RBS_UserView]'                               , @objectgroup=NULL;
            --EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSPCFTASK_ABC_AssociationView]'        , @for = '[#DatabaseName#].[dbo].[MSPCFTASK_ABC_AssociationView]'                    , @objectgroup=NULL;



    --------------------------
    -- Views
    --------------------------
    ---- Write in table [SOLVIN].[SQLObjectDefinition]

        /*Standard-TABLES*/

            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dbo].[MSP_EpmProject]'                 , @prjForObjectName = N'[dboSynonym].[MSP_EpmProject]'             , @statementAppendix = N'' , @columnsNotNull = N'' , @columnsToIgnore = N'' , @spGetViewColumnLine = N''                           , @spCombine = N''                 , @objectgroup = null ;
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dbo].[MSP_EpmResource]'                , @prjForObjectName = N'[dboSynonym].[MSP_EpmResource]'            , @statementAppendix = N'' , @columnsNotNull = N'' , @columnsToIgnore = N'' , @spGetViewColumnLine = N''                           , @spCombine = N''                 , @objectgroup = null ;
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dbo].[MSP_EpmTask]'                    , @prjForObjectName = N'[dboSynonym].[MSP_EpmTask]'                , @statementAppendix = N'' , @columnsNotNull = N'' , @columnsToIgnore = N'' , @spGetViewColumnLine = N''                           , @spCombine = N''                 , @objectgroup = null ;
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dbo].[MSP_EpmAssignment]'              , @prjForObjectName = N'[dboSynonym].[MSP_EpmAssignment]'          , @statementAppendix = N'' , @columnsNotNull = N'' , @columnsToIgnore = N'' , @spGetViewColumnLine = N''                           , @spCombine = N''                 , @objectgroup = null ;
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dbo].[MSP_EpmAssignmentByDay]'         , @prjForObjectName = N'[dboSynonym].[MSP_EpmAssignmentByDay]'     , @statementAppendix = N'' , @columnsNotNull = N'' , @columnsToIgnore = N'' , @spGetViewColumnLine = N''                           , @spCombine = N''                 , @objectgroup = null ;
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dbo].[MSP_EpmResourceByDay]'           , @prjForObjectName = N'[dboSynonym].[MSP_EpmResourceByDay]'       , @statementAppendix = N'' , @columnsNotNull = N'' , @columnsToIgnore = N'' , @spGetViewColumnLine = N''                           , @spCombine = N''                 , @objectgroup = null ;
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dbo].[MSP_TimeByDay]'                  , @prjForObjectName = N'[dboSynonym].[MSP_TimeByDay]'              , @statementAppendix = N'' , @columnsNotNull = N'' , @columnsToIgnore = N'' , @spGetViewColumnLine = N''                           , @spCombine = N''                 , @objectgroup = null ;

        /*Standard-VIEWS*/
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dbo].[MSP_EpmResource_UserView]',
                @prjForObjectName = N'[dboSynonym].[MSP_EpmResource_UserView]',
                @statementAppendix = N'',
                @columnsNotNull = N'',
                @columnsToIgnore = N'',
                @spGetViewColumnLine = N'[SOLVIN].[GetViewColumnLineAdjustResourceNTAccount]',
                @spCombine = N'',
                @objectgroup = '[dbo].[MSP_EpmProject_UserView]' ;

            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dbo].[MSP_EpmProject_UserView]',
                @prjForObjectName = N'[dboSynonym].[MSP_EpmProject_UserView]',
                @statementAppendix = N'',
                @columnsNotNull = N'',
                @columnsToIgnore = N'',
                @spGetViewColumnLine = N'SOLVIN.GetViewColumnLineIgnoreProjectBaseline2To10',
                @spCombine = N'',
                @objectgroup = '[dbo].[MSP_EpmTask_UserView]' ;

            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dbo].[MSP_EpmTask_UserView]',
                @prjForObjectName = N'[dboSynonym].[MSP_EpmTask_UserView]',
                @statementAppendix = N'',
                @columnsNotNull = N'
                    [TaskParentUID],[ProjectUID],[TaskUID],[FixedCostAssignmentUID],[TaskName],[TaskIndex],[TaskIsOverallocated],[TaskIsProjectSummary],[TaskIsMilestone],[TaskIsCritical],[TaskIsSummary]
                    ,[TaskStatusManagerUID],[TaskDurationIsEstimated],[TaskIsEffortDriven],[TaskIsExternal],[TaskIsRecurring],[TaskIsMarked],[TaskIsActive],[TaskIsManuallyScheduled]
                    ,[TaskCreatedRevisionCounter],[TaskModifiedRevisionCounter],[TaskCreatedDate],[TaskModifiedDate],[TaskStatusManagerUID]',
                @columnsToIgnore = N'',
                @spGetViewColumnLine = N'SOLVIN.GetViewColumnLineIgnoreTaskBaseline2To10',
                @spCombine = N'',
                @objectgroup = '[dbo].[MSP_EpmTask_UserView]' ;

        /*Tables for group membership*/
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[pub].[MSP_WEB_SECURITY_GROUPS]'        , @prjForObjectName = N'[pubSynonym].[MSP_WEB_SECURITY_GROUPS]'                        , @statementAppendix = N'' , @columnsNotNull = N'' , @columnsToIgnore = N'' , @spGetViewColumnLine = N''                           , @spCombine = N''                 , @objectgroup = 'MSP_WEB_SECURITY_GROUPS';
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[pub].[MSP_WEB_SECURITY_GROUP_MEMBERS]' , @prjForObjectName = N'[pubSynonym].[MSP_WEB_SECURITY_GROUP_MEMBERS]'                 , @statementAppendix = N'' , @columnsNotNull = N'' , @columnsToIgnore = N'' , @spGetViewColumnLine = N''                           , @spCombine = N''                 , @objectgroup = 'MSP_WEB_SECURITY_GROUP_MEMBERS';
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[pub].[MSP_WEB_SECURITY_CLAIMS]'        , @prjForObjectName = N'[pubSynonym].[MSP_WEB_SECURITY_CLAIMS]'                        , @statementAppendix = N'' , @columnsNotNull = N'' , @columnsToIgnore = N'' , @spGetViewColumnLine = N''                           , @spCombine = N''                 , @objectgroup = 'MSP_WEB_SECURITY_CLAIMS';
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[pub].[MSP_RESOURCES]'                  , @prjForObjectName = N'[pubSynonym].[MSP_RESOURCES]'
                , @statementAppendix = N''
                , @columnsNotNull = N''
                , @columnsToIgnore = N'[RES_RTF_NOTES],[RES_RATES_TABLE],[RES_AVAILABILITY]'
                , @spGetViewColumnLine = N''
                , @spCombine = N''
                , @objectgroup = '[pub].[MSP_RESOURCES]';

        /* customfield meta data*/
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dbo].[MFN_Epm_GetAllCustomFieldsInformation]',
                @prjForObjectName = N'[dboSynonym].[MFN_Epm_GetAllCustomFieldsInformation]',
                @statementAppendix = N'',
                @columnsNotNull = N'',
                @columnsToIgnore = N'',
                @spGetViewColumnLine = N'',
                @spCombine = N'[SOLVIN].[GetViewCombine_TVF]',
                @objectgroup = N'[dbo].[MFN_Epm_GetAllCustomFieldsInformation]' ;

        /* SELECT * FROM [dbo].[MFN_Epm_GetAllCustomFieldsInformation]; */
         /*Examples Custom Lookup Tables (Single / MultiValue)*/
          --EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dbo].[MSPLT_RBS_UserView]'             , @prjForObjectName = N'[dboSynonym].[MSPLT_RBS_UserView]'             , @statementAppendix = N'', @columnsNotNull = N'', @columnsToIgnore = N'', @spGetViewColumnLine = N'', @spCombine = N'', @objectgroup = null ;
          --EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dbo].[MSPCFTASK_ABC_AssociationView]'  , @prjForObjectName = N'[dboSynonym].[MSPCFTASK_ABC_AssociationView]'  , @statementAppendix = N'', @columnsNotNull = N'', @columnsToIgnore = N'', @spGetViewColumnLine = N'', @spCombine = N'', @objectgroup = null ;

          -- GO TO VIEW pubView.MSP_WEB_SECURITY_GGMC and alter it
          /*
          SELECT [--]='DROP VIEW '+SCHEMA_NAME(o.schema_id) +'.'+ o.name FROM sys.all_columns c
          INNER JOIN sys.all_objects o ON c.object_id = o.object_id
          WHERE o.type = 'V' AND c.name = 'DUMMY';
          */

/*
This procedure deliveres a set of often used tables / views for reporting

    EXECUTE [SOLVIN].[RollOutReportTables] --(***5.***)

*/

END;
GO

EXECUTE [SOLVIN].[CreateProcedureIfNeeded] N'SOLVIN.RollOutReportTablesStarterMirror2013';
GO
ALTER PROCEDURE [SOLVIN].[RollOutReportTablesStarterMirror2013] -- (***1.***)
AS BEGIN
    SET NOCOUNT ON;
    --
    -- SOLVIN
    -- SolvinReportingCommon
    --
    -- 2017-02-23 Flori
    -- 2017-08-18 NK
    --
    /*
        -- 1. Change this stored procedure from [SOLVIN].[RollOutReportTablesStarterMirror2013] to [SOLVIN].[RollOutReportTables]
        -- 2. Replace the database name [Test-PWA] to your source databasename (***2.***)
        -- 3. Mark the EXECUTE-Statement (***3.***) and excute it to change the source settings
        -- 4. Execute the changed stored procedure to save it (or press F5)
        -- 5. Mark and execute the statement at the end of this procedure (***5.***) to create standard database object

        (***3.***):
        EXECUTE  [SOLVIN].[SetMSPSourceSetting]
          @SiteId = '00000000-0000-0000-0000-000000000000'
        , @DatabaseName = N'[Test-PWA]' -- (***2.***)
        , @Version = 15;


        SELECT * FROM SOLVIN.MSPSourceSetting;
    */
    /*
        -- helpers
        -----------
        SELECT * FROM [SOLVIN].[SQLObjectGenerator]
        SELECT * FROM [SOLVIN].[SQLObjectDefinition]

        DELETE FROM [SOLVIN].[SQLObjectGenerator]
        DELETE FROM [SOLVIN].[SQLObjectDefinition]
    */


  --------------------------
    -- Synonyms
    --------------------------
        ---- Write in table [SOLVIN].[SQLObjectDefinition]
        --
        /*Standard-TABLES*/
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_EpmProject]'                         , @for = N'[#DatabaseName#].[dbo].[MSP_EpmProject]'                                  , @objectgroup = '[dbo].[MSP_EpmProject]'                       ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_EpmResource]'                        , @for = N'[#DatabaseName#].[dbo].[MSP_EpmResource]'                                 , @objectgroup = '[dbo].[MSP_EpmResource]'                      ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_EpmAssignment]'                      , @for = N'[#DatabaseName#].[dbo].[MSP_EpmAssignment]'                               , @objectgroup = '[dbo].[MSP_EpmAssignment]'                    ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_EpmTask]'                            , @for = N'[#DatabaseName#].[dbo].[MSP_EpmTask]'                                     , @objectgroup = '[dbo].[MSP_EpmTask]'                          ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_EpmAssignmentByDay]'                 , @for = N'[#DatabaseName#].[dbo].[MSP_EpmAssignmentByDay]'                          , @objectgroup = '[dbo].[MSP_EpmAssignmentByDay]'               ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_EpmResourceByDay]'                   , @for = N'[#DatabaseName#].[dbo].[MSP_EpmResourceByDay]'                            , @objectgroup = '[dbo].[MSP_EpmResourceByDay]'                 ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_TimeByDay]'                          , @for = N'[#DatabaseName#].[dbo].[MSP_TimeByDay]'                                   , @objectgroup = '[dbo].[MSP_TimeByDay]'                        ;
        /*Standard-VIEWS*/
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_EpmProject_UserView]'                , @for = N'[#DatabaseName#].[dbo].[MSP_EpmProject_UserView]'                         , @objectgroup = '[dbo].[MSP_EpmProject_UserView]'              ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_EpmResource_UserView]'               , @for = N'[#DatabaseName#].[dbo].[MSP_EpmResource_UserView]'                        , @objectgroup = '[dbo].[MSP_EpmResource_UserView]'             ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_EpmTask_UserView]'                   , @for = N'[#DatabaseName#].[dbo].[MSP_EpmTask_UserView]'                            , @objectgroup = '[dbo].[MSP_EpmTask_UserView]'                 ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSP_EpmAssignment_UserView]'             , @for = N'[#DatabaseName#].[dbo].[MSP_EpmAssignment_UserView]'                      , @objectgroup = '[dbo].[MSP_EpmAssignment_UserView]'           ;
        /*Tables for group membership*/
            EXECUTE SOLVIN.GenerateSynonym @name = N'[pubSynonym].[MSP_WEB_SECURITY_GROUPS]'                , @for = N'[#DatabaseName#].[pub].[MSP_WEB_SECURITY_GROUPS]'                         , @objectgroup = '[pub].[MSP_WEB_SECURITY_GROUPS]'              ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[pubSynonym].[MSP_WEB_SECURITY_GROUP_MEMBERS]'         , @for = N'[#DatabaseName#].[pub].[MSP_WEB_SECURITY_GROUP_MEMBERS]'                  , @objectgroup = '[pub].[MSP_WEB_SECURITY_GROUP_MEMBERS]'       ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[pubSynonym].[MSP_WEB_SECURITY_CLAIMS]'                , @for = N'[#DatabaseName#].[pub].[MSP_WEB_SECURITY_CLAIMS]'                         , @objectgroup = '[pub].[MSP_WEB_SECURITY_CLAIMS]'              ;
            EXECUTE SOLVIN.GenerateSynonym @name = N'[pubSynonym].[MSP_RESOURCES]'                          , @for = N'[#DatabaseName#].[pub].[MSP_RESOURCES]'                                   , @objectgroup = '[pub].[MSP_RESOURCES]'                        ;
        /* customfield meta data*/
            EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MFN_Epm_GetAllCustomFieldsInformation]'  , @for = N'[#DatabaseName#].[dbo].[MFN_Epm_GetAllCustomFieldsInformation]'           , @objectgroup = '[dbo].[MFN_Epm_GetAllCustomFieldsInformation]';
        /*Examples Custom Lookup Tables (Single / MultiValue)*/
            --EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSPLT_RBS_UserView]'                   , @for = '[#DatabaseName#].[dbo].[MSPLT_RBS_UserView]'                               , @objectgroup=NULL;
            --EXECUTE SOLVIN.GenerateSynonym @name = N'[dboSynonym].[MSPCFTASK_ABC_AssociationView]'        , @for = '[#DatabaseName#].[dbo].[MSPCFTASK_ABC_AssociationView]'                    , @objectgroup=NULL;
    --------------------------
    -- Views
    --------------------------
    ---- Write in table [SOLVIN].[SQLObjectDefinition]
        /*Standard-TABLES*/
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dboView].[MSP_EpmProject]'
                , @prjForObjectName = N'[dboSynonym].[MSP_EpmProject]'
                , @statementAppendix = N''
                , @columnsNotNull = N''
                , @columnsToIgnore = N'
                      ,[ProjectWbsIsStale]
                      ,[ProjectEarnedValueIsStale]
                      ,[ProjectRollupsAreStale]
                      ,[ProjectHierarchyNotSynchronized]
                      ,[ProjectCalculationsAreStale]
                      ,[ProjectGhostTaskAreStale]
                      ,[ProjectCompanyName]
                      ,[ProjectVisibilityMode]
                      ,[ResourcePlanUtilizationType]
                      ,[ResourcePlanUtilizationDate]
                      ,[ProjectDescription]
                      ,[EnterpriseProjectTypeUID]
                      ,[ProjectCalendarDuration]
                '
                /*
                      ,[ProjectCreatedRevisionCounter]
                      ,[ProjectModifiedRevisionCounter]
                      ,[ProjectCreatedDate]
                      ,[ProjectModifiedDate]
                */
                , @spGetViewColumnLine = N''
                , @spCombine = N''
                , @objectgroup = null ;
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dboView].[MSP_EpmResource]'                , @prjForObjectName = N'[dboSynonym].[MSP_EpmResource]'            , @statementAppendix = N'' , @columnsNotNull = N'' , @columnsToIgnore = N'' , @spGetViewColumnLine = N''                           , @spCombine = N''                 , @objectgroup = null ;
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dboView].[MSP_EpmTask]'
                , @prjForObjectName = N'[dboSynonym].[MSP_EpmTask]'
                , @statementAppendix = N''
                , @columnsNotNull = N''
                , @columnsToIgnore = N''
                /*
                N'
                    ,[TaskCreatedRevisionCounter]
                    ,[TaskModifiedRevisionCounter]
                    ,[TaskCreatedDate]
                    ,[TaskModifiedDate]
                '
                */
                , @spGetViewColumnLine = N''
                , @spCombine = N''
                , @objectgroup = null ;
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dboView].[MSP_EpmAssignment]'              , @prjForObjectName = N'[dboSynonym].[MSP_EpmAssignment]'          , @statementAppendix = N'' , @columnsNotNull = N'' , @columnsToIgnore = N'' , @spGetViewColumnLine = N''                           , @spCombine = N''                 , @objectgroup = null ;
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dboView].[MSP_EpmAssignmentByDay]'         , @prjForObjectName = N'[dboSynonym].[MSP_EpmAssignmentByDay]'     , @statementAppendix = N'' , @columnsNotNull = N'' , @columnsToIgnore = N'' , @spGetViewColumnLine = N''                           , @spCombine = N''                 , @objectgroup = null ;
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dboView].[MSP_EpmResourceByDay]'           , @prjForObjectName = N'[dboSynonym].[MSP_EpmResourceByDay]'       , @statementAppendix = N'' , @columnsNotNull = N'' , @columnsToIgnore = N'' , @spGetViewColumnLine = N''                           , @spCombine = N''                 , @objectgroup = null ;
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dboView].[MSP_TimeByDay]'                  , @prjForObjectName = N'[dboSynonym].[MSP_TimeByDay]'              , @statementAppendix = N'' , @columnsNotNull = N'' , @columnsToIgnore = N'' , @spGetViewColumnLine = N''                           , @spCombine = N''                 , @objectgroup = null ;
        /*Standard-VIEWS*/
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dboView].[MSP_EpmResource_UserView]',
                @prjForObjectName = N'[dboSynonym].[MSP_EpmResource_UserView]',
                @statementAppendix = N'',
                @columnsNotNull = N'',
                @columnsToIgnore = N'',
                @spGetViewColumnLine = N'[SOLVIN].[GetViewColumnLineAdjustResourceNTAccount]',
                @spCombine = N'',
                @objectgroup = '[dbo].[MSP_EpmProject_UserView]' ;
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dboView].[MSP_EpmProject_UserView]',
                @prjForObjectName = N'[dboSynonym].[MSP_EpmProject_UserView]',
                @statementAppendix = N'',
                @columnsNotNull = N'',
                @columnsToIgnore = N'',
                @spGetViewColumnLine = N'SOLVIN.GetViewColumnLineIgnoreProjectBaseline2To10',
                @spCombine = N'',
                @objectgroup = '[dbo].[MSP_EpmTask_UserView]' ;
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dboView].[MSP_EpmTask_UserView]',
                @prjForObjectName = N'[dboSynonym].[MSP_EpmTask_UserView]',
                @statementAppendix = N'',
                @columnsNotNull = N'
                    [TaskParentUID],[ProjectUID],[TaskUID],[FixedCostAssignmentUID],[TaskName],[TaskIndex],[TaskIsOverallocated],[TaskIsProjectSummary],[TaskIsMilestone],[TaskIsCritical],[TaskIsSummary]
                    ,[TaskStatusManagerUID],[TaskDurationIsEstimated],[TaskIsEffortDriven],[TaskIsExternal],[TaskIsRecurring],[TaskIsMarked],[TaskIsActive],[TaskIsManuallyScheduled]
                    ,[TaskCreatedRevisionCounter],[TaskModifiedRevisionCounter],[TaskCreatedDate],[TaskModifiedDate],[TaskStatusManagerUID]',
                @columnsToIgnore = N'',
                @spGetViewColumnLine = N'SOLVIN.GetViewColumnLineIgnoreTaskBaseline2To10',
                @spCombine = N'',
                @objectgroup = '[dbo].[MSP_EpmTask_UserView]' ;
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dboView].[MSP_EpmAssignment_UserView]',
                @prjForObjectName = N'[dboSynonym].[MSP_EpmAssignment_UserView]',
                @statementAppendix = N'',
                @columnsNotNull = N'
                    , [AssignmentUID]
                    , [ProjectUID]
                    , [ResourceUID]
                    , [TaskUID]
                    ',
                @columnsToIgnore = N'',
                @spGetViewColumnLine = N'[SOLVIN].[GetViewColumnLineIgnoreAssignmentBaseline2To10]',
                @spCombine = N'',
                @objectgroup = '[dbo].[MSP_EpmAssignment_UserView]' ;
        /*Tables for group membership*/
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[pubView].[MSP_WEB_SECURITY_GROUPS]'        , @prjForObjectName = N'[pubSynonym].[MSP_WEB_SECURITY_GROUPS]'                        , @statementAppendix = N'' , @columnsNotNull = N'' , @columnsToIgnore = N'' , @spGetViewColumnLine = N''                           , @spCombine = N''                 , @objectgroup = 'MSP_WEB_SECURITY_GROUPS';
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[pubView].[MSP_WEB_SECURITY_GROUP_MEMBERS]' , @prjForObjectName = N'[pubSynonym].[MSP_WEB_SECURITY_GROUP_MEMBERS]'                 , @statementAppendix = N'' , @columnsNotNull = N'' , @columnsToIgnore = N'' , @spGetViewColumnLine = N''                           , @spCombine = N''                 , @objectgroup = 'MSP_WEB_SECURITY_GROUP_MEMBERS';
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[pubView].[MSP_WEB_SECURITY_CLAIMS]'        , @prjForObjectName = N'[pubSynonym].[MSP_WEB_SECURITY_CLAIMS]'                        , @statementAppendix = N'' , @columnsNotNull = N'' , @columnsToIgnore = N'' , @spGetViewColumnLine = N''                           , @spCombine = N''                 , @objectgroup = 'MSP_WEB_SECURITY_CLAIMS';
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[pubView].[MSP_RESOURCES]'                  , @prjForObjectName = N'[pubSynonym].[MSP_RESOURCES]'
                , @statementAppendix = N''
                , @columnsNotNull = N''
                , @columnsToIgnore = N'[RES_RTF_NOTES],[RES_RATES_TABLE],[RES_AVAILABILITY]'
                , @spGetViewColumnLine = N''
                , @spCombine = N''
                , @objectgroup = '[pubView].[MSP_RESOURCES]';
        /* customfield meta data*/
            EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dboView].[MFN_Epm_GetAllCustomFieldsInformation]',
                @prjForObjectName = N'[dboSynonym].[MFN_Epm_GetAllCustomFieldsInformation]',
                @statementAppendix = N'',
                @columnsNotNull = N'',
                @columnsToIgnore = N'',
                @spGetViewColumnLine = N'',
                @spCombine = N'[SOLVIN].[GetViewCombine_TVF]',
                @objectgroup = N'[dbo].[MFN_Epm_GetAllCustomFieldsInformation]' ;
        /* SELECT * FROM [dboView].[MFN_Epm_GetAllCustomFieldsInformation]; */
         /*Examples Custom Lookup Tables (Single / MultiValue)*/
          --EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dboView].[MSPLT_RBS_UserView]'             , @prjForObjectName = N'[dboSynonym].[MSPLT_RBS_UserView]'             , @statementAppendix = N'', @columnsNotNull = N'', @columnsToIgnore = N'', @spGetViewColumnLine = N'', @spCombine = N'', @objectgroup = null ;
          --EXECUTE SOLVIN.GenerateView @srdbViewName = N'[dboView].[MSPCFTASK_ABC_AssociationView]'  , @prjForObjectName = N'[dboSynonym].[MSPCFTASK_ABC_AssociationView]'  , @statementAppendix = N'', @columnsNotNull = N'', @columnsToIgnore = N'', @spGetViewColumnLine = N'', @spCombine = N'', @objectgroup = null ;
          -- GO TO VIEW pubView.MSP_WEB_SECURITY_GGMC and alter it
          /*
          SELECT [--]='DROP VIEW '+SCHEMA_NAME(o.schema_id) +'.'+ o.name FROM sys.all_columns c
          INNER JOIN sys.all_objects o ON c.object_id = o.object_id
          WHERE o.type = 'V' AND c.name = 'DUMMY';
          */
    --------------------------
    -- Tables
    --------------------------
    -- Write in table [SOLVIN].[SQLObjectDefinition]
         /*Standard-TABLES*/
            EXECUTE SOLVIN.GenerateTable  @prjObjectName = N'[dboView].[MSP_EpmProject]'                        , @srdbTableName = N'[dbo].[MSP_EpmProject]'                        , @objectgroup = '[dbo].[MSP_EpmProject]'                       ;
            EXECUTE SOLVIN.GenerateTable  @prjObjectName = N'[dboView].[MSP_EpmResource]'                       , @srdbTableName = N'[dbo].[MSP_EpmResource]'                       , @objectgroup = '[dbo].[MSP_EpmResource]'                      ;
            EXECUTE SOLVIN.GenerateTable  @prjObjectName = N'[dboView].[MSP_EpmAssignment]'                     , @srdbTableName = N'[dbo].[MSP_EpmAssignment]'                     , @objectgroup = '[dbo].[MSP_EpmAssignment]'                    ;
            EXECUTE SOLVIN.GenerateTable  @prjObjectName = N'[dboView].[MSP_EpmTask]'                           , @srdbTableName = N'[dbo].[MSP_EpmTask]'                           , @objectgroup = '[dbo].[MSP_EpmTask]'                          ;
            EXECUTE SOLVIN.GenerateTable  @prjObjectName = N'[dboView].[MSP_EpmAssignmentByDay]'                , @srdbTableName = N'[dbo].[MSP_EpmAssignmentByDay]'                , @objectgroup = '[dbo].[MSP_EpmAssignmentByDay]'               ;
            EXECUTE SOLVIN.GenerateTable  @prjObjectName = N'[dboView].[MSP_EpmResourceByDay]'                  , @srdbTableName = N'[dbo].[MSP_EpmResourceByDay]'                  , @objectgroup = '[dbo].[MSP_EpmResourceByDay]'                 ;
            EXECUTE SOLVIN.GenerateTable  @prjObjectName = N'[dboView].[MSP_TimeByDay]'                         , @srdbTableName = N'[dbo].[MSP_TimeByDay]'                         , @objectgroup = '[dbo].[MSP_TimeByDay]'                        ;
         /*Standard-VIEWS*/
            EXECUTE SOLVIN.GenerateTable  @prjObjectName = N'[dboView].[MSP_EpmProject_UserView]'               , @srdbTableName = N'[dbo].[MSP_EpmProject_UserView]'               , @objectgroup = '[dbo].[MSP_EpmProject_UserView]'              ;
            EXECUTE SOLVIN.GenerateTable  @prjObjectName = N'[dboView].[MSP_EpmResource_UserView]'              , @srdbTableName = N'[dbo].[MSP_EpmResource_UserView]'              , @objectgroup = '[dbo].[MSP_EpmResource_UserView]'             ;
            EXECUTE SOLVIN.GenerateTable  @prjObjectName = N'[dboView].[MSP_EpmTask_UserView]'                  , @srdbTableName = N'[dbo].[MSP_EpmTask_UserView]'                  , @objectgroup = '[dbo].[MSP_EpmTask_UserView]'                 ;
            EXECUTE SOLVIN.GenerateTable  @prjObjectName = N'[dboView].[MSP_EpmAssignment_UserView]'            , @srdbTableName = N'[dbo].[MSP_EpmAssignment_UserView]'            , @objectgroup = '[dbo].[MSP_EpmAssignment_UserView]'           ;
        /*Tables for group membership*/
            EXECUTE SOLVIN.GenerateTable  @prjObjectName = N'[pubView].[MSP_WEB_SECURITY_GROUPS]'               , @srdbTableName = N'[pub].[MSP_WEB_SECURITY_GROUPS]'               , @objectgroup = '[pub].[MSP_WEB_SECURITY_GROUPS]'              ;
            EXECUTE SOLVIN.GenerateTable  @prjObjectName = N'[pubView].[MSP_WEB_SECURITY_GROUP_MEMBERS]'        , @srdbTableName = N'[pub].[MSP_WEB_SECURITY_GROUP_MEMBERS]'        , @objectgroup = '[pub].[MSP_WEB_SECURITY_GROUP_MEMBERS]'       ;
            EXECUTE SOLVIN.GenerateTable  @prjObjectName = N'[pubView].[MSP_WEB_SECURITY_CLAIMS]'               , @srdbTableName = N'[pub].[MSP_WEB_SECURITY_CLAIMS]'               , @objectgroup = '[pub].[MSP_WEB_SECURITY_CLAIMS]'              ;
            EXECUTE SOLVIN.GenerateTable  @prjObjectName = N'[pubView].[MSP_RESOURCES]'                         , @srdbTableName = N'[pub].[MSP_RESOURCES]'                         , @objectgroup = '[pub].[MSP_RESOURCES]'                        ;
        /* customfield meta data*/
            EXECUTE SOLVIN.GenerateTable  @prjObjectName = N'[dboView].[MFN_Epm_GetAllCustomFieldsInformation]' , @srdbTableName = N'[dbo].[MFN_Epm_GetAllCustomFieldsInformation]' , @objectgroup = '[dbo].[MFN_Epm_GetAllCustomFieldsInformation]';
         /*Examples Custom Lookup Tables (Single / MultiValue)*/
            --EXECUTE SOLVIN.GenerateTable  @prjObjectName = N'[dboView].[MSPLT_RBS_UserView]'                 , @srdbTableName = N'[dbo].[MSPLT_RBS_UserView]'                   , @objectgroup = NULL;
            --EXECUTE SOLVIN.GenerateTable  @prjObjectName = N'[dboView].[MSPCFTASK_ABC_AssociationView]'      , @srdbTableName = N'[dbo].[MSPCFTASK_ABC_AssociationView]'        , @objectgroup = NULL;
        /*
          SELECT [--]='DROP TABLE '+SCHEMA_NAME(o.schema_id) +'.'+ o.name FROM sys.all_columns c
          INNER JOIN sys.all_objects o ON c.object_id = o.object_id
          where o.type = 'U' AND c.name = 'DUMMY';
          SELECT [--]='DROP TABLE '+SCHEMA_NAME(o.schema_id) +'.'+ o.name FROM sys.all_columns c
          INNER JOIN sys.all_objects o ON c.object_id = o.object_id
          where o.type = 'U' AND c.name = 'SiteId';
        */
    --------------------------
    -- Tables primary keys / indexes
    --------------------------
    -- Write in table [SOLVIN].[SQLObjectDefinition]
    --> Example Reporting to dublicate Reporting tables:
        /*Standard-TABLES*/
            EXECUTE SOLVIN.GenerateTableIndexes @prjObjectName = N'[dboSynonym].[MSP_EpmProject]'                  , @srdbTableName = N'[dbo].[MSP_EpmProject]'                     , @DeleteSiteId = 1, @objectgroup = '[dbo].[MSP_EpmProject]'                         ;
            EXECUTE SOLVIN.GenerateTableIndexes @prjObjectName = N'[dboSynonym].[MSP_EpmResource]'                 , @srdbTableName = N'[dbo].[MSP_EpmResource]'                    , @DeleteSiteId = 1, @objectgroup = '[dbo].[MSP_EpmResource]'                        ;
            EXECUTE SOLVIN.GenerateTableIndexes @prjObjectName = N'[dboSynonym].[MSP_EpmAssignment]'               , @srdbTableName = N'[dbo].[MSP_EpmAssignment]'                  , @DeleteSiteId = 1, @objectgroup = '[dbo].[MSP_EpmAssignment]'                      ;
            EXECUTE SOLVIN.GenerateTableIndexes @prjObjectName = N'[dboSynonym].[MSP_EpmTask]'                     , @srdbTableName = N'[dbo].[MSP_EpmTask]'                        , @DeleteSiteId = 1, @objectgroup = '[dbo].[MSP_EpmTask]'                            ;
            EXECUTE SOLVIN.GenerateTableIndexes @prjObjectName = N'[dboSynonym].[MSP_EpmAssignmentByDay]'          , @srdbTableName = N'[dbo].[MSP_EpmAssignmentByDay]'             , @DeleteSiteId = 1, @objectgroup = '[dbo].[MSP_EpmAssignmentByDay]'                 ;
            EXECUTE SOLVIN.GenerateTableIndexes @prjObjectName = N'[dboSynonym].[MSP_EpmResourceByDay]'            , @srdbTableName = N'[dbo].[MSP_EpmResourceByDay]'               , @DeleteSiteId = 1, @objectgroup = '[dbo].[MSP_EpmResourceByDay]'                   ;
            EXECUTE SOLVIN.GenerateTableIndexes @prjObjectName = N'[dboSynonym].[MSP_TimeByDay]'                   , @srdbTableName = N'[dbo].[MSP_TimeByDay]'                      , @DeleteSiteId = 1, @objectgroup = '[dbo].[MSP_TimeByDay]'                          ;
        /*Standard-VIEWS*/
            EXECUTE SOLVIN.GenerateTableIndexes @prjObjectName = N'[dboSynonym].[MSP_EpmProject]'                  , @srdbTableName = N'[dbo].[MSP_EpmProject_UserView]'            , @DeleteSiteId = 1, @objectgroup = '[dbo].[MSP_EpmProject_UserView]'                ;
            EXECUTE SOLVIN.GenerateTableIndexes @prjObjectName = N'[dboSynonym].[MSP_EpmResource]'                 , @srdbTableName = N'[dbo].[MSP_EpmResource_UserView]'           , @DeleteSiteId = 1, @objectgroup = '[dbo].[MSP_EpmResource_UserView]'               ;
            EXECUTE SOLVIN.GenerateTableIndexes @prjObjectName = N'[dboSynonym].[MSP_EpmTask]'                     , @srdbTableName = N'[dbo].[MSP_EpmTask_UserView]'               , @DeleteSiteId = 1, @objectgroup = '[dbo].[MSP_EpmTask_UserView]'                   ;
            EXECUTE SOLVIN.GenerateTableIndexes @prjObjectName = N'[dboSynonym].[MSP_EpmAssignment]'               , @srdbTableName = N'[dbo].[MSP_EpmAssignment_UserView]'         , @DeleteSiteId = 1, @objectgroup = '[dbo].[MSP_EpmAssignment_UserView]'             ;
        /*Tables for group membership*/
             EXECUTE SOLVIN.GenerateTableIndexes @prjObjectName = N'[pubSynonym].[MSP_WEB_SECURITY_GROUPS]'        , @srdbTableName = N'[pub].[MSP_WEB_SECURITY_GROUPS]'            , @DeleteSiteId = 1, @objectgroup = '[pub].[MSP_WEB_SECURITY_GROUPS]'                ;
             EXECUTE SOLVIN.GenerateTableIndexes @prjObjectName = N'[pubSynonym].[MSP_WEB_SECURITY_GROUP_MEMBERS]' , @srdbTableName = N'[pub].[MSP_WEB_SECURITY_GROUP_MEMBERS]'     , @DeleteSiteId = 1, @objectgroup = '[pub].[MSP_WEB_SECURITY_GROUP_MEMBERS]'         ;
             EXECUTE SOLVIN.GenerateTableIndexes @prjObjectName = N'[pubSynonym].[MSP_WEB_SECURITY_CLAIMS]'        , @srdbTableName = N'[pub].[MSP_WEB_SECURITY_CLAIMS]'            , @DeleteSiteId = 1, @objectgroup = '[pub].[MSP_WEB_SECURITY_CLAIMS]'                ;
             EXECUTE SOLVIN.GenerateTableIndexes @prjObjectName = N'[pubSynonym].[MSP_RESOURCES]'                  , @srdbTableName = N'[pub].[MSP_RESOURCES]'                      , @DeleteSiteId = 1, @objectgroup = '[pub].[MSP_RESOURCES]'                          ;
        /* customfield meta data*/
            EXECUTE [SOLVIN].[EnsureIndex] @indexName = '[PK_MFN_Epm_GetAllCustomFieldsInformation]'               , @tableName = '[dbo].[MFN_Epm_GetAllCustomFieldsInformation]' , @columns = '[EntityTypeUID],[CustomFieldTypeUID]' , @include = '', @indexType = 'PRIMARY KEY CLUSTERED';
        /*Example manually set PK for Custom Lookup Tables (Single / MultiValue)*/
            --EXECUTE SOLVIN.EnsureIndex @indexName = N'[PK_MSPLT_RBS_UserView]', @tableName = N'[dbo].[MSPLT_RBS_UserView]', @columns = N'[LookupMemberUID]', @include = N'', @indexType = N'PRIMARY KEY CLUSTERED';
            --EXECUTE SOLVIN.EnsureIndex @indexName = N'[PK_MSPCFTASK_ABC_AssociationView]', @tableName = N'[dbo].[MSPCFTASK_ABC_AssociationView]', @columns = N'[EntityUID] ,[LookupMemberUID]', @include = N'', @indexType = N'PRIMARY KEY CLUSTERED';
    --------------------------
    -- Tables merge
    --------------------------
    -- Write in table [SOLVIN].[SQLObjectDefinition]
        /*Standard-TABLES*/
            EXECUTE SOLVIN.GenerateMerge @srdbTableName = N'[dbo].[MSP_EpmProject]'
                , @sourceName = N'[dboView].[MSP_EpmProject]'
                , @columnsPK = N''
                , @columnsMatch = N'
                  , -[ProjectCreatedRevisionCounter]
                  , -[ProjectModifiedRevisionCounter]
                  , -[ProjectCreatedDate]
                  , -[ProjectModifiedDate]
                '
                , @columnsIgnore = N''
                , @columnProjectUID = 'ProjectUID'
                , @columnResourceUID = NULL
                , @columnModifiedDate = N'[ProjectModifiedDate]'
                , @objectgroup = N'[dbo].[MSP_EpmProject]';
            EXECUTE SOLVIN.GenerateMerge @srdbTableName = N'[dbo].[MSP_EpmResource]'
                , @sourceName = N'[dboView].[MSP_EpmResource]'
                , @columnsPK = N'', @columnsMatch = N''
                , @columnsIgnore = N''
                , @columnProjectUID = NULL
                , @columnResourceUID = 'ResourceUID'
                , @columnModifiedDate = N'[ResourceModifiedDate]'
                , @objectgroup = N'[dbo].[MSP_EpmResource]';
            EXECUTE SOLVIN.GenerateMerge @srdbTableName = N'[dbo].[MSP_EpmAssignment]'
            , @sourceName = N'[dboView].[MSP_EpmAssignment]'
            , @columnsPK = N''
            , @columnsMatch = N'
                , -[AssignmentCreatedRevisionCounter]
                , -[AssignmentModifiedRevisionCounter]
                , -[AssignmentCreatedDate]
                , -[AssignmentModifiedDate]
                '
            , @columnsIgnore = N'', @columnProjectUID = 'ProjectUID'
            , @columnResourceUID = 'ResourceUID'
            , @columnModifiedDate = N'[AssignmentModifiedDate]'
            , @objectgroup = N'[dbo].[MSP_EpmAssignment]'              ;
            EXECUTE SOLVIN.GenerateMerge @srdbTableName = N'[dbo].[MSP_EpmTask]'
                , @sourceName = N'[dboView].[MSP_EpmTask]'
                , @columnsPK = N''
                , @columnsMatch = N'
                    , -[TaskCreatedRevisionCounter]
                    , -[TaskModifiedRevisionCounter]
                    , -[TaskCreatedDate]
                    , -[TaskModifiedDate]
                    '
                , @columnsIgnore = N''
                , @columnProjectUID = 'ProjectUID'
                , @columnResourceUID = NULL
                , @columnModifiedDate = N'[TaskModifiedDate]'
                , @objectgroup = N'[dbo].[MSP_EpmTask]';
            EXECUTE SOLVIN.GenerateMerge @srdbTableName = N'[dbo].[MSP_EpmAssignmentByDay]'                        , @sourceName = N'[dboView].[MSP_EpmAssignmentByDay]'                , @columnsPK = N'', @columnsMatch = N'', @columnsIgnore = N'', @columnProjectUID = 'ProjectUID',   @columnResourceUID = NULL,           @columnModifiedDate = N''                           , @objectgroup = N'[dbo].[MSP_EpmAssignmentByDay]'         ;
            EXECUTE SOLVIN.GenerateMerge @srdbTableName = N'[dbo].[MSP_EpmResourceByDay]'                          , @sourceName = N'[dboView].[MSP_EpmResourceByDay]'                  , @columnsPK = N'', @columnsMatch = N'', @columnsIgnore = N'', @columnProjectUID = NULL,           @columnResourceUID = 'ResourceUID',  @columnModifiedDate = N''                           , @objectgroup = N'[dbo].[MSP_EpmResourceByDay]'           ;
            EXECUTE SOLVIN.GenerateMerge @srdbTableName = N'[dbo].[MSP_TimeByDay]'                                 , @sourceName = N'[dboView].[MSP_TimeByDay]'                         , @columnsPK = N'', @columnsMatch = N'', @columnsIgnore = N'', @columnProjectUID = NULL,           @columnResourceUID = NULL,           @columnModifiedDate = N'[TimeByDay]'                , @objectgroup = N'[dbo].[MSP_TimeByDay]'                  ;

        /*Standard-VIEWS*/
            EXECUTE SOLVIN.GenerateMerge @srdbTableName = N'[dbo].[MSP_EpmProject_UserView]'
                , @sourceName = N'[dboView].[MSP_EpmProject_UserView]'
                , @columnsPK = N''
                , @columnsMatch = N'
                    , -[ResourceCreatedRevisionCounter]
                    , -[ResourceModifiedRevisionCounter]
                    , -[ResourceCreatedDate]
                    , -[ResourceModifiedDate]
                '
                , @columnsIgnore = N''
                , @columnProjectUID = 'ProjectUID'
                , @columnResourceUID = NULL
                , @columnModifiedDate = N'[ProjectModifiedDate]'
                , @objectgroup = N'[dbo].[MSP_EpmProject_UserView]';
            EXECUTE SOLVIN.GenerateMerge @srdbTableName = N'[dbo].[MSP_EpmResource_UserView]'
                , @sourceName = N'[dboView].[MSP_EpmResource_UserView]'
                , @columnsPK = N''
                , @columnsMatch = N'
                    , -[ResourceCreatedRevisionCounter]
                    , -[ResourceModifiedRevisionCounter]
                    , -[ResourceCreatedDate]
                    , -[ResourceModifiedDate]
                '
                , @columnsIgnore = N''
                , @columnProjectUID = NULL
                , @columnResourceUID = 'ResourceUID'
                , @columnModifiedDate = N'[ResourceModifiedDate]'
                , @objectgroup = N'[dbo].[MSP_EpmResource_UserView]';
            EXECUTE SOLVIN.GenerateMerge @srdbTableName = N'[dbo].[MSP_EpmTask_UserView]'
                , @sourceName = N'[dboView].[MSP_EpmTask_UserView]'
                , @columnsPK = N''
                , @columnsMatch = N'
                    , -[TaskCreatedRevisionCounter]
                    , -[TaskModifiedRevisionCounter]
                    , -[TaskCreatedDate]
                    , -[TaskModifiedDate]
                    '
                , @columnsIgnore = N''
                , @columnProjectUID = 'ProjectUID'
                , @columnResourceUID = NULL
                , @columnModifiedDate = N'[TaskModifiedDate]'
                , @objectgroup = N'[dbo].[MSP_EpmTask_UserView]';
            EXECUTE SOLVIN.GenerateMerge @srdbTableName = N'[dbo].[MSP_EpmAssignment_UserView]'
                , @sourceName = N'[dboView].[MSP_EpmAssignment_UserView]'
                , @columnsPK = N''
                , @columnsMatch = N'
                    , -[AssignmentCreatedRevisionCounter]
                    , -[AssignmentModifiedRevisionCounter]
                    , -[AssignmentCreatedDate]
                    , -[AssignmentModifiedDate]
                    '
                , @columnsIgnore = N''
                , @columnProjectUID = 'ProjectUID'
                , @columnResourceUID = 'ResourceUID'
                , @columnModifiedDate = N'[AssignmentModifiedDate]'
                , @objectgroup = N'[dbo].[MSP_EpmAssignment_UserView]';

        /*Tables for group membership*/
            EXECUTE SOLVIN.GenerateMerge @srdbTableName = N'[pub].[MSP_WEB_SECURITY_GROUPS]'                       , @sourceName = N'[pubView].[MSP_WEB_SECURITY_GROUPS]'               , @columnsPK = N'', @columnsMatch = N'', @columnsIgnore = N'', @columnProjectUID = NULL,           @columnResourceUID = NULL,           @columnModifiedDate = N'[MOD_DATE]'                 , @objectgroup = N'[pub].[MSP_WEB_SECURITY_GROUPS]'        ;
            EXECUTE SOLVIN.GenerateMerge @srdbTableName = N'[pub].[MSP_WEB_SECURITY_GROUP_MEMBERS]'                , @sourceName = N'[pubView].[MSP_WEB_SECURITY_GROUP_MEMBERS]'        , @columnsPK = N'', @columnsMatch = N'', @columnsIgnore = N'', @columnProjectUID = NULL,           @columnResourceUID = NULL,           @columnModifiedDate = N'[MOD_DATE]'                 , @objectgroup = N'[pub].[MSP_WEB_SECURITY_GROUP_MEMBERS]' ;
            EXECUTE SOLVIN.GenerateMerge @srdbTableName = N'[pub].[MSP_WEB_SECURITY_CLAIMS]'                       , @sourceName = N'[pubView].[MSP_WEB_SECURITY_CLAIMS]'               , @columnsPK = N'', @columnsMatch = N'', @columnsIgnore = N'', @columnProjectUID = NULL,           @columnResourceUID = NULL,           @columnModifiedDate = N''                           , @objectgroup = N'[pub].[MSP_WEB_SECURITY_CLAIMS]'        ;
            EXECUTE SOLVIN.GenerateMerge @srdbTableName = N'[pub].[MSP_RESOURCES]'                                 , @sourceName = N'[pubView].[MSP_RESOURCES]'                         , @columnsPK = N'', @columnsMatch = N'', @columnsIgnore = N'', @columnProjectUID = NULL,           @columnResourceUID = NULL,           @columnModifiedDate = N'[MOD_DATE]'                 , @objectgroup = N'[pub].[MSP_RESOURCES]'                  ;

        /* customfield meta data*/
            EXECUTE SOLVIN.GenerateMerge @srdbTableName = N'[dbo].[MFN_Epm_GetAllCustomFieldsInformation]'         , @sourceName = N'[dboView].[MFN_Epm_GetAllCustomFieldsInformation]' , @columnsPK = N'', @columnsMatch = N'', @columnsIgnore = N'', @columnProjectUID = NULL,           @columnResourceUID = NULL,           @columnModifiedDate = NULL,                           @objectgroup = N'[dbo.][MFN_Epm_GetAllCustomFieldsInformation]';

         /*Examples Custom Lookup Tables (Single / MultiValue)*/
            -- EXECUTE  SOLVIN.GenerateMerge @srdbTableName = N'[dbo].[MSPLT_RBS_UserView]'                , @sourceName = N'[dboView].[MSPLT_RBS_UserView]'                     , @columnsPK = N''   , @columnsMatch = N''   , @columnsIgnore = N''    , @objectgroup =null;
            -- EXECUTE  SOLVIN.GenerateMerge @srdbTableName = N'[dbo].[MSPCFTASK_ABC_AssociationView]'     , @sourceName = N'[dboView].[MSPCFTASK_ABC_AssociationView]'          , @columnsPK = N''   , @columnsMatch = N''   , @columnsIgnore = N''    , @objectgroup =null;
/*
This procedure deliveres a set of often used tables / views for reporting

    EXECUTE [SOLVIN].[RollOutReportTables] -- (***5.***)

*/
END;

