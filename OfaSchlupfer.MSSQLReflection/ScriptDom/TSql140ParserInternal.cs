#pragma warning disable CS0219
using antlr;
using antlr.collections.impl;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;

namespace OfaSchlupfer.ScriptDom {
    internal class TSql140ParserInternal : TSql140ParserBaseInternal {
        public const int EOF = 1;

        public const int NULL_TREE_LOOKAHEAD = 3;

        public const int Add = 4;

        public const int All = 5;

        public const int Alter = 6;

        public const int And = 7;

        public const int Any = 8;

        public const int As = 9;

        public const int Asc = 10;

        public const int Authorization = 11;

        public const int Backup = 12;

        public const int Begin = 13;

        public const int Between = 14;

        public const int Break = 15;

        public const int Browse = 16;

        public const int Bulk = 17;

        public const int By = 18;

        public const int Cascade = 19;

        public const int Case = 20;

        public const int Check = 21;

        public const int Checkpoint = 22;

        public const int Close = 23;

        public const int Clustered = 24;

        public const int Coalesce = 25;

        public const int Collate = 26;

        public const int Column = 27;

        public const int Commit = 28;

        public const int Compute = 29;

        public const int Constraint = 30;

        public const int Contains = 31;

        public const int ContainsTable = 32;

        public const int Continue = 33;

        public const int Convert = 34;

        public const int Create = 35;

        public const int Cross = 36;

        public const int Current = 37;

        public const int CurrentDate = 38;

        public const int CurrentTime = 39;

        public const int CurrentTimestamp = 40;

        public const int CurrentUser = 41;

        public const int Cursor = 42;

        public const int Database = 43;

        public const int Dbcc = 44;

        public const int Deallocate = 45;

        public const int Declare = 46;

        public const int Default = 47;

        public const int Delete = 48;

        public const int Deny = 49;

        public const int Desc = 50;

        public const int Distinct = 51;

        public const int Distributed = 52;

        public const int Double = 53;

        public const int Drop = 54;

        public const int Else = 55;

        public const int End = 56;

        public const int Errlvl = 57;

        public const int Escape = 58;

        public const int Except = 59;

        public const int Exec = 60;

        public const int Execute = 61;

        public const int Exists = 62;

        public const int Exit = 63;

        public const int Fetch = 64;

        public const int File = 65;

        public const int FillFactor = 66;

        public const int For = 67;

        public const int Foreign = 68;

        public const int FreeText = 69;

        public const int FreeTextTable = 70;

        public const int From = 71;

        public const int Full = 72;

        public const int Function = 73;

        public const int GoTo = 74;

        public const int Grant = 75;

        public const int Group = 76;

        public const int Having = 77;

        public const int HoldLock = 78;

        public const int Identity = 79;

        public const int IdentityInsert = 80;

        public const int IdentityColumn = 81;

        public const int If = 82;

        public const int In = 83;

        public const int Index = 84;

        public const int Inner = 85;

        public const int Insert = 86;

        public const int Intersect = 87;

        public const int Into = 88;

        public const int Is = 89;

        public const int Join = 90;

        public const int Key = 91;

        public const int Kill = 92;

        public const int Left = 93;

        public const int Like = 94;

        public const int LineNo = 95;

        public const int National = 96;

        public const int NoCheck = 97;

        public const int NonClustered = 98;

        public const int Not = 99;

        public const int Null = 100;

        public const int NullIf = 101;

        public const int Of = 102;

        public const int Off = 103;

        public const int Offsets = 104;

        public const int On = 105;

        public const int Open = 106;

        public const int OpenDataSource = 107;

        public const int OpenQuery = 108;

        public const int OpenRowSet = 109;

        public const int OpenXml = 110;

        public const int Option = 111;

        public const int Or = 112;

        public const int Order = 113;

        public const int Outer = 114;

        public const int Over = 115;

        public const int Percent = 116;

        public const int Plan = 117;

        public const int Primary = 118;

        public const int Print = 119;

        public const int Proc = 120;

        public const int Procedure = 121;

        public const int Public = 122;

        public const int Raiserror = 123;

        public const int Read = 124;

        public const int ReadText = 125;

        public const int Reconfigure = 126;

        public const int References = 127;

        public const int Replication = 128;

        public const int Restore = 129;

        public const int Restrict = 130;

        public const int Return = 131;

        public const int Revoke = 132;

        public const int Right = 133;

        public const int Rollback = 134;

        public const int RowCount = 135;

        public const int RowGuidColumn = 136;

        public const int Rule = 137;

        public const int Save = 138;

        public const int Schema = 139;

        public const int Select = 140;

        public const int SessionUser = 141;

        public const int Set = 142;

        public const int SetUser = 143;

        public const int Shutdown = 144;

        public const int Some = 145;

        public const int Statistics = 146;

        public const int SystemUser = 147;

        public const int Table = 148;

        public const int TextSize = 149;

        public const int Then = 150;

        public const int To = 151;

        public const int Top = 152;

        public const int Tran = 153;

        public const int Transaction = 154;

        public const int Trigger = 155;

        public const int Truncate = 156;

        public const int TSEqual = 157;

        public const int Union = 158;

        public const int Unique = 159;

        public const int Update = 160;

        public const int UpdateText = 161;

        public const int Use = 162;

        public const int User = 163;

        public const int Values = 164;

        public const int Varying = 165;

        public const int View = 166;

        public const int WaitFor = 167;

        public const int When = 168;

        public const int Where = 169;

        public const int While = 170;

        public const int With = 171;

        public const int WriteText = 172;

        public const int Disk = 173;

        public const int Precision = 174;

        public const int External = 175;

        public const int Revert = 176;

        public const int Pivot = 177;

        public const int Unpivot = 178;

        public const int TableSample = 179;

        public const int Dump = 180;

        public const int Load = 181;

        public const int Merge = 182;

        public const int StopList = 183;

        public const int SemanticKeyPhraseTable = 184;

        public const int SemanticSimilarityTable = 185;

        public const int SemanticSimilarityDetailsTable = 186;

        public const int TryConvert = 187;

        public const int Bang = 188;

        public const int PercentSign = 189;

        public const int Ampersand = 190;

        public const int LeftParenthesis = 191;

        public const int RightParenthesis = 192;

        public const int LeftCurly = 193;

        public const int RightCurly = 194;

        public const int Star = 195;

        public const int MultiplyEquals = 196;

        public const int Plus = 197;

        public const int Comma = 198;

        public const int Minus = 199;

        public const int Dot = 200;

        public const int Divide = 201;

        public const int Colon = 202;

        public const int DoubleColon = 203;

        public const int Semicolon = 204;

        public const int LessThan = 205;

        public const int EqualsSign = 206;

        public const int RightOuterJoin = 207;

        public const int GreaterThan = 208;

        public const int Circumflex = 209;

        public const int VerticalLine = 210;

        public const int Tilde = 211;

        public const int AddEquals = 212;

        public const int SubtractEquals = 213;

        public const int DivideEquals = 214;

        public const int ModEquals = 215;

        public const int BitwiseAndEquals = 216;

        public const int BitwiseOrEquals = 217;

        public const int BitwiseXorEquals = 218;

        public const int Go = 219;

        public const int Label = 220;

        public const int Integer = 221;

        public const int Numeric = 222;

        public const int Real = 223;

        public const int HexLiteral = 224;

        public const int Money = 225;

        public const int SqlCommandIdentifier = 226;

        public const int PseudoColumn = 227;

        public const int DollarPartition = 228;

        public const int AsciiStringOrQuotedIdentifier = 229;

        public const int AsciiStringLiteral = 230;

        public const int UnicodeStringLiteral = 231;

        public const int Identifier = 232;

        public const int QuotedIdentifier = 233;

        public const int Variable = 234;

        public const int OdbcInitiator = 235;

        public const int ProcNameSemicolon = 236;

        public const int SingleLineComment = 237;

        public const int MultilineComment = 238;

        public const int WhiteSpace = 239;

        public static readonly string[] tokenNames_ = new string[240]
        {
            "\"<0>\"",
            "\"EOF\"",
            "\"<2>\"",
            "\"NULL_TREE_LOOKAHEAD\"",
            "\"add\"",
            "\"all\"",
            "\"alter\"",
            "\"and\"",
            "\"any\"",
            "\"as\"",
            "\"asc\"",
            "\"authorization\"",
            "\"backup\"",
            "\"begin\"",
            "\"between\"",
            "\"break\"",
            "\"browse\"",
            "\"bulk\"",
            "\"by\"",
            "\"cascade\"",
            "\"case\"",
            "\"check\"",
            "\"checkpoint\"",
            "\"close\"",
            "\"clustered\"",
            "\"coalesce\"",
            "\"collate\"",
            "\"column\"",
            "\"commit\"",
            "\"compute\"",
            "\"constraint\"",
            "\"contains\"",
            "\"containstable\"",
            "\"continue\"",
            "\"convert\"",
            "\"create\"",
            "\"cross\"",
            "\"current\"",
            "\"current_date\"",
            "\"current_time\"",
            "\"current_timestamp\"",
            "\"current_user\"",
            "\"cursor\"",
            "\"database\"",
            "\"dbcc\"",
            "\"deallocate\"",
            "\"declare\"",
            "\"default\"",
            "\"delete\"",
            "\"deny\"",
            "\"desc\"",
            "\"distinct\"",
            "\"distributed\"",
            "\"double\"",
            "\"drop\"",
            "\"else\"",
            "\"end\"",
            "\"errlvl\"",
            "\"escape\"",
            "\"except\"",
            "\"exec\"",
            "\"execute\"",
            "\"exists\"",
            "\"exit\"",
            "\"fetch\"",
            "\"file\"",
            "\"fillfactor\"",
            "\"for\"",
            "\"foreign\"",
            "\"freetext\"",
            "\"freetexttable\"",
            "\"from\"",
            "\"full\"",
            "\"function\"",
            "\"goto\"",
            "\"grant\"",
            "\"group\"",
            "\"having\"",
            "\"holdlock\"",
            "\"identity\"",
            "\"identity_insert\"",
            "\"identitycol\"",
            "\"if\"",
            "\"in\"",
            "\"index\"",
            "\"inner\"",
            "\"insert\"",
            "\"intersect\"",
            "\"into\"",
            "\"is\"",
            "\"join\"",
            "\"key\"",
            "\"kill\"",
            "\"left\"",
            "\"like\"",
            "\"lineno\"",
            "\"national\"",
            "\"nocheck\"",
            "\"nonclustered\"",
            "\"not\"",
            "\"null\"",
            "\"nullif\"",
            "\"of\"",
            "\"off\"",
            "\"offsets\"",
            "\"on\"",
            "\"open\"",
            "\"opendatasource\"",
            "\"openquery\"",
            "\"openrowset\"",
            "\"openxml\"",
            "\"option\"",
            "\"or\"",
            "\"order\"",
            "\"outer\"",
            "\"over\"",
            "\"percent\"",
            "\"plan\"",
            "\"primary\"",
            "\"print\"",
            "\"proc\"",
            "\"procedure\"",
            "\"public\"",
            "\"raiserror\"",
            "\"read\"",
            "\"readtext\"",
            "\"reconfigure\"",
            "\"references\"",
            "\"replication\"",
            "\"restore\"",
            "\"restrict\"",
            "\"return\"",
            "\"revoke\"",
            "\"right\"",
            "\"rollback\"",
            "\"rowcount\"",
            "\"rowguidcol\"",
            "\"rule\"",
            "\"save\"",
            "\"schema\"",
            "\"select\"",
            "\"session_user\"",
            "\"set\"",
            "\"setuser\"",
            "\"shutdown\"",
            "\"some\"",
            "\"statistics\"",
            "\"system_user\"",
            "\"table\"",
            "\"textsize\"",
            "\"then\"",
            "\"to\"",
            "\"top\"",
            "\"tran\"",
            "\"transaction\"",
            "\"trigger\"",
            "\"truncate\"",
            "\"tsequal\"",
            "\"union\"",
            "\"unique\"",
            "\"update\"",
            "\"updatetext\"",
            "\"use\"",
            "\"user\"",
            "\"values\"",
            "\"varying\"",
            "\"view\"",
            "\"waitfor\"",
            "\"when\"",
            "\"where\"",
            "\"while\"",
            "\"with\"",
            "\"writetext\"",
            "\"Disk\"",
            "\"Precision\"",
            "\"External\"",
            "\"Revert\"",
            "\"Pivot\"",
            "\"Unpivot\"",
            "\"TableSample\"",
            "\"Dump\"",
            "\"Load\"",
            "\"Merge\"",
            "\"StopList\"",
            "\"SemanticKeyPhraseTable\"",
            "\"SemanticSimilarityTable\"",
            "\"SemanticSimilarityDetailsTable\"",
            "\"TryConvert\"",
            "\"Bang\"",
            "\"PercentSign\"",
            "\"Ampersand\"",
            "\"LeftParenthesis\"",
            "\"RightParenthesis\"",
            "\"LeftCurly\"",
            "\"RightCurly\"",
            "\"Star\"",
            "\"MultiplyEquals\"",
            "\"Plus\"",
            "\"Comma\"",
            "\"Minus\"",
            "\"Dot\"",
            "\"Divide\"",
            "\"Colon\"",
            "\"DoubleColon\"",
            "\"Semicolon\"",
            "\"LessThan\"",
            "\"EqualsSign\"",
            "\"RightOuterJoin\"",
            "\"GreaterThan\"",
            "\"Circumflex\"",
            "\"VerticalLine\"",
            "\"Tilde\"",
            "\"AddEquals\"",
            "\"SubtractEquals\"",
            "\"DivideEquals\"",
            "\"ModEquals\"",
            "\"BitwiseAndEquals\"",
            "\"BitwiseOrEquals\"",
            "\"BitwiseXorEquals\"",
            "\"Go\"",
            "\"Label\"",
            "\"Integer\"",
            "\"Numeric\"",
            "\"Real\"",
            "\"HexLiteral\"",
            "\"Money\"",
            "\"SqlCommandIdentifier\"",
            "\"PseudoColumn\"",
            "\"DollarPartition\"",
            "\"AsciiStringOrQuotedIdentifier\"",
            "\"AsciiStringLiteral\"",
            "\"UnicodeStringLiteral\"",
            "\"Identifier\"",
            "\"QuotedIdentifier\"",
            "\"Variable\"",
            "\"OdbcInitiator\"",
            "\"ProcNameSemicolon\"",
            "\"SingleLineComment\"",
            "\"MultilineComment\"",
            "\"WhiteSpace\""
        };

        public static readonly BitSet tokenSet_0_ = new BitSet(TSql140ParserInternal.mk_tokenSet_0_());

        public static readonly BitSet tokenSet_1_ = new BitSet(TSql140ParserInternal.mk_tokenSet_1_());

        public static readonly BitSet tokenSet_2_ = new BitSet(TSql140ParserInternal.mk_tokenSet_2_());

        public static readonly BitSet tokenSet_3_ = new BitSet(TSql140ParserInternal.mk_tokenSet_3_());

        public static readonly BitSet tokenSet_4_ = new BitSet(TSql140ParserInternal.mk_tokenSet_4_());

        public static readonly BitSet tokenSet_5_ = new BitSet(TSql140ParserInternal.mk_tokenSet_5_());

        public static readonly BitSet tokenSet_6_ = new BitSet(TSql140ParserInternal.mk_tokenSet_6_());

        public static readonly BitSet tokenSet_7_ = new BitSet(TSql140ParserInternal.mk_tokenSet_7_());

        public static readonly BitSet tokenSet_8_ = new BitSet(TSql140ParserInternal.mk_tokenSet_8_());

        public static readonly BitSet tokenSet_9_ = new BitSet(TSql140ParserInternal.mk_tokenSet_9_());

        public static readonly BitSet tokenSet_10_ = new BitSet(TSql140ParserInternal.mk_tokenSet_10_());

        public static readonly BitSet tokenSet_11_ = new BitSet(TSql140ParserInternal.mk_tokenSet_11_());

        public static readonly BitSet tokenSet_12_ = new BitSet(TSql140ParserInternal.mk_tokenSet_12_());

        public static readonly BitSet tokenSet_13_ = new BitSet(TSql140ParserInternal.mk_tokenSet_13_());

        public static readonly BitSet tokenSet_14_ = new BitSet(TSql140ParserInternal.mk_tokenSet_14_());

        public static readonly BitSet tokenSet_15_ = new BitSet(TSql140ParserInternal.mk_tokenSet_15_());

        public static readonly BitSet tokenSet_16_ = new BitSet(TSql140ParserInternal.mk_tokenSet_16_());

        public static readonly BitSet tokenSet_17_ = new BitSet(TSql140ParserInternal.mk_tokenSet_17_());

        public static readonly BitSet tokenSet_18_ = new BitSet(TSql140ParserInternal.mk_tokenSet_18_());

        public static readonly BitSet tokenSet_19_ = new BitSet(TSql140ParserInternal.mk_tokenSet_19_());

        public static readonly BitSet tokenSet_20_ = new BitSet(TSql140ParserInternal.mk_tokenSet_20_());

        public static readonly BitSet tokenSet_21_ = new BitSet(TSql140ParserInternal.mk_tokenSet_21_());

        public static readonly BitSet tokenSet_22_ = new BitSet(TSql140ParserInternal.mk_tokenSet_22_());

        public static readonly BitSet tokenSet_23_ = new BitSet(TSql140ParserInternal.mk_tokenSet_23_());

        public static readonly BitSet tokenSet_24_ = new BitSet(TSql140ParserInternal.mk_tokenSet_24_());

        public static readonly BitSet tokenSet_25_ = new BitSet(TSql140ParserInternal.mk_tokenSet_25_());

        public static readonly BitSet tokenSet_26_ = new BitSet(TSql140ParserInternal.mk_tokenSet_26_());

        public static readonly BitSet tokenSet_27_ = new BitSet(TSql140ParserInternal.mk_tokenSet_27_());

        public static readonly BitSet tokenSet_28_ = new BitSet(TSql140ParserInternal.mk_tokenSet_28_());

        public static readonly BitSet tokenSet_29_ = new BitSet(TSql140ParserInternal.mk_tokenSet_29_());

        public static readonly BitSet tokenSet_30_ = new BitSet(TSql140ParserInternal.mk_tokenSet_30_());

        public static readonly BitSet tokenSet_31_ = new BitSet(TSql140ParserInternal.mk_tokenSet_31_());

        public static readonly BitSet tokenSet_32_ = new BitSet(TSql140ParserInternal.mk_tokenSet_32_());

        public static readonly BitSet tokenSet_33_ = new BitSet(TSql140ParserInternal.mk_tokenSet_33_());

        public static readonly BitSet tokenSet_34_ = new BitSet(TSql140ParserInternal.mk_tokenSet_34_());

        public static readonly BitSet tokenSet_35_ = new BitSet(TSql140ParserInternal.mk_tokenSet_35_());

        public static readonly BitSet tokenSet_36_ = new BitSet(TSql140ParserInternal.mk_tokenSet_36_());

        public static readonly BitSet tokenSet_37_ = new BitSet(TSql140ParserInternal.mk_tokenSet_37_());

        public static readonly BitSet tokenSet_38_ = new BitSet(TSql140ParserInternal.mk_tokenSet_38_());

        public static readonly BitSet tokenSet_39_ = new BitSet(TSql140ParserInternal.mk_tokenSet_39_());

        public static readonly BitSet tokenSet_40_ = new BitSet(TSql140ParserInternal.mk_tokenSet_40_());

        public static readonly BitSet tokenSet_41_ = new BitSet(TSql140ParserInternal.mk_tokenSet_41_());

        public static readonly BitSet tokenSet_42_ = new BitSet(TSql140ParserInternal.mk_tokenSet_42_());

        public static readonly BitSet tokenSet_43_ = new BitSet(TSql140ParserInternal.mk_tokenSet_43_());

        public static readonly BitSet tokenSet_44_ = new BitSet(TSql140ParserInternal.mk_tokenSet_44_());

        public static readonly BitSet tokenSet_45_ = new BitSet(TSql140ParserInternal.mk_tokenSet_45_());

        public static readonly BitSet tokenSet_46_ = new BitSet(TSql140ParserInternal.mk_tokenSet_46_());

        public static readonly BitSet tokenSet_47_ = new BitSet(TSql140ParserInternal.mk_tokenSet_47_());

        public static readonly BitSet tokenSet_48_ = new BitSet(TSql140ParserInternal.mk_tokenSet_48_());

        public static readonly BitSet tokenSet_49_ = new BitSet(TSql140ParserInternal.mk_tokenSet_49_());

        public static readonly BitSet tokenSet_50_ = new BitSet(TSql140ParserInternal.mk_tokenSet_50_());

        public static readonly BitSet tokenSet_51_ = new BitSet(TSql140ParserInternal.mk_tokenSet_51_());

        public static readonly BitSet tokenSet_52_ = new BitSet(TSql140ParserInternal.mk_tokenSet_52_());

        public static readonly BitSet tokenSet_53_ = new BitSet(TSql140ParserInternal.mk_tokenSet_53_());

        public static readonly BitSet tokenSet_54_ = new BitSet(TSql140ParserInternal.mk_tokenSet_54_());

        public static readonly BitSet tokenSet_55_ = new BitSet(TSql140ParserInternal.mk_tokenSet_55_());

        public static readonly BitSet tokenSet_56_ = new BitSet(TSql140ParserInternal.mk_tokenSet_56_());

        public static readonly BitSet tokenSet_57_ = new BitSet(TSql140ParserInternal.mk_tokenSet_57_());

        public static readonly BitSet tokenSet_58_ = new BitSet(TSql140ParserInternal.mk_tokenSet_58_());

        public static readonly BitSet tokenSet_59_ = new BitSet(TSql140ParserInternal.mk_tokenSet_59_());

        public static readonly BitSet tokenSet_60_ = new BitSet(TSql140ParserInternal.mk_tokenSet_60_());

        public static readonly BitSet tokenSet_61_ = new BitSet(TSql140ParserInternal.mk_tokenSet_61_());

        public static readonly BitSet tokenSet_62_ = new BitSet(TSql140ParserInternal.mk_tokenSet_62_());

        public static readonly BitSet tokenSet_63_ = new BitSet(TSql140ParserInternal.mk_tokenSet_63_());

        public static readonly BitSet tokenSet_64_ = new BitSet(TSql140ParserInternal.mk_tokenSet_64_());

        public static readonly BitSet tokenSet_65_ = new BitSet(TSql140ParserInternal.mk_tokenSet_65_());

        public static readonly BitSet tokenSet_66_ = new BitSet(TSql140ParserInternal.mk_tokenSet_66_());

        public static readonly BitSet tokenSet_67_ = new BitSet(TSql140ParserInternal.mk_tokenSet_67_());

        public static readonly BitSet tokenSet_68_ = new BitSet(TSql140ParserInternal.mk_tokenSet_68_());

        public static readonly BitSet tokenSet_69_ = new BitSet(TSql140ParserInternal.mk_tokenSet_69_());

        public static readonly BitSet tokenSet_70_ = new BitSet(TSql140ParserInternal.mk_tokenSet_70_());

        public static readonly BitSet tokenSet_71_ = new BitSet(TSql140ParserInternal.mk_tokenSet_71_());

        public static readonly BitSet tokenSet_72_ = new BitSet(TSql140ParserInternal.mk_tokenSet_72_());

        public static readonly BitSet tokenSet_73_ = new BitSet(TSql140ParserInternal.mk_tokenSet_73_());

        public static readonly BitSet tokenSet_74_ = new BitSet(TSql140ParserInternal.mk_tokenSet_74_());

        public static readonly BitSet tokenSet_75_ = new BitSet(TSql140ParserInternal.mk_tokenSet_75_());

        public static readonly BitSet tokenSet_76_ = new BitSet(TSql140ParserInternal.mk_tokenSet_76_());

        public static readonly BitSet tokenSet_77_ = new BitSet(TSql140ParserInternal.mk_tokenSet_77_());

        public static readonly BitSet tokenSet_78_ = new BitSet(TSql140ParserInternal.mk_tokenSet_78_());

        public static readonly BitSet tokenSet_79_ = new BitSet(TSql140ParserInternal.mk_tokenSet_79_());

        public static readonly BitSet tokenSet_80_ = new BitSet(TSql140ParserInternal.mk_tokenSet_80_());

        public static readonly BitSet tokenSet_81_ = new BitSet(TSql140ParserInternal.mk_tokenSet_81_());

        public static readonly BitSet tokenSet_82_ = new BitSet(TSql140ParserInternal.mk_tokenSet_82_());

        public static readonly BitSet tokenSet_83_ = new BitSet(TSql140ParserInternal.mk_tokenSet_83_());

        public static readonly BitSet tokenSet_84_ = new BitSet(TSql140ParserInternal.mk_tokenSet_84_());

        public static readonly BitSet tokenSet_85_ = new BitSet(TSql140ParserInternal.mk_tokenSet_85_());

        public static readonly BitSet tokenSet_86_ = new BitSet(TSql140ParserInternal.mk_tokenSet_86_());

        public static readonly BitSet tokenSet_87_ = new BitSet(TSql140ParserInternal.mk_tokenSet_87_());

        public static readonly BitSet tokenSet_88_ = new BitSet(TSql140ParserInternal.mk_tokenSet_88_());

        public static readonly BitSet tokenSet_89_ = new BitSet(TSql140ParserInternal.mk_tokenSet_89_());

        public static readonly BitSet tokenSet_90_ = new BitSet(TSql140ParserInternal.mk_tokenSet_90_());

        public static readonly BitSet tokenSet_91_ = new BitSet(TSql140ParserInternal.mk_tokenSet_91_());

        public static readonly BitSet tokenSet_92_ = new BitSet(TSql140ParserInternal.mk_tokenSet_92_());

        public static readonly BitSet tokenSet_93_ = new BitSet(TSql140ParserInternal.mk_tokenSet_93_());

        public static readonly BitSet tokenSet_94_ = new BitSet(TSql140ParserInternal.mk_tokenSet_94_());

        public static readonly BitSet tokenSet_95_ = new BitSet(TSql140ParserInternal.mk_tokenSet_95_());

        public static readonly BitSet tokenSet_96_ = new BitSet(TSql140ParserInternal.mk_tokenSet_96_());

        public static readonly BitSet tokenSet_97_ = new BitSet(TSql140ParserInternal.mk_tokenSet_97_());

        public static readonly BitSet tokenSet_98_ = new BitSet(TSql140ParserInternal.mk_tokenSet_98_());

        public static readonly BitSet tokenSet_99_ = new BitSet(TSql140ParserInternal.mk_tokenSet_99_());

        public static readonly BitSet tokenSet_100_ = new BitSet(TSql140ParserInternal.mk_tokenSet_100_());

        public static readonly BitSet tokenSet_101_ = new BitSet(TSql140ParserInternal.mk_tokenSet_101_());

        public static readonly BitSet tokenSet_102_ = new BitSet(TSql140ParserInternal.mk_tokenSet_102_());

        public static readonly BitSet tokenSet_103_ = new BitSet(TSql140ParserInternal.mk_tokenSet_103_());

        public static readonly BitSet tokenSet_104_ = new BitSet(TSql140ParserInternal.mk_tokenSet_104_());

        public static readonly BitSet tokenSet_105_ = new BitSet(TSql140ParserInternal.mk_tokenSet_105_());

        public static readonly BitSet tokenSet_106_ = new BitSet(TSql140ParserInternal.mk_tokenSet_106_());

        public static readonly BitSet tokenSet_107_ = new BitSet(TSql140ParserInternal.mk_tokenSet_107_());

        public static readonly BitSet tokenSet_108_ = new BitSet(TSql140ParserInternal.mk_tokenSet_108_());

        public static readonly BitSet tokenSet_109_ = new BitSet(TSql140ParserInternal.mk_tokenSet_109_());

        public static readonly BitSet tokenSet_110_ = new BitSet(TSql140ParserInternal.mk_tokenSet_110_());

        public static readonly BitSet tokenSet_111_ = new BitSet(TSql140ParserInternal.mk_tokenSet_111_());

        public static readonly BitSet tokenSet_112_ = new BitSet(TSql140ParserInternal.mk_tokenSet_112_());

        public static readonly BitSet tokenSet_113_ = new BitSet(TSql140ParserInternal.mk_tokenSet_113_());

        public static readonly BitSet tokenSet_114_ = new BitSet(TSql140ParserInternal.mk_tokenSet_114_());

        public static readonly BitSet tokenSet_115_ = new BitSet(TSql140ParserInternal.mk_tokenSet_115_());

        public static readonly BitSet tokenSet_116_ = new BitSet(TSql140ParserInternal.mk_tokenSet_116_());

        public static readonly BitSet tokenSet_117_ = new BitSet(TSql140ParserInternal.mk_tokenSet_117_());

        public static readonly BitSet tokenSet_118_ = new BitSet(TSql140ParserInternal.mk_tokenSet_118_());

        public static readonly BitSet tokenSet_119_ = new BitSet(TSql140ParserInternal.mk_tokenSet_119_());

        public static readonly BitSet tokenSet_120_ = new BitSet(TSql140ParserInternal.mk_tokenSet_120_());

        public static readonly BitSet tokenSet_121_ = new BitSet(TSql140ParserInternal.mk_tokenSet_121_());

        public static readonly BitSet tokenSet_122_ = new BitSet(TSql140ParserInternal.mk_tokenSet_122_());

        public static readonly BitSet tokenSet_123_ = new BitSet(TSql140ParserInternal.mk_tokenSet_123_());

        public static readonly BitSet tokenSet_124_ = new BitSet(TSql140ParserInternal.mk_tokenSet_124_());

        public static readonly BitSet tokenSet_125_ = new BitSet(TSql140ParserInternal.mk_tokenSet_125_());

        public static readonly BitSet tokenSet_126_ = new BitSet(TSql140ParserInternal.mk_tokenSet_126_());

        public static readonly BitSet tokenSet_127_ = new BitSet(TSql140ParserInternal.mk_tokenSet_127_());

        public static readonly BitSet tokenSet_128_ = new BitSet(TSql140ParserInternal.mk_tokenSet_128_());

        public static readonly BitSet tokenSet_129_ = new BitSet(TSql140ParserInternal.mk_tokenSet_129_());

        public static readonly BitSet tokenSet_130_ = new BitSet(TSql140ParserInternal.mk_tokenSet_130_());

        public static readonly BitSet tokenSet_131_ = new BitSet(TSql140ParserInternal.mk_tokenSet_131_());

        public static readonly BitSet tokenSet_132_ = new BitSet(TSql140ParserInternal.mk_tokenSet_132_());

        public static readonly BitSet tokenSet_133_ = new BitSet(TSql140ParserInternal.mk_tokenSet_133_());

        public static readonly BitSet tokenSet_134_ = new BitSet(TSql140ParserInternal.mk_tokenSet_134_());

        public static readonly BitSet tokenSet_135_ = new BitSet(TSql140ParserInternal.mk_tokenSet_135_());

        public static readonly BitSet tokenSet_136_ = new BitSet(TSql140ParserInternal.mk_tokenSet_136_());

        public static readonly BitSet tokenSet_137_ = new BitSet(TSql140ParserInternal.mk_tokenSet_137_());

        public static readonly BitSet tokenSet_138_ = new BitSet(TSql140ParserInternal.mk_tokenSet_138_());

        public static readonly BitSet tokenSet_139_ = new BitSet(TSql140ParserInternal.mk_tokenSet_139_());

        public static readonly BitSet tokenSet_140_ = new BitSet(TSql140ParserInternal.mk_tokenSet_140_());

        public static readonly BitSet tokenSet_141_ = new BitSet(TSql140ParserInternal.mk_tokenSet_141_());

        public static readonly BitSet tokenSet_142_ = new BitSet(TSql140ParserInternal.mk_tokenSet_142_());

        public static readonly BitSet tokenSet_143_ = new BitSet(TSql140ParserInternal.mk_tokenSet_143_());

        public static readonly BitSet tokenSet_144_ = new BitSet(TSql140ParserInternal.mk_tokenSet_144_());

        public static readonly BitSet tokenSet_145_ = new BitSet(TSql140ParserInternal.mk_tokenSet_145_());

        public static readonly BitSet tokenSet_146_ = new BitSet(TSql140ParserInternal.mk_tokenSet_146_());

        public static readonly BitSet tokenSet_147_ = new BitSet(TSql140ParserInternal.mk_tokenSet_147_());

        public static readonly BitSet tokenSet_148_ = new BitSet(TSql140ParserInternal.mk_tokenSet_148_());

        public static readonly BitSet tokenSet_149_ = new BitSet(TSql140ParserInternal.mk_tokenSet_149_());

        public static readonly BitSet tokenSet_150_ = new BitSet(TSql140ParserInternal.mk_tokenSet_150_());

        public static readonly BitSet tokenSet_151_ = new BitSet(TSql140ParserInternal.mk_tokenSet_151_());

        public static readonly BitSet tokenSet_152_ = new BitSet(TSql140ParserInternal.mk_tokenSet_152_());

        public static readonly BitSet tokenSet_153_ = new BitSet(TSql140ParserInternal.mk_tokenSet_153_());

        public static readonly BitSet tokenSet_154_ = new BitSet(TSql140ParserInternal.mk_tokenSet_154_());

        public static readonly BitSet tokenSet_155_ = new BitSet(TSql140ParserInternal.mk_tokenSet_155_());

        public static readonly BitSet tokenSet_156_ = new BitSet(TSql140ParserInternal.mk_tokenSet_156_());

        public static readonly BitSet tokenSet_157_ = new BitSet(TSql140ParserInternal.mk_tokenSet_157_());

        public static readonly BitSet tokenSet_158_ = new BitSet(TSql140ParserInternal.mk_tokenSet_158_());

        public static readonly BitSet tokenSet_159_ = new BitSet(TSql140ParserInternal.mk_tokenSet_159_());

        public static readonly BitSet tokenSet_160_ = new BitSet(TSql140ParserInternal.mk_tokenSet_160_());

        public static readonly BitSet tokenSet_161_ = new BitSet(TSql140ParserInternal.mk_tokenSet_161_());

        public static readonly BitSet tokenSet_162_ = new BitSet(TSql140ParserInternal.mk_tokenSet_162_());

        public static readonly BitSet tokenSet_163_ = new BitSet(TSql140ParserInternal.mk_tokenSet_163_());

        public static readonly BitSet tokenSet_164_ = new BitSet(TSql140ParserInternal.mk_tokenSet_164_());

        public static readonly BitSet tokenSet_165_ = new BitSet(TSql140ParserInternal.mk_tokenSet_165_());

        public static readonly BitSet tokenSet_166_ = new BitSet(TSql140ParserInternal.mk_tokenSet_166_());

        public static readonly BitSet tokenSet_167_ = new BitSet(TSql140ParserInternal.mk_tokenSet_167_());

        public static readonly BitSet tokenSet_168_ = new BitSet(TSql140ParserInternal.mk_tokenSet_168_());

        public static readonly BitSet tokenSet_169_ = new BitSet(TSql140ParserInternal.mk_tokenSet_169_());

        public static readonly BitSet tokenSet_170_ = new BitSet(TSql140ParserInternal.mk_tokenSet_170_());

        public static readonly BitSet tokenSet_171_ = new BitSet(TSql140ParserInternal.mk_tokenSet_171_());

        public static readonly BitSet tokenSet_172_ = new BitSet(TSql140ParserInternal.mk_tokenSet_172_());

        public static readonly BitSet tokenSet_173_ = new BitSet(TSql140ParserInternal.mk_tokenSet_173_());

        public static readonly BitSet tokenSet_174_ = new BitSet(TSql140ParserInternal.mk_tokenSet_174_());

        public static readonly BitSet tokenSet_175_ = new BitSet(TSql140ParserInternal.mk_tokenSet_175_());

        public static readonly BitSet tokenSet_176_ = new BitSet(TSql140ParserInternal.mk_tokenSet_176_());

        public static readonly BitSet tokenSet_177_ = new BitSet(TSql140ParserInternal.mk_tokenSet_177_());

        public static readonly BitSet tokenSet_178_ = new BitSet(TSql140ParserInternal.mk_tokenSet_178_());

        public static readonly BitSet tokenSet_179_ = new BitSet(TSql140ParserInternal.mk_tokenSet_179_());

        public static readonly BitSet tokenSet_180_ = new BitSet(TSql140ParserInternal.mk_tokenSet_180_());

        public static readonly BitSet tokenSet_181_ = new BitSet(TSql140ParserInternal.mk_tokenSet_181_());

        public static readonly BitSet tokenSet_182_ = new BitSet(TSql140ParserInternal.mk_tokenSet_182_());

        public static readonly BitSet tokenSet_183_ = new BitSet(TSql140ParserInternal.mk_tokenSet_183_());

        public static readonly BitSet tokenSet_184_ = new BitSet(TSql140ParserInternal.mk_tokenSet_184_());

        public static readonly BitSet tokenSet_185_ = new BitSet(TSql140ParserInternal.mk_tokenSet_185_());

        public static readonly BitSet tokenSet_186_ = new BitSet(TSql140ParserInternal.mk_tokenSet_186_());

        public static readonly BitSet tokenSet_187_ = new BitSet(TSql140ParserInternal.mk_tokenSet_187_());

        public static readonly BitSet tokenSet_188_ = new BitSet(TSql140ParserInternal.mk_tokenSet_188_());

        public static readonly BitSet tokenSet_189_ = new BitSet(TSql140ParserInternal.mk_tokenSet_189_());

        public static readonly BitSet tokenSet_190_ = new BitSet(TSql140ParserInternal.mk_tokenSet_190_());

        public static readonly BitSet tokenSet_191_ = new BitSet(TSql140ParserInternal.mk_tokenSet_191_());

        public static readonly BitSet tokenSet_192_ = new BitSet(TSql140ParserInternal.mk_tokenSet_192_());

        public static readonly BitSet tokenSet_193_ = new BitSet(TSql140ParserInternal.mk_tokenSet_193_());

        public TSql140ParserInternal(bool initialQuotedIdentifiersOn)
            : base(initialQuotedIdentifiersOn) {
            this.initialize();
        }

        protected void initialize() {
            base.tokenNames = TSql140ParserInternal.tokenNames_;
        }

        protected TSql140ParserInternal(TokenBuffer tokenBuf, int k)
            : base(tokenBuf, k) {
            this.initialize();
        }

        public TSql140ParserInternal(TokenBuffer tokenBuf)
            : this(tokenBuf, 2) {
        }

        protected TSql140ParserInternal(TokenStream lexer, int k)
            : base(lexer, k) {
            this.initialize();
        }

        public TSql140ParserInternal(TokenStream lexer)
            : this(lexer, 2) {
        }

        public TSql140ParserInternal(ParserSharedInputState state)
            : base(state, 2) {
            this.initialize();
        }

        public ChildObjectName entryPointChildObjectName() {
            ChildObjectName childObjectName = null;
            childObjectName = this.childObjectNameWithThreePrefixes();
            this.match(1);
            return childObjectName;
        }

        public ChildObjectName childObjectNameWithThreePrefixes() {
            ChildObjectName childObjectName = base.FragmentFactory.CreateFragment<ChildObjectName>();
            List<Identifier> otherCollection = this.identifierList(4);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(childObjectName, childObjectName.Identifiers, otherCollection);
            }
            return childObjectName;
        }

        public SchemaObjectName entryPointSchemaObjectName() {
            SchemaObjectName schemaObjectName = null;
            schemaObjectName = this.schemaObjectFourPartName();
            this.match(1);
            return schemaObjectName;
        }

        public SchemaObjectName schemaObjectFourPartName() {
            SchemaObjectName schemaObjectName = base.FragmentFactory.CreateFragment<SchemaObjectName>();
            List<Identifier> otherCollection = this.identifierList(4);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(schemaObjectName, schemaObjectName.Identifiers, otherCollection);
            }
            return schemaObjectName;
        }

        public DataTypeReference entryPointScalarDataType() {
            DataTypeReference dataTypeReference = null;
            dataTypeReference = this.scalarDataType();
            this.match(1);
            return dataTypeReference;
        }

        public DataTypeReference scalarDataType() {
            DataTypeReference dataTypeReference = null;
            SqlDataTypeOption sqlDataTypeOption = SqlDataTypeOption.None;
            bool flag = false;
            switch (this.LA(1)) {
                case 232:
                case 233: {
                        SchemaObjectName schemaObjectName = this.dataTypeSchemaObjectName();
                        if (base.inputState.guessing == 0 && (schemaObjectName.SchemaIdentifier == null || (schemaObjectName.SchemaIdentifier != null && TSql90ParserBaseInternal.IsSys(schemaObjectName.SchemaIdentifier)))) {
                            sqlDataTypeOption = TSql100ParserBaseInternal.ParseDataType100(schemaObjectName.BaseIdentifier.Value);
                            flag = TSql90ParserBaseInternal.IsXml(schemaObjectName.BaseIdentifier);
                        }
                        if (TSql140ParserInternal.tokenSet_0_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_1_.member(this.LA(2)) && flag) {
                            return this.xmlDataType(schemaObjectName);
                        }
                        if (TSql140ParserInternal.tokenSet_2_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_1_.member(this.LA(2)) && sqlDataTypeOption != 0) {
                            return this.sqlDataTypeWithoutNational(schemaObjectName, sqlDataTypeOption);
                        }
                        if (TSql140ParserInternal.tokenSet_0_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_1_.member(this.LA(2))) {
                            return this.userDataType(schemaObjectName);
                        }
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                case 53:
                    return this.doubleDataType();
                case 96:
                    return this.sqlDataTypeWithNational();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public ScalarExpression entryPointExpression() {
            ScalarExpression scalarExpression = null;
            scalarExpression = this.expression();
            this.match(1);
            return scalarExpression;
        }

        public ScalarExpression expression() {
            ScalarExpression scalarExpression = null;
            return this.expressionWithFlags(ExpressionFlags.None);
        }

        public BooleanExpression entryPointBooleanExpression() {
            BooleanExpression booleanExpression = null;
            booleanExpression = this.booleanExpression();
            this.match(1);
            return booleanExpression;
        }

        public BooleanExpression booleanExpression() {
            BooleanExpression booleanExpression = null;
            return this.booleanExpressionWithFlags(ExpressionFlags.None);
        }

        public StatementList entryPointStatementList() {
            StatementList statementList = null;
            bool flag = false;
            statementList = this.statementList(ref flag);
            if (base.inputState.guessing == 0 && flag) {
                statementList = null;
            }
            this.match(1);
            return statementList;
        }

        public StatementList statementList(ref bool vParseErrorOccurred) {
            StatementList statementList = base.FragmentFactory.CreateFragment<StatementList>();
            int num = 0;
            while (true) {
                if (!TSql140ParserInternal.tokenSet_3_.member(this.LA(1))) {
                    break;
                }
                TSqlStatement tSqlStatement = this.statementOptSemi();
                if (base.inputState.guessing == 0) {
                    if (tSqlStatement != null) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(statementList, statementList.Statements, tSqlStatement);
                    } else {
                        vParseErrorOccurred = true;
                    }
                }
                num++;
            }
            if (num < 1) {
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return statementList;
        }

        public SelectStatement entryPointSubqueryExpressionWithOptionalCTE() {
            SelectStatement result = null;
            SelectFunctionReturnType selectFunctionReturnType = this.functionReturnClauseRelational();
            if (base.inputState.guessing == 0) {
                result = selectFunctionReturnType.SelectStatement;
            }
            this.match(1);
            return result;
        }

        public SelectFunctionReturnType functionReturnClauseRelational() {
            SelectFunctionReturnType selectFunctionReturnType = base.FragmentFactory.CreateFragment<SelectFunctionReturnType>();
            IToken token = null;
            IToken token2 = null;
            if ((this.LA(1) == 140 || this.LA(1) == 171 || this.LA(1) == 191) && TSql140ParserInternal.tokenSet_4_.member(this.LA(2))) {
                SelectStatement selectStatement = this.subqueryExpressionWithOptionalCTE();
                if (base.inputState.guessing == 0) {
                    selectFunctionReturnType.SelectStatement = selectStatement;
                }
                goto IL_0146;
            }
            if (this.LA(1) == 191 && this.LA(2) == 171) {
                token = this.LT(1);
                this.match(191);
                WithCtesAndXmlNamespaces withCtesAndXmlNamespaces = this.withCommonTableExpressionsAndXmlNamespaces();
                QueryExpression queryExpression = this.subqueryExpression(SubDmlFlags.SelectNotForInsert);
                token2 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(selectFunctionReturnType, token);
                    if (withCtesAndXmlNamespaces != null && withCtesAndXmlNamespaces.ChangeTrackingContext != null) {
                        TSql80ParserBaseInternal.ThrowParseErrorException("SQL46072", withCtesAndXmlNamespaces.ChangeTrackingContext, TSqlParserResource.SQL46072Message);
                    }
                    SelectStatement selectStatement = base.FragmentFactory.CreateFragment<SelectStatement>();
                    selectStatement.QueryExpression = queryExpression;
                    selectStatement.WithCtesAndXmlNamespaces = withCtesAndXmlNamespaces;
                    selectFunctionReturnType.SelectStatement = selectStatement;
                    TSql80ParserBaseInternal.UpdateTokenInfo(selectFunctionReturnType, token2);
                }
                goto IL_0146;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0146:
            return selectFunctionReturnType;
        }

        public IPv4 entryPointIPv4Address() {
            IPv4 pv = null;
            pv = this.ipAddressV4();
            this.match(1);
            return pv;
        }

        public IPv4 ipAddressV4() {
            IPv4 pv = base.FragmentFactory.CreateFragment<IPv4>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            IToken token6 = null;
            IToken token7 = null;
            IToken token8 = null;
            IToken token9 = null;
            Literal literal = default(Literal);
            Literal literal2 = default(Literal);
            switch (this.LA(1)) {
                case 222:
                    token = this.LT(1);
                    this.match(222);
                    switch (this.LA(1)) {
                        case 222:
                            token2 = this.LT(1);
                            this.match(222);
                            switch (this.LA(1)) {
                                case 222:
                                    token3 = this.LT(1);
                                    this.match(222);
                                    switch (this.LA(1)) {
                                        case 221: {
                                                Literal octetOne = this.integer();
                                                if (base.inputState.guessing == 0) {
                                                    pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token);
                                                    pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token2);
                                                    pv.OctetThree = base.GetIPv4FragmentFromNumberDotNumeric(token3);
                                                    pv.OctetFour = octetOne;
                                                }
                                                break;
                                            }
                                        case 1:
                                        case 192:
                                        case 202:
                                            if (base.inputState.guessing == 0) {
                                                if (base.SplitNumericIntoIpParts(token, out literal, out literal2)) {
                                                    pv.OctetOne = literal;
                                                    pv.OctetTwo = literal2;
                                                    pv.OctetThree = base.GetIPv4FragmentFromDotNumberNumeric(token2);
                                                    pv.OctetFour = base.GetIPv4FragmentFromDotNumberNumeric(token3);
                                                } else if (base.SplitNumericIntoIpParts(token2, out literal, out literal2)) {
                                                    pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token);
                                                    pv.OctetTwo = literal;
                                                    pv.OctetThree = literal2;
                                                    pv.OctetFour = base.GetIPv4FragmentFromDotNumberNumeric(token3);
                                                } else {
                                                    base.GetIPv4FragmentsFromNumberDotNumberNumeric(token3, out literal, out literal2);
                                                    pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token);
                                                    pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token2);
                                                    pv.OctetThree = literal;
                                                    pv.OctetFour = literal2;
                                                }
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException(this.LT(1), this.getFilename());
                                    }
                                    break;
                                case 200: {
                                        this.match(200);
                                        Literal octetOne = this.integer();
                                        if (base.inputState.guessing == 0) {
                                            if (base.SplitNumericIntoIpParts(token, out literal, out literal2)) {
                                                pv.OctetOne = literal;
                                                pv.OctetTwo = literal2;
                                                pv.OctetThree = base.GetIPv4FragmentFromDotNumberNumeric(token2);
                                            } else {
                                                base.GetIPv4FragmentsFromNumberDotNumberNumeric(token2, out literal, out literal2);
                                                pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token);
                                                pv.OctetTwo = literal;
                                                pv.OctetThree = literal2;
                                            }
                                            pv.OctetFour = octetOne;
                                        }
                                        break;
                                    }
                                case 221: {
                                        Literal octetOne = this.integer();
                                        this.ipV4DotNumberTail(pv);
                                        if (base.inputState.guessing == 0) {
                                            pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token);
                                            pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token2);
                                            pv.OctetThree = octetOne;
                                        }
                                        break;
                                    }
                                default:
                                    throw new NoViableAltException(this.LT(1), this.getFilename());
                            }
                            break;
                        case 200:
                            this.ipV4DotLastTwoPartsTail(pv);
                            if (base.inputState.guessing == 0) {
                                base.GetIPv4FragmentsFromNumberDotNumberNumeric(token, out literal, out literal2);
                                pv.OctetOne = literal;
                                pv.OctetTwo = literal2;
                            }
                            break;
                        case 221: {
                                Literal octetOne = this.integer();
                                if (base.inputState.guessing == 0) {
                                    pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token);
                                    pv.OctetTwo = octetOne;
                                }
                                switch (this.LA(1)) {
                                    case 222:
                                        token4 = this.LT(1);
                                        this.match(222);
                                        this.ipV4DotNumberTail(pv);
                                        if (base.inputState.guessing == 0) {
                                            pv.OctetThree = base.GetIPv4FragmentFromDotNumberNumeric(token4);
                                        }
                                        break;
                                    case 200:
                                        this.ipV4DotLastTwoPartsTail(pv);
                                        break;
                                    default:
                                        throw new NoViableAltException(this.LT(1), this.getFilename());
                                }
                                break;
                            }
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    break;
                case 221: {
                        Literal octetOne = this.integer();
                        if (base.inputState.guessing == 0) {
                            pv.OctetOne = octetOne;
                        }
                        switch (this.LA(1)) {
                            case 222:
                                token5 = this.LT(1);
                                this.match(222);
                                if (base.inputState.guessing == 0) {
                                    pv.OctetTwo = base.GetIPv4FragmentFromDotNumberNumeric(token5);
                                }
                                switch (this.LA(1)) {
                                    case 222:
                                        token6 = this.LT(1);
                                        this.match(222);
                                        this.ipV4DotNumberTail(pv);
                                        if (base.inputState.guessing == 0) {
                                            pv.OctetThree = base.GetIPv4FragmentFromDotNumberNumeric(token6);
                                        }
                                        break;
                                    case 200:
                                        this.ipV4DotLastTwoPartsTail(pv);
                                        break;
                                    default:
                                        throw new NoViableAltException(this.LT(1), this.getFilename());
                                }
                                break;
                            case 200:
                                this.match(200);
                                switch (this.LA(1)) {
                                    case 222:
                                        token7 = this.LT(1);
                                        this.match(222);
                                        switch (this.LA(1)) {
                                            case 222:
                                                token8 = this.LT(1);
                                                this.match(222);
                                                switch (this.LA(1)) {
                                                    case 221: {
                                                            Literal octetTwo = this.integer();
                                                            if (base.inputState.guessing == 0) {
                                                                pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token7);
                                                                pv.OctetThree = base.GetIPv4FragmentFromNumberDotNumeric(token8);
                                                                pv.OctetFour = octetTwo;
                                                            }
                                                            break;
                                                        }
                                                    case 1:
                                                    case 192:
                                                    case 202:
                                                        if (base.inputState.guessing == 0) {
                                                            if (base.SplitNumericIntoIpParts(token7, out literal, out literal2)) {
                                                                pv.OctetTwo = literal;
                                                                pv.OctetThree = literal2;
                                                                pv.OctetFour = base.GetIPv4FragmentFromDotNumberNumeric(token8);
                                                            } else {
                                                                base.GetIPv4FragmentsFromNumberDotNumberNumeric(token8, out literal, out literal2);
                                                                pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token7);
                                                                pv.OctetThree = literal;
                                                                pv.OctetFour = literal2;
                                                            }
                                                        }
                                                        break;
                                                    default:
                                                        throw new NoViableAltException(this.LT(1), this.getFilename());
                                                }
                                                break;
                                            case 200: {
                                                    this.match(200);
                                                    Literal octetTwo = this.integer();
                                                    if (base.inputState.guessing == 0) {
                                                        base.GetIPv4FragmentsFromNumberDotNumberNumeric(token7, out literal, out literal2);
                                                        pv.OctetTwo = literal;
                                                        pv.OctetThree = literal2;
                                                        pv.OctetFour = octetTwo;
                                                    }
                                                    break;
                                                }
                                            case 221: {
                                                    Literal octetTwo = this.integer();
                                                    this.ipV4DotNumberTail(pv);
                                                    if (base.inputState.guessing == 0) {
                                                        pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token7);
                                                        pv.OctetThree = octetTwo;
                                                    }
                                                    break;
                                                }
                                            default:
                                                throw new NoViableAltException(this.LT(1), this.getFilename());
                                        }
                                        break;
                                    case 221: {
                                            Literal octetTwo = this.integer();
                                            if (base.inputState.guessing == 0) {
                                                pv.OctetTwo = octetTwo;
                                            }
                                            switch (this.LA(1)) {
                                                case 222:
                                                    token9 = this.LT(1);
                                                    this.match(222);
                                                    this.ipV4DotNumberTail(pv);
                                                    if (base.inputState.guessing == 0) {
                                                        pv.OctetThree = base.GetIPv4FragmentFromDotNumberNumeric(token9);
                                                    }
                                                    break;
                                                case 200:
                                                    this.ipV4DotLastTwoPartsTail(pv);
                                                    break;
                                                default:
                                                    throw new NoViableAltException(this.LT(1), this.getFilename());
                                            }
                                            break;
                                        }
                                    default:
                                        throw new NoViableAltException(this.LT(1), this.getFilename());
                                }
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return pv;
        }

        public TSqlFragment entryPointConstantOrIdentifier() {
            TSqlFragment tSqlFragment = null;
            tSqlFragment = this.possibleNegativeConstantOrIdentifier();
            this.match(1);
            return tSqlFragment;
        }

        public ScalarExpression possibleNegativeConstantOrIdentifier() {
            switch (this.LA(1)) {
                case 100:
                case 193:
                case 199:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 230:
                case 231:
                case 234:
                    return this.possibleNegativeConstant();
                case 232:
                case 233:
                    return this.identifierLiteral();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public TSqlFragment entryPointConstantOrIdentifierWithDefault() {
            TSqlFragment tSqlFragment = null;
            tSqlFragment = this.possibleNegativeConstantOrIdentifierWithDefault();
            this.match(1);
            return tSqlFragment;
        }

        public ScalarExpression possibleNegativeConstantOrIdentifierWithDefault() {
            switch (this.LA(1)) {
                case 100:
                case 193:
                case 199:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                    return this.possibleNegativeConstantOrIdentifier();
                case 47:
                    return this.defaultLiteral();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public TSqlScript script() {
            TSqlScript tSqlScript = base.FragmentFactory.CreateFragment<TSqlScript>();
            IToken token = null;
            if (tSqlScript.ScriptTokenStream != null && tSqlScript.ScriptTokenStream.Count > 0) {
                tSqlScript.UpdateTokenInfo(0, tSqlScript.ScriptTokenStream.Count - 1);
            }
            TSqlBatch tSqlBatch = this.batch();
            if (base.inputState.guessing == 0 && tSqlBatch != null) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(tSqlScript, tSqlScript.Batches, tSqlBatch);
            }
            while (true) {
                if (this.LA(1) != 219) {
                    break;
                }
                this.match(219);
                if (base.inputState.guessing == 0) {
                    base.ResetQuotedIdentifiersSettingToInitial();
                    base.ThrowPartialAstIfPhaseOne(null);
                }
                tSqlBatch = this.batch();
                if (base.inputState.guessing == 0 && tSqlBatch != null) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(tSqlScript, tSqlScript.Batches, tSqlBatch);
                }
            }
            token = this.LT(1);
            this.match(1);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tSqlScript, token);
            }
            return tSqlScript;
        }

        public TSqlBatch batch() {
            TSqlBatch tSqlBatch = null;
            try {
                while (true) {
                    if (this.LA(1) != 204) {
                        break;
                    }
                    this.LT(1);
                    this.match(204);
                }
                bool flag = false;
                if ((this.LA(1) == 6 || this.LA(1) == 35 || this.LA(1) == 162) && TSql140ParserInternal.tokenSet_5_.member(this.LA(2))) {
                    int pos = this.mark();
                    flag = true;
                    base.inputState.guessing++;
                    try {
                        switch (this.LA(1)) {
                            case 35:
                                this.match(35);
                                if (TSql140ParserInternal.tokenSet_6_.member(this.LA(1))) {
                                    switch (this.LA(1)) {
                                        case 112:
                                            this.match(112);
                                            this.match(6);
                                            break;
                                        default:
                                            throw new NoViableAltException(this.LT(1), this.getFilename());
                                        case 73:
                                        case 120:
                                        case 121:
                                        case 155:
                                        case 166:
                                            break;
                                    }
                                    switch (this.LA(1)) {
                                        case 120:
                                            this.match(120);
                                            break;
                                        case 121:
                                            this.match(121);
                                            break;
                                        case 155:
                                            this.match(155);
                                            break;
                                        case 166:
                                            this.match(166);
                                            break;
                                        case 73:
                                            this.match(73);
                                            break;
                                        default:
                                            throw new NoViableAltException(this.LT(1), this.getFilename());
                                    }
                                } else {
                                    switch (this.LA(1)) {
                                        case 47:
                                            this.match(47);
                                            break;
                                        case 137:
                                            this.match(137);
                                            break;
                                        case 139:
                                            this.match(139);
                                            break;
                                        default:
                                            if (base.NextTokenMatches("FEDERATION")) {
                                                break;
                                            }
                                            throw new NoViableAltException(this.LT(1), this.getFilename());
                                    }
                                }
                                break;
                            case 6:
                                this.match(6);
                                switch (this.LA(1)) {
                                    case 120:
                                        this.match(120);
                                        break;
                                    case 121:
                                        this.match(121);
                                        break;
                                    case 155:
                                        this.match(155);
                                        break;
                                    case 166:
                                        this.match(166);
                                        break;
                                    case 73:
                                        this.match(73);
                                        break;
                                    default:
                                        if (base.NextTokenMatches("FEDERATION")) {
                                            break;
                                        }
                                        throw new NoViableAltException(this.LT(1), this.getFilename());
                                }
                                break;
                            case 162:
                                this.match(162);
                                if (base.NextTokenMatches("FEDERATION") && this.LA(2) == 232) {
                                    break;
                                }
                                throw new SemanticException("NextTokenMatches(CodeGenerationSupporter.Federation) && LA(2) == Identifier");
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                        }
                    } catch (RecognitionException) {
                        flag = false;
                    }
                    this.rewind(pos);
                    base.inputState.guessing--;
                }
                if (flag) {
                    TSqlStatement tSqlStatement = this.lastStatementOptSemi();
                    if (base.inputState.guessing == 0) {
                        if (tSqlStatement != null) {
                            if (tSqlBatch == null) {
                                tSqlBatch = base.FragmentFactory.CreateFragment<TSqlBatch>();
                            }
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(tSqlBatch, tSqlBatch.Statements, tSqlStatement);
                            return tSqlBatch;
                        }
                        return tSqlBatch;
                    }
                    return tSqlBatch;
                }
                if (TSql140ParserInternal.tokenSet_7_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_8_.member(this.LA(2))) {
                    TSqlStatement tSqlStatement = this.optSimpleExecute();
                    if (base.inputState.guessing == 0 && tSqlStatement != null) {
                        base.ThrowPartialAstIfPhaseOne(tSqlStatement);
                        if (tSqlBatch == null) {
                            tSqlBatch = base.FragmentFactory.CreateFragment<TSqlBatch>();
                        }
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(tSqlBatch, tSqlBatch.Statements, tSqlStatement);
                    }
                    while (true) {
                        if (!TSql140ParserInternal.tokenSet_3_.member(this.LA(1))) {
                            break;
                        }
                        tSqlStatement = this.statementOptSemi();
                        if (base.inputState.guessing == 0 && tSqlStatement != null) {
                            if (tSqlBatch == null) {
                                tSqlBatch = base.FragmentFactory.CreateFragment<TSqlBatch>();
                            }
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(tSqlBatch, tSqlBatch.Statements, tSqlStatement);
                        }
                    }
                    return tSqlBatch;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            } catch (TSqlParseErrorException ex2) {
                if (base.inputState.guessing == 0) {
                    if (!ex2.DoNotLog) {
                        base.AddParseError(ex2.ParseError);
                    }
                    base.RecoverAtBatchLevel();
                    return tSqlBatch;
                }
                throw;
            } catch (NoViableAltException ex3) {
                if (base.inputState.guessing == 0) {
                    ParseError faultTolerantUnexpectedTokenError = TSql80ParserBaseInternal.GetFaultTolerantUnexpectedTokenError(ex3.token, ex3, base._tokenSource.LastToken.Offset);
                    base.AddParseError(faultTolerantUnexpectedTokenError);
                    base.RecoverAtBatchLevel();
                    return tSqlBatch;
                }
                throw;
            } catch (MismatchedTokenException ex4) {
                if (base.inputState.guessing == 0) {
                    ParseError faultTolerantUnexpectedTokenError2 = TSql80ParserBaseInternal.GetFaultTolerantUnexpectedTokenError(ex4.token, ex4, base._tokenSource.LastToken.Offset);
                    base.AddParseError(faultTolerantUnexpectedTokenError2);
                    base.RecoverAtBatchLevel();
                    return tSqlBatch;
                }
                throw;
            } catch (RecognitionException) {
                if (base.inputState.guessing == 0) {
                    ParseError unexpectedTokenError = base.GetUnexpectedTokenError();
                    base.AddParseError(unexpectedTokenError);
                    base.RecoverAtBatchLevel();
                    return tSqlBatch;
                }
                throw;
            } catch (TokenStreamRecognitionException exception) {
                if (base.inputState.guessing == 0) {
                    ParseError parseError = TSql80ParserBaseInternal.ProcessTokenStreamRecognitionException(exception, base._tokenSource.LastToken.Offset);
                    base.AddParseError(parseError);
                    base.RecoverAtBatchLevel();
                    return tSqlBatch;
                }
                throw;
            } catch (ANTLRException exception2) {
                if (base.inputState.guessing == 0) {
                    base.CreateInternalError("batch", exception2);
                    return tSqlBatch;
                }
                throw;
            }
        }

        public TSqlStatement lastStatementOptSemi() {
            TSqlStatement tSqlStatement = null;
            tSqlStatement = this.lastStatement();
            this.optSemicolons(tSqlStatement);
            return tSqlStatement;
        }

        public ExecuteStatement optSimpleExecute() {
            ExecuteStatement executeStatement = null;
            if (TSql140ParserInternal.tokenSet_9_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_10_.member(this.LA(2)) && !base.NextTokenMatches("DISABLE") && !base.NextTokenMatches("ENABLE") && !base.NextTokenMatches("MOVE") && !base.NextTokenMatches("GET") && !base.NextTokenMatches("RECEIVE") && !base.NextTokenMatches("SEND") && !base.NextTokenMatches("THROW")) {
                ExecutableProcedureReference executableEntity = this.execProc();
                if (base.inputState.guessing == 0) {
                    executeStatement = base.FragmentFactory.CreateFragment<ExecuteStatement>();
                    ExecuteSpecification executeSpecification = base.FragmentFactory.CreateFragment<ExecuteSpecification>();
                    executeSpecification.ExecutableEntity = executableEntity;
                    executeStatement.ExecuteSpecification = executeSpecification;
                }
                this.optSemicolons(executeStatement);
                goto IL_010b;
            }
            if (TSql140ParserInternal.tokenSet_11_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_010b;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_010b:
            return executeStatement;
        }

        public TSqlStatement statementOptSemi() {
            TSqlStatement tSqlStatement = null;
            tSqlStatement = this.statement();
            this.optSemicolons(tSqlStatement);
            return tSqlStatement;
        }

        public TSqlStatement statement() {
            TSqlStatement result = null;
            int line = this.LT(1).getLine();
            int column = this.LT(1).getColumn();
            try {
                switch (this.LA(1)) {
                    case 46:
                        result = this.declareStatements();
                        return result;
                    case 142:
                        result = this.setStatements();
                        return result;
                    case 13:
                        result = this.beginStatements();
                        return result;
                    case 15:
                        result = this.breakStatement();
                        return result;
                    case 33:
                        result = this.continueStatement();
                        return result;
                    case 82:
                        result = this.ifStatement();
                        return result;
                    case 170:
                        result = this.whileStatement();
                        return result;
                    case 220:
                        result = this.labelStatement();
                        return result;
                    case 12:
                        result = this.backupStatements();
                        return result;
                    case 129:
                        result = this.restoreStatements();
                        return result;
                    case 74:
                        result = this.gotoStatement();
                        return result;
                    case 138:
                        result = this.saveTransactionStatement();
                        return result;
                    case 134:
                        result = this.rollbackTransactionStatement();
                        return result;
                    case 28:
                        result = this.commitTransactionStatement();
                        return result;
                    case 123:
                        result = this.raiseErrorStatement();
                        return result;
                    case 4:
                        result = this.addSignatureStatement();
                        return result;
                    case 232:
                        result = this.identifierStatements();
                        return result;
                    case 119:
                        result = this.printStatement();
                        return result;
                    case 167:
                        result = this.waitForStatement();
                        return result;
                    case 125:
                        result = this.readTextStatement();
                        return result;
                    case 161:
                        result = this.updateTextStatement();
                        return result;
                    case 172:
                        result = this.writeTextStatement();
                        return result;
                    case 95:
                        result = this.lineNoStatement();
                        return result;
                    case 162:
                        result = this.useStatement();
                        return result;
                    case 92:
                        result = this.killStatements();
                        return result;
                    case 17:
                        result = this.bulkInsertStatement();
                        return result;
                    case 22:
                        result = this.checkpointStatement();
                        return result;
                    case 126:
                        result = this.reconfigureStatement();
                        return result;
                    case 144:
                        result = this.shutdownStatement();
                        return result;
                    case 143:
                        result = this.setUserStatement();
                        return result;
                    case 156:
                        result = this.truncateTableStatement();
                        return result;
                    case 75:
                        result = this.grantStatement90();
                        return result;
                    case 49:
                        result = this.denyStatement90();
                        return result;
                    case 132:
                        result = this.revokeStatement90();
                        return result;
                    case 131:
                        result = this.returnStatement();
                        return result;
                    case 106:
                        result = this.openStatements();
                        return result;
                    case 23:
                        result = this.closeStatements();
                        return result;
                    case 45:
                        result = this.deallocateCursorStatement();
                        return result;
                    case 64:
                        result = this.fetchCursorStatement();
                        return result;
                    case 54:
                        result = this.dropStatements();
                        return result;
                    case 44:
                        result = this.dbccStatement();
                        return result;
                    case 176:
                        result = this.revertStatement();
                        return result;
                    case 56:
                        result = this.endConversationStatement();
                        return result;
                    default:
                        if (this.LA(1) == 35 && this.LA(2) == 148) {
                            result = this.createTableStatement();
                            return result;
                        }
                        if (this.LA(1) == 6 && this.LA(2) == 148) {
                            result = this.alterTableStatement();
                            return result;
                        }
                        if (this.LA(1) == 35 && TSql140ParserInternal.tokenSet_13_.member(this.LA(2))) {
                            result = this.createIndexStatement();
                            return result;
                        }
                        if (this.LA(1) == 35 && this.LA(2) == 146) {
                            result = this.createStatisticsStatement();
                            return result;
                        }
                        if (this.LA(1) == 160 && this.LA(2) == 146) {
                            result = this.updateStatisticsStatement();
                            return result;
                        }
                        if (this.LA(1) == 6 && this.LA(2) == 43) {
                            result = this.alterDatabaseStatements();
                            return result;
                        }
                        if ((this.LA(1) == 60 || this.LA(1) == 61) && TSql140ParserInternal.tokenSet_14_.member(this.LA(2))) {
                            result = this.executeStatement();
                            return result;
                        }
                        if (TSql140ParserInternal.tokenSet_15_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_16_.member(this.LA(2))) {
                            result = this.withCommonTableExpressionsAndXmlNamespacesStatements();
                            return result;
                        }
                        if (this.LA(1) == 6 && TSql140ParserInternal.tokenSet_17_.member(this.LA(2))) {
                            result = this.alter2005Statements();
                            return result;
                        }
                        if (this.LA(1) == 35 && TSql140ParserInternal.tokenSet_18_.member(this.LA(2))) {
                            result = this.create2005Statements();
                            return result;
                        }
                        if (this.LA(1) == 35 && this.LA(2) == 43) {
                            result = this.createDatabaseStatements();
                            return result;
                        }
                        if (this.LA(1) == 86 && this.LA(2) == 17) {
                            result = this.insertBulkStatement();
                            return result;
                        }
                        if ((this.LA(1) == 60 || this.LA(1) == 61) && this.LA(2) == 9) {
                            result = this.executeAsStatement();
                            return result;
                        }
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
            } catch (TSqlParseErrorException ex) {
                if (base.inputState.guessing == 0) {
                    if (!ex.DoNotLog) {
                        base.AddParseError(ex.ParseError);
                    }
                    base.RecoverAtStatementLevel(line, column);
                    return result;
                }
                throw;
            } catch (NoViableAltException ex2) {
                if (base.inputState.guessing == 0) {
                    ParseError faultTolerantUnexpectedTokenError = TSql80ParserBaseInternal.GetFaultTolerantUnexpectedTokenError(ex2.token, ex2, base._tokenSource.LastToken.Offset);
                    base.AddParseError(faultTolerantUnexpectedTokenError);
                    base.RecoverAtStatementLevel(line, column);
                    return result;
                }
                throw;
            } catch (MismatchedTokenException ex3) {
                if (base.inputState.guessing == 0) {
                    ParseError faultTolerantUnexpectedTokenError2 = TSql80ParserBaseInternal.GetFaultTolerantUnexpectedTokenError(ex3.token, ex3, base._tokenSource.LastToken.Offset);
                    base.AddParseError(faultTolerantUnexpectedTokenError2);
                    base.RecoverAtStatementLevel(line, column);
                    return result;
                }
                throw;
            } catch (RecognitionException) {
                if (base.inputState.guessing == 0) {
                    ParseError unexpectedTokenError = base.GetUnexpectedTokenError();
                    base.AddParseError(unexpectedTokenError);
                    base.RecoverAtStatementLevel(line, column);
                    return result;
                }
                throw;
            } catch (TokenStreamRecognitionException exception) {
                if (base.inputState.guessing == 0) {
                    ParseError parseError = TSql80ParserBaseInternal.ProcessTokenStreamRecognitionException(exception, base._tokenSource.LastToken.Offset);
                    base.AddParseError(parseError);
                    base.RecoverAtStatementLevel(line, column);
                    return result;
                }
                throw;
            } catch (ANTLRException exception2) {
                if (base.inputState.guessing == 0) {
                    base.CreateInternalError("statement", exception2);
                    return result;
                }
                throw;
            }
        }

        public void optSemicolons(TSqlStatement vParent) {
            IToken token = null;
            int num = 0;
            while (true) {
                if (this.LA(1) != 204) {
                    break;
                }
                if (!TSql140ParserInternal.tokenSet_19_.member(this.LA(2))) {
                    break;
                }
                token = this.LT(1);
                this.match(204);
                if (base.inputState.guessing == 0) {
                    num++;
                    if (vParent != null) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                    }
                }
            }
        }

        public TSqlStatement lastStatement() {
            TSqlStatement tSqlStatement = null;
            if (this.LA(1) == 35 && (this.LA(2) == 120 || this.LA(2) == 121)) {
                return this.createProcedureStatement();
            }
            if (this.LA(1) == 6 && (this.LA(2) == 120 || this.LA(2) == 121)) {
                return this.alterProcedureStatement();
            }
            if (this.LA(1) == 35 && this.LA(2) == 155) {
                return this.createTriggerStatement();
            }
            if (this.LA(1) == 6 && this.LA(2) == 155) {
                return this.alterTriggerStatement();
            }
            if (this.LA(1) == 35 && this.LA(2) == 47) {
                return this.createDefaultStatement();
            }
            if (this.LA(1) == 35 && this.LA(2) == 137) {
                return this.createRuleStatement();
            }
            if (this.LA(1) == 35 && this.LA(2) == 166) {
                return this.createViewStatement();
            }
            if (this.LA(1) == 6 && this.LA(2) == 166) {
                return this.alterViewStatement();
            }
            if (this.LA(1) == 35 && this.LA(2) == 73) {
                return this.createFunctionStatement();
            }
            if (this.LA(1) == 6 && this.LA(2) == 73) {
                return this.alterFunctionStatement();
            }
            if (this.LA(1) == 35 && this.LA(2) == 139) {
                return this.createSchemaStatement();
            }
            if (this.LA(1) == 35 && this.LA(2) == 232) {
                return this.createFederationStatement();
            }
            if (this.LA(1) == 6 && this.LA(2) == 232) {
                return this.alterFederationStatement();
            }
            if (this.LA(1) == 162) {
                return this.useFederationStatement();
            }
            if (this.LA(1) == 35 && this.LA(2) == 112) {
                return this.createOrAlterStatements();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ExecutableProcedureReference execProc() {
            ExecutableProcedureReference executableProcedureReference = base.FragmentFactory.CreateFragment<ExecutableProcedureReference>();
            ProcedureReferenceName procedureReference;
            switch (this.LA(1)) {
                case 200:
                case 232:
                case 233:
                    procedureReference = this.procObjectReference();
                    break;
                case 234:
                    procedureReference = this.varObjectReference();
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                executableProcedureReference.ProcedureReference = procedureReference;
            }
            if (TSql140ParserInternal.tokenSet_20_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_21_.member(this.LA(2))) {
                this.setParamList(executableProcedureReference);
                goto IL_00d7;
            }
            if (TSql140ParserInternal.tokenSet_22_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00d7;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00d7:
            return executableProcedureReference;
        }

        public CreateTableStatement createTableStatement() {
            CreateTableStatement createTableStatement = base.FragmentFactory.CreateFragment<CreateTableStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(35);
            this.match(148);
            SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createTableStatement, token);
                createTableStatement.SchemaObjectName = schemaObjectName;
                base.ThrowPartialAstIfPhaseOne(createTableStatement);
            }
            switch (this.LA(1)) {
                case 191: {
                        this.match(191);
                        TableDefinition definition = this.tableDefinitionCreateTable();
                        if (base.inputState.guessing == 0) {
                            createTableStatement.Definition = definition;
                        }
                        token2 = this.LT(1);
                        this.match(192);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(createTableStatement, token2);
                        }
                        int num = this.LA(1);
                        if (num <= 92) {
                            switch (num) {
                                case 9:
                                    this.graphAsNodeOrEdge(createTableStatement);
                                    goto end_IL_0000;
                                case 1:
                                case 4:
                                case 6:
                                case 12:
                                case 13:
                                case 15:
                                case 17:
                                case 22:
                                case 23:
                                case 28:
                                case 33:
                                case 35:
                                case 44:
                                case 45:
                                case 46:
                                case 48:
                                case 49:
                                case 54:
                                case 55:
                                case 56:
                                case 60:
                                case 61:
                                case 64:
                                case 74:
                                case 75:
                                case 82:
                                case 86:
                                case 92:
                                    goto end_IL_0000;
                            }
                        } else {
                            switch (num) {
                                case 95:
                                case 105:
                                case 106:
                                case 119:
                                case 123:
                                case 125:
                                case 126:
                                case 129:
                                case 131:
                                case 132:
                                case 134:
                                case 138:
                                case 140:
                                case 142:
                                case 143:
                                case 144:
                                case 156:
                                case 160:
                                case 161:
                                case 162:
                                case 167:
                                case 170:
                                case 171:
                                case 172:
                                case 176:
                                case 182:
                                case 191:
                                case 204:
                                case 219:
                                case 220:
                                case 232:
                                case 233:
                                    goto end_IL_0000;
                            }
                        }
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                case 9:
                    this.match(9);
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        if (TSql80ParserBaseInternal.TryMatch(token3, "FILETABLE")) {
                            createTableStatement.AsFileTable = true;
                        } else {
                            TSql80ParserBaseInternal.Match(token3, "EDGE");
                            createTableStatement.AsEdge = true;
                        }
                        TSql80ParserBaseInternal.UpdateTokenInfo(createTableStatement, token3);
                    }
                    break;
                default: {
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    end_IL_0000:
                    break;
            }
            int num2 = this.LA(1);
            if (num2 <= 92) {
                switch (num2) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_069f;
                }
            } else {
                switch (num2) {
                    case 105: {
                            this.match(105);
                            FileGroupOrPartitionScheme onFileGroupOrPartitionScheme = this.filegroupOrPartitionScheme();
                            if (base.inputState.guessing == 0) {
                                createTableStatement.OnFileGroupOrPartitionScheme = onFileGroupOrPartitionScheme;
                            }
                            goto IL_069f;
                        }
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                    case 233:
                        goto IL_069f;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_069f:
            if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 105 && base.NextTokenMatches("FEDERATED")) {
                FederationScheme federationScheme = this.federatedOn(createTableStatement);
                if (base.inputState.guessing == 0) {
                    createTableStatement.FederationScheme = federationScheme;
                }
                goto IL_072c;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_072c;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_07aa:
            return createTableStatement;
            IL_072c:
            this.largeDataOnOpt(createTableStatement);
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.withTableOptions(createTableStatement);
                if (base.inputState.guessing == 0) {
                    TSql130ParserBaseInternal.CheckHekatonTableForInlineFilteredIndexes(createTableStatement);
                    TSql130ParserBaseInternal.CheckHekatonTableForNonClusteredColumnStoreIndexes(createTableStatement);
                }
                goto IL_07aa;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_07aa;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public AlterTableStatement alterTableStatement() {
            AlterTableStatement alterTableStatement = null;
            IToken token = null;
            SchemaObjectName schemaObjectName = null;
            ConstraintEnforcement vExistingRowsCheck = ConstraintEnforcement.NotSpecified;
            try {
                token = this.LT(1);
                this.match(6);
                this.match(148);
                schemaObjectName = this.schemaObjectThreePartName();
                switch (this.LA(1)) {
                    case 54:
                        alterTableStatement = this.alterTableDropTableElementStatement();
                        break;
                    case 4:
                    case 21:
                    case 97:
                    case 171:
                        switch (this.LA(1)) {
                            case 171:
                                this.match(171);
                                vExistingRowsCheck = this.constraintEnforcement();
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 4:
                            case 21:
                            case 97:
                                break;
                        }
                        switch (this.LA(1)) {
                            case 4:
                                alterTableStatement = this.alterTableAddTableElementStatement(vExistingRowsCheck);
                                break;
                            case 21:
                            case 97:
                                alterTableStatement = this.alterTableConstraintModificationStatement(vExistingRowsCheck);
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                        }
                        break;
                    case 142:
                        alterTableStatement = this.alterTableSetStatement();
                        break;
                    default:
                        if (this.LA(1) == 6 && this.LA(2) == 27) {
                            alterTableStatement = this.alterTableAlterColumnStatement();
                            break;
                        }
                        if (this.LA(1) == 6 && this.LA(2) == 84) {
                            alterTableStatement = this.alterTableAlterIndexStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 155) {
                            alterTableStatement = this.alterTableTriggerModificationStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && (this.LA(2) == 151 || this.LA(2) == 232) && base.NextTokenMatches("SWITCH")) {
                            alterTableStatement = this.alterTableSwitchStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2)) && base.NextTokenMatches("REBUILD")) {
                            alterTableStatement = this.alterTableRebuildStatement();
                            break;
                        }
                        if ((this.LA(1) == 182 || this.LA(1) == 232) && this.LA(2) == 232 && (base.NextTokenMatches("MERGE") || base.NextTokenMatches("SPLIT"))) {
                            alterTableStatement = this.alterTableAlterPartitionStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("CHANGE_TRACKING", 2)) {
                            alterTableStatement = this.alterTableChangeTrackingModificationStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("FILETABLE_NAMESPACE", 2)) {
                            alterTableStatement = this.alterTableFileTableNamespaceStatement();
                            break;
                        }
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(alterTableStatement, token);
                    alterTableStatement.SchemaObjectName = schemaObjectName;
                    return alterTableStatement;
                }
                return alterTableStatement;
            } catch (PhaseOnePartialAstException ex) {
                if (base.inputState.guessing == 0) {
                    AlterTableStatement alterTableStatement2 = ex.Statement as AlterTableStatement;
                    TSql80ParserBaseInternal.UpdateTokenInfo(alterTableStatement2, token);
                    alterTableStatement2.SchemaObjectName = schemaObjectName;
                    throw;
                }
                throw;
            }
        }

        public TSqlStatement createIndexStatement() {
            TSqlStatement tSqlStatement = null;
            IToken token = null;
            IToken tUnique = null;
            bool? isClustered = null;
            token = this.LT(1);
            this.match(35);
            switch (this.LA(1)) {
                case 159:
                    tUnique = this.LT(1);
                    this.match(159);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 24:
                case 84:
                case 98:
                    break;
            }
            switch (this.LA(1)) {
                case 24:
                case 98:
                    switch (this.LA(1)) {
                        case 24:
                            this.match(24);
                            if (base.inputState.guessing == 0) {
                                isClustered = true;
                            }
                            break;
                        case 98:
                            this.match(98);
                            if (base.inputState.guessing == 0) {
                                isClustered = false;
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    switch (this.LA(1)) {
                        case 84:
                            tSqlStatement = this.createRelationalIndexStatement(tUnique, isClustered);
                            break;
                        case 232:
                            tSqlStatement = this.createColumnStoreIndexStatement(tUnique, isClustered);
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    break;
                case 84:
                    tSqlStatement = this.createRelationalIndexStatement(tUnique, isClustered);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tSqlStatement, token);
            }
            return tSqlStatement;
        }

        public TSqlStatement declareStatements() {
            TSqlStatement tSqlStatement = null;
            IToken token = null;
            token = this.LT(1);
            this.match(46);
            bool flag = false;
            if (this.LA(1) == 234 && (this.LA(2) == 9 || this.LA(2) == 148)) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(234);
                    switch (this.LA(1)) {
                        case 9:
                            this.match(9);
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                        case 148:
                            break;
                    }
                    this.match(148);
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                DeclareTableVariableBody body = this.declareTableBody(IndexAffectingStatement.DeclareTableVariable);
                if (base.inputState.guessing == 0) {
                    DeclareTableVariableStatement declareTableVariableStatement = base.FragmentFactory.CreateFragment<DeclareTableVariableStatement>();
                    declareTableVariableStatement.Body = body;
                    tSqlStatement = declareTableVariableStatement;
                }
            } else if (this.LA(1) == 234 && TSql140ParserInternal.tokenSet_23_.member(this.LA(2))) {
                tSqlStatement = this.declareVariableStatement();
            } else {
                if (this.LA(1) != 232 && this.LA(1) != 233) {
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                tSqlStatement = this.declareCursorStatement();
            }
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tSqlStatement, token);
            }
            return tSqlStatement;
        }

        public TSqlStatement setStatements() {
            TSqlStatement tSqlStatement = null;
            IToken token = null;
            token = this.LT(1);
            this.match(142);
            switch (this.LA(1)) {
                case 234:
                    tSqlStatement = this.setVariableStatement();
                    break;
                case 146:
                    tSqlStatement = this.setStatisticsStatement();
                    break;
                case 135:
                    tSqlStatement = this.setRowcountStatement();
                    break;
                case 104:
                    tSqlStatement = this.setOffsetsStatement();
                    break;
                case 153:
                case 154:
                    tSqlStatement = this.setTransactionIsolationLevelStatement();
                    break;
                case 149:
                    tSqlStatement = this.setTextSizeStatement();
                    break;
                case 80:
                    tSqlStatement = this.setIdentityInsertStatement();
                    break;
                case 57:
                    tSqlStatement = this.setErrorLevelStatement();
                    break;
                default:
                    if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 105 || this.LA(2) == 198) && !base.NextTokenMatches("FIPS_FLAGGER")) {
                        tSqlStatement = this.predicateSetStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_24_.member(this.LA(2))) {
                        tSqlStatement = this.setCommandStatement();
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tSqlStatement, token);
            }
            return tSqlStatement;
        }

        public TSqlStatement beginStatements() {
            TSqlStatement tSqlStatement = null;
            bool flag = false;
            if (this.LA(1) == 13 && (this.LA(2) == 52 || this.LA(2) == 153 || this.LA(2) == 154)) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(13);
                    switch (this.LA(1)) {
                        case 52:
                            this.match(52);
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                        case 153:
                        case 154:
                            break;
                    }
                    switch (this.LA(1)) {
                        case 153:
                            this.match(153);
                            break;
                        case 154:
                            this.match(154);
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                return this.beginTransactionStatement();
            }
            if (this.LA(1) == 13 && this.LA(2) == 232 && base.NextTokenMatches("TRY", 2)) {
                return this.tryCatchStatement();
            }
            if (this.LA(1) == 13 && this.LA(2) == 232 && base.NextTokenMatches("CONVERSATION", 2)) {
                return this.beginConversationTimerStatement();
            }
            if (this.LA(1) == 13 && this.LA(2) == 232 && base.NextTokenMatches("DIALOG", 2)) {
                return this.beginDialogStatement();
            }
            if (this.LA(1) == 13 && TSql140ParserInternal.tokenSet_25_.member(this.LA(2))) {
                return this.beginEndBlockStatement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public BreakStatement breakStatement() {
            BreakStatement breakStatement = base.FragmentFactory.CreateFragment<BreakStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(15);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(breakStatement, token);
            }
            return breakStatement;
        }

        public ContinueStatement continueStatement() {
            ContinueStatement continueStatement = base.FragmentFactory.CreateFragment<ContinueStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(33);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(continueStatement, token);
            }
            return continueStatement;
        }

        public IfStatement ifStatement() {
            IfStatement ifStatement = base.FragmentFactory.CreateFragment<IfStatement>();
            IToken token = null;
            bool flag = false;
            token = this.LT(1);
            this.match(82);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(ifStatement, token);
            }
            BooleanExpression predicate = this.booleanExpression();
            if (base.inputState.guessing == 0) {
                ifStatement.Predicate = predicate;
            }
            TSqlStatement tSqlStatement = this.statementOptSemi();
            if (base.inputState.guessing == 0) {
                if (tSqlStatement == null) {
                    flag = true;
                } else {
                    ifStatement.ThenStatement = tSqlStatement;
                }
            }
            if (this.LA(1) == 55 && TSql140ParserInternal.tokenSet_3_.member(this.LA(2))) {
                this.match(55);
                tSqlStatement = this.statementOptSemi();
                if (base.inputState.guessing == 0) {
                    if (tSqlStatement == null) {
                        flag = true;
                    } else {
                        ifStatement.ElseStatement = tSqlStatement;
                    }
                }
                goto IL_00f7;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00f7;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00f7:
            if (base.inputState.guessing == 0 && flag) {
                ifStatement = null;
            }
            return ifStatement;
        }

        public WhileStatement whileStatement() {
            WhileStatement whileStatement = base.FragmentFactory.CreateFragment<WhileStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(170);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(whileStatement, token);
            }
            BooleanExpression predicate = this.booleanExpression();
            if (base.inputState.guessing == 0) {
                whileStatement.Predicate = predicate;
            }
            TSqlStatement tSqlStatement = this.statementOptSemi();
            if (base.inputState.guessing == 0) {
                if (tSqlStatement == null) {
                    whileStatement = null;
                } else {
                    whileStatement.Statement = tSqlStatement;
                }
            }
            return whileStatement;
        }

        public LabelStatement labelStatement() {
            LabelStatement labelStatement = base.FragmentFactory.CreateFragment<LabelStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(220);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(labelStatement, token);
                labelStatement.Value = token.getText();
            }
            return labelStatement;
        }

        public TSqlStatement backupStatements() {
            IToken token = null;
            token = this.LT(1);
            this.match(12);
            TSqlStatement tSqlStatement;
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CERTIFICATE")) {
                tSqlStatement = this.backupCertificateStatement();
                goto IL_00fa;
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SERVICE")) {
                tSqlStatement = this.backupServiceMasterKeyStatement();
                goto IL_00fa;
            }
            if (this.LA(1) == 232 && this.LA(2) == 91) {
                tSqlStatement = this.backupMasterKeyStatement();
                goto IL_00fa;
            }
            if ((this.LA(1) == 43 || this.LA(1) == 232) && this.LA(2) >= 232 && this.LA(2) <= 234) {
                tSqlStatement = this.backupStatement();
                goto IL_00fa;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00fa:
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tSqlStatement, token);
            }
            return tSqlStatement;
        }

        public TSqlStatement restoreStatements() {
            IToken token = null;
            token = this.LT(1);
            this.match(129);
            TSqlStatement tSqlStatement;
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SERVICE")) {
                tSqlStatement = this.restoreServiceMasterKeyStatement();
                goto IL_00b1;
            }
            if (this.LA(1) == 232 && this.LA(2) == 91) {
                tSqlStatement = this.restoreMasterKeyStatement();
                goto IL_00b1;
            }
            if ((this.LA(1) == 43 || this.LA(1) == 232) && TSql140ParserInternal.tokenSet_26_.member(this.LA(2))) {
                tSqlStatement = this.restoreStatement();
                goto IL_00b1;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00b1:
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tSqlStatement, token);
            }
            return tSqlStatement;
        }

        public GoToStatement gotoStatement() {
            GoToStatement goToStatement = base.FragmentFactory.CreateFragment<GoToStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(74);
            Identifier labelName = this.nonQuotedIdentifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(goToStatement, token);
                goToStatement.LabelName = labelName;
            }
            return goToStatement;
        }

        public SaveTransactionStatement saveTransactionStatement() {
            SaveTransactionStatement saveTransactionStatement = base.FragmentFactory.CreateFragment<SaveTransactionStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(138);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(saveTransactionStatement, token);
            }
            switch (this.LA(1)) {
                case 153:
                    this.match(153);
                    break;
                case 154:
                    this.match(154);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            this.transactionName(saveTransactionStatement);
            return saveTransactionStatement;
        }

        public RollbackTransactionStatement rollbackTransactionStatement() {
            RollbackTransactionStatement rollbackTransactionStatement = base.FragmentFactory.CreateFragment<RollbackTransactionStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(134);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(rollbackTransactionStatement, token);
            }
            bool flag = false;
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2))) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(232);
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "WORK");
                }
                goto IL_022a;
            }
            if (this.LA(1) != 153 && this.LA(1) != 154) {
                if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                    goto IL_022a;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            switch (this.LA(1)) {
                case 153:
                    token3 = this.LT(1);
                    this.match(153);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(rollbackTransactionStatement, token3);
                    }
                    break;
                case 154:
                    token4 = this.LT(1);
                    this.match(154);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(rollbackTransactionStatement, token4);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (TSql140ParserInternal.tokenSet_27_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_28_.member(this.LA(2))) {
                this.transactionName(rollbackTransactionStatement);
                goto IL_022a;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_022a;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_022a:
            return rollbackTransactionStatement;
        }

        public CommitTransactionStatement commitTransactionStatement() {
            CommitTransactionStatement commitTransactionStatement = base.FragmentFactory.CreateFragment<CommitTransactionStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            IToken token6 = null;
            token = this.LT(1);
            this.match(28);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(commitTransactionStatement, token);
            }
            bool flag = false;
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2))) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(232);
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "WORK");
                }
                goto IL_022d;
            }
            if (this.LA(1) != 153 && this.LA(1) != 154) {
                if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                    goto IL_022d;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            switch (this.LA(1)) {
                case 153:
                    token3 = this.LT(1);
                    this.match(153);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(commitTransactionStatement, token3);
                    }
                    break;
                case 154:
                    token4 = this.LT(1);
                    this.match(154);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(commitTransactionStatement, token4);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (TSql140ParserInternal.tokenSet_27_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_28_.member(this.LA(2))) {
                this.transactionName(commitTransactionStatement);
                goto IL_022d;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_022d;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_030d:
            return commitTransactionStatement;
            IL_022d:
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.LT(1);
                this.match(171);
                this.match(191);
                token5 = this.LT(1);
                this.match(232);
                this.match(206);
                OptionState delayedDurabilityOption = this.optionOnOff(commitTransactionStatement);
                token6 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token5, "DELAYED_DURABILITY");
                    commitTransactionStatement.DelayedDurabilityOption = delayedDurabilityOption;
                    TSql80ParserBaseInternal.UpdateTokenInfo(commitTransactionStatement, token6);
                }
                goto IL_030d;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_030d;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public CreateStatisticsStatement createStatisticsStatement() {
            CreateStatisticsStatement createStatisticsStatement = base.FragmentFactory.CreateFragment<CreateStatisticsStatement>();
            IToken token = null;
            IToken token2 = null;
            bool flag = false;
            token = this.LT(1);
            this.match(35);
            token2 = this.LT(1);
            this.match(146);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createStatisticsStatement, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(createStatisticsStatement, token2);
                createStatisticsStatement.Name = name;
            }
            this.match(105);
            SchemaObjectName onName = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                createStatisticsStatement.OnName = onName;
                base.ThrowPartialAstIfPhaseOne(createStatisticsStatement);
            }
            this.identifierColumnList(createStatisticsStatement, createStatisticsStatement.Columns);
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_0336;
                }
            } else {
                switch (num) {
                    case 169: {
                            BooleanExpression filterPredicate = this.filterClause(false);
                            if (base.inputState.guessing == 0) {
                                createStatisticsStatement.FilterPredicate = filterPredicate;
                            }
                            goto IL_0336;
                        }
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0336;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_03fb:
            return createStatisticsStatement;
            IL_0336:
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                StatisticsOption item = this.createStatisticsStatementWithOption(ref flag);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createStatisticsStatement, createStatisticsStatement.StatisticsOptions, item);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    item = this.createStatisticsStatementWithOption(ref flag);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createStatisticsStatement, createStatisticsStatement.StatisticsOptions, item);
                    }
                }
                goto IL_03fb;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_03fb;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public UpdateStatisticsStatement updateStatisticsStatement() {
            UpdateStatisticsStatement updateStatisticsStatement = base.FragmentFactory.CreateFragment<UpdateStatisticsStatement>();
            IToken token = null;
            IToken token2 = null;
            bool flag = false;
            token = this.LT(1);
            this.match(160);
            token2 = this.LT(1);
            this.match(146);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(updateStatisticsStatement, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(updateStatisticsStatement, token2);
            }
            SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                updateStatisticsStatement.SchemaObjectName = schemaObjectName;
            }
            bool flag2 = false;
            if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                int pos = this.mark();
                flag2 = true;
                base.inputState.guessing++;
                try {
                    this.match(191);
                    this.identifier();
                } catch (RecognitionException) {
                    flag2 = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag2) {
                this.columnNameList(updateStatisticsStatement, updateStatisticsStatement.SubElements);
                goto IL_0192;
            }
            if ((this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_19_.member(this.LA(2))) {
                Identifier item = this.identifier();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(updateStatisticsStatement, updateStatisticsStatement.SubElements, item);
                }
                goto IL_0192;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0192;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_025f:
            return updateStatisticsStatement;
            IL_0192:
            if (this.LA(1) == 171 && TSql140ParserInternal.tokenSet_29_.member(this.LA(2))) {
                this.match(171);
                StatisticsOption item2 = this.updateStatisticsStatementWithOption(ref flag);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(updateStatisticsStatement, updateStatisticsStatement.StatisticsOptions, item2);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    item2 = this.updateStatisticsStatementWithOption(ref flag);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(updateStatisticsStatement, updateStatisticsStatement.StatisticsOptions, item2);
                    }
                }
                goto IL_025f;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_025f;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public TSqlStatement alterDatabaseStatements() {
            TSqlStatement tSqlStatement = null;
            IToken token = null;
            token = this.LT(1);
            this.match(6);
            this.match(43);
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("AUDIT") && base.NextTokenMatches("SPECIFICATION", 2)) {
                return this.alterDatabaseAuditSpecification(token);
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SCOPED") && base.NextTokenMatches("CREDENTIAL", 2)) {
                return this.alterDatabaseScopedCredentialStatement(token);
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SCOPED") && base.NextTokenMatches("CONFIGURATION", 2)) {
                return this.alterDatabaseScopedConfigurationStatement(token);
            }
            if (TSql140ParserInternal.tokenSet_30_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_31_.member(this.LA(2))) {
                return this.alterDatabase(token);
            }
            if (this.LA(1) == 232 && this.LA(2) == 91) {
                return this.alterDatabaseEncryptionKey(token);
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ExecuteStatement executeStatement() {
            ExecuteStatement executeStatement = base.FragmentFactory.CreateFragment<ExecuteStatement>();
            int num = 0;
            ExecuteSpecification executeSpecification = this.executeSpecification();
            if (base.inputState.guessing == 0) {
                executeStatement.ExecuteSpecification = executeSpecification;
                base.ThrowPartialAstIfPhaseOne(executeStatement);
            }
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                ExecuteOption executeOption = this.executeOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(executeStatement, executeStatement.Options, executeOption);
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)executeOption.OptionKind, executeOption);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    executeOption = this.executeOption();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(executeStatement, executeStatement.Options, executeOption);
                        TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)executeOption.OptionKind, executeOption);
                    }
                }
                goto IL_010f;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_010f;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_010f:
            return executeStatement;
        }

        public StatementWithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespacesStatements() {
            StatementWithCtesAndXmlNamespaces statementWithCtesAndXmlNamespaces = null;
            WithCtesAndXmlNamespaces withCtesAndXmlNamespaces = null;
            switch (this.LA(1)) {
                case 171:
                    withCtesAndXmlNamespaces = this.withCommonTableExpressionsAndXmlNamespaces();
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 48:
                case 86:
                case 140:
                case 160:
                case 182:
                case 191:
                    break;
            }
            switch (this.LA(1)) {
                case 140:
                case 191:
                    statementWithCtesAndXmlNamespaces = this.select(SubDmlFlags.SelectNotForInsert);
                    if (base.inputState.guessing == 0 && withCtesAndXmlNamespaces != null && withCtesAndXmlNamespaces.ChangeTrackingContext != null) {
                        TSql80ParserBaseInternal.ThrowParseErrorException("SQL46072", withCtesAndXmlNamespaces.ChangeTrackingContext, TSqlParserResource.SQL46072Message);
                    }
                    break;
                case 48:
                    statementWithCtesAndXmlNamespaces = this.deleteStatement(SubDmlFlags.None);
                    break;
                case 86:
                    statementWithCtesAndXmlNamespaces = this.insertStatement(SubDmlFlags.None);
                    break;
                case 160:
                    statementWithCtesAndXmlNamespaces = this.updateStatement(SubDmlFlags.None);
                    break;
                case 182:
                    statementWithCtesAndXmlNamespaces = this.mergeStatement(SubDmlFlags.None);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                statementWithCtesAndXmlNamespaces.WithCtesAndXmlNamespaces = withCtesAndXmlNamespaces;
            }
            return statementWithCtesAndXmlNamespaces;
        }

        public RaiseErrorStatement raiseErrorStatement() {
            RaiseErrorStatement raiseErrorStatement = base.FragmentFactory.CreateFragment<RaiseErrorStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            token = this.LT(1);
            this.match(123);
            token2 = this.LT(1);
            this.match(191);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(raiseErrorStatement, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(raiseErrorStatement, token2);
            }
            ScalarExpression firstParameter = this.signedIntegerOrStringOrVariable();
            if (base.inputState.guessing == 0) {
                raiseErrorStatement.FirstParameter = firstParameter;
            }
            this.match(198);
            firstParameter = this.signedIntegerOrVariable();
            if (base.inputState.guessing == 0) {
                raiseErrorStatement.SecondParameter = firstParameter;
            }
            this.match(198);
            firstParameter = this.signedIntegerOrVariable();
            if (base.inputState.guessing == 0) {
                raiseErrorStatement.ThirdParameter = firstParameter;
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                firstParameter = this.possibleNegativeConstant();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(raiseErrorStatement, raiseErrorStatement.OptionalParameters, firstParameter);
                }
            }
            token3 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(raiseErrorStatement, token3);
            }
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                token4 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(raiseErrorStatement, token4);
                    raiseErrorStatement.RaiseErrorOptions |= RaiseErrorOptionsHelper.Instance.ParseOption(token4);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    token5 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(raiseErrorStatement, token5);
                        raiseErrorStatement.RaiseErrorOptions |= RaiseErrorOptionsHelper.Instance.ParseOption(token5);
                    }
                }
                goto IL_0230;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0230;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0230:
            return raiseErrorStatement;
        }

        public TSqlStatement alter2005Statements() {
            IToken token = null;
            token = this.LT(1);
            this.match(6);
            TSqlStatement tSqlStatement;
            switch (this.LA(1)) {
                case 11:
                    tSqlStatement = this.alterAuthorizationStatement();
                    break;
                case 84:
                    tSqlStatement = this.alterIndexStatement();
                    break;
                case 139:
                    tSqlStatement = this.alterSchemaStatement();
                    break;
                case 163:
                    tSqlStatement = this.alterUserStatement();
                    break;
                default:
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("APPLICATION")) {
                        tSqlStatement = this.alterApplicationRoleStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ASSEMBLY")) {
                        tSqlStatement = this.alterAssemblyStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("ASYMMETRIC")) {
                        tSqlStatement = this.alterAsymmetricKeyStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 76 && base.NextTokenMatches("AVAILABILITY")) {
                        tSqlStatement = this.alterAvailabilityGroupStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("BROKER")) {
                        tSqlStatement = this.alterBrokerPriorityStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("CRYPTOGRAPHIC")) {
                        tSqlStatement = this.alterCryptographicProviderStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("EVENT")) {
                        tSqlStatement = this.alterEventSessionStatement();
                        break;
                    }
                    if (this.LA(1) == 175 && base.NextTokenMatches("EXTERNAL")) {
                        tSqlStatement = this.alterExternalStatements();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("REMOTE")) {
                        tSqlStatement = this.alterRemoteServiceBindingStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("RESOURCE")) {
                        tSqlStatement = this.alterResourceStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 76 && base.NextTokenMatches("WORKLOAD")) {
                        tSqlStatement = this.alterWorkloadGroupStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CERTIFICATE")) {
                        tSqlStatement = this.alterCertificateStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CREDENTIAL")) {
                        tSqlStatement = this.alterCredentialStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ENDPOINT")) {
                        tSqlStatement = this.alterEndpointStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 84 || this.LA(2) == 183 || this.LA(2) == 232) && base.NextTokenMatches("FULLTEXT")) {
                        tSqlStatement = this.alterFulltextStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("LOGIN")) {
                        tSqlStatement = this.alterLoginStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER")) {
                        tSqlStatement = this.alterMasterKeyStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MESSAGE")) {
                        tSqlStatement = this.alterMessageTypeStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 73 || this.LA(2) == 232) && base.NextTokenMatches("PARTITION")) {
                        tSqlStatement = this.alterPartitionStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("QUEUE")) {
                        tSqlStatement = this.alterQueueStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROLE")) {
                        tSqlStatement = this.alterRoleStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROUTE")) {
                        tSqlStatement = this.alterRouteStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SEARCH")) {
                        tSqlStatement = this.alterSearchPropertyListStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SEQUENCE")) {
                        tSqlStatement = this.alterSequenceStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SERVICE")) {
                        tSqlStatement = this.alterServiceStatements();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("SYMMETRIC")) {
                        tSqlStatement = this.alterSymmetricKeyStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SERVER")) {
                        tSqlStatement = this.alterServerStatements();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 139 && base.NextTokenMatches("XML")) {
                        tSqlStatement = this.alterXmlSchemaCollectionStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SECURITY")) {
                        tSqlStatement = this.alterSecurityPolicyStatement();
                        break;
                    }
                    if (this.LA(1) == 27 && base.NextTokenMatches("COLUMN")) {
                        tSqlStatement = this.alterColumnEncryptionKeyStatement();
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tSqlStatement, token);
                base.ThrowPartialAstIfPhaseOne(tSqlStatement);
            }
            return tSqlStatement;
        }

        public TSqlStatement create2005Statements() {
            TSqlStatement tSqlStatement = null;
            IToken token = null;
            try {
                token = this.LT(1);
                this.match(35);
                switch (this.LA(1)) {
                    case 118:
                        tSqlStatement = this.createPrimaryXmlIndexStatement();
                        break;
                    case 163:
                        tSqlStatement = this.createUserStatement();
                        break;
                    default:
                        if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("AGGREGATE")) {
                            tSqlStatement = this.createAggregateStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("APPLICATION")) {
                            tSqlStatement = this.createApplicationRoleStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ASSEMBLY")) {
                            tSqlStatement = this.createAssemblyStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("ASYMMETRIC")) {
                            tSqlStatement = this.createAsymmetricKeyStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 76 && base.NextTokenMatches("AVAILABILITY")) {
                            tSqlStatement = this.createAvailabilityGroupStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("BROKER")) {
                            tSqlStatement = this.createBrokerPriorityStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CERTIFICATE")) {
                            tSqlStatement = this.createCertificateStatement();
                            break;
                        }
                        if (this.LA(1) == 27 && base.NextTokenMatches("COLUMN")) {
                            tSqlStatement = this.createColumnStatements();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 84 && base.NextTokenMatches("COLUMNSTORE")) {
                            tSqlStatement = this.createColumnStoreIndexStatement(null, null);
                            break;
                        }
                        if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CONTRACT")) {
                            tSqlStatement = this.createContractStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CREDENTIAL")) {
                            tSqlStatement = this.createCredentialStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("CRYPTOGRAPHIC")) {
                            tSqlStatement = this.createCryptographicProviderStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ENDPOINT")) {
                            tSqlStatement = this.createEndpointStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("EVENT")) {
                            tSqlStatement = this.createEventStatement();
                            break;
                        }
                        if (this.LA(1) == 175 && base.NextTokenMatches("EXTERNAL")) {
                            tSqlStatement = this.createExternalStatements();
                            break;
                        }
                        if (this.LA(1) == 232 && (this.LA(2) == 84 || this.LA(2) == 183 || this.LA(2) == 232) && base.NextTokenMatches("FULLTEXT")) {
                            tSqlStatement = this.createFulltextStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SELECTIVE")) {
                            tSqlStatement = this.createSelectiveXmlIndexStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && (this.LA(2) == 84 || this.LA(2) == 139) && base.NextTokenMatches("XML")) {
                            tSqlStatement = this.createXmlStatements();
                            break;
                        }
                        if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("LOGIN")) {
                            tSqlStatement = this.createLoginStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MESSAGE")) {
                            tSqlStatement = this.createMessageTypeStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER")) {
                            tSqlStatement = this.createMasterKeyStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && (this.LA(2) == 73 || this.LA(2) == 232) && base.NextTokenMatches("PARTITION")) {
                            tSqlStatement = this.createPartitionStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("QUEUE")) {
                            tSqlStatement = this.createQueueStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("REMOTE")) {
                            tSqlStatement = this.createRemoteServiceBindingStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("RESOURCE")) {
                            tSqlStatement = this.createResourcePoolStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROLE")) {
                            tSqlStatement = this.createRoleStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROUTE")) {
                            tSqlStatement = this.createRouteStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SEARCH")) {
                            tSqlStatement = this.createSearchPropertyListStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SERVICE")) {
                            tSqlStatement = this.createServiceStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 84 && base.NextTokenMatches("SPATIAL")) {
                            tSqlStatement = this.createSpatialIndexStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("SYMMETRIC")) {
                            tSqlStatement = this.createSymmetricKeyStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SYNONYM")) {
                            tSqlStatement = this.createSynonymStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("TYPE")) {
                            tSqlStatement = this.createTypeStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SERVER")) {
                            tSqlStatement = this.createServerStatements();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 76 && base.NextTokenMatches("WORKLOAD")) {
                            tSqlStatement = this.createWorkloadGroupStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SEQUENCE")) {
                            tSqlStatement = this.createSequenceStatement();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SECURITY")) {
                            tSqlStatement = this.createSecurityPolicyStatement();
                            break;
                        }
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(tSqlStatement, token);
                    base.ThrowPartialAstIfPhaseOne(tSqlStatement);
                    return tSqlStatement;
                }
                return tSqlStatement;
            } catch (PhaseOnePartialAstException ex) {
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(ex.Statement, token);
                    throw;
                }
                throw;
            }
        }

        public TSqlStatement createDatabaseStatements() {
            TSqlStatement tSqlStatement = null;
            IToken token = null;
            token = this.LT(1);
            this.match(35);
            this.match(43);
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("AUDIT") && base.NextTokenMatches("SPECIFICATION", 2)) {
                tSqlStatement = this.createDatabaseAuditSpecification();
                goto IL_010c;
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SCOPED") && base.NextTokenMatches("CREDENTIAL", 2)) {
                tSqlStatement = this.createDatabaseScopedCredentialStatement();
                goto IL_010c;
            }
            if ((this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_32_.member(this.LA(2))) {
                tSqlStatement = this.createDatabase();
                goto IL_010c;
            }
            if (this.LA(1) == 232 && this.LA(2) == 91) {
                tSqlStatement = this.createDatabaseEncryptionKey();
                goto IL_010c;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_010c:
            if (base.inputState.guessing == 0 && tSqlStatement != null) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tSqlStatement, token);
            }
            return tSqlStatement;
        }

        public AddSignatureStatement addSignatureStatement() {
            AddSignatureStatement addSignatureStatement = base.FragmentFactory.CreateFragment<AddSignatureStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(4);
            this.signatureType(addSignatureStatement);
            this.match(151);
            this.signableElement(addSignatureStatement);
            this.match(18);
            this.cryptoListWithOptionalPasswordSignature(addSignatureStatement);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(addSignatureStatement, token);
            }
            return addSignatureStatement;
        }

        public TSqlStatement identifierStatements() {
            if (this.LA(1) == 232 && this.LA(2) == 155 && base.NextTokenMatches("DISABLE")) {
                return this.disableTriggerStatement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 155 && base.NextTokenMatches("ENABLE")) {
                return this.enableTriggerStatement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MOVE")) {
                return this.moveConversationStatement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("GET")) {
                return this.getConversationGroupStatement();
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_33_.member(this.LA(2)) && base.NextTokenMatches("RECEIVE")) {
                return this.receiveStatement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 105 && base.NextTokenMatches("SEND")) {
                return this.sendStatement();
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_34_.member(this.LA(2)) && base.NextTokenMatches("THROW")) {
                return this.throwStatement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public PrintStatement printStatement() {
            PrintStatement printStatement = base.FragmentFactory.CreateFragment<PrintStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(119);
            ScalarExpression expression = this.expression();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(printStatement, token);
                printStatement.Expression = expression;
            }
            return printStatement;
        }

        public WaitForStatement waitForStatement() {
            WaitForStatement waitForStatement = base.FragmentFactory.CreateFragment<WaitForStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(167);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(waitForStatement, token);
            }
            switch (this.LA(1)) {
                case 232: {
                        token2 = this.LT(1);
                        this.match(232);
                        ValueExpression parameter = this.stringOrVariable();
                        if (base.inputState.guessing == 0) {
                            waitForStatement.WaitForOption = WaitForOptionHelper.Instance.ParseOption(token2);
                            waitForStatement.Parameter = parameter;
                        }
                        break;
                    }
                case 191: {
                        this.match(191);
                        WaitForSupportedStatement statement = this.waitforInnerStatement();
                        token3 = this.LT(1);
                        this.match(192);
                        if (base.inputState.guessing == 0) {
                            waitForStatement.Statement = statement;
                            waitForStatement.WaitForOption = WaitForOption.Statement;
                            TSql80ParserBaseInternal.UpdateTokenInfo(waitForStatement, token3);
                        }
                        int num = this.LA(1);
                        if (num <= 95) {
                            switch (num) {
                                case 1:
                                case 4:
                                case 6:
                                case 12:
                                case 13:
                                case 15:
                                case 17:
                                case 22:
                                case 23:
                                case 28:
                                case 33:
                                case 35:
                                case 44:
                                case 45:
                                case 46:
                                case 48:
                                case 49:
                                case 54:
                                case 55:
                                case 56:
                                case 60:
                                case 61:
                                case 64:
                                case 74:
                                case 75:
                                case 82:
                                case 86:
                                case 92:
                                case 95:
                                    goto end_IL_0000;
                            }
                        } else {
                            switch (num) {
                                case 198: {
                                        this.match(198);
                                        token4 = this.LT(1);
                                        this.match(232);
                                        ScalarExpression timeout = this.signedIntegerOrVariable();
                                        if (base.inputState.guessing == 0) {
                                            TSql80ParserBaseInternal.Match(token4, "TIMEOUT");
                                            waitForStatement.Timeout = timeout;
                                        }
                                        goto end_IL_0000;
                                    }
                                case 106:
                                case 119:
                                case 123:
                                case 125:
                                case 126:
                                case 129:
                                case 131:
                                case 132:
                                case 134:
                                case 138:
                                case 140:
                                case 142:
                                case 143:
                                case 144:
                                case 156:
                                case 160:
                                case 161:
                                case 162:
                                case 167:
                                case 170:
                                case 171:
                                case 172:
                                case 176:
                                case 182:
                                case 191:
                                case 204:
                                case 219:
                                case 220:
                                case 232:
                                    goto end_IL_0000;
                            }
                        }
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                default: {
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    end_IL_0000:
                    break;
            }
            return waitForStatement;
        }

        public ReadTextStatement readTextStatement() {
            ReadTextStatement readTextStatement = base.FragmentFactory.CreateFragment<ReadTextStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(125);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(readTextStatement, token);
            }
            ColumnReferenceExpression column = this.column();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckTableNameExistsForColumn(column, true);
                readTextStatement.Column = column;
            }
            ValueExpression textPointer = this.binaryOrVariable();
            if (base.inputState.guessing == 0) {
                readTextStatement.TextPointer = textPointer;
            }
            textPointer = this.integerOrVariable();
            if (base.inputState.guessing == 0) {
                readTextStatement.Offset = textPointer;
            }
            textPointer = this.integerOrVariable();
            if (base.inputState.guessing == 0) {
                readTextStatement.Size = textPointer;
            }
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 78:
                        token2 = this.LT(1);
                        this.match(78);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(readTextStatement, token2);
                            readTextStatement.HoldLock = true;
                        }
                        goto IL_0361;
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_0361;
                }
            } else {
                switch (num) {
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0361;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0361:
            return readTextStatement;
        }

        public UpdateTextStatement updateTextStatement() {
            UpdateTextStatement updateTextStatement = base.FragmentFactory.CreateFragment<UpdateTextStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(161);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(updateTextStatement, token);
            }
            this.modificationTextStatement(updateTextStatement);
            ScalarExpression insertOffset = this.signedIntegerOrVariableOrNull();
            if (base.inputState.guessing == 0) {
                updateTextStatement.InsertOffset = insertOffset;
            }
            insertOffset = this.signedIntegerOrVariableOrNull();
            if (base.inputState.guessing == 0) {
                updateTextStatement.DeleteLength = insertOffset;
            }
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.modificationTextStatementWithLog(updateTextStatement);
                goto IL_00d4;
            }
            if (TSql140ParserInternal.tokenSet_35_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00d4;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00d4:
            if (TSql140ParserInternal.tokenSet_36_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_37_.member(this.LA(2))) {
                ColumnReferenceExpression columnReferenceExpression = this.column();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, true);
                    updateTextStatement.SourceColumn = columnReferenceExpression;
                }
                ValueExpression sourceParameter = this.binaryOrVariable();
                if (base.inputState.guessing == 0) {
                    updateTextStatement.SourceParameter = sourceParameter;
                }
                goto IL_01a2;
            }
            if (TSql140ParserInternal.tokenSet_38_.member(this.LA(1))) {
                ValueExpression sourceParameter = this.writeString();
                if (base.inputState.guessing == 0) {
                    updateTextStatement.SourceParameter = sourceParameter;
                }
                goto IL_01a2;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_01a2;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_01a2:
            return updateTextStatement;
        }

        public WriteTextStatement writeTextStatement() {
            WriteTextStatement writeTextStatement = base.FragmentFactory.CreateFragment<WriteTextStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(172);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(writeTextStatement, token);
            }
            this.modificationTextStatement(writeTextStatement);
            switch (this.LA(1)) {
                case 171:
                    this.modificationTextStatementWithLog(writeTextStatement);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 100:
                case 224:
                case 230:
                case 231:
                case 234:
                    break;
            }
            ValueExpression sourceParameter = this.writeString();
            if (base.inputState.guessing == 0) {
                writeTextStatement.SourceParameter = sourceParameter;
            }
            return writeTextStatement;
        }

        public LineNoStatement lineNoStatement() {
            LineNoStatement lineNoStatement = base.FragmentFactory.CreateFragment<LineNoStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(95);
            IntegerLiteral lineNo = this.integer();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(lineNoStatement, token);
                lineNoStatement.LineNo = lineNo;
            }
            return lineNoStatement;
        }

        public UseStatement useStatement() {
            UseStatement useStatement = base.FragmentFactory.CreateFragment<UseStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(162);
            Identifier databaseName = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(useStatement, token);
                useStatement.DatabaseName = databaseName;
            }
            return useStatement;
        }

        public TSqlStatement killStatements() {
            TSqlStatement tSqlStatement = null;
            IToken token = null;
            token = this.LT(1);
            this.match(92);
            if (TSql140ParserInternal.tokenSet_39_.member(this.LA(1))) {
                tSqlStatement = this.killStatement();
                goto IL_009a;
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("QUERY")) {
                tSqlStatement = this.killQueryNotificationSubscriptionStatement();
                goto IL_009a;
            }
            if (this.LA(1) == 232 && this.LA(2) == 232) {
                tSqlStatement = this.killStatsJobStatement();
                goto IL_009a;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_009a:
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tSqlStatement, token);
            }
            return tSqlStatement;
        }

        public BulkInsertStatement bulkInsertStatement() {
            BulkInsertStatement bulkInsertStatement = base.FragmentFactory.CreateFragment<BulkInsertStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(17);
            this.match(86);
            SchemaObjectName to = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(bulkInsertStatement, token);
                bulkInsertStatement.To = to;
                base.ThrowPartialAstIfPhaseOne(bulkInsertStatement);
            }
            this.match(71);
            IdentifierOrValueExpression from = this.bulkInsertFrom();
            if (base.inputState.guessing == 0) {
                bulkInsertStatement.From = from;
            }
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.bulkInsertOptions(bulkInsertStatement);
                goto IL_00d0;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00d0;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00d0:
            return bulkInsertStatement;
        }

        public InsertBulkStatement insertBulkStatement() {
            InsertBulkStatement insertBulkStatement = base.FragmentFactory.CreateFragment<InsertBulkStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(86);
            this.match(17);
            SchemaObjectName to = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                insertBulkStatement.To = to;
                TSql80ParserBaseInternal.UpdateTokenInfo(insertBulkStatement, token);
                base.ThrowPartialAstIfPhaseOne(insertBulkStatement);
            }
            if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                this.coldefList(insertBulkStatement);
                goto IL_00bb;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00bb;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00bb:
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.insertBulkOptions(insertBulkStatement);
                goto IL_0119;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0119;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0119:
            return insertBulkStatement;
        }

        public CheckpointStatement checkpointStatement() {
            CheckpointStatement checkpointStatement = base.FragmentFactory.CreateFragment<CheckpointStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(22);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(checkpointStatement, token);
            }
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_02af;
                }
            } else {
                switch (num) {
                    case 221: {
                            Literal duration = this.integer();
                            if (base.inputState.guessing == 0) {
                                checkpointStatement.Duration = duration;
                            }
                            goto IL_02af;
                        }
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_02af;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_02af:
            return checkpointStatement;
        }

        public ReconfigureStatement reconfigureStatement() {
            ReconfigureStatement reconfigureStatement = base.FragmentFactory.CreateFragment<ReconfigureStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(126);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(reconfigureStatement, token);
            }
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "OVERRIDE");
                    reconfigureStatement.WithOverride = true;
                    TSql80ParserBaseInternal.UpdateTokenInfo(reconfigureStatement, token2);
                }
                goto IL_00cf;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00cf;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00cf:
            return reconfigureStatement;
        }

        public ShutdownStatement shutdownStatement() {
            ShutdownStatement shutdownStatement = base.FragmentFactory.CreateFragment<ShutdownStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(144);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(shutdownStatement, token);
            }
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "NOWAIT");
                    shutdownStatement.WithNoWait = true;
                    TSql80ParserBaseInternal.UpdateTokenInfo(shutdownStatement, token2);
                }
                goto IL_00d2;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00d2;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00d2:
            return shutdownStatement;
        }

        public SetUserStatement setUserStatement() {
            SetUserStatement setUserStatement = base.FragmentFactory.CreateFragment<SetUserStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(143);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(setUserStatement, token);
            }
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_0395;
                }
                goto IL_0382;
            }
            switch (num) {
                case 230:
                case 231:
                case 234:
                    break;
                default:
                    goto IL_0382;
                case 95:
                case 106:
                case 119:
                case 123:
                case 125:
                case 126:
                case 129:
                case 131:
                case 132:
                case 134:
                case 138:
                case 140:
                case 142:
                case 143:
                case 144:
                case 156:
                case 160:
                case 161:
                case 162:
                case 167:
                case 170:
                case 171:
                case 172:
                case 176:
                case 182:
                case 191:
                case 204:
                case 219:
                case 220:
                case 232:
                    goto IL_0395;
            }
            ValueExpression userName = this.stringOrVariable();
            if (base.inputState.guessing == 0) {
                setUserStatement.UserName = userName;
            }
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "NORESET");
                    setUserStatement.WithNoReset = true;
                    TSql80ParserBaseInternal.UpdateTokenInfo(setUserStatement, token2);
                }
                goto IL_0395;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0395;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0382:
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0395:
            return setUserStatement;
        }

        public TruncateTableStatement truncateTableStatement() {
            TruncateTableStatement truncateTableStatement = base.FragmentFactory.CreateFragment<TruncateTableStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(156);
            this.match(148);
            SchemaObjectName tableName = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(truncateTableStatement, token);
                truncateTableStatement.TableName = tableName;
            }
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.match(171);
                this.match(191);
                this.LT(1);
                this.match(232);
                this.match(191);
                CompressionPartitionRange item = this.compressionPartitionRange();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(truncateTableStatement, truncateTableStatement.PartitionRanges, item);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    item = this.compressionPartitionRange();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(truncateTableStatement, truncateTableStatement.PartitionRanges, item);
                    }
                }
                this.match(192);
                this.match(192);
                goto IL_0152;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0152;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0152:
            return truncateTableStatement;
        }

        public GrantStatement grantStatement90() {
            GrantStatement grantStatement = base.FragmentFactory.CreateFragment<GrantStatement>();
            IToken token = null;
            IToken token2 = null;
            bool vColumnsDisallowed = false;
            token = this.LT(1);
            this.match(75);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(grantStatement, token);
            }
            this.permissionsList(grantStatement, ref vColumnsDisallowed);
            this.securityStatementTargetObjectOpt(grantStatement, vColumnsDisallowed);
            this.match(151);
            this.securityStatementPrincipalList(grantStatement);
            if (this.LA(1) == 171 && this.LA(2) == 75) {
                this.match(171);
                this.match(75);
                token2 = this.LT(1);
                this.match(111);
                if (base.inputState.guessing == 0) {
                    grantStatement.WithGrantOption = true;
                    TSql80ParserBaseInternal.UpdateTokenInfo(grantStatement, token2);
                }
                goto IL_00eb;
            }
            if (TSql140ParserInternal.tokenSet_40_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00eb;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00eb:
            this.securityStatementAsClauseOpt(grantStatement);
            return grantStatement;
        }

        public DenyStatement denyStatement90() {
            DenyStatement denyStatement = base.FragmentFactory.CreateFragment<DenyStatement>();
            IToken token = null;
            IToken token2 = null;
            bool vColumnsDisallowed = false;
            token = this.LT(1);
            this.match(49);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(denyStatement, token);
            }
            this.permissionsList(denyStatement, ref vColumnsDisallowed);
            this.securityStatementTargetObjectOpt(denyStatement, vColumnsDisallowed);
            this.match(151);
            this.securityStatementPrincipalList(denyStatement);
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 19:
                        token2 = this.LT(1);
                        this.match(19);
                        if (base.inputState.guessing == 0) {
                            denyStatement.CascadeOption = true;
                            TSql80ParserBaseInternal.UpdateTokenInfo(denyStatement, token2);
                        }
                        goto IL_0313;
                    case 1:
                    case 4:
                    case 6:
                    case 9:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0313;
                }
            } else {
                switch (num) {
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0313;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0313:
            this.securityStatementAsClauseOpt(denyStatement);
            return denyStatement;
        }

        public RevokeStatement revokeStatement90() {
            RevokeStatement revokeStatement = base.FragmentFactory.CreateFragment<RevokeStatement>();
            IToken token = null;
            IToken token2 = null;
            bool vColumnsDisallowed = false;
            token = this.LT(1);
            this.match(132);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(revokeStatement, token);
            }
            if (this.LA(1) == 75) {
                this.match(75);
                this.match(111);
                this.match(67);
                if (base.inputState.guessing == 0) {
                    revokeStatement.GrantOptionFor = true;
                }
            } else if (!TSql140ParserInternal.tokenSet_41_.member(this.LA(1))) {
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            this.permissionsList(revokeStatement, ref vColumnsDisallowed);
            this.securityStatementTargetObjectOpt(revokeStatement, vColumnsDisallowed);
            switch (this.LA(1)) {
                case 151:
                    this.match(151);
                    break;
                case 71:
                    this.match(71);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            this.securityStatementPrincipalList(revokeStatement);
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 19:
                        token2 = this.LT(1);
                        this.match(19);
                        if (base.inputState.guessing == 0) {
                            revokeStatement.CascadeOption = true;
                            TSql80ParserBaseInternal.UpdateTokenInfo(revokeStatement, token2);
                        }
                        goto IL_03ac;
                    case 1:
                    case 4:
                    case 6:
                    case 9:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_03ac;
                }
            } else {
                switch (num) {
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_03ac;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_03ac:
            this.securityStatementAsClauseOpt(revokeStatement);
            return revokeStatement;
        }

        public ReturnStatement returnStatement() {
            ReturnStatement returnStatement = base.FragmentFactory.CreateFragment<ReturnStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(131);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(returnStatement, token);
            }
            bool flag = false;
            if (TSql140ParserInternal.tokenSet_42_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_43_.member(this.LA(2))) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.expression();
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                ScalarExpression expression = this.expression();
                if (base.inputState.guessing == 0) {
                    returnStatement.Expression = expression;
                }
                goto IL_00fc;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00fc;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00fc:
            return returnStatement;
        }

        public TSqlStatement openStatements() {
            TSqlStatement tSqlStatement = null;
            IToken token = null;
            token = this.LT(1);
            this.match(106);
            if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER")) {
                tSqlStatement = this.openMasterKeyStatement();
                goto IL_00bd;
            }
            if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("SYMMETRIC")) {
                tSqlStatement = this.openSymmetricKeyStatement();
                goto IL_00bd;
            }
            if (this.LA(1) >= 232 && this.LA(1) <= 234 && TSql140ParserInternal.tokenSet_44_.member(this.LA(2))) {
                tSqlStatement = this.openCursorStatement();
                goto IL_00bd;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00bd:
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tSqlStatement, token);
            }
            return tSqlStatement;
        }

        public TSqlStatement closeStatements() {
            TSqlStatement tSqlStatement = null;
            IToken token = null;
            token = this.LT(1);
            this.match(23);
            if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER")) {
                tSqlStatement = this.closeMasterKeyStatement();
            } else {
                if (this.LA(1) != 5 && this.LA(1) != 232) {
                    goto IL_0097;
                }
                if (this.LA(2) != 91 && this.LA(2) != 232) {
                    goto IL_0097;
                }
                if (!base.NextTokenMatches("SYMMETRIC") && this.LA(1) != 5) {
                    goto IL_0097;
                }
                tSqlStatement = this.closeSymmetricKeyStatement();
            }
            goto IL_00e2;
            IL_0097:
            if (this.LA(1) >= 232 && this.LA(1) <= 234 && TSql140ParserInternal.tokenSet_44_.member(this.LA(2))) {
                tSqlStatement = this.closeCursorStatement();
                goto IL_00e2;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00e2:
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tSqlStatement, token);
            }
            return tSqlStatement;
        }

        public DeallocateCursorStatement deallocateCursorStatement() {
            DeallocateCursorStatement deallocateCursorStatement = base.FragmentFactory.CreateFragment<DeallocateCursorStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(45);
            CursorId cursor = this.cursorId();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(deallocateCursorStatement, token);
                deallocateCursorStatement.Cursor = cursor;
            }
            return deallocateCursorStatement;
        }

        public FetchCursorStatement fetchCursorStatement() {
            IToken token = null;
            token = this.LT(1);
            this.match(64);
            FetchCursorStatement fetchCursorStatement = this.rowSelector();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(fetchCursorStatement, token);
            }
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 88: {
                            this.match(88);
                            VariableReference item = this.variable();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(fetchCursorStatement, fetchCursorStatement.IntoVariables, item);
                            }
                            while (true) {
                                if (this.LA(1) != 198) {
                                    break;
                                }
                                this.match(198);
                                item = this.variable();
                                if (base.inputState.guessing == 0) {
                                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(fetchCursorStatement, fetchCursorStatement.IntoVariables, item);
                                }
                            }
                            goto IL_030d;
                        }
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_030d;
                }
            } else {
                switch (num) {
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_030d;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_030d:
            return fetchCursorStatement;
        }

        public TSqlStatement dropStatements() {
            IToken token = null;
            token = this.LT(1);
            this.match(54);
            TSqlStatement tSqlStatement;
            switch (this.LA(1)) {
                case 43:
                    tSqlStatement = this.dropDatabaseStatements();
                    break;
                case 84:
                    tSqlStatement = this.dropIndexStatement();
                    break;
                case 146:
                    tSqlStatement = this.dropStatisticsStatement();
                    break;
                case 148:
                    tSqlStatement = this.dropTableStatement();
                    break;
                case 120:
                case 121:
                    tSqlStatement = this.dropProcedureStatement();
                    break;
                case 73:
                    tSqlStatement = this.dropFunctionStatement();
                    break;
                case 166:
                    tSqlStatement = this.dropViewStatement();
                    break;
                case 47:
                    tSqlStatement = this.dropDefaultStatement();
                    break;
                case 137:
                    tSqlStatement = this.dropRuleStatement();
                    break;
                case 155:
                    tSqlStatement = this.dropTriggerStatement();
                    break;
                case 139:
                    tSqlStatement = this.dropSchemaStatement();
                    break;
                case 163:
                    tSqlStatement = this.dropUserStatement();
                    break;
                default:
                    if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_45_.member(this.LA(2)) && base.NextTokenMatches("AGGREGATE")) {
                        tSqlStatement = this.dropAggregateStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_45_.member(this.LA(2)) && base.NextTokenMatches("ASSEMBLY")) {
                        tSqlStatement = this.dropAssemblyStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 76 && base.NextTokenMatches("AVAILABILITY")) {
                        tSqlStatement = this.dropAvailabilityGroupStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 73 || this.LA(2) == 232) && base.NextTokenMatches("PARTITION")) {
                        tSqlStatement = this.dropPartitionStatements();
                        break;
                    }
                    if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_45_.member(this.LA(2)) && base.NextTokenMatches("SYNONYM")) {
                        tSqlStatement = this.dropSynonymStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("APPLICATION")) {
                        tSqlStatement = this.dropApplicationRoleStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("BROKER")) {
                        tSqlStatement = this.dropBrokerPriorityStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("CRYPTOGRAPHIC")) {
                        tSqlStatement = this.dropCryptographicProviderStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 84 || this.LA(2) == 183 || this.LA(2) == 232) && base.NextTokenMatches("FULLTEXT")) {
                        tSqlStatement = this.dropFulltextStatements();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("LOGIN")) {
                        tSqlStatement = this.dropLoginStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("RESOURCE")) {
                        tSqlStatement = this.dropResourcePoolStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 76 && base.NextTokenMatches("WORKLOAD")) {
                        tSqlStatement = this.dropWorkloadGroupStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 82 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROLE")) {
                        tSqlStatement = this.dropRoleStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER")) {
                        tSqlStatement = this.dropMasterKeyStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("SYMMETRIC")) {
                        tSqlStatement = this.dropSymmetricKeyStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("ASYMMETRIC")) {
                        tSqlStatement = this.dropAsymmetricKeyStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CERTIFICATE")) {
                        tSqlStatement = this.dropCertificateStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CREDENTIAL")) {
                        tSqlStatement = this.dropCredentialStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_45_.member(this.LA(2)) && base.NextTokenMatches("TYPE")) {
                        tSqlStatement = this.dropTypeStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 139 && base.NextTokenMatches("XML")) {
                        tSqlStatement = this.dropXmlSchemaCollectionStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CONTRACT")) {
                        tSqlStatement = this.dropContractStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("QUEUE")) {
                        tSqlStatement = this.dropQueueStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SERVICE")) {
                        tSqlStatement = this.dropServiceStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROUTE")) {
                        tSqlStatement = this.dropRouteStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MESSAGE")) {
                        tSqlStatement = this.dropMessageTypeStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("REMOTE")) {
                        tSqlStatement = this.dropRemoteServiceBindingStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ENDPOINT")) {
                        tSqlStatement = this.dropEndpointStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 71 || this.LA(2) == 232) && (base.NextTokenMatches("SIGNATURE") || base.NextTokenMatches("COUNTER"))) {
                        tSqlStatement = this.dropSignatureStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("EVENT")) {
                        tSqlStatement = this.dropEventStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SEARCH")) {
                        tSqlStatement = this.dropSearchPropertyListStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_45_.member(this.LA(2)) && base.NextTokenMatches("SEQUENCE")) {
                        tSqlStatement = this.dropSequenceStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("FEDERATION")) {
                        tSqlStatement = this.dropFederationStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SECURITY")) {
                        tSqlStatement = this.dropSecurityPolicyStatement();
                        break;
                    }
                    if (this.LA(1) == 27 && base.NextTokenMatches("COLUMN")) {
                        tSqlStatement = this.dropColumnStatements();
                        break;
                    }
                    if (this.LA(1) == 175 && base.NextTokenMatches("EXTERNAL")) {
                        tSqlStatement = this.dropExternalStatement();
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232) {
                        tSqlStatement = this.dropServerStatements();
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tSqlStatement, token);
            }
            return tSqlStatement;
        }

        public DbccStatement dbccStatement() {
            DbccStatement dbccStatement = base.FragmentFactory.CreateFragment<DbccStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(44);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                DbccCommand dbccCommand = default(DbccCommand);
                if (((OptionsHelper<DbccCommand>)DbccCommandsHelper.Instance).TryParseOption(token2, out dbccCommand)) {
                    if (dbccCommand == DbccCommand.ConcurrencyViolation || dbccCommand == DbccCommand.MemObjList || dbccCommand == DbccCommand.MemoryMap) {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token2);
                    }
                    dbccStatement.Command = dbccCommand;
                } else {
                    dbccStatement.Command = DbccCommand.Free;
                    dbccStatement.DllName = token2.getText();
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(dbccStatement, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(dbccStatement, token2);
            }
            if (this.LA(1) == 191 && TSql140ParserInternal.tokenSet_46_.member(this.LA(2))) {
                this.dbccNamedLiteralList(dbccStatement);
                goto IL_00f2;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00f2;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00f2:
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.dbccOptions(dbccStatement);
                goto IL_0150;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0150;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0150:
            return dbccStatement;
        }

        public RevertStatement revertStatement() {
            RevertStatement revertStatement = base.FragmentFactory.CreateFragment<RevertStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(176);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(revertStatement, token);
            }
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                token2 = this.LT(1);
                this.match(232);
                this.match(206);
                ScalarExpression cookie = this.expression();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "COOKIE");
                    revertStatement.Cookie = cookie;
                }
                goto IL_00dd;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00dd;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00dd:
            return revertStatement;
        }

        public ExecuteAsStatement executeAsStatement() {
            ExecuteAsStatement executeAsStatement = base.FragmentFactory.CreateFragment<ExecuteAsStatement>();
            this.execStart(executeAsStatement);
            this.match(9);
            ExecuteContext executeContext = this.executeAsStatementContext();
            if (base.inputState.guessing == 0) {
                executeAsStatement.ExecuteContext = executeContext;
            }
            this.executeContextStatementOptionsOpt(executeAsStatement);
            return executeAsStatement;
        }

        public EndConversationStatement endConversationStatement() {
            EndConversationStatement endConversationStatement = base.FragmentFactory.CreateFragment<EndConversationStatement>();
            IToken token = null;
            this.match(56);
            token = this.LT(1);
            this.match(232);
            ScalarExpression conversation = this.expression();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CONVERSATION");
                endConversationStatement.Conversation = conversation;
            }
            this.endConversationArgumentsOpt(endConversationStatement);
            return endConversationStatement;
        }

        public WithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespaces() {
            WithCtesAndXmlNamespaces withCtesAndXmlNamespaces = base.FragmentFactory.CreateFragment<WithCtesAndXmlNamespaces>();
            IToken token = null;
            token = this.LT(1);
            this.match(171);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(withCtesAndXmlNamespaces, token);
            }
            if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("XMLNAMESPACES")) {
                XmlNamespaces xmlNamespaces = this.xmlNamespaces();
                if (base.inputState.guessing == 0) {
                    withCtesAndXmlNamespaces.XmlNamespaces = xmlNamespaces;
                }
            } else if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("CHANGE_TRACKING_CONTEXT")) {
                this.ctContext(withCtesAndXmlNamespaces);
            } else {
                if (this.LA(1) != 232 && this.LA(1) != 233) {
                    goto IL_010b;
                }
                if (this.LA(2) != 9 && this.LA(2) != 191) {
                    goto IL_010b;
                }
                CommonTableExpression item = this.commonTableExpression();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(withCtesAndXmlNamespaces, withCtesAndXmlNamespaces.CommonTableExpressions, item);
                }
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                CommonTableExpression item = this.commonTableExpression();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(withCtesAndXmlNamespaces, withCtesAndXmlNamespaces.CommonTableExpressions, item);
                }
            }
            return withCtesAndXmlNamespaces;
            IL_010b:
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public SelectStatement select(SubDmlFlags subDmlFlags) {
            SelectStatement selectStatement = base.FragmentFactory.CreateFragment<SelectStatement>();
            QueryExpression queryExpression = this.queryExpression(subDmlFlags, selectStatement);
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 67:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_0368;
                }
                goto IL_0355;
            }
            switch (num) {
                case 113:
                    break;
                default:
                    goto IL_0355;
                case 95:
                case 106:
                case 111:
                case 119:
                case 123:
                case 125:
                case 126:
                case 129:
                case 131:
                case 132:
                case 134:
                case 138:
                case 140:
                case 142:
                case 143:
                case 144:
                case 156:
                case 160:
                case 161:
                case 162:
                case 167:
                case 170:
                case 171:
                case 172:
                case 176:
                case 182:
                case 191:
                case 204:
                case 219:
                case 220:
                case 232:
                    goto IL_0368;
            }
            OrderByClause orderByClause = this.orderByClause();
            if (base.inputState.guessing == 0) {
                queryExpression.OrderByClause = orderByClause;
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_42_.member(this.LA(2))) {
                OffsetClause offsetClause = this.offsetClause();
                if (base.inputState.guessing == 0) {
                    queryExpression.OffsetClause = offsetClause;
                }
                goto IL_0368;
            }
            if (TSql140ParserInternal.tokenSet_47_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0368;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_08b7:
            if (base.inputState.guessing == 0) {
                selectStatement.QueryExpression = queryExpression;
            }
            return selectStatement;
            IL_0368:
            int num2 = this.LA(1);
            if (num2 <= 92) {
                switch (num2) {
                    case 67: {
                            ForClause forClause = this.forClause();
                            if (base.inputState.guessing == 0) {
                                queryExpression.ForClause = forClause;
                            }
                            goto IL_0623;
                        }
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_0623;
                }
            } else {
                switch (num2) {
                    case 95:
                    case 106:
                    case 111:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0623;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0355:
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0623:
            int num3 = this.LA(1);
            if (num3 <= 95) {
                switch (num3) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_08b7;
                }
            } else {
                switch (num3) {
                    case 111:
                        this.optimizerHints(selectStatement, selectStatement.OptimizerHints);
                        goto IL_08b7;
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_08b7;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public DeleteStatement deleteStatement(SubDmlFlags subDmlFlags) {
            DeleteStatement deleteStatement = base.FragmentFactory.CreateFragment<DeleteStatement>();
            DeleteSpecification deleteSpecification = this.deleteSpecification(subDmlFlags);
            if (base.inputState.guessing == 0) {
                deleteStatement.DeleteSpecification = deleteSpecification;
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0299;
                }
            } else {
                switch (num) {
                    case 111:
                        this.optimizerHints(deleteStatement, deleteStatement.OptimizerHints);
                        goto IL_0299;
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0299;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0299:
            return deleteStatement;
        }

        public InsertStatement insertStatement(SubDmlFlags subDmlFlags) {
            InsertStatement insertStatement = base.FragmentFactory.CreateFragment<InsertStatement>();
            InsertSpecification insertSpecification = this.insertSpecification(subDmlFlags);
            if (base.inputState.guessing == 0) {
                insertStatement.InsertSpecification = insertSpecification;
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0299;
                }
            } else {
                switch (num) {
                    case 111:
                        this.optimizerHints(insertStatement, insertStatement.OptimizerHints);
                        goto IL_0299;
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0299;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0299:
            return insertStatement;
        }

        public UpdateStatement updateStatement(SubDmlFlags subDmlFlags) {
            UpdateStatement updateStatement = base.FragmentFactory.CreateFragment<UpdateStatement>();
            UpdateSpecification updateSpecification = this.updateSpecification(subDmlFlags);
            if (base.inputState.guessing == 0) {
                updateStatement.UpdateSpecification = updateSpecification;
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0299;
                }
            } else {
                switch (num) {
                    case 111:
                        this.optimizerHints(updateStatement, updateStatement.OptimizerHints);
                        goto IL_0299;
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0299;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0299:
            return updateStatement;
        }

        public MergeStatement mergeStatement(SubDmlFlags subDmlFlags) {
            MergeStatement mergeStatement = this.mergeStatementWithoutSemicolon(subDmlFlags);
            this.requiredSemicolon(mergeStatement, "MERGE");
            return mergeStatement;
        }

        public CreateProcedureStatement createProcedureStatement() {
            CreateProcedureStatement createProcedureStatement = base.FragmentFactory.CreateFragment<CreateProcedureStatement>();
            IToken token = null;
            bool flag = false;
            token = this.LT(1);
            this.match(35);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createProcedureStatement, token);
            }
            this.procedureStatementBody((ProcedureStatementBody)createProcedureStatement, out flag);
            if (base.inputState.guessing == 0 && flag) {
                createProcedureStatement = null;
            }
            return createProcedureStatement;
        }

        public AlterProcedureStatement alterProcedureStatement() {
            AlterProcedureStatement alterProcedureStatement = base.FragmentFactory.CreateFragment<AlterProcedureStatement>();
            IToken token = null;
            bool flag = false;
            token = this.LT(1);
            this.match(6);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(alterProcedureStatement, token);
            }
            this.procedureStatementBody((ProcedureStatementBody)alterProcedureStatement, out flag);
            if (base.inputState.guessing == 0 && flag) {
                alterProcedureStatement = null;
            }
            return alterProcedureStatement;
        }

        public CreateTriggerStatement createTriggerStatement() {
            CreateTriggerStatement createTriggerStatement = base.FragmentFactory.CreateFragment<CreateTriggerStatement>();
            IToken token = null;
            bool flag = false;
            token = this.LT(1);
            this.match(35);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createTriggerStatement, token);
            }
            this.triggerStatementBody((TriggerStatementBody)createTriggerStatement, out flag);
            if (base.inputState.guessing == 0 && flag) {
                createTriggerStatement = null;
            }
            return createTriggerStatement;
        }

        public AlterTriggerStatement alterTriggerStatement() {
            AlterTriggerStatement alterTriggerStatement = base.FragmentFactory.CreateFragment<AlterTriggerStatement>();
            IToken token = null;
            bool flag = false;
            token = this.LT(1);
            this.match(6);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(alterTriggerStatement, token);
            }
            this.triggerStatementBody((TriggerStatementBody)alterTriggerStatement, out flag);
            if (base.inputState.guessing == 0 && flag) {
                alterTriggerStatement = null;
            }
            return alterTriggerStatement;
        }

        public CreateDefaultStatement createDefaultStatement() {
            CreateDefaultStatement createDefaultStatement = base.FragmentFactory.CreateFragment<CreateDefaultStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(35);
            this.match(47);
            SchemaObjectName name = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createDefaultStatement, token);
                TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(name, "DEFAULT");
                createDefaultStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createDefaultStatement);
            }
            this.match(9);
            ScalarExpression expression = this.expression();
            if (base.inputState.guessing == 0) {
                createDefaultStatement.Expression = expression;
            }
            return createDefaultStatement;
        }

        public CreateRuleStatement createRuleStatement() {
            CreateRuleStatement createRuleStatement = base.FragmentFactory.CreateFragment<CreateRuleStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(35);
            this.match(137);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createRuleStatement, token);
            }
            SchemaObjectName name = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(name, "RULE");
                createRuleStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createRuleStatement);
            }
            this.match(9);
            BooleanExpression expression = this.booleanExpression();
            if (base.inputState.guessing == 0) {
                createRuleStatement.Expression = expression;
            }
            return createRuleStatement;
        }

        public CreateViewStatement createViewStatement() {
            CreateViewStatement createViewStatement = base.FragmentFactory.CreateFragment<CreateViewStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(35);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createViewStatement, token);
            }
            this.viewStatementBody(createViewStatement);
            return createViewStatement;
        }

        public AlterViewStatement alterViewStatement() {
            AlterViewStatement alterViewStatement = base.FragmentFactory.CreateFragment<AlterViewStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(6);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(alterViewStatement, token);
            }
            this.viewStatementBody(alterViewStatement);
            return alterViewStatement;
        }

        public CreateFunctionStatement createFunctionStatement() {
            CreateFunctionStatement createFunctionStatement = base.FragmentFactory.CreateFragment<CreateFunctionStatement>();
            IToken token = null;
            bool flag = false;
            token = this.LT(1);
            this.match(35);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createFunctionStatement, token);
            }
            this.functionStatementBody((FunctionStatementBody)createFunctionStatement, out flag);
            if (base.inputState.guessing == 0 && flag) {
                createFunctionStatement = null;
            }
            return createFunctionStatement;
        }

        public AlterFunctionStatement alterFunctionStatement() {
            AlterFunctionStatement alterFunctionStatement = base.FragmentFactory.CreateFragment<AlterFunctionStatement>();
            IToken token = null;
            bool flag = false;
            token = this.LT(1);
            this.match(6);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(alterFunctionStatement, token);
            }
            this.functionStatementBody((FunctionStatementBody)alterFunctionStatement, out flag);
            if (base.inputState.guessing == 0 && flag) {
                alterFunctionStatement = null;
            }
            return alterFunctionStatement;
        }

        public CreateSchemaStatement createSchemaStatement() {
            CreateSchemaStatement createSchemaStatement = base.FragmentFactory.CreateFragment<CreateSchemaStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(35);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createSchemaStatement, token);
            }
            this.match(139);
            switch (this.LA(1)) {
                case 232:
                case 233: {
                        Identifier name = this.identifier();
                        if (base.inputState.guessing == 0) {
                            createSchemaStatement.Name = name;
                        }
                        this.authorizationOpt(createSchemaStatement);
                        break;
                    }
                case 11:
                    this.authorization(createSchemaStatement);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                base.ThrowPartialAstIfPhaseOne(createSchemaStatement);
            }
            StatementList statementList = this.createSchemaElementList();
            if (base.inputState.guessing == 0) {
                createSchemaStatement.StatementList = statementList;
            }
            return createSchemaStatement;
        }

        public CreateFederationStatement createFederationStatement() {
            CreateFederationStatement createFederationStatement = base.FragmentFactory.CreateFragment<CreateFederationStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(35);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createFederationStatement, token);
            }
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "FEDERATION");
                createFederationStatement.Name = name;
            }
            this.match(191);
            Identifier distributionName = this.identifier();
            if (base.inputState.guessing == 0) {
                createFederationStatement.DistributionName = distributionName;
            }
            DataTypeReference dataType = this.scalarDataType();
            if (base.inputState.guessing == 0) {
                createFederationStatement.DataType = dataType;
            }
            token3 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token3, "RANGE");
            }
            token4 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createFederationStatement, token4);
            }
            return createFederationStatement;
        }

        public AlterFederationStatement alterFederationStatement() {
            AlterFederationStatement alterFederationStatement = base.FragmentFactory.CreateFragment<AlterFederationStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            IToken token6 = null;
            IToken token7 = null;
            token = this.LT(1);
            this.match(6);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(alterFederationStatement, token);
            }
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "FEDERATION");
                alterFederationStatement.Name = name;
            }
            switch (this.LA(1)) {
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    token4 = this.LT(1);
                    this.match(232);
                    this.match(191);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token3, "SPLIT");
                        TSql80ParserBaseInternal.Match(token4, "AT");
                        alterFederationStatement.Kind = AlterFederationKind.Split;
                    }
                    break;
                case 54:
                    this.LT(1);
                    this.match(54);
                    token5 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token5, "AT");
                    }
                    this.match(191);
                    token6 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        if (TSql80ParserBaseInternal.TryMatch(token6, "LOW")) {
                            alterFederationStatement.Kind = AlterFederationKind.DropLow;
                        } else {
                            TSql80ParserBaseInternal.Match(token6, "HIGH");
                            alterFederationStatement.Kind = AlterFederationKind.DropHigh;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            Identifier distributionName = this.identifier();
            if (base.inputState.guessing == 0) {
                alterFederationStatement.DistributionName = distributionName;
            }
            this.match(206);
            ScalarExpression boundary = this.expression();
            if (base.inputState.guessing == 0) {
                alterFederationStatement.Boundary = boundary;
            }
            token7 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(alterFederationStatement, token7);
            }
            return alterFederationStatement;
        }

        public UseFederationStatement useFederationStatement() {
            UseFederationStatement useFederationStatement = base.FragmentFactory.CreateFragment<UseFederationStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            token = this.LT(1);
            this.match(162);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(useFederationStatement, token);
            }
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "FEDERATION");
            }
            if (this.LA(1) == 232 && this.LA(2) == 171 && base.NextTokenMatches("ROOT")) {
                token3 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token3, "ROOT");
                }
                this.match(171);
                goto IL_0235;
            }
            if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 191) {
                Identifier federationName = this.identifier();
                if (base.inputState.guessing == 0) {
                    useFederationStatement.FederationName = federationName;
                }
                this.match(191);
                Identifier distributionName = this.identifier();
                if (base.inputState.guessing == 0) {
                    useFederationStatement.DistributionName = distributionName;
                }
                this.match(206);
                ScalarExpression value = this.expression();
                if (base.inputState.guessing == 0) {
                    useFederationStatement.Value = value;
                }
                this.match(192);
                this.match(171);
                token4 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token4, "FILTERING");
                }
                this.match(206);
                switch (this.LA(1)) {
                    case 105:
                        this.match(105);
                        if (base.inputState.guessing == 0) {
                            useFederationStatement.Filtering = true;
                        }
                        break;
                    case 103:
                        this.match(103);
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                this.match(198);
                goto IL_0235;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0235:
            token5 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token5, "RESET");
                TSql80ParserBaseInternal.UpdateTokenInfo(useFederationStatement, token5);
            }
            return useFederationStatement;
        }

        public TSqlStatement createOrAlterStatements() {
            IToken token = null;
            token = this.LT(1);
            this.match(35);
            this.match(112);
            this.match(6);
            TSqlStatement tSqlStatement;
            switch (this.LA(1)) {
                case 73:
                    tSqlStatement = this.createOrAlterFunctionStatement();
                    break;
                case 120:
                case 121:
                    tSqlStatement = this.createOrAlterProcedureStatement();
                    break;
                case 155:
                    tSqlStatement = this.createOrAlterTriggerStatement();
                    break;
                case 166:
                    tSqlStatement = this.createOrAlterViewStatement();
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tSqlStatement, token);
            }
            return tSqlStatement;
        }

        public CreateOrAlterFunctionStatement createOrAlterFunctionStatement() {
            CreateOrAlterFunctionStatement createOrAlterFunctionStatement = base.FragmentFactory.CreateFragment<CreateOrAlterFunctionStatement>();
            bool flag = false;
            this.functionStatementBody((FunctionStatementBody)createOrAlterFunctionStatement, out flag);
            if (base.inputState.guessing == 0 && flag) {
                createOrAlterFunctionStatement = null;
            }
            return createOrAlterFunctionStatement;
        }

        public CreateOrAlterProcedureStatement createOrAlterProcedureStatement() {
            CreateOrAlterProcedureStatement createOrAlterProcedureStatement = base.FragmentFactory.CreateFragment<CreateOrAlterProcedureStatement>();
            bool flag = false;
            this.procedureStatementBody((ProcedureStatementBody)createOrAlterProcedureStatement, out flag);
            if (base.inputState.guessing == 0 && flag) {
                createOrAlterProcedureStatement = null;
            }
            return createOrAlterProcedureStatement;
        }

        public CreateOrAlterTriggerStatement createOrAlterTriggerStatement() {
            CreateOrAlterTriggerStatement createOrAlterTriggerStatement = base.FragmentFactory.CreateFragment<CreateOrAlterTriggerStatement>();
            bool flag = false;
            this.triggerStatementBody((TriggerStatementBody)createOrAlterTriggerStatement, out flag);
            if (base.inputState.guessing == 0 && flag) {
                createOrAlterTriggerStatement = null;
            }
            return createOrAlterTriggerStatement;
        }

        public CreateOrAlterViewStatement createOrAlterViewStatement() {
            CreateOrAlterViewStatement createOrAlterViewStatement = base.FragmentFactory.CreateFragment<CreateOrAlterViewStatement>();
            this.viewStatementBody(createOrAlterViewStatement);
            return createOrAlterViewStatement;
        }

        public EnableDisableTriggerStatement disableTriggerStatement() {
            EnableDisableTriggerStatement enableDisableTriggerStatement = base.FragmentFactory.CreateFragment<EnableDisableTriggerStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "DISABLE");
                TSql80ParserBaseInternal.UpdateTokenInfo(enableDisableTriggerStatement, token);
                enableDisableTriggerStatement.TriggerEnforcement = TriggerEnforcement.Disable;
            }
            this.enableDisableTriggerBody(enableDisableTriggerStatement);
            return enableDisableTriggerStatement;
        }

        public EnableDisableTriggerStatement enableTriggerStatement() {
            EnableDisableTriggerStatement enableDisableTriggerStatement = base.FragmentFactory.CreateFragment<EnableDisableTriggerStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ENABLE");
                TSql80ParserBaseInternal.UpdateTokenInfo(enableDisableTriggerStatement, token);
                enableDisableTriggerStatement.TriggerEnforcement = TriggerEnforcement.Enable;
            }
            this.enableDisableTriggerBody(enableDisableTriggerStatement);
            return enableDisableTriggerStatement;
        }

        public MoveConversationStatement moveConversationStatement() {
            MoveConversationStatement moveConversationStatement = base.FragmentFactory.CreateFragment<MoveConversationStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            ScalarExpression conversation = this.expression();
            this.match(151);
            ScalarExpression group = this.expression();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MOVE");
                TSql80ParserBaseInternal.Match(token2, "CONVERSATION");
                TSql80ParserBaseInternal.UpdateTokenInfo(moveConversationStatement, token);
                moveConversationStatement.Conversation = conversation;
                moveConversationStatement.Group = group;
            }
            return moveConversationStatement;
        }

        public GetConversationGroupStatement getConversationGroupStatement() {
            GetConversationGroupStatement getConversationGroupStatement = base.FragmentFactory.CreateFragment<GetConversationGroupStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            this.match(76);
            VariableReference groupId = this.variable();
            this.match(71);
            SchemaObjectName queue = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "GET");
                TSql80ParserBaseInternal.Match(token2, "CONVERSATION");
                TSql80ParserBaseInternal.UpdateTokenInfo(getConversationGroupStatement, token);
                getConversationGroupStatement.GroupId = groupId;
                getConversationGroupStatement.Queue = queue;
            }
            return getConversationGroupStatement;
        }

        public ReceiveStatement receiveStatement() {
            ReceiveStatement receiveStatement = base.FragmentFactory.CreateFragment<ReceiveStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "RECEIVE");
                TSql80ParserBaseInternal.UpdateTokenInfo(receiveStatement, token);
            }
            switch (this.LA(1)) {
                case 152: {
                        this.match(152);
                        this.match(191);
                        ScalarExpression top = this.expression();
                        this.match(192);
                        if (base.inputState.guessing == 0) {
                            receiveStatement.Top = top;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 163:
                case 187:
                case 191:
                case 193:
                case 195:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                    break;
            }
            SelectElement item = this.receiveSelectExpression();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(receiveStatement, receiveStatement.SelectElements, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.receiveSelectExpression();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(receiveStatement, receiveStatement.SelectElements, item);
                }
            }
            this.match(71);
            SchemaObjectName queue = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                receiveStatement.Queue = queue;
            }
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 88: {
                            this.match(88);
                            VariableTableReference into = this.variableDmlTarget();
                            if (base.inputState.guessing == 0) {
                                receiveStatement.Into = into;
                            }
                            goto IL_058f;
                        }
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_058f;
                }
            } else {
                switch (num) {
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_058f;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_089b:
            return receiveStatement;
            IL_058f:
            int num2 = this.LA(1);
            if (num2 <= 92) {
                switch (num2) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_089b;
                }
            } else {
                switch (num2) {
                    case 169: {
                            this.match(169);
                            token2 = this.LT(1);
                            this.match(232);
                            this.match(206);
                            ValueExpression where = this.stringOrVariable();
                            if (base.inputState.guessing == 0) {
                                if (TSql80ParserBaseInternal.TryMatch(token2, "CONVERSATION_GROUP_ID")) {
                                    receiveStatement.IsConversationGroupIdWhere = true;
                                } else {
                                    TSql80ParserBaseInternal.Match(token2, "CONVERSATION_HANDLE");
                                    receiveStatement.IsConversationGroupIdWhere = false;
                                }
                                receiveStatement.Where = where;
                            }
                            goto IL_089b;
                        }
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_089b;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public SendStatement sendStatement() {
            SendStatement sendStatement = base.FragmentFactory.CreateFragment<SendStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            token = this.LT(1);
            this.match(232);
            this.match(105);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SEND");
                TSql80ParserBaseInternal.Match(token2, "CONVERSATION");
                TSql80ParserBaseInternal.UpdateTokenInfo(sendStatement, token);
            }
            if (this.LA(1) == 191 && TSql140ParserInternal.tokenSet_42_.member(this.LA(2)) && this.LA(1) == 191) {
                this.match(191);
                ScalarExpression item = this.expression();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(sendStatement, sendStatement.ConversationHandles, item);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    item = this.expression();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(sendStatement, sendStatement.ConversationHandles, item);
                    }
                }
                this.match(192);
                goto IL_017c;
            }
            if (TSql140ParserInternal.tokenSet_42_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_43_.member(this.LA(2))) {
                ScalarExpression item = this.expression();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(sendStatement, sendStatement.ConversationHandles, item);
                }
                goto IL_017c;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_023b:
            if (this.LA(1) == 191 && TSql140ParserInternal.tokenSet_42_.member(this.LA(2))) {
                this.match(191);
                ScalarExpression item = this.expression();
                token5 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    sendStatement.MessageBody = item;
                    TSql80ParserBaseInternal.UpdateTokenInfo(sendStatement, token5);
                }
                goto IL_02db;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_02db;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_017c:
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MESSAGE")) {
                token3 = this.LT(1);
                this.match(232);
                token4 = this.LT(1);
                this.match(232);
                IdentifierOrValueExpression messageTypeName = this.identifierOrVariable();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token3, "MESSAGE");
                    TSql80ParserBaseInternal.Match(token4, "TYPE");
                    sendStatement.MessageTypeName = messageTypeName;
                }
                goto IL_023b;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_023b;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_02db:
            return sendStatement;
        }

        public ThrowStatement throwStatement() {
            ThrowStatement throwStatement = base.FragmentFactory.CreateFragment<ThrowStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "THROW");
                TSql80ParserBaseInternal.UpdateTokenInfo(throwStatement, token);
            }
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_0332;
                }
            } else {
                switch (num) {
                    case 221:
                    case 234: {
                            ValueExpression errorNumber = this.integerOrVariable();
                            this.match(198);
                            ValueExpression message = this.stringOrVariable();
                            this.match(198);
                            ValueExpression state = this.integerOrVariable();
                            if (base.inputState.guessing == 0) {
                                throwStatement.ErrorNumber = errorNumber;
                                throwStatement.Message = message;
                                throwStatement.State = state;
                            }
                            goto IL_0332;
                        }
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0332;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0332:
            return throwStatement;
        }

        public void enableDisableTriggerBody(EnableDisableTriggerStatement vParent) {
            this.match(155);
            switch (this.LA(1)) {
                case 200:
                case 232:
                case 233: {
                        SchemaObjectName item = this.schemaObjectThreePartName();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.TriggerNames, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.schemaObjectThreePartName();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.TriggerNames, item);
                            }
                        }
                        break;
                    }
                case 5:
                    this.match(5);
                    if (base.inputState.guessing == 0) {
                        vParent.All = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            this.match(105);
            TriggerObject triggerObject = this.triggerObject();
            if (base.inputState.guessing == 0) {
                vParent.TriggerObject = triggerObject;
            }
        }

        public SchemaObjectName schemaObjectThreePartName() {
            SchemaObjectName schemaObjectName = base.FragmentFactory.CreateFragment<SchemaObjectName>();
            List<Identifier> otherCollection = this.identifierList(3);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(schemaObjectName, schemaObjectName.Identifiers, otherCollection);
            }
            return schemaObjectName;
        }

        public TriggerObject triggerObject() {
            TriggerObject triggerObject = base.FragmentFactory.CreateFragment<TriggerObject>();
            switch (this.LA(1)) {
                case 200:
                case 232:
                case 233: {
                        SchemaObjectName name = this.schemaObjectThreePartName();
                        if (base.inputState.guessing == 0) {
                            triggerObject.Name = name;
                            triggerObject.TriggerScope = TriggerScope.Normal;
                        }
                        break;
                    }
                case 5:
                case 43: {
                        TriggerScope triggerScope = this.triggerScope(triggerObject);
                        if (base.inputState.guessing == 0) {
                            triggerObject.TriggerScope = triggerScope;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return triggerObject;
        }

        public CreateAggregateStatement createAggregateStatement() {
            CreateAggregateStatement createAggregateStatement = base.FragmentFactory.CreateFragment<CreateAggregateStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            SchemaObjectName name = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "AGGREGATE");
                TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(name, "AGGREGATE");
                createAggregateStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createAggregateStatement);
            }
            this.match(191);
            ProcedureParameter item = this.aggregateParameter();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createAggregateStatement, createAggregateStatement.Parameters, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.aggregateParameter();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createAggregateStatement, createAggregateStatement.Parameters, item);
                }
            }
            this.match(192);
            token2 = this.LT(1);
            this.match(232);
            DataTypeReference returnType = this.scalarDataType();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "RETURNS");
                createAggregateStatement.ReturnType = returnType;
            }
            this.match(175);
            AssemblyName assemblyName = this.assemblyName();
            if (base.inputState.guessing == 0) {
                createAggregateStatement.AssemblyName = assemblyName;
            }
            return createAggregateStatement;
        }

        public CreateApplicationRoleStatement createApplicationRoleStatement() {
            CreateApplicationRoleStatement createApplicationRoleStatement = base.FragmentFactory.CreateFragment<CreateApplicationRoleStatement>();
            this.applicationRoleStatement(createApplicationRoleStatement, true);
            return createApplicationRoleStatement;
        }

        public CreateAssemblyStatement createAssemblyStatement() {
            CreateAssemblyStatement createAssemblyStatement = base.FragmentFactory.CreateFragment<CreateAssemblyStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ASSEMBLY");
                createAssemblyStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createAssemblyStatement);
            }
            this.authorizationOpt(createAssemblyStatement);
            this.match(71);
            this.expressionList(createAssemblyStatement, createAssemblyStatement.Parameters);
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                token2 = this.LT(1);
                this.match(232);
                this.match(206);
                AssemblyOption item = this.assemblyPermissionSetOption(token2);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createAssemblyStatement, createAssemblyStatement.Options, item);
                }
                goto IL_0110;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0110;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0110:
            return createAssemblyStatement;
        }

        public CreateAsymmetricKeyStatement createAsymmetricKeyStatement() {
            CreateAsymmetricKeyStatement createAsymmetricKeyStatement = base.FragmentFactory.CreateFragment<CreateAsymmetricKeyStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(91);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
                createAsymmetricKeyStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createAsymmetricKeyStatement);
            }
            this.authorizationOpt(createAsymmetricKeyStatement);
            this.createAsymmetricKeyParams(createAsymmetricKeyStatement);
            if (this.LA(1) == 232 && this.LA(2) == 18) {
                Literal password = this.encryptClause();
                if (base.inputState.guessing == 0) {
                    createAsymmetricKeyStatement.Password = password;
                }
                goto IL_00d3;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00d3;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00d3:
            return createAsymmetricKeyStatement;
        }

        public CreateAvailabilityGroupStatement createAvailabilityGroupStatement() {
            CreateAvailabilityGroupStatement createAvailabilityGroupStatement = base.FragmentFactory.CreateFragment<CreateAvailabilityGroupStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(76);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "AVAILABILITY");
                createAvailabilityGroupStatement.Name = name;
            }
            switch (this.LA(1)) {
                case 171: {
                        this.LT(1);
                        this.match(171);
                        this.match(191);
                        AvailabilityGroupOption item = this.availabilityGroupOption();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createAvailabilityGroupStatement, createAvailabilityGroupStatement.Options, item);
                        }
                        this.match(192);
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 67:
                    break;
            }
            this.match(67);
            switch (this.LA(1)) {
                case 43: {
                        this.match(43);
                        Identifier item2 = this.identifier();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createAvailabilityGroupStatement, createAvailabilityGroupStatement.Databases, item2);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item2 = this.identifier();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createAvailabilityGroupStatement, createAvailabilityGroupStatement.Databases, item2);
                            }
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 232:
                    break;
            }
            token2 = this.LT(1);
            this.match(232);
            this.match(105);
            AvailabilityReplica item3 = this.availabilityReplica();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "REPLICA");
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createAvailabilityGroupStatement, createAvailabilityGroupStatement.Replicas, item3);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item3 = this.availabilityReplica();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createAvailabilityGroupStatement, createAvailabilityGroupStatement.Replicas, item3);
                }
            }
            return createAvailabilityGroupStatement;
        }

        public CreateBrokerPriorityStatement createBrokerPriorityStatement() {
            CreateBrokerPriorityStatement createBrokerPriorityStatement = base.FragmentFactory.CreateFragment<CreateBrokerPriorityStatement>();
            this.brokerPriorityStatementBody(createBrokerPriorityStatement);
            return createBrokerPriorityStatement;
        }

        public CreateCertificateStatement createCertificateStatement() {
            CreateCertificateStatement createCertificateStatement = base.FragmentFactory.CreateFragment<CreateCertificateStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
                createCertificateStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createCertificateStatement);
            }
            this.authorizationOpt(createCertificateStatement);
            this.createCertificateParams(createCertificateStatement);
            if (this.LA(1) == 232 && this.LA(2) == 67) {
                this.createCertificateActivityFlag(createCertificateStatement);
                goto IL_00b7;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00b7;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00b7:
            return createCertificateStatement;
        }

        public TSqlStatement createColumnStatements() {
            TSqlStatement tSqlStatement = null;
            this.match(27);
            if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER")) {
                return this.createColumnMasterKeyStatement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("ENCRYPTION")) {
                return this.createColumnEncryptionKeyStatement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public CreateColumnStoreIndexStatement createColumnStoreIndexStatement(IToken tUnique, bool? isClustered) {
            CreateColumnStoreIndexStatement createColumnStoreIndexStatement = base.FragmentFactory.CreateFragment<CreateColumnStoreIndexStatement>();
            IToken token = null;
            IToken token2 = null;
            if (tUnique != null) {
                TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(tUnique);
            }
            createColumnStoreIndexStatement.Clustered = isClustered;
            token = this.LT(1);
            this.match(232);
            this.LT(1);
            this.match(84);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "COLUMNSTORE");
                createColumnStoreIndexStatement.Name = name;
            }
            this.LT(1);
            this.match(105);
            SchemaObjectName onName = this.schemaObjectFourPartName();
            if (base.inputState.guessing == 0) {
                createColumnStoreIndexStatement.OnName = onName;
            }
            if (this.LA(1) == 191 && TSql140ParserInternal.tokenSet_48_.member(this.LA(2))) {
                this.match(191);
                this.columnstoreIndexKeyColumnList(createColumnStoreIndexStatement);
                token2 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(createColumnStoreIndexStatement, token2);
                    if (isClustered.HasValue && isClustered == true && createColumnStoreIndexStatement.Columns.Count > 0) {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(createColumnStoreIndexStatement.Columns[0]);
                    }
                }
                goto IL_0171;
            }
            if (TSql140ParserInternal.tokenSet_49_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0171;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0481:
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.match(171);
                this.indexOptionList(IndexAffectingStatement.CreateColumnStoreIndex, createColumnStoreIndexStatement.IndexOptions, createColumnStoreIndexStatement);
                goto IL_04f1;
            }
            if (TSql140ParserInternal.tokenSet_50_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_04f1;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_04f1:
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_079c;
                }
            } else {
                switch (num) {
                    case 105: {
                            this.match(105);
                            FileGroupOrPartitionScheme onFileGroupOrPartitionScheme = this.filegroupOrPartitionScheme();
                            if (base.inputState.guessing == 0) {
                                createColumnStoreIndexStatement.OnFileGroupOrPartitionScheme = onFileGroupOrPartitionScheme;
                            }
                            goto IL_079c;
                        }
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_079c;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0171:
            if (base.inputState.guessing == 0 && (!isClustered.HasValue || isClustered == false) && createColumnStoreIndexStatement.Columns.Count == 0) {
                TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(createColumnStoreIndexStatement.OnName);
            }
            int num2 = this.LA(1);
            if (num2 <= 92) {
                switch (num2) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_0481;
                }
            } else {
                switch (num2) {
                    case 169: {
                            BooleanExpression filterPredicate = this.filterClause(createColumnStoreIndexStatement.Clustered ?? false);
                            if (base.inputState.guessing == 0) {
                                createColumnStoreIndexStatement.FilterPredicate = filterPredicate;
                            }
                            goto IL_0481;
                        }
                    case 95:
                    case 105:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0481;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_079c:
            return createColumnStoreIndexStatement;
        }

        public CreateContractStatement createContractStatement() {
            CreateContractStatement createContractStatement = base.FragmentFactory.CreateFragment<CreateContractStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CONTRACT");
                createContractStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createContractStatement);
            }
            this.authorizationOpt(createContractStatement);
            this.match(191);
            ContractMessage item = this.contractMessage();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createContractStatement, createContractStatement.Messages, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.contractMessage();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createContractStatement, createContractStatement.Messages, item);
                }
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createContractStatement, token2);
            }
            return createContractStatement;
        }

        public CreateCredentialStatement createCredentialStatement() {
            CreateCredentialStatement createCredentialStatement = base.FragmentFactory.CreateFragment<CreateCredentialStatement>();
            IToken token = null;
            IToken token2 = null;
            createCredentialStatement.IsDatabaseScoped = false;
            this.credentialStatementBody(createCredentialStatement);
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 67: {
                            this.match(67);
                            token = this.LT(1);
                            this.match(232);
                            token2 = this.LT(1);
                            this.match(232);
                            Identifier cryptographicProviderName = this.identifier();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.Match(token, "CRYPTOGRAPHIC");
                                TSql80ParserBaseInternal.Match(token2, "PROVIDER");
                                createCredentialStatement.CryptographicProviderName = cryptographicProviderName;
                            }
                            goto IL_0316;
                        }
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_0316;
                }
            } else {
                switch (num) {
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0316;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0316:
            return createCredentialStatement;
        }

        public CreateCryptographicProviderStatement createCryptographicProviderStatement() {
            CreateCryptographicProviderStatement createCryptographicProviderStatement = base.FragmentFactory.CreateFragment<CreateCryptographicProviderStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CRYPTOGRAPHIC");
                TSql80ParserBaseInternal.Match(token2, "PROVIDER");
                createCryptographicProviderStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createCryptographicProviderStatement);
            }
            Literal file = this.cryptographicProviderFile();
            if (base.inputState.guessing == 0) {
                createCryptographicProviderStatement.File = file;
            }
            return createCryptographicProviderStatement;
        }

        public CreateEndpointStatement createEndpointStatement() {
            CreateEndpointStatement createEndpointStatement = base.FragmentFactory.CreateFragment<CreateEndpointStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ENDPOINT");
                createEndpointStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createEndpointStatement);
            }
            this.authorizationOpt(createEndpointStatement);
            switch (this.LA(1)) {
                case 232:
                    this.endpointOptions(createEndpointStatement);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 9:
                    break;
            }
            this.protocolInfo(createEndpointStatement);
            this.payloadInfo(createEndpointStatement);
            return createEndpointStatement;
        }

        public TSqlStatement createEventStatement() {
            TSqlStatement tSqlStatement = null;
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "EVENT");
            }
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("NOTIFICATION")) {
                return this.createEventNotificationStatement();
            }
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SESSION")) {
                return this.createEventSessionStatement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public TSqlStatement createExternalStatements() {
            TSqlStatement tSqlStatement = null;
            this.match(175);
            if (this.LA(1) == 148 && base.NextTokenMatches("Table")) {
                return this.createExternalTableStatement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("DATA")) {
                return this.createExternalDataSourceStatement();
            }
            if (this.LA(1) == 65 && base.NextTokenMatches("FILE")) {
                return this.createExternalFileFormatStatement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("RESOURCE")) {
                return this.createExternalResourcePoolStatement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public TSqlStatement createFulltextStatement() {
            TSqlStatement tSqlStatement = null;
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FULLTEXT");
            }
            switch (this.LA(1)) {
                case 232:
                    return this.createFulltextCatalogStatement();
                case 84:
                    return this.createFulltextIndexStatement();
                case 183:
                    return this.createFulltextStoplistStatement();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public IndexStatement createPrimaryXmlIndexStatement() {
            IndexStatement indexStatement = null;
            IToken token = null;
            this.match(118);
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "XML");
            }
            return this.createXmlIndexStatement(true);
        }

        public CreateSelectiveXmlIndexStatement createSelectiveXmlIndexStatement() {
            CreateSelectiveXmlIndexStatement createSelectiveXmlIndexStatement = base.FragmentFactory.CreateFragment<CreateSelectiveXmlIndexStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            createSelectiveXmlIndexStatement.IsSecondary = false;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SELECTIVE");
            }
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "XML");
            }
            this.match(84);
            Identifier name = this.identifier();
            this.match(105);
            SchemaObjectName onName = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                createSelectiveXmlIndexStatement.Name = name;
                createSelectiveXmlIndexStatement.OnName = onName;
                base.ThrowPartialAstIfPhaseOne(createSelectiveXmlIndexStatement);
            }
            this.match(191);
            name = this.identifier();
            if (base.inputState.guessing == 0) {
                createSelectiveXmlIndexStatement.XmlColumn = name;
            }
            token3 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createSelectiveXmlIndexStatement, token3);
            }
            switch (this.LA(1)) {
                case 171: {
                        token4 = this.LT(1);
                        this.match(171);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(createSelectiveXmlIndexStatement, token4);
                        }
                        XmlNamespaces xmlNamespaces = this.xmlNamespaces();
                        if (base.inputState.guessing == 0) {
                            createSelectiveXmlIndexStatement.XmlNamespaces = xmlNamespaces;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 67:
                    break;
            }
            this.match(67);
            this.match(191);
            SelectiveXmlIndexPromotedPath item = this.promotedSelectiveXmlIndexPath();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createSelectiveXmlIndexStatement, createSelectiveXmlIndexStatement.PromotedPaths, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.promotedSelectiveXmlIndexPath();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createSelectiveXmlIndexStatement, createSelectiveXmlIndexStatement.PromotedPaths, item);
                }
            }
            token5 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createSelectiveXmlIndexStatement, token5);
            }
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.match(171);
                this.indexOptionList(IndexAffectingStatement.CreateXmlIndex, createSelectiveXmlIndexStatement.IndexOptions, createSelectiveXmlIndexStatement);
                goto IL_0289;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0289;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0289:
            return createSelectiveXmlIndexStatement;
        }

        public TSqlStatement createXmlStatements() {
            TSqlStatement tSqlStatement = null;
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "XML");
            }
            switch (this.LA(1)) {
                case 84:
                    return this.createXmlIndexStatement(false);
                case 139:
                    return this.createXmlSchemaCollectionStatement();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public CreateLoginStatement createLoginStatement() {
            CreateLoginStatement createLoginStatement = base.FragmentFactory.CreateFragment<CreateLoginStatement>();
            this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                createLoginStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createLoginStatement);
            }
            CreateLoginSource source;
            switch (this.LA(1)) {
                case 171:
                    source = this.passwordLoginSource();
                    if (base.inputState.guessing == 0) {
                        createLoginStatement.Source = source;
                    }
                    break;
                case 71:
                    this.match(71);
                    if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2)) && base.NextTokenMatches("WINDOWS")) {
                        source = this.windowsLoginSource();
                        goto IL_0123;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                        source = this.certificateLoginSource();
                        goto IL_0123;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 91) {
                        source = this.asymmetricKeyLoginSource();
                        goto IL_0123;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                default: {
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    IL_0123:
                    if (base.inputState.guessing == 0) {
                        createLoginStatement.Source = source;
                    }
                    break;
            }
            return createLoginStatement;
        }

        public CreateMessageTypeStatement createMessageTypeStatement() {
            CreateMessageTypeStatement createMessageTypeStatement = base.FragmentFactory.CreateFragment<CreateMessageTypeStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MESSAGE");
                TSql80ParserBaseInternal.Match(token2, "TYPE");
                createMessageTypeStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createMessageTypeStatement);
            }
            this.authorizationOpt(createMessageTypeStatement);
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                this.messageTypeValidation(createMessageTypeStatement);
                goto IL_00d3;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00d3;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00d3:
            return createMessageTypeStatement;
        }

        public CreateMasterKeyStatement createMasterKeyStatement() {
            CreateMasterKeyStatement createMasterKeyStatement = base.FragmentFactory.CreateFragment<CreateMasterKeyStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            this.LT(1);
            this.match(91);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MASTER");
            }
            if (this.LA(1) == 232 && this.LA(2) == 18) {
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "ENCRYPTION");
                }
                this.match(18);
                token3 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token3, "PASSWORD");
                }
                this.match(206);
                Literal password = this.stringLiteral();
                if (base.inputState.guessing == 0) {
                    createMasterKeyStatement.Password = password;
                }
                goto IL_012d;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_012d;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_012d:
            return createMasterKeyStatement;
        }

        public TSqlStatement createPartitionStatement() {
            TSqlStatement tSqlStatement = null;
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "PARTITION");
            }
            switch (this.LA(1)) {
                case 73:
                    return this.createPartitionFunction();
                case 232:
                    return this.createPartitionScheme();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public CreateQueueStatement createQueueStatement() {
            CreateQueueStatement createQueueStatement = base.FragmentFactory.CreateFragment<CreateQueueStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            SchemaObjectName name = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "QUEUE");
                createQueueStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createQueueStatement);
            }
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.queueOptionList(createQueueStatement, false);
                goto IL_00ad;
            }
            if (TSql140ParserInternal.tokenSet_50_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00ad;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00ad:
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_0356;
                }
            } else {
                switch (num) {
                    case 105: {
                            this.match(105);
                            IdentifierOrValueExpression onFileGroup = this.stringOrIdentifier();
                            if (base.inputState.guessing == 0) {
                                createQueueStatement.OnFileGroup = onFileGroup;
                            }
                            goto IL_0356;
                        }
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0356;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0356:
            return createQueueStatement;
        }

        public CreateRemoteServiceBindingStatement createRemoteServiceBindingStatement() {
            CreateRemoteServiceBindingStatement createRemoteServiceBindingStatement = base.FragmentFactory.CreateFragment<CreateRemoteServiceBindingStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            token3 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "REMOTE");
                TSql80ParserBaseInternal.Match(token2, "SERVICE");
                TSql80ParserBaseInternal.Match(token3, "BINDING");
                createRemoteServiceBindingStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createRemoteServiceBindingStatement);
            }
            this.authorizationOpt(createRemoteServiceBindingStatement);
            this.match(151);
            token4 = this.LT(1);
            this.match(232);
            Literal service = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token4, "SERVICE");
                createRemoteServiceBindingStatement.Service = service;
            }
            this.match(171);
            switch (this.LA(1)) {
                case 163: {
                        RemoteServiceBindingOption item = this.bindingUserOption();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createRemoteServiceBindingStatement, createRemoteServiceBindingStatement.Options, item);
                        }
                        int num2 = this.LA(1);
                        if (num2 <= 95) {
                            switch (num2) {
                                case 1:
                                case 4:
                                case 6:
                                case 12:
                                case 13:
                                case 15:
                                case 17:
                                case 22:
                                case 23:
                                case 28:
                                case 33:
                                case 35:
                                case 44:
                                case 45:
                                case 46:
                                case 48:
                                case 49:
                                case 54:
                                case 55:
                                case 56:
                                case 60:
                                case 61:
                                case 64:
                                case 74:
                                case 75:
                                case 82:
                                case 86:
                                case 92:
                                case 95:
                                    goto end_IL_0000;
                            }
                        } else {
                            switch (num2) {
                                case 198:
                                    this.match(198);
                                    item = this.bindingAnonymousOption();
                                    if (base.inputState.guessing == 0) {
                                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createRemoteServiceBindingStatement, createRemoteServiceBindingStatement.Options, item);
                                    }
                                    goto end_IL_0000;
                                case 106:
                                case 119:
                                case 123:
                                case 125:
                                case 126:
                                case 129:
                                case 131:
                                case 132:
                                case 134:
                                case 138:
                                case 140:
                                case 142:
                                case 143:
                                case 144:
                                case 156:
                                case 160:
                                case 161:
                                case 162:
                                case 167:
                                case 170:
                                case 171:
                                case 172:
                                case 176:
                                case 182:
                                case 191:
                                case 204:
                                case 219:
                                case 220:
                                case 232:
                                    goto end_IL_0000;
                            }
                        }
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                case 232: {
                        RemoteServiceBindingOption item = this.bindingAnonymousOption();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createRemoteServiceBindingStatement, createRemoteServiceBindingStatement.Options, item);
                        }
                        int num = this.LA(1);
                        if (num <= 95) {
                            switch (num) {
                                case 1:
                                case 4:
                                case 6:
                                case 12:
                                case 13:
                                case 15:
                                case 17:
                                case 22:
                                case 23:
                                case 28:
                                case 33:
                                case 35:
                                case 44:
                                case 45:
                                case 46:
                                case 48:
                                case 49:
                                case 54:
                                case 55:
                                case 56:
                                case 60:
                                case 61:
                                case 64:
                                case 74:
                                case 75:
                                case 82:
                                case 86:
                                case 92:
                                case 95:
                                    goto end_IL_0000;
                            }
                        } else {
                            switch (num) {
                                case 198:
                                    this.match(198);
                                    item = this.bindingUserOption();
                                    if (base.inputState.guessing == 0) {
                                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createRemoteServiceBindingStatement, createRemoteServiceBindingStatement.Options, item);
                                    }
                                    goto end_IL_0000;
                                case 106:
                                case 119:
                                case 123:
                                case 125:
                                case 126:
                                case 129:
                                case 131:
                                case 132:
                                case 134:
                                case 138:
                                case 140:
                                case 142:
                                case 143:
                                case 144:
                                case 156:
                                case 160:
                                case 161:
                                case 162:
                                case 167:
                                case 170:
                                case 171:
                                case 172:
                                case 176:
                                case 182:
                                case 191:
                                case 204:
                                case 219:
                                case 220:
                                case 232:
                                    goto end_IL_0000;
                            }
                        }
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                default: {
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    end_IL_0000:
                    break;
            }
            return createRemoteServiceBindingStatement;
        }

        public CreateResourcePoolStatement createResourcePoolStatement() {
            CreateResourcePoolStatement createResourcePoolStatement = base.FragmentFactory.CreateFragment<CreateResourcePoolStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "RESOURCE");
                TSql80ParserBaseInternal.Match(token2, "POOL");
                createResourcePoolStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createResourcePoolStatement);
            }
            this.resourcePoolStatementBody(createResourcePoolStatement);
            return createResourcePoolStatement;
        }

        public CreateRoleStatement createRoleStatement() {
            CreateRoleStatement createRoleStatement = base.FragmentFactory.CreateFragment<CreateRoleStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ROLE");
                createRoleStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createRoleStatement);
            }
            this.authorizationOpt(createRoleStatement);
            return createRoleStatement;
        }

        public CreateRouteStatement createRouteStatement() {
            CreateRouteStatement createRouteStatement = base.FragmentFactory.CreateFragment<CreateRouteStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ROUTE");
                createRouteStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createRouteStatement);
            }
            this.authorizationOpt(createRouteStatement);
            this.routeOptionList(createRouteStatement);
            return createRouteStatement;
        }

        public CreateSearchPropertyListStatement createSearchPropertyListStatement() {
            CreateSearchPropertyListStatement createSearchPropertyListStatement = base.FragmentFactory.CreateFragment<CreateSearchPropertyListStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            token3 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SEARCH");
                TSql80ParserBaseInternal.Match(token2, "PROPERTY");
                TSql80ParserBaseInternal.Match(token3, "LIST");
                createSearchPropertyListStatement.Name = name;
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 71: {
                            this.LT(1);
                            this.match(71);
                            MultiPartIdentifier sourceSearchPropertyList = this.multiPartIdentifier(2);
                            if (base.inputState.guessing == 0) {
                                createSearchPropertyListStatement.SourceSearchPropertyList = sourceSearchPropertyList;
                            }
                            goto IL_0353;
                        }
                    case 1:
                    case 4:
                    case 6:
                    case 11:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0353;
                }
            } else {
                switch (num) {
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0353;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0353:
            this.authorizationOpt(createSearchPropertyListStatement);
            this.requiredSemicolon(createSearchPropertyListStatement, "Search Property List");
            return createSearchPropertyListStatement;
        }

        public CreateServiceStatement createServiceStatement() {
            CreateServiceStatement createServiceStatement = base.FragmentFactory.CreateFragment<CreateServiceStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SERVICE");
                createServiceStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createServiceStatement);
            }
            this.authorizationOpt(createServiceStatement);
            this.onQueueClause(createServiceStatement);
            if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                this.match(191);
                ServiceContract item = this.serviceContract();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createServiceStatement, createServiceStatement.ServiceContracts, item);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    item = this.serviceContract();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createServiceStatement, createServiceStatement.ServiceContracts, item);
                    }
                }
                token2 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(createServiceStatement, token2);
                }
                goto IL_015c;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_015c;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_015c:
            return createServiceStatement;
        }

        public CreateSpatialIndexStatement createSpatialIndexStatement() {
            CreateSpatialIndexStatement createSpatialIndexStatement = base.FragmentFactory.CreateFragment<CreateSpatialIndexStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.LT(1);
            this.match(84);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SPATIAL");
                createSpatialIndexStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createSpatialIndexStatement);
            }
            this.LT(1);
            this.match(105);
            SchemaObjectName @object = this.schemaObjectFourPartName();
            if (base.inputState.guessing == 0) {
                createSpatialIndexStatement.Object = @object;
            }
            this.LT(1);
            this.match(191);
            Identifier spatialColumnName = this.identifier();
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                createSpatialIndexStatement.SpatialColumnName = spatialColumnName;
                TSql80ParserBaseInternal.UpdateTokenInfo(createSpatialIndexStatement, token2);
            }
            if (this.LA(1) == 232 && this.LA(2) == 232) {
                this.spatialIndexingScheme(createSpatialIndexStatement);
                goto IL_0135;
            }
            if (TSql140ParserInternal.tokenSet_50_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0135;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0451:
            return createSpatialIndexStatement;
            IL_01a6:
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_0451;
                }
            } else {
                switch (num) {
                    case 105: {
                            this.match(105);
                            IdentifierOrValueExpression onFileGroup = this.stringOrIdentifier();
                            if (base.inputState.guessing == 0) {
                                createSpatialIndexStatement.OnFileGroup = onFileGroup;
                            }
                            goto IL_0451;
                        }
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0451;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0135:
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.LT(1);
                this.match(171);
                this.spatialIndexOptionsList(createSpatialIndexStatement);
                goto IL_01a6;
            }
            if (TSql140ParserInternal.tokenSet_50_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_01a6;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public CreateSymmetricKeyStatement createSymmetricKeyStatement() {
            CreateSymmetricKeyStatement createSymmetricKeyStatement = base.FragmentFactory.CreateFragment<CreateSymmetricKeyStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(91);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SYMMETRIC");
                createSymmetricKeyStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createSymmetricKeyStatement);
            }
            this.authorizationOpt(createSymmetricKeyStatement);
            switch (this.LA(1)) {
                case 171:
                    this.match(171);
                    this.keySpecList(createSymmetricKeyStatement);
                    this.encryptorListWithNoPassword(createSymmetricKeyStatement);
                    break;
                case 71: {
                        this.match(71);
                        token2 = this.LT(1);
                        this.match(232);
                        Identifier provider = this.identifier();
                        this.providerKeySourceOptionsOpt(createSymmetricKeyStatement.KeyOptions, createSymmetricKeyStatement);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token2, "PROVIDER");
                            createSymmetricKeyStatement.Provider = provider;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 18) {
                            this.encryptorListWithNoPassword(createSymmetricKeyStatement);
                            break;
                        }
                        if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                            break;
                        }
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return createSymmetricKeyStatement;
        }

        public CreateSynonymStatement createSynonymStatement() {
            CreateSynonymStatement createSynonymStatement = base.FragmentFactory.CreateFragment<CreateSynonymStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SYNONYM");
            }
            SchemaObjectName name = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(name, "SYNONYM");
                createSynonymStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createSynonymStatement);
            }
            this.match(67);
            name = this.schemaObjectFourPartName();
            if (base.inputState.guessing == 0) {
                createSynonymStatement.ForName = name;
            }
            return createSynonymStatement;
        }

        public CreateTypeStatement createTypeStatement() {
            CreateTypeStatement createTypeStatement = null;
            IToken token = null;
            SchemaObjectName name = null;
            try {
                token = this.LT(1);
                this.match(232);
                name = this.schemaObjectThreePartName();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "TYPE");
                    TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(name, "TYPE");
                }
                switch (this.LA(1)) {
                    case 71:
                        createTypeStatement = this.createTypeUddtStatement();
                        break;
                    case 175:
                        createTypeStatement = this.createTypeUdtStatement();
                        break;
                    case 9:
                        createTypeStatement = this.createTypeTableStatement();
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                if (base.inputState.guessing == 0) {
                    createTypeStatement.Name = name;
                    return createTypeStatement;
                }
                return createTypeStatement;
            } catch (PhaseOnePartialAstException ex) {
                if (base.inputState.guessing == 0) {
                    CreateTypeStatement createTypeStatement2 = ex.Statement as CreateTypeStatement;
                    createTypeStatement2.Name = name;
                    throw;
                }
                throw;
            }
        }

        public TSqlStatement createServerStatements() {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SERVER");
            }
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("AUDIT")) {
                return this.createServerAuditStatements();
            }
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROLE")) {
                return this.createServerRoleStatement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public CreateWorkloadGroupStatement createWorkloadGroupStatement() {
            CreateWorkloadGroupStatement createWorkloadGroupStatement = base.FragmentFactory.CreateFragment<CreateWorkloadGroupStatement>();
            this.workloadGroupStatementBody(createWorkloadGroupStatement);
            return createWorkloadGroupStatement;
        }

        public CreateSequenceStatement createSequenceStatement() {
            CreateSequenceStatement createSequenceStatement = base.FragmentFactory.CreateFragment<CreateSequenceStatement>();
            IToken token = null;
            SchemaObjectName schemaObjectName = null;
            token = this.LT(1);
            this.match(232);
            schemaObjectName = this.schemaObjectTwoPartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SEQUENCE");
                createSequenceStatement.Name = schemaObjectName;
            }
            if ((this.LA(1) == 9 || this.LA(1) == 232) && TSql140ParserInternal.tokenSet_51_.member(this.LA(2))) {
                this.createSequenceOptionList(createSequenceStatement);
                goto IL_00b7;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00b7;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00b7:
            return createSequenceStatement;
        }

        public CreateSecurityPolicyStatement createSecurityPolicyStatement() {
            CreateSecurityPolicyStatement createSecurityPolicyStatement = base.FragmentFactory.CreateFragment<CreateSecurityPolicyStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            SchemaObjectName schemaObjectName = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            schemaObjectName = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SECURITY");
                TSql80ParserBaseInternal.Match(token2, "POLICY");
                TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "SECURITY_POLICY");
                createSecurityPolicyStatement.Name = schemaObjectName;
                createSecurityPolicyStatement.ActionType = SecurityPolicyActionType.Create;
            }
            if (this.LA(1) == 4 && this.LA(2) == 232) {
                this.createSecurityPredicateListElement(createSecurityPolicyStatement);
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    this.createSecurityPredicateListElement(createSecurityPolicyStatement);
                }
                goto IL_00fe;
            }
            if (TSql140ParserInternal.tokenSet_52_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00fe;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00fe:
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.match(171);
                this.match(191);
                this.securityPolicyOptionsList(createSecurityPolicyStatement);
                token3 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(createSecurityPolicyStatement, token3);
                }
                goto IL_0199;
            }
            if (TSql140ParserInternal.tokenSet_52_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0199;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0199:
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_046c;
                }
            } else {
                switch (num) {
                    case 99:
                        this.match(99);
                        this.match(67);
                        token4 = this.LT(1);
                        this.match(128);
                        if (base.inputState.guessing == 0) {
                            createSecurityPolicyStatement.NotForReplication = true;
                            TSql80ParserBaseInternal.UpdateTokenInfo(createSecurityPolicyStatement, token4);
                        }
                        goto IL_046c;
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_046c;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_046c:
            return createSecurityPolicyStatement;
        }

        public CreateUserStatement createUserStatement() {
            CreateUserStatement createUserStatement = base.FragmentFactory.CreateFragment<CreateUserStatement>();
            bool vHasUserLoginOption = false;
            this.match(163);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                createUserStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createUserStatement);
            }
            if (this.LA(1) != 67 && this.LA(1) != 71 && this.LA(1) != 232) {
                goto IL_009c;
            }
            if (this.LA(2) != 175 && this.LA(2) != 232) {
                goto IL_009c;
            }
            UserLoginOption userLoginOption = this.userLoginOption();
            if (base.inputState.guessing == 0) {
                createUserStatement.UserLoginOption = userLoginOption;
                vHasUserLoginOption = true;
            }
            goto IL_00d5;
            IL_00d5:
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.LT(1);
                this.match(171);
                PrincipalOption item = this.createUserOption(vHasUserLoginOption);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createUserStatement, createUserStatement.UserOptions, item);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    item = this.createUserOption(vHasUserLoginOption);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createUserStatement, createUserStatement.UserOptions, item);
                    }
                }
                goto IL_01a1;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_01a1;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_01a1:
            return createUserStatement;
            IL_009c:
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00d5;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ProcedureParameter aggregateParameter() {
            ProcedureParameter procedureParameter = base.FragmentFactory.CreateFragment<ProcedureParameter>();
            Identifier variableName = this.identifierVariable();
            switch (this.LA(1)) {
                case 9:
                    this.match(9);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 53:
                case 96:
                case 232:
                case 233:
                    break;
            }
            DataTypeReference dataType = this.scalarDataType();
            if (base.inputState.guessing == 0) {
                procedureParameter.VariableName = variableName;
                procedureParameter.DataType = dataType;
            }
            switch (this.LA(1)) {
                case 99:
                case 100: {
                        NullableConstraintDefinition nullable = this.nullableConstraint();
                        if (base.inputState.guessing == 0) {
                            procedureParameter.Nullable = nullable;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                case 198:
                    break;
            }
            return procedureParameter;
        }

        public AssemblyName assemblyName() {
            AssemblyName assemblyName = base.FragmentFactory.CreateFragment<AssemblyName>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "NAME");
            }
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                assemblyName.Name = name;
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_02e4;
                }
            } else {
                switch (num) {
                    case 200:
                        this.match(200);
                        name = this.identifier();
                        if (base.inputState.guessing == 0) {
                            assemblyName.ClassName = name;
                        }
                        goto IL_02e4;
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_02e4;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_02e4:
            return assemblyName;
        }

        public Identifier identifierVariable() {
            Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
            IToken token = null;
            token = this.LT(1);
            this.match(234);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token);
                identifier.SetIdentifier(token.getText());
            }
            return identifier;
        }

        public NullableConstraintDefinition nullableConstraint() {
            NullableConstraintDefinition nullableConstraintDefinition = base.FragmentFactory.CreateFragment<NullableConstraintDefinition>();
            bool nullable = this.nullNotNull(nullableConstraintDefinition);
            if (base.inputState.guessing == 0) {
                nullableConstraintDefinition.Nullable = nullable;
            }
            return nullableConstraintDefinition;
        }

        public void applicationRoleStatement(ApplicationRoleStatement vParent, bool defaultSchemaAndPasswordOnly) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "APPLICATION");
                TSql80ParserBaseInternal.Match(token2, "ROLE");
                vParent.Name = name;
                base.ThrowPartialAstIfPhaseOne(vParent);
            }
            this.match(171);
            ApplicationRoleOption item = this.applicationRoleOption(defaultSchemaAndPasswordOnly);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.ApplicationRoleOptions, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.applicationRoleOption(defaultSchemaAndPasswordOnly);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.ApplicationRoleOptions, item);
                }
            }
        }

        public Identifier identifier() {
            Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token);
                        identifier.SetUnquotedIdentifier(token.getText());
                        TSql80ParserBaseInternal.CheckIdentifierLength(identifier);
                    }
                    break;
                case 233:
                    token2 = this.LT(1);
                    this.match(233);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token2);
                        identifier.SetIdentifier(token2.getText());
                        TSql80ParserBaseInternal.CheckIdentifierLength(identifier);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return identifier;
        }

        public void authorizationOpt(IAuthorization vParent) {
            int num = this.LA(1);
            if (num <= 106) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 9:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 71:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                    case 105:
                    case 106:
                        return;
                    case 11:
                        this.authorization(vParent);
                        return;
                }
            } else {
                switch (num) {
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 151:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        return;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void expressionList(TSqlFragment vParent, IList<ScalarExpression> expressions) {
            ScalarExpression item = this.expression();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, expressions, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.expression();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, expressions, item);
                }
            }
        }

        public PermissionSetAssemblyOption assemblyPermissionSetOption(IToken tPermissionSetVisibility) {
            PermissionSetAssemblyOption permissionSetAssemblyOption = base.FragmentFactory.CreateFragment<PermissionSetAssemblyOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(tPermissionSetVisibility, "PERMISSION_SET");
                TSql80ParserBaseInternal.UpdateTokenInfo(permissionSetAssemblyOption, tPermissionSetVisibility);
                permissionSetAssemblyOption.OptionKind = AssemblyOptionKind.PermissionSet;
                TSql80ParserBaseInternal.UpdateTokenInfo(permissionSetAssemblyOption, token);
                permissionSetAssemblyOption.PermissionSetOption = PermissionSetOptionHelper.Instance.ParseOption(token);
            }
            return permissionSetAssemblyOption;
        }

        public void createAsymmetricKeyParams(CreateAsymmetricKeyStatement vParent) {
            switch (this.LA(1)) {
                case 71: {
                        this.match(71);
                        EncryptionSource keySource = this.asymKeySource();
                        if (base.inputState.guessing == 0) {
                            vParent.KeySource = keySource;
                        }
                        break;
                    }
                case 171:
                    this.match(171);
                    this.asymKeySpec(vParent);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public Literal encryptClause() {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(18);
            token2 = this.LT(1);
            this.match(232);
            this.match(206);
            Literal result = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
                TSql80ParserBaseInternal.Match(token2, "PASSWORD");
            }
            return result;
        }

        public EncryptionSource asymKeySource() {
            if (this.LA(1) != 65 && this.LA(1) != 232) {
                goto IL_003e;
            }
            if (this.LA(2) != 65 && this.LA(2) != 206) {
                goto IL_003e;
            }
            return this.fileEncryptionSource();
            IL_003e:
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ASSEMBLY")) {
                return this.assemblyEncryptionSource();
            }
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                return this.providerEncryptionSource();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void asymKeySpec(CreateAsymmetricKeyStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ALGORITHM");
                vParent.EncryptionAlgorithm = EncryptionAlgorithmsHelper.Instance.ParseOption(token2);
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
            }
        }

        public FileEncryptionSource fileEncryptionSource() {
            FileEncryptionSource fileEncryptionSource = base.FragmentFactory.CreateFragment<FileEncryptionSource>();
            IToken token = null;
            switch (this.LA(1)) {
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token, "EXECUTABLE");
                        fileEncryptionSource.IsExecutable = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 65:
                    break;
            }
            this.match(65);
            this.match(206);
            Literal file = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                fileEncryptionSource.File = file;
            }
            return fileEncryptionSource;
        }

        public AssemblyEncryptionSource assemblyEncryptionSource() {
            AssemblyEncryptionSource assemblyEncryptionSource = base.FragmentFactory.CreateFragment<AssemblyEncryptionSource>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier assembly = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ASSEMBLY");
                assemblyEncryptionSource.Assembly = assembly;
            }
            return assemblyEncryptionSource;
        }

        public ProviderEncryptionSource providerEncryptionSource() {
            ProviderEncryptionSource providerEncryptionSource = base.FragmentFactory.CreateFragment<ProviderEncryptionSource>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "PROVIDER");
                providerEncryptionSource.Name = name;
            }
            this.providerKeySourceOptions(providerEncryptionSource.KeyOptions, providerEncryptionSource);
            return providerEncryptionSource;
        }

        public void providerKeySourceOptions(IList<KeyOption> optionsList, TSqlFragment vParent) {
            bool flag = false;
            bool flag2 = false;
            bool flag3 = false;
            this.match(171);
            KeyOption item = this.providerKeySourceOption(ref flag, ref flag2, ref flag3);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, optionsList, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.providerKeySourceOption(ref flag, ref flag2, ref flag3);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, optionsList, item);
                }
            }
        }

        public StringLiteral stringLiteral() {
            StringLiteral stringLiteral = base.FragmentFactory.CreateFragment<StringLiteral>();
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 230:
                    token = this.LT(1);
                    this.match(230);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(stringLiteral, token);
                        stringLiteral.Value = TSql80ParserBaseInternal.DecodeAsciiStringLiteral(token.getText());
                        stringLiteral.IsLargeObject = TSql80ParserBaseInternal.IsAsciiStringLob(stringLiteral.Value);
                    }
                    break;
                case 231:
                    token2 = this.LT(1);
                    this.match(231);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(stringLiteral, token2);
                        stringLiteral.IsNational = true;
                        stringLiteral.Value = TSql80ParserBaseInternal.DecodeUnicodeStringLiteral(token2.getText());
                        stringLiteral.IsLargeObject = TSql80ParserBaseInternal.IsUnicodeStringLob(stringLiteral.Value);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return stringLiteral;
        }

        public void createCertificateParams(CreateCertificateStatement vParent) {
            CertificateOptionKinds certificateOptionKinds = CertificateOptionKinds.None;
            switch (this.LA(1)) {
                case 71:
                    this.match(71);
                    this.certificateSource(vParent);
                    break;
                case 171:
                case 232: {
                        switch (this.LA(1)) {
                            case 232: {
                                    Literal encryptionPassword = this.encryptClause();
                                    if (base.inputState.guessing == 0) {
                                        vParent.EncryptionPassword = encryptionPassword;
                                    }
                                    break;
                                }
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 171:
                                break;
                        }
                        this.match(171);
                        CertificateOption certificateOption = this.certificateOption(certificateOptionKinds);
                        if (base.inputState.guessing == 0) {
                            certificateOptionKinds |= certificateOption.Kind;
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.CertificateOptions, certificateOption);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            certificateOption = this.certificateOption(certificateOptionKinds);
                            if (base.inputState.guessing == 0) {
                                certificateOptionKinds |= certificateOption.Kind;
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.CertificateOptions, certificateOption);
                            }
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void createCertificateActivityFlag(CertificateStatementBase vParent) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(67);
            token2 = this.LT(1);
            this.match(232);
            this.match(206);
            OptionState activeForBeginDialog = this.optionOnOff(vParent);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ACTIVE");
                TSql80ParserBaseInternal.Match(token2, "BEGIN_DIALOG");
                vParent.ActiveForBeginDialog = activeForBeginDialog;
            }
        }

        public void certificateSource(CreateCertificateStatement vParent) {
            if (this.LA(1) != 65 && this.LA(1) != 232) {
                goto IL_00a5;
            }
            if (this.LA(2) != 65 && this.LA(2) != 206) {
                goto IL_00a5;
            }
            EncryptionSource certificateSource = this.fileEncryptionSource();
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                this.privateKeySpec(vParent);
                goto IL_00eb;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00eb;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00a5:
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                certificateSource = this.assemblyEncryptionSource();
                goto IL_00eb;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00eb:
            if (base.inputState.guessing == 0) {
                vParent.CertificateSource = certificateSource;
            }
        }

        public CertificateOption certificateOption(CertificateOptionKinds encountered) {
            CertificateOption certificateOption = base.FragmentFactory.CreateFragment<CertificateOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal value = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                certificateOption.Kind = CertificateOptionKindsHelper.Instance.ParseOption(token);
                certificateOption.Value = value;
                TSql90ParserBaseInternal.CheckCertificateOptionDupication(encountered, certificateOption.Kind, token);
            }
            return certificateOption;
        }

        public OptionState optionOnOff(TSqlFragment vParent) {
            OptionState result = OptionState.NotSet;
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 105:
                    token = this.LT(1);
                    this.match(105);
                    if (base.inputState.guessing == 0) {
                        result = OptionState.On;
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                    }
                    break;
                case 103:
                    token2 = this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        result = OptionState.Off;
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public void privateKeySpec(CertificateStatementBase vParent) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(91);
            this.match(191);
            this.certificatePrivateKeySpec(vParent);
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                this.certificatePrivateKeySpec(vParent);
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "PRIVATE");
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
            }
        }

        public void certificatePrivateKeySpec(CertificateStatementBase vParent) {
            IToken token = null;
            switch (this.LA(1)) {
                case 232:
                    this.passwordChangeOption(vParent);
                    break;
                case 65: {
                        token = this.LT(1);
                        this.match(65);
                        this.match(206);
                        Literal privateKeyPath = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            if (vParent.PrivateKeyPath != null) {
                                throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                            }
                            vParent.PrivateKeyPath = privateKeyPath;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void passwordChangeOption(IPasswordChangeOption vParent) {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(18);
            this.LT(1);
            this.match(232);
            this.match(206);
            Literal literal = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(token, "ENCRYPTION")) {
                    if (vParent.EncryptionPassword != null) {
                        throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                    }
                    vParent.EncryptionPassword = literal;
                } else {
                    TSql80ParserBaseInternal.Match(token, "DECRYPTION");
                    if (vParent.DecryptionPassword != null) {
                        throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                    }
                    vParent.DecryptionPassword = literal;
                }
            }
        }

        public ContractMessage contractMessage() {
            ContractMessage contractMessage = base.FragmentFactory.CreateFragment<ContractMessage>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            Identifier name = this.identifier();
            token = this.LT(1);
            this.match(232);
            this.match(18);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SENT");
                contractMessage.Name = name;
            }
            switch (this.LA(1)) {
                case 8:
                    token2 = this.LT(1);
                    this.match(8);
                    if (base.inputState.guessing == 0) {
                        contractMessage.SentBy = MessageSender.Any;
                        TSql80ParserBaseInternal.UpdateTokenInfo(contractMessage, token2);
                    }
                    break;
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        if (TSql80ParserBaseInternal.TryMatch(token3, "INITIATOR")) {
                            contractMessage.SentBy = MessageSender.Initiator;
                        } else {
                            TSql80ParserBaseInternal.Match(token3, "TARGET");
                            contractMessage.SentBy = MessageSender.Target;
                        }
                        TSql80ParserBaseInternal.UpdateTokenInfo(contractMessage, token3);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return contractMessage;
        }

        public CreateCredentialStatement createDatabaseScopedCredentialStatement() {
            CreateCredentialStatement createCredentialStatement = base.FragmentFactory.CreateFragment<CreateCredentialStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SCOPED");
                createCredentialStatement.IsDatabaseScoped = true;
            }
            this.credentialStatementBody(createCredentialStatement);
            return createCredentialStatement;
        }

        public void credentialStatementBody(CredentialStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CREDENTIAL");
                vParent.Name = name;
                base.ThrowPartialAstIfPhaseOne(vParent);
            }
            this.match(171);
            this.match(79);
            this.match(206);
            Literal identity = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                vParent.Identity = identity;
            }
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 67:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        return;
                }
            } else {
                switch (num) {
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        return;
                    case 198:
                        this.match(198);
                        token2 = this.LT(1);
                        this.match(232);
                        this.match(206);
                        identity = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token2, "SECRET");
                            vParent.Secret = identity;
                        }
                        return;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public TSqlStatement createServerAuditStatements() {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "AUDIT");
            }
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                return this.createServerAuditSpecificationStatement();
            }
            if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 151) {
                return this.createServerAuditStatement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public CreateServerRoleStatement createServerRoleStatement() {
            CreateServerRoleStatement createServerRoleStatement = base.FragmentFactory.CreateFragment<CreateServerRoleStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ROLE");
                createServerRoleStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createServerRoleStatement);
            }
            this.authorizationOpt(createServerRoleStatement);
            return createServerRoleStatement;
        }

        public CreateServerAuditSpecificationStatement createServerAuditSpecificationStatement() {
            CreateServerAuditSpecificationStatement createServerAuditSpecificationStatement = base.FragmentFactory.CreateFragment<CreateServerAuditSpecificationStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier specificationName = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SPECIFICATION");
                createServerAuditSpecificationStatement.SpecificationName = specificationName;
                base.ThrowPartialAstIfPhaseOne(createServerAuditSpecificationStatement);
            }
            this.auditSpecificationForClause(createServerAuditSpecificationStatement);
            bool flag = false;
            if (this.LA(1) == 4 && this.LA(2) == 191) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(4);
                    this.match(191);
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                AuditSpecificationPart item = this.createAuditSpecificationDetail();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createServerAuditSpecificationStatement, createServerAuditSpecificationStatement.Parts, item);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    item = this.createAuditSpecificationDetail();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createServerAuditSpecificationStatement, createServerAuditSpecificationStatement.Parts, item);
                    }
                }
                goto IL_015d;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_015d;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_015d:
            this.auditSpecificationStateOpt(createServerAuditSpecificationStatement);
            return createServerAuditSpecificationStatement;
        }

        public CreateServerAuditStatement createServerAuditStatement() {
            CreateServerAuditStatement createServerAuditStatement = base.FragmentFactory.CreateFragment<CreateServerAuditStatement>();
            Identifier auditName = this.identifier();
            if (base.inputState.guessing == 0) {
                createServerAuditStatement.AuditName = auditName;
                base.ThrowPartialAstIfPhaseOne(createServerAuditStatement);
            }
            AuditTarget auditTarget = this.auditTargetClause(true);
            if (base.inputState.guessing == 0) {
                createServerAuditStatement.AuditTarget = auditTarget;
            }
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.auditCreateWithClause(createServerAuditStatement);
                goto IL_00a8;
            }
            if (TSql140ParserInternal.tokenSet_53_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00a8;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_034e:
            return createServerAuditStatement;
            IL_00a8:
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_034e;
                }
            } else {
                switch (num) {
                    case 169: {
                            this.match(169);
                            BooleanExpression predicateExpression = this.eventBooleanExpression();
                            if (base.inputState.guessing == 0) {
                                createServerAuditStatement.PredicateExpression = predicateExpression;
                            }
                            goto IL_034e;
                        }
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_034e;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public AuditTarget auditTargetClause(bool filePathRequired) {
            AuditTarget auditTarget = base.FragmentFactory.CreateFragment<AuditTarget>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            bool flag = false;
            token = this.LT(1);
            this.match(151);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(auditTarget, token);
            }
            switch (this.LA(1)) {
                case 65: {
                        token2 = this.LT(1);
                        this.match(65);
                        this.match(191);
                        AuditTargetOption auditTargetOption = this.auditFileOption();
                        if (base.inputState.guessing == 0) {
                            auditTarget.TargetKind = AuditTargetKind.File;
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(auditTarget, auditTarget.TargetOptions, auditTargetOption);
                            flag |= (auditTargetOption.OptionKind == AuditTargetOptionKind.FilePath);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            auditTargetOption = this.auditFileOption();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(auditTarget, auditTarget.TargetOptions, auditTargetOption);
                                flag |= (auditTargetOption.OptionKind == AuditTargetOptionKind.FilePath);
                            }
                        }
                        token3 = this.LT(1);
                        this.match(192);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(auditTarget, token3);
                            if (filePathRequired && !flag) {
                                TSql80ParserBaseInternal.ThrowParseErrorException("SQL46056", token2, TSqlParserResource.SQL46056Message);
                            }
                        }
                        break;
                    }
                case 232:
                    token4 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        if (TSql80ParserBaseInternal.TryMatch(token4, "APPLICATION_LOG")) {
                            auditTarget.TargetKind = AuditTargetKind.ApplicationLog;
                        } else {
                            TSql80ParserBaseInternal.Match(token4, "SECURITY_LOG");
                            auditTarget.TargetKind = AuditTargetKind.SecurityLog;
                        }
                        TSql80ParserBaseInternal.UpdateTokenInfo(auditTarget, token4);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return auditTarget;
        }

        public void auditCreateWithClause(ServerAuditStatement vParent) {
            IToken token = null;
            this.match(171);
            this.match(191);
            AuditOption item = this.auditCreateOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.auditCreateOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, item);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public BooleanExpression eventBooleanExpression() {
            BooleanExpression booleanExpression = null;
            return this.eventBooleanExpressionOr();
        }

        public AuditTargetOption auditFileOption() {
            AuditTargetOption auditTargetOption = null;
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXSIZE")) {
                return this.maxSizeAuditFileOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAX_ROLLOVER_FILES")) {
                return this.maxRolloverFilesAuditFileOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("RESERVE_DISK_SPACE")) {
                return this.reserveDiskSpaceAuditFileOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAX_FILES")) {
                return this.maxFilesAuditFileOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                return this.filePathAuditFileOption();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public MaxSizeAuditTargetOption maxSizeAuditFileOption() {
            MaxSizeAuditTargetOption maxSizeAuditTargetOption = base.FragmentFactory.CreateFragment<MaxSizeAuditTargetOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MAXSIZE");
                maxSizeAuditTargetOption.OptionKind = AuditTargetOptionKind.MaxSize;
                TSql80ParserBaseInternal.UpdateTokenInfo(maxSizeAuditTargetOption, token);
            }
            switch (this.LA(1)) {
                case 221: {
                        Literal size = this.integer();
                        token2 = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            maxSizeAuditTargetOption.Size = size;
                            if (TSql80ParserBaseInternal.TryMatch(token2, "GB")) {
                                maxSizeAuditTargetOption.Unit = MemoryUnit.GB;
                                TSql100ParserBaseInternal.ThrowIfTooLargeAuditFileSize(size, 10);
                            } else if (TSql80ParserBaseInternal.TryMatch(token2, "TB")) {
                                maxSizeAuditTargetOption.Unit = MemoryUnit.TB;
                                TSql100ParserBaseInternal.ThrowIfTooLargeAuditFileSize(size, 20);
                            } else {
                                TSql80ParserBaseInternal.Match(token2, "MB");
                                maxSizeAuditTargetOption.Unit = MemoryUnit.MB;
                                TSql100ParserBaseInternal.ThrowIfTooLargeAuditFileSize(size, 0);
                            }
                            TSql80ParserBaseInternal.UpdateTokenInfo(maxSizeAuditTargetOption, token2);
                        }
                        break;
                    }
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token3, "UNLIMITED");
                        maxSizeAuditTargetOption.IsUnlimited = true;
                        maxSizeAuditTargetOption.Size = null;
                        maxSizeAuditTargetOption.Unit = MemoryUnit.Unspecified;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return maxSizeAuditTargetOption;
        }

        public MaxRolloverFilesAuditTargetOption maxRolloverFilesAuditFileOption() {
            MaxRolloverFilesAuditTargetOption maxRolloverFilesAuditTargetOption = base.FragmentFactory.CreateFragment<MaxRolloverFilesAuditTargetOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MAX_ROLLOVER_FILES");
                maxRolloverFilesAuditTargetOption.OptionKind = AuditTargetOptionKind.MaxRolloverFiles;
                TSql80ParserBaseInternal.UpdateTokenInfo(maxRolloverFilesAuditTargetOption, token);
            }
            switch (this.LA(1)) {
                case 221: {
                        Literal value = this.integer();
                        if (base.inputState.guessing == 0) {
                            maxRolloverFilesAuditTargetOption.Value = value;
                        }
                        break;
                    }
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "UNLIMITED");
                        maxRolloverFilesAuditTargetOption.IsUnlimited = true;
                        TSql80ParserBaseInternal.UpdateTokenInfo(maxRolloverFilesAuditTargetOption, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return maxRolloverFilesAuditTargetOption;
        }

        public OnOffAuditTargetOption reserveDiskSpaceAuditFileOption() {
            OnOffAuditTargetOption onOffAuditTargetOption = base.FragmentFactory.CreateFragment<OnOffAuditTargetOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            OptionState value = this.optionOnOff(onOffAuditTargetOption);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "RESERVE_DISK_SPACE");
                onOffAuditTargetOption.OptionKind = AuditTargetOptionKind.ReserveDiskSpace;
                TSql80ParserBaseInternal.UpdateTokenInfo(onOffAuditTargetOption, token);
                onOffAuditTargetOption.Value = value;
            }
            return onOffAuditTargetOption;
        }

        public LiteralAuditTargetOption maxFilesAuditFileOption() {
            LiteralAuditTargetOption literalAuditTargetOption = base.FragmentFactory.CreateFragment<LiteralAuditTargetOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal value = this.integer();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MAX_FILES");
                literalAuditTargetOption.OptionKind = AuditTargetOptionKind.MaxFiles;
                TSql80ParserBaseInternal.UpdateTokenInfo(literalAuditTargetOption, token);
                literalAuditTargetOption.Value = value;
            }
            return literalAuditTargetOption;
        }

        public LiteralAuditTargetOption filePathAuditFileOption() {
            LiteralAuditTargetOption literalAuditTargetOption = base.FragmentFactory.CreateFragment<LiteralAuditTargetOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal value = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FILEPATH");
                literalAuditTargetOption.OptionKind = AuditTargetOptionKind.FilePath;
                TSql80ParserBaseInternal.UpdateTokenInfo(literalAuditTargetOption, token);
                literalAuditTargetOption.Value = value;
            }
            return literalAuditTargetOption;
        }

        public IntegerLiteral integer() {
            IntegerLiteral integerLiteral = base.FragmentFactory.CreateFragment<IntegerLiteral>();
            IToken token = null;
            token = this.LT(1);
            this.match(221);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(integerLiteral, token);
                integerLiteral.Value = token.getText();
            }
            return integerLiteral;
        }

        public AuditOption auditCreateOption() {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            switch (this.LA(1)) {
                case 221:
                    return this.queueDelayAuditOption(token);
                case 33:
                case 144:
                case 232:
                    return this.onFailureAuditOption(token);
                case 230:
                case 231:
                    return this.auditGuidAuditOption(token);
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void auditWithClause(ServerAuditStatement vParent) {
            IToken token = null;
            this.match(171);
            this.match(191);
            AuditOption item = this.auditOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.auditOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, item);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public AuditOption auditOption() {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            switch (this.LA(1)) {
                case 221:
                    return this.queueDelayAuditOption(token);
                case 33:
                case 144:
                case 232:
                    return this.onFailureAuditOption(token);
                case 103:
                case 105:
                    return this.stateAuditOption(token);
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public QueueDelayAuditOption queueDelayAuditOption(IToken tOption) {
            QueueDelayAuditOption queueDelayAuditOption = base.FragmentFactory.CreateFragment<QueueDelayAuditOption>();
            Literal delay = this.integer();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(tOption, "QUEUE_DELAY");
                queueDelayAuditOption.OptionKind = AuditOptionKind.QueueDelay;
                TSql80ParserBaseInternal.UpdateTokenInfo(queueDelayAuditOption, tOption);
                queueDelayAuditOption.Delay = delay;
            }
            return queueDelayAuditOption;
        }

        public OnFailureAuditOption onFailureAuditOption(IToken tOption) {
            OnFailureAuditOption onFailureAuditOption = base.FragmentFactory.CreateFragment<OnFailureAuditOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(tOption, "ON_FAILURE");
                TSql80ParserBaseInternal.UpdateTokenInfo(onFailureAuditOption, tOption);
                onFailureAuditOption.OptionKind = AuditOptionKind.OnFailure;
            }
            switch (this.LA(1)) {
                case 33:
                    token = this.LT(1);
                    this.match(33);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(onFailureAuditOption, token);
                        onFailureAuditOption.OnFailureAction = AuditFailureActionType.Continue;
                    }
                    break;
                case 144:
                    token2 = this.LT(1);
                    this.match(144);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(onFailureAuditOption, token2);
                        onFailureAuditOption.OnFailureAction = AuditFailureActionType.Shutdown;
                    }
                    break;
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token3, "FAIL_OPERATION");
                        TSql80ParserBaseInternal.UpdateTokenInfo(onFailureAuditOption, token3);
                        onFailureAuditOption.OnFailureAction = AuditFailureActionType.FailOperation;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return onFailureAuditOption;
        }

        public AuditGuidAuditOption auditGuidAuditOption(IToken tOption) {
            AuditGuidAuditOption auditGuidAuditOption = base.FragmentFactory.CreateFragment<AuditGuidAuditOption>();
            Literal literal = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(tOption, "AUDIT_GUID");
                TSql100ParserBaseInternal.ThrowIfWrongGuidFormat(literal);
                auditGuidAuditOption.OptionKind = AuditOptionKind.AuditGuid;
                TSql80ParserBaseInternal.UpdateTokenInfo(auditGuidAuditOption, tOption);
                auditGuidAuditOption.Guid = literal;
            }
            return auditGuidAuditOption;
        }

        public StateAuditOption stateAuditOption(IToken tOption) {
            StateAuditOption stateAuditOption = base.FragmentFactory.CreateFragment<StateAuditOption>();
            OptionState value = this.optionOnOff(stateAuditOption);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(tOption, "STATE");
                stateAuditOption.OptionKind = AuditOptionKind.State;
                TSql80ParserBaseInternal.UpdateTokenInfo(stateAuditOption, tOption);
                stateAuditOption.Value = value;
            }
            return stateAuditOption;
        }

        public void auditSpecificationForClause(AuditSpecificationStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            this.match(67);
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier auditName = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SERVER");
                TSql80ParserBaseInternal.Match(token2, "AUDIT");
                vParent.AuditName = auditName;
            }
        }

        public AuditSpecificationPart createAuditSpecificationDetail() {
            AuditSpecificationPart auditSpecificationPart = base.FragmentFactory.CreateFragment<AuditSpecificationPart>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(4);
            this.match(191);
            AuditSpecificationDetail details = this.serverAuditActionGroup();
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                auditSpecificationPart.Details = details;
                auditSpecificationPart.IsDrop = false;
                TSql80ParserBaseInternal.UpdateTokenInfo(auditSpecificationPart, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(auditSpecificationPart, token2);
            }
            return auditSpecificationPart;
        }

        public void auditSpecificationStateOpt(AuditSpecificationStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.match(171);
                this.match(191);
                token = this.LT(1);
                this.match(232);
                this.match(206);
                OptionState auditState = this.optionOnOff(vParent);
                token2 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "STATE");
                    vParent.AuditState = auditState;
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                }
                return;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public TSqlStatement alterServerStatements() {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SERVER");
            }
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("AUDIT")) {
                return this.alterServerAuditStatements();
            }
            if (this.LA(1) == 232 && this.LA(2) == 142 && base.NextTokenMatches("CONFIGURATION")) {
                return this.alterServerConfigurationStatement();
            }
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROLE")) {
                return this.alterServerRoleStatement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public TSqlStatement alterServerAuditStatements() {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "AUDIT");
            }
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SPECIFICATION")) {
                return this.alterServerAuditSpecificationStatement();
            }
            if ((this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_54_.member(this.LA(2))) {
                return this.alterServerAuditStatement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public TSqlStatement alterServerConfigurationStatement() {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(142);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CONFIGURATION");
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("PROCESS")) {
                return this.alterServerConfigurationSetProcessAffinityStatement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("BUFFER")) {
                return this.alterServerConfigurationSetBufferPoolExtensionStatement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("DIAGNOSTICS")) {
                return this.alterServerConfigurationSetDiagnosticsLogStatement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("FAILOVER")) {
                return this.alterServerConfigurationSetFailoverClusterPropertyStatement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("HADR")) {
                return this.alterServerConfigurationSetHadrClusterStatement();
            }
            if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 105) && base.NextTokenMatches("SOFTNUMA")) {
                return this.alterServerConfigurationSetSoftNumaStatement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public AlterServerRoleStatement alterServerRoleStatement() {
            AlterServerRoleStatement alterServerRoleStatement = base.FragmentFactory.CreateFragment<AlterServerRoleStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ROLE");
                alterServerRoleStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterServerRoleStatement);
            }
            AlterRoleAction action = this.alterRoleAction();
            if (base.inputState.guessing == 0) {
                alterServerRoleStatement.Action = action;
            }
            return alterServerRoleStatement;
        }

        public AlterServerAuditSpecificationStatement alterServerAuditSpecificationStatement() {
            AlterServerAuditSpecificationStatement alterServerAuditSpecificationStatement = base.FragmentFactory.CreateFragment<AlterServerAuditSpecificationStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier specificationName = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SPECIFICATION");
                alterServerAuditSpecificationStatement.SpecificationName = specificationName;
                base.ThrowPartialAstIfPhaseOne(alterServerAuditSpecificationStatement);
            }
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 67:
                        this.auditSpecificationForClause(alterServerAuditSpecificationStatement);
                        goto IL_02dc;
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_02dc;
                }
            } else {
                switch (num) {
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_02dc;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_042a:
            this.auditSpecificationStateOpt(alterServerAuditSpecificationStatement);
            return alterServerAuditSpecificationStatement;
            IL_02dc:
            bool flag = false;
            if ((this.LA(1) == 4 || this.LA(1) == 54) && this.LA(2) == 191) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    switch (this.LA(1)) {
                        case 4:
                            this.match(4);
                            break;
                        case 54:
                            this.match(54);
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    this.match(191);
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                AuditSpecificationPart item = this.auditSpecificationDetail();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterServerAuditSpecificationStatement, alterServerAuditSpecificationStatement.Parts, item);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    item = this.auditSpecificationDetail();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterServerAuditSpecificationStatement, alterServerAuditSpecificationStatement.Parts, item);
                    }
                }
                goto IL_042a;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_042a;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public AlterServerAuditStatement alterServerAuditStatement() {
            AlterServerAuditStatement alterServerAuditStatement = base.FragmentFactory.CreateFragment<AlterServerAuditStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            AuditTarget auditTarget = null;
            BooleanExpression booleanExpression = null;
            Identifier identifier = this.identifier();
            if (base.inputState.guessing == 0) {
                alterServerAuditStatement.AuditName = identifier;
                base.ThrowPartialAstIfPhaseOne(alterServerAuditStatement);
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MODIFY")) {
                token = this.LT(1);
                this.match(232);
                token2 = this.LT(1);
                this.match(232);
                this.match(206);
                Identifier newName = this.identifier();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "MODIFY");
                    TSql80ParserBaseInternal.Match(token2, "NAME");
                    alterServerAuditStatement.NewName = newName;
                }
                goto IL_0771;
            }
            if (TSql140ParserInternal.tokenSet_54_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                int num = this.LA(1);
                if (num <= 92) {
                    switch (num) {
                        case 1:
                        case 4:
                        case 6:
                        case 12:
                        case 13:
                        case 15:
                        case 17:
                        case 22:
                        case 23:
                        case 28:
                        case 33:
                        case 35:
                        case 44:
                        case 45:
                        case 46:
                        case 48:
                        case 49:
                        case 54:
                        case 55:
                        case 56:
                        case 60:
                        case 61:
                        case 64:
                        case 74:
                        case 75:
                        case 82:
                        case 86:
                        case 92:
                            goto IL_03ad;
                    }
                } else {
                    switch (num) {
                        case 151:
                            auditTarget = this.auditTargetClause(false);
                            if (base.inputState.guessing == 0) {
                                alterServerAuditStatement.AuditTarget = auditTarget;
                            }
                            goto IL_03ad;
                        case 95:
                        case 106:
                        case 119:
                        case 123:
                        case 125:
                        case 126:
                        case 129:
                        case 131:
                        case 132:
                        case 134:
                        case 138:
                        case 140:
                        case 142:
                        case 143:
                        case 144:
                        case 156:
                        case 160:
                        case 161:
                        case 162:
                        case 167:
                        case 169:
                        case 170:
                        case 171:
                        case 172:
                        case 176:
                        case 182:
                        case 191:
                        case 204:
                        case 219:
                        case 220:
                        case 232:
                            goto IL_03ad;
                    }
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (this.LA(1) == 232 && this.LA(2) == 169) {
                token3 = this.LT(1);
                this.match(232);
                token4 = this.LT(1);
                this.match(169);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token3, "REMOVE");
                    TSql80ParserBaseInternal.UpdateTokenInfo(alterServerAuditStatement, token4);
                    alterServerAuditStatement.RemoveWhere = true;
                }
                goto IL_0771;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0771:
            return alterServerAuditStatement;
            IL_040b:
            int num2 = this.LA(1);
            if (num2 <= 92) {
                switch (num2) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_06b3;
                }
            } else {
                switch (num2) {
                    case 169:
                        this.match(169);
                        booleanExpression = this.eventBooleanExpression();
                        if (base.inputState.guessing == 0) {
                            alterServerAuditStatement.PredicateExpression = booleanExpression;
                        }
                        goto IL_06b3;
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_06b3;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_06b3:
            if (base.inputState.guessing == 0 && auditTarget == null && (alterServerAuditStatement.Options == null || alterServerAuditStatement.Options.Count == 0) && booleanExpression == null) {
                TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(identifier);
            }
            goto IL_0771;
            IL_03ad:
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.auditWithClause(alterServerAuditStatement);
                goto IL_040b;
            }
            if (TSql140ParserInternal.tokenSet_53_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_040b;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public AuditSpecificationPart auditSpecificationDetail() {
            AuditSpecificationPart auditSpecificationPart = base.FragmentFactory.CreateFragment<AuditSpecificationPart>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            switch (this.LA(1)) {
                case 4:
                    token = this.LT(1);
                    this.match(4);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(auditSpecificationPart, token);
                        auditSpecificationPart.IsDrop = false;
                    }
                    break;
                case 54:
                    token2 = this.LT(1);
                    this.match(54);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(auditSpecificationPart, token2);
                        auditSpecificationPart.IsDrop = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            this.match(191);
            AuditSpecificationDetail details = this.serverAuditActionGroup();
            token3 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                auditSpecificationPart.Details = details;
                TSql80ParserBaseInternal.UpdateTokenInfo(auditSpecificationPart, token3);
            }
            return auditSpecificationPart;
        }

        public AlterServerConfigurationStatement alterServerConfigurationSetProcessAffinityStatement() {
            AlterServerConfigurationStatement alterServerConfigurationStatement = base.FragmentFactory.CreateFragment<AlterServerConfigurationStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "PROCESS");
                TSql80ParserBaseInternal.Match(token2, "AFFINITY");
            }
            token3 = this.LT(1);
            this.match(232);
            this.match(206);
            switch (this.LA(1)) {
                case 221:
                    this.affinityRangeList(alterServerConfigurationStatement);
                    if (base.inputState.guessing == 0) {
                        if (TSql80ParserBaseInternal.TryMatch(token3, "CPU")) {
                            alterServerConfigurationStatement.ProcessAffinity = ProcessAffinityType.Cpu;
                        } else {
                            TSql80ParserBaseInternal.Match(token3, "NUMANODE");
                            alterServerConfigurationStatement.ProcessAffinity = ProcessAffinityType.NumaNode;
                        }
                    }
                    break;
                case 232:
                    token4 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token3, "CPU");
                        TSql80ParserBaseInternal.Match(token4, "AUTO");
                        alterServerConfigurationStatement.ProcessAffinity = ProcessAffinityType.CpuAuto;
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterServerConfigurationStatement, token4);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return alterServerConfigurationStatement;
        }

        public AlterServerConfigurationSetBufferPoolExtensionStatement alterServerConfigurationSetBufferPoolExtensionStatement() {
            AlterServerConfigurationSetBufferPoolExtensionStatement alterServerConfigurationSetBufferPoolExtensionStatement = base.FragmentFactory.CreateFragment<AlterServerConfigurationSetBufferPoolExtensionStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            token3 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "BUFFER");
                TSql80ParserBaseInternal.Match(token2, "POOL");
                TSql80ParserBaseInternal.Match(token3, "EXTENSION");
            }
            AlterServerConfigurationBufferPoolExtensionOption item = this.alterServerConfigurationBufferPoolExtensionContainerOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterServerConfigurationSetBufferPoolExtensionStatement, alterServerConfigurationSetBufferPoolExtensionStatement.Options, item);
            }
            return alterServerConfigurationSetBufferPoolExtensionStatement;
        }

        public AlterServerConfigurationSetDiagnosticsLogStatement alterServerConfigurationSetDiagnosticsLogStatement() {
            AlterServerConfigurationSetDiagnosticsLogStatement alterServerConfigurationSetDiagnosticsLogStatement = base.FragmentFactory.CreateFragment<AlterServerConfigurationSetDiagnosticsLogStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "DIAGNOSTICS");
                TSql80ParserBaseInternal.Match(token2, "LOG");
            }
            AlterServerConfigurationDiagnosticsLogOption item = this.alterServerConfigurationDiagnosticsLogOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterServerConfigurationSetDiagnosticsLogStatement, alterServerConfigurationSetDiagnosticsLogStatement.Options, item);
            }
            return alterServerConfigurationSetDiagnosticsLogStatement;
        }

        public AlterServerConfigurationSetFailoverClusterPropertyStatement alterServerConfigurationSetFailoverClusterPropertyStatement() {
            AlterServerConfigurationSetFailoverClusterPropertyStatement alterServerConfigurationSetFailoverClusterPropertyStatement = base.FragmentFactory.CreateFragment<AlterServerConfigurationSetFailoverClusterPropertyStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            token3 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FAILOVER");
                TSql80ParserBaseInternal.Match(token2, "CLUSTER");
                TSql80ParserBaseInternal.Match(token3, "PROPERTY");
            }
            AlterServerConfigurationFailoverClusterPropertyOption item = this.alterServerConfigurationFailoverClusterPropertyOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterServerConfigurationSetFailoverClusterPropertyStatement, alterServerConfigurationSetFailoverClusterPropertyStatement.Options, item);
            }
            return alterServerConfigurationSetFailoverClusterPropertyStatement;
        }

        public AlterServerConfigurationSetHadrClusterStatement alterServerConfigurationSetHadrClusterStatement() {
            AlterServerConfigurationSetHadrClusterStatement alterServerConfigurationSetHadrClusterStatement = base.FragmentFactory.CreateFragment<AlterServerConfigurationSetHadrClusterStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "HADR");
                TSql80ParserBaseInternal.Match(token2, "CLUSTER");
            }
            AlterServerConfigurationHadrClusterOption item = this.alterServerConfigurationHadrClusterOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterServerConfigurationSetHadrClusterStatement, alterServerConfigurationSetHadrClusterStatement.Options, item);
            }
            return alterServerConfigurationSetHadrClusterStatement;
        }

        public AlterServerConfigurationSetSoftNumaStatement alterServerConfigurationSetSoftNumaStatement() {
            AlterServerConfigurationSetSoftNumaStatement alterServerConfigurationSetSoftNumaStatement = base.FragmentFactory.CreateFragment<AlterServerConfigurationSetSoftNumaStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SOFTNUMA");
            }
            AlterServerConfigurationSoftNumaOption item = this.alterServerConfigurationSoftNumaOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterServerConfigurationSetSoftNumaStatement, alterServerConfigurationSetSoftNumaStatement.Options, item);
            }
            return alterServerConfigurationSetSoftNumaStatement;
        }

        public AlterServerConfigurationSoftNumaOption alterServerConfigurationSoftNumaOption() {
            AlterServerConfigurationSoftNumaOption alterServerConfigurationSoftNumaOption = base.FragmentFactory.CreateFragment<AlterServerConfigurationSoftNumaOption>();
            OnOffOptionValue optionValue = this.onOffOptionValue();
            if (base.inputState.guessing == 0) {
                alterServerConfigurationSoftNumaOption.OptionKind = AlterServerConfigurationSoftNumaOptionKind.OnOff;
                alterServerConfigurationSoftNumaOption.OptionValue = optionValue;
            }
            return alterServerConfigurationSoftNumaOption;
        }

        public OnOffOptionValue onOffOptionValue() {
            OnOffOptionValue onOffOptionValue = base.FragmentFactory.CreateFragment<OnOffOptionValue>();
            OptionState optionState = this.optionOnOff(onOffOptionValue);
            if (base.inputState.guessing == 0) {
                onOffOptionValue.OptionState = optionState;
            }
            return onOffOptionValue;
        }

        public AlterServerConfigurationBufferPoolExtensionContainerOption alterServerConfigurationBufferPoolExtensionContainerOption() {
            AlterServerConfigurationBufferPoolExtensionContainerOption alterServerConfigurationBufferPoolExtensionContainerOption = base.FragmentFactory.CreateFragment<AlterServerConfigurationBufferPoolExtensionContainerOption>();
            IToken token = null;
            IToken token2 = null;
            OnOffOptionValue onOffOptionValue = this.onOffOptionValue();
            if (base.inputState.guessing == 0) {
                alterServerConfigurationBufferPoolExtensionContainerOption.OptionValue = onOffOptionValue;
                alterServerConfigurationBufferPoolExtensionContainerOption.OptionKind = AlterServerConfigurationBufferPoolExtensionOptionKind.OnOff;
            }
            if (this.LA(1) == 191 && this.LA(2) == 232) {
                if (base.inputState.guessing == 0 && onOffOptionValue.OptionState != OptionState.On) {
                    TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(onOffOptionValue);
                }
                token = this.LT(1);
                this.match(191);
                AlterServerConfigurationBufferPoolExtensionOption item = this.alterServerConfigurationBufferPoolExtensionFileNameOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(alterServerConfigurationBufferPoolExtensionContainerOption, token);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterServerConfigurationBufferPoolExtensionContainerOption, alterServerConfigurationBufferPoolExtensionContainerOption.Suboptions, item);
                }
                this.LT(1);
                this.match(198);
                AlterServerConfigurationBufferPoolExtensionOption item2 = this.alterServerConfigurationBufferPoolExtensionSizeOption();
                token2 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterServerConfigurationBufferPoolExtensionContainerOption, alterServerConfigurationBufferPoolExtensionContainerOption.Suboptions, item2);
                    TSql80ParserBaseInternal.UpdateTokenInfo(alterServerConfigurationBufferPoolExtensionContainerOption, token2);
                }
                goto IL_0156;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                if (base.inputState.guessing == 0 && onOffOptionValue.OptionState != OptionState.Off) {
                    TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(onOffOptionValue);
                }
                goto IL_0156;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0156:
            return alterServerConfigurationBufferPoolExtensionContainerOption;
        }

        public AlterServerConfigurationBufferPoolExtensionOption alterServerConfigurationBufferPoolExtensionFileNameOption() {
            AlterServerConfigurationBufferPoolExtensionOption alterServerConfigurationBufferPoolExtensionOption = base.FragmentFactory.CreateFragment<AlterServerConfigurationBufferPoolExtensionOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            LiteralOptionValue optionValue = this.stringLiteralOptionValue();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FILENAME");
                alterServerConfigurationBufferPoolExtensionOption.OptionKind = AlterServerConfigurationBufferPoolExtensionOptionHelper.Instance.ParseOption(token);
                alterServerConfigurationBufferPoolExtensionOption.OptionValue = optionValue;
            }
            return alterServerConfigurationBufferPoolExtensionOption;
        }

        public AlterServerConfigurationBufferPoolExtensionSizeOption alterServerConfigurationBufferPoolExtensionSizeOption() {
            AlterServerConfigurationBufferPoolExtensionSizeOption alterServerConfigurationBufferPoolExtensionSizeOption = base.FragmentFactory.CreateFragment<AlterServerConfigurationBufferPoolExtensionSizeOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            LiteralOptionValue literalOptionValue = this.integerLiteralOptionValue();
            MemoryUnit memoryUnit = this.memUnit(alterServerConfigurationBufferPoolExtensionSizeOption);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SIZE");
                if (memoryUnit != MemoryUnit.KB && memoryUnit != MemoryUnit.MB && memoryUnit != MemoryUnit.GB) {
                    TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(literalOptionValue);
                }
                alterServerConfigurationBufferPoolExtensionSizeOption.OptionKind = AlterServerConfigurationBufferPoolExtensionOptionHelper.Instance.ParseOption(token);
                alterServerConfigurationBufferPoolExtensionSizeOption.OptionValue = literalOptionValue;
                alterServerConfigurationBufferPoolExtensionSizeOption.SizeUnit = memoryUnit;
            }
            return alterServerConfigurationBufferPoolExtensionSizeOption;
        }

        public LiteralOptionValue stringLiteralOptionValue() {
            LiteralOptionValue literalOptionValue = base.FragmentFactory.CreateFragment<LiteralOptionValue>();
            Literal value = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                literalOptionValue.Value = value;
            }
            return literalOptionValue;
        }

        public LiteralOptionValue integerLiteralOptionValue() {
            LiteralOptionValue literalOptionValue = base.FragmentFactory.CreateFragment<LiteralOptionValue>();
            Literal value = this.integer();
            if (base.inputState.guessing == 0) {
                literalOptionValue.Value = value;
            }
            return literalOptionValue;
        }

        public MemoryUnit memUnit(TSqlFragment vParent) {
            MemoryUnit result = MemoryUnit.Unspecified;
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                result = MemoryUnitsHelper.Instance.ParseOption(token);
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
            return result;
        }

        public AlterServerConfigurationDiagnosticsLogOption alterServerConfigurationDiagnosticsLogOption() {
            AlterServerConfigurationDiagnosticsLogOption alterServerConfigurationDiagnosticsLogOption = base.FragmentFactory.CreateFragment<AlterServerConfigurationDiagnosticsLogOption>();
            IToken token = null;
            OptionValue optionValue;
            if (this.LA(1) != 103 && this.LA(1) != 105) {
                if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAX_SIZE")) {
                    alterServerConfigurationDiagnosticsLogOption = this.alterServerConfigurationDiagnosticsLogMaxSizeOption();
                    goto IL_01bc;
                }
                if (this.LA(1) == 232 && this.LA(2) == 206) {
                    token = this.LT(1);
                    this.match(232);
                    this.match(206);
                    if (base.inputState.guessing == 0) {
                        alterServerConfigurationDiagnosticsLogOption.OptionKind = AlterServerConfigurationDiagnosticsLogOptionHelper.Instance.ParseOption(token);
                    }
                    if ((this.LA(1) == 47 || this.LA(1) == 230 || this.LA(1) == 231) && TSql140ParserInternal.tokenSet_19_.member(this.LA(2)) && alterServerConfigurationDiagnosticsLogOption.OptionKind == AlterServerConfigurationDiagnosticsLogOptionKind.Path) {
                        optionValue = this.stringOrDefaultLiteralOptionValue();
                        if (base.inputState.guessing == 0) {
                            alterServerConfigurationDiagnosticsLogOption.OptionValue = optionValue;
                        }
                        goto IL_01bc;
                    }
                    if ((this.LA(1) == 47 || this.LA(1) == 221) && TSql140ParserInternal.tokenSet_19_.member(this.LA(2)) && alterServerConfigurationDiagnosticsLogOption.OptionKind == AlterServerConfigurationDiagnosticsLogOptionKind.MaxFiles) {
                        optionValue = this.integerOrDefaultLiteralOptionValue();
                        if (base.inputState.guessing == 0) {
                            alterServerConfigurationDiagnosticsLogOption.OptionValue = optionValue;
                        }
                        goto IL_01bc;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            optionValue = this.onOffOptionValue();
            if (base.inputState.guessing == 0) {
                alterServerConfigurationDiagnosticsLogOption.OptionKind = AlterServerConfigurationDiagnosticsLogOptionKind.OnOff;
                alterServerConfigurationDiagnosticsLogOption.OptionValue = optionValue;
            }
            goto IL_01bc;
            IL_01bc:
            return alterServerConfigurationDiagnosticsLogOption;
        }

        public AlterServerConfigurationDiagnosticsLogMaxSizeOption alterServerConfigurationDiagnosticsLogMaxSizeOption() {
            AlterServerConfigurationDiagnosticsLogMaxSizeOption alterServerConfigurationDiagnosticsLogMaxSizeOption = base.FragmentFactory.CreateFragment<AlterServerConfigurationDiagnosticsLogMaxSizeOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                alterServerConfigurationDiagnosticsLogMaxSizeOption.OptionKind = AlterServerConfigurationDiagnosticsLogOptionHelper.Instance.ParseOption(token);
                if (alterServerConfigurationDiagnosticsLogMaxSizeOption.OptionKind != AlterServerConfigurationDiagnosticsLogOptionKind.MaxSize) {
                    TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                }
            }
            switch (this.LA(1)) {
                case 221: {
                        OptionValue optionValue = this.integerLiteralOptionValue();
                        token2 = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token2, "MB");
                            alterServerConfigurationDiagnosticsLogMaxSizeOption.OptionValue = optionValue;
                            alterServerConfigurationDiagnosticsLogMaxSizeOption.SizeUnit = MemoryUnit.MB;
                            TSql80ParserBaseInternal.UpdateTokenInfo(alterServerConfigurationDiagnosticsLogMaxSizeOption, token2);
                        }
                        break;
                    }
                case 47: {
                        OptionValue optionValue = this.defaultLiteralOptionValue();
                        if (base.inputState.guessing == 0) {
                            alterServerConfigurationDiagnosticsLogMaxSizeOption.OptionValue = optionValue;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return alterServerConfigurationDiagnosticsLogMaxSizeOption;
        }

        public LiteralOptionValue stringOrDefaultLiteralOptionValue() {
            LiteralOptionValue literalOptionValue = base.FragmentFactory.CreateFragment<LiteralOptionValue>();
            switch (this.LA(1)) {
                case 230:
                case 231: {
                        Literal value = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            literalOptionValue.Value = value;
                        }
                        break;
                    }
                case 47: {
                        Literal value = this.defaultLiteral();
                        if (base.inputState.guessing == 0) {
                            literalOptionValue.Value = value;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return literalOptionValue;
        }

        public LiteralOptionValue integerOrDefaultLiteralOptionValue() {
            LiteralOptionValue literalOptionValue = base.FragmentFactory.CreateFragment<LiteralOptionValue>();
            switch (this.LA(1)) {
                case 221: {
                        Literal value = this.integer();
                        if (base.inputState.guessing == 0) {
                            literalOptionValue.Value = value;
                        }
                        break;
                    }
                case 47: {
                        Literal value = this.defaultLiteral();
                        if (base.inputState.guessing == 0) {
                            literalOptionValue.Value = value;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return literalOptionValue;
        }

        public LiteralOptionValue defaultLiteralOptionValue() {
            LiteralOptionValue literalOptionValue = base.FragmentFactory.CreateFragment<LiteralOptionValue>();
            Literal value = this.defaultLiteral();
            if (base.inputState.guessing == 0) {
                literalOptionValue.Value = value;
            }
            return literalOptionValue;
        }

        public AlterServerConfigurationFailoverClusterPropertyOption alterServerConfigurationFailoverClusterPropertyOption() {
            AlterServerConfigurationFailoverClusterPropertyOption alterServerConfigurationFailoverClusterPropertyOption = base.FragmentFactory.CreateFragment<AlterServerConfigurationFailoverClusterPropertyOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                alterServerConfigurationFailoverClusterPropertyOption.OptionKind = AlterServerConfigurationFailoverClusterPropertyOptionHelper.Instance.ParseOption(token);
            }
            if ((this.LA(1) == 47 || this.LA(1) == 224) && TSql140ParserInternal.tokenSet_19_.member(this.LA(2)) && alterServerConfigurationFailoverClusterPropertyOption.OptionKind == AlterServerConfigurationFailoverClusterPropertyOptionKind.SqlDumperDumpFlags) {
                OptionValue optionValue = this.binaryOrDefaultLiteralOptionValue();
                if (base.inputState.guessing == 0) {
                    alterServerConfigurationFailoverClusterPropertyOption.OptionValue = optionValue;
                }
                goto IL_015e;
            }
            if ((this.LA(1) == 47 || this.LA(1) == 230 || this.LA(1) == 231) && TSql140ParserInternal.tokenSet_19_.member(this.LA(2)) && alterServerConfigurationFailoverClusterPropertyOption.OptionKind == AlterServerConfigurationFailoverClusterPropertyOptionKind.SqlDumperDumpPath) {
                OptionValue optionValue = this.stringOrDefaultLiteralOptionValue();
                if (base.inputState.guessing == 0) {
                    alterServerConfigurationFailoverClusterPropertyOption.OptionValue = optionValue;
                }
                goto IL_015e;
            }
            if ((this.LA(1) == 47 || this.LA(1) == 221) && TSql140ParserInternal.tokenSet_19_.member(this.LA(2))) {
                OptionValue optionValue = this.integerOrDefaultLiteralOptionValue();
                if (base.inputState.guessing == 0) {
                    alterServerConfigurationFailoverClusterPropertyOption.OptionValue = optionValue;
                }
                goto IL_015e;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_015e:
            return alterServerConfigurationFailoverClusterPropertyOption;
        }

        public LiteralOptionValue binaryOrDefaultLiteralOptionValue() {
            LiteralOptionValue literalOptionValue = base.FragmentFactory.CreateFragment<LiteralOptionValue>();
            switch (this.LA(1)) {
                case 224: {
                        Literal value = this.binary();
                        if (base.inputState.guessing == 0) {
                            literalOptionValue.Value = value;
                        }
                        break;
                    }
                case 47: {
                        Literal value = this.defaultLiteral();
                        if (base.inputState.guessing == 0) {
                            literalOptionValue.Value = value;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return literalOptionValue;
        }

        public AlterServerConfigurationHadrClusterOption alterServerConfigurationHadrClusterOption() {
            AlterServerConfigurationHadrClusterOption alterServerConfigurationHadrClusterOption = base.FragmentFactory.CreateFragment<AlterServerConfigurationHadrClusterOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                alterServerConfigurationHadrClusterOption.OptionKind = AlterServerConfigurationHadrClusterOptionHelper.Instance.ParseOption(token);
            }
            switch (this.LA(1)) {
                case 230:
                case 231: {
                        OptionValue optionValue = this.stringLiteralOptionValue();
                        if (base.inputState.guessing == 0) {
                            alterServerConfigurationHadrClusterOption.OptionValue = optionValue;
                        }
                        break;
                    }
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "LOCAL");
                        alterServerConfigurationHadrClusterOption.IsLocal = true;
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterServerConfigurationHadrClusterOption, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return alterServerConfigurationHadrClusterOption;
        }

        public void affinityRangeList(AlterServerConfigurationStatement vParent) {
            ProcessAffinityRange item = this.affinityRange();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.ProcessAffinityRanges, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.affinityRange();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.ProcessAffinityRanges, item);
                }
            }
        }

        public ProcessAffinityRange affinityRange() {
            ProcessAffinityRange processAffinityRange = base.FragmentFactory.CreateFragment<ProcessAffinityRange>();
            Literal from = this.integer();
            if (base.inputState.guessing == 0) {
                processAffinityRange.From = from;
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_02cf;
                }
            } else {
                switch (num) {
                    case 151:
                        this.match(151);
                        from = this.integer();
                        if (base.inputState.guessing == 0) {
                            processAffinityRange.To = from;
                        }
                        goto IL_02cf;
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 198:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_02cf;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_02cf:
            return processAffinityRange;
        }

        public AlterDatabaseAuditSpecificationStatement alterDatabaseAuditSpecification(IToken tAlter) {
            AlterDatabaseAuditSpecificationStatement alterDatabaseAuditSpecificationStatement = base.FragmentFactory.CreateFragment<AlterDatabaseAuditSpecificationStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier specificationName = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseAuditSpecificationStatement, tAlter);
                TSql80ParserBaseInternal.Match(token, "AUDIT");
                TSql80ParserBaseInternal.Match(token2, "SPECIFICATION");
                alterDatabaseAuditSpecificationStatement.SpecificationName = specificationName;
                base.ThrowPartialAstIfPhaseOne(alterDatabaseAuditSpecificationStatement);
            }
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 67:
                        this.auditSpecificationForClause(alterDatabaseAuditSpecificationStatement);
                        goto IL_0303;
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_0303;
                }
            } else {
                switch (num) {
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0303;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0455:
            this.auditSpecificationStateOpt(alterDatabaseAuditSpecificationStatement);
            return alterDatabaseAuditSpecificationStatement;
            IL_0303:
            bool flag = false;
            if ((this.LA(1) == 4 || this.LA(1) == 54) && this.LA(2) == 191) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    switch (this.LA(1)) {
                        case 4:
                            this.match(4);
                            break;
                        case 54:
                            this.match(54);
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    this.match(191);
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                AuditSpecificationPart item = this.auditSpecificationDetailDb();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterDatabaseAuditSpecificationStatement, alterDatabaseAuditSpecificationStatement.Parts, item);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    item = this.auditSpecificationDetailDb();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterDatabaseAuditSpecificationStatement, alterDatabaseAuditSpecificationStatement.Parts, item);
                    }
                }
                goto IL_0455;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0455;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public AlterCredentialStatement alterDatabaseScopedCredentialStatement(IToken tAlter) {
            AlterCredentialStatement alterCredentialStatement = base.FragmentFactory.CreateFragment<AlterCredentialStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(alterCredentialStatement, tAlter);
                TSql80ParserBaseInternal.Match(token, "SCOPED");
                alterCredentialStatement.IsDatabaseScoped = true;
            }
            this.credentialStatementBody(alterCredentialStatement);
            return alterCredentialStatement;
        }

        public AlterDatabaseScopedConfigurationStatement alterDatabaseScopedConfigurationStatement(IToken tAlter) {
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            bool flag = false;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SCOPED");
                TSql80ParserBaseInternal.Match(token2, "CONFIGURATION");
            }
            switch (this.LA(1)) {
                case 67:
                    this.match(67);
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        flag = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 142:
                case 232:
                    break;
            }
            AlterDatabaseScopedConfigurationStatement alterDatabaseScopedConfigurationStatement;
            switch (this.LA(1)) {
                case 142:
                    alterDatabaseScopedConfigurationStatement = this.alterDatabaseScopedConfigSet(flag);
                    break;
                case 232:
                    alterDatabaseScopedConfigurationStatement = this.alterDatabaseScopedConfigClear();
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                if (flag) {
                    alterDatabaseScopedConfigurationStatement.Secondary = true;
                    TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseScopedConfigurationStatement, token3);
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseScopedConfigurationStatement, tAlter);
            }
            return alterDatabaseScopedConfigurationStatement;
        }

        public AlterDatabaseStatement alterDatabase(IToken tAlter) {
            AlterDatabaseStatement alterDatabaseStatement = null;
            IToken token = null;
            Identifier databaseName = null;
            bool flag = false;
            try {
                switch (this.LA(1)) {
                    case 232:
                    case 233:
                        databaseName = this.identifier();
                        break;
                    case 226:
                        databaseName = this.sqlCommandIdentifier();
                        break;
                    case 37:
                        token = this.LT(1);
                        this.match(37);
                        if (base.inputState.guessing == 0) {
                            flag = true;
                        }
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                switch (this.LA(1)) {
                    case 4:
                        alterDatabaseStatement = this.alterDbAdd();
                        break;
                    case 142:
                        alterDatabaseStatement = this.alterDbSet();
                        break;
                    case 26:
                        alterDatabaseStatement = this.alterDbCollate();
                        break;
                    default:
                        if (this.LA(1) == 232 && (this.LA(2) == 65 || this.LA(2) == 232) && base.NextTokenMatches("REMOVE")) {
                            alterDatabaseStatement = this.alterDbRemove();
                            break;
                        }
                        if (this.LA(1) == 232 && (this.LA(2) == 65 || this.LA(2) == 191 || this.LA(2) == 232) && base.NextTokenMatches("MODIFY")) {
                            alterDatabaseStatement = this.alterDbModify();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 232) {
                            alterDatabaseStatement = this.alterDbRebuild();
                            break;
                        }
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                if (base.inputState.guessing == 0) {
                    if (flag) {
                        alterDatabaseStatement.UseCurrent = true;
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseStatement, token);
                    } else {
                        alterDatabaseStatement.DatabaseName = databaseName;
                    }
                    TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseStatement, tAlter);
                    base.ThrowPartialAstIfPhaseOne(alterDatabaseStatement);
                    return alterDatabaseStatement;
                }
                return alterDatabaseStatement;
            } catch (PhaseOnePartialAstException ex) {
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(ex.Statement, tAlter);
                    (ex.Statement as AlterDatabaseStatement).DatabaseName = databaseName;
                    throw;
                }
                throw;
            }
        }

        public AlterDatabaseEncryptionKeyStatement alterDatabaseEncryptionKey(IToken tAlter) {
            AlterDatabaseEncryptionKeyStatement alterDatabaseEncryptionKeyStatement = base.FragmentFactory.CreateFragment<AlterDatabaseEncryptionKeyStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            IToken token6 = null;
            token = this.LT(1);
            this.match(232);
            this.match(91);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseEncryptionKeyStatement, tAlter);
                TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
            }
            if (this.LA(1) == 232 && this.LA(2) == 171) {
                token2 = this.LT(1);
                this.match(232);
                this.match(171);
                token3 = this.LT(1);
                this.match(232);
                this.match(206);
                token4 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "REGENERATE");
                    TSql80ParserBaseInternal.Match(token3, "ALGORITHM");
                    alterDatabaseEncryptionKeyStatement.Regenerate = true;
                    alterDatabaseEncryptionKeyStatement.Algorithm = DatabaseEncryptionKeyAlgorithmHelper.Instance.ParseOption(token4);
                    TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseEncryptionKeyStatement, token4);
                }
                if (this.LA(1) == 232 && this.LA(2) == 18 && base.NextTokenMatches("ENCRYPTION") && this.LA(2) == 18) {
                    token5 = this.LT(1);
                    this.match(232);
                    this.match(18);
                    CryptoMechanism encryptor = this.dekEncryptor();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token5, "ENCRYPTION");
                        alterDatabaseEncryptionKeyStatement.Encryptor = encryptor;
                    }
                    goto IL_0238;
                }
                if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                    goto IL_0238;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (this.LA(1) == 232 && this.LA(2) == 18) {
                token6 = this.LT(1);
                this.match(232);
                this.match(18);
                CryptoMechanism encryptor = this.dekEncryptor();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token6, "ENCRYPTION");
                    alterDatabaseEncryptionKeyStatement.Encryptor = encryptor;
                }
                goto IL_0238;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0238:
            return alterDatabaseEncryptionKeyStatement;
        }

        public AlterDatabaseScopedConfigurationSetStatement alterDatabaseScopedConfigSet(bool forSecondary) {
            AlterDatabaseScopedConfigurationSetStatement alterDatabaseScopedConfigurationSetStatement = base.FragmentFactory.CreateFragment<AlterDatabaseScopedConfigurationSetStatement>();
            this.match(142);
            DatabaseConfigurationSetOption option;
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXDOP")) {
                option = this.alterDatabaseScopedMaxDopOption(forSecondary);
                goto IL_00e1;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && (base.NextTokenMatches("QUERY_OPTIMIZER_HOTFIXES") || base.NextTokenMatches("PARAMETER_SNIFFING") || base.NextTokenMatches("LEGACY_CARDINALITY_ESTIMATION"))) {
                option = this.alterDatabaseScopedOnOffPrimaryOption(forSecondary);
                goto IL_00e1;
            }
            if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 206) {
                option = this.alterDatabaseScopedGenericOption(forSecondary);
                goto IL_00e1;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00e1:
            if (base.inputState.guessing == 0) {
                alterDatabaseScopedConfigurationSetStatement.Option = option;
            }
            return alterDatabaseScopedConfigurationSetStatement;
        }

        public AlterDatabaseScopedConfigurationClearStatement alterDatabaseScopedConfigClear() {
            AlterDatabaseScopedConfigurationClearStatement alterDatabaseScopedConfigurationClearStatement = base.FragmentFactory.CreateFragment<AlterDatabaseScopedConfigurationClearStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CLEAR");
                TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseScopedConfigurationClearStatement, token);
            }
            DatabaseConfigurationClearOption option = this.databaseConfigurationClearOption();
            if (base.inputState.guessing == 0) {
                alterDatabaseScopedConfigurationClearStatement.Option = option;
            }
            return alterDatabaseScopedConfigurationClearStatement;
        }

        public DatabaseConfigurationClearOption databaseConfigurationClearOption() {
            DatabaseConfigurationClearOption databaseConfigurationClearOption = base.FragmentFactory.CreateFragment<DatabaseConfigurationClearOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                databaseConfigurationClearOption.OptionKind = DatabaseConfigClearOptionKindHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
                TSql80ParserBaseInternal.UpdateTokenInfo(databaseConfigurationClearOption, token);
            }
            return databaseConfigurationClearOption;
        }

        public MaxDopConfigurationOption alterDatabaseScopedMaxDopOption(bool forSecondary) {
            MaxDopConfigurationOption maxDopConfigurationOption = base.FragmentFactory.CreateFragment<MaxDopConfigurationOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                maxDopConfigurationOption.OptionKind = DatabaseConfigSetOptionKindHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
                TSql80ParserBaseInternal.UpdateTokenInfo(maxDopConfigurationOption, token);
            }
            if (this.LA(1) == 221) {
                Literal value = this.integer();
                if (base.inputState.guessing == 0) {
                    maxDopConfigurationOption.Value = value;
                }
                goto IL_00f1;
            }
            if (this.LA(1) == 118 && base.NextTokenMatches("PRIMARY")) {
                token2 = this.LT(1);
                this.match(118);
                if (base.inputState.guessing == 0) {
                    if (!forSecondary) {
                        TSql80ParserBaseInternal.ThrowParseErrorException("SQL46115", maxDopConfigurationOption, TSqlParserResource.SQL46115Message);
                    }
                    maxDopConfigurationOption.Primary = true;
                    TSql80ParserBaseInternal.UpdateTokenInfo(maxDopConfigurationOption, token2);
                }
                goto IL_00f1;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00f1:
            return maxDopConfigurationOption;
        }

        public OnOffPrimaryConfigurationOption alterDatabaseScopedOnOffPrimaryOption(bool forSecondary) {
            OnOffPrimaryConfigurationOption onOffPrimaryConfigurationOption = base.FragmentFactory.CreateFragment<OnOffPrimaryConfigurationOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                onOffPrimaryConfigurationOption.OptionKind = DatabaseConfigSetOptionKindHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
                TSql80ParserBaseInternal.UpdateTokenInfo(onOffPrimaryConfigurationOption, token);
            }
            this.match(206);
            DatabaseConfigurationOptionState databaseConfigurationOptionState = this.databaseConfigurationOptionOnOffPrimary(onOffPrimaryConfigurationOption);
            if (base.inputState.guessing == 0 && !forSecondary && databaseConfigurationOptionState == DatabaseConfigurationOptionState.Primary) {
                TSql80ParserBaseInternal.ThrowParseErrorException("SQL46115", onOffPrimaryConfigurationOption, TSqlParserResource.SQL46115Message);
            }
            if (base.inputState.guessing == 0) {
                onOffPrimaryConfigurationOption.OptionState = databaseConfigurationOptionState;
            }
            return onOffPrimaryConfigurationOption;
        }

        public GenericConfigurationOption alterDatabaseScopedGenericOption(bool forSecondary) {
            GenericConfigurationOption genericConfigurationOption = base.FragmentFactory.CreateFragment<GenericConfigurationOption>();
            IToken token = null;
            IToken token2 = this.LT(1);
            Identifier genericOptionKind = this.identifier();
            if (base.inputState.guessing == 0) {
                genericConfigurationOption.GenericOptionKind = genericOptionKind;
            }
            this.match(206);
            switch (this.LA(1)) {
                case 199:
                case 221:
                case 230:
                case 231:
                case 232:
                case 233: {
                        IdentifierOrScalarExpression identifierOrScalarExpression = this.stringOrSignedIntegerOrIdentifier();
                        if (base.inputState.guessing == 0) {
                            genericConfigurationOption.GenericOptionState = identifierOrScalarExpression;
                        }
                        break;
                    }
                case 103:
                case 105: {
                        Identifier identifier = this.onOff();
                        if (base.inputState.guessing == 0) {
                            genericConfigurationOption.GenericOptionState = base.CreateIdentifierOrScalarExpressionFromIdentifier(identifier);
                        }
                        break;
                    }
                default:
                    if (this.LA(1) == 118 && base.NextTokenMatches("PRIMARY")) {
                        token = this.LT(1);
                        this.match(118);
                        if (base.inputState.guessing == 0) {
                            IdentifierOrScalarExpression identifierOrScalarExpression = base.CreateIdentifierOrScalarExpressionFromIdentifier(base.CreateIdentifierFromToken(token));
                            TSql80ParserBaseInternal.UpdateTokenInfo(identifierOrScalarExpression, token2);
                            if (!forSecondary) {
                                TSql80ParserBaseInternal.ThrowParseErrorException("SQL46115", identifierOrScalarExpression, TSqlParserResource.SQL46115Message);
                            }
                            genericConfigurationOption.GenericOptionState = identifierOrScalarExpression;
                        }
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return genericConfigurationOption;
        }

        public DatabaseConfigurationOptionState databaseConfigurationOptionOnOffPrimary(TSqlFragment vParent) {
            DatabaseConfigurationOptionState result = DatabaseConfigurationOptionState.NotSet;
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 118:
                    this.LT(1);
                    this.match(118);
                    if (base.inputState.guessing == 0) {
                        result = DatabaseConfigurationOptionState.Primary;
                    }
                    break;
                case 105:
                    token = this.LT(1);
                    this.match(105);
                    if (base.inputState.guessing == 0) {
                        result = DatabaseConfigurationOptionState.On;
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                    }
                    break;
                case 103:
                    token2 = this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        result = DatabaseConfigurationOptionState.Off;
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public IdentifierOrScalarExpression stringOrSignedIntegerOrIdentifier() {
            IdentifierOrScalarExpression identifierOrScalarExpression = base.FragmentFactory.CreateFragment<IdentifierOrScalarExpression>();
            switch (this.LA(1)) {
                case 230:
                case 231: {
                        Literal scalarExpression = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            identifierOrScalarExpression.ScalarExpression = scalarExpression;
                        }
                        break;
                    }
                case 199:
                case 221: {
                        ScalarExpression scalarExpression2 = this.signedInteger();
                        if (base.inputState.guessing == 0) {
                            identifierOrScalarExpression.ScalarExpression = scalarExpression2;
                        }
                        break;
                    }
                case 232:
                case 233: {
                        Identifier identifier = this.identifier();
                        if (base.inputState.guessing == 0) {
                            identifierOrScalarExpression.Identifier = identifier;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return identifierOrScalarExpression;
        }

        public Identifier onOff() {
            Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
            TSql80ParserBaseInternal.UpdateTokenInfo(identifier, this.LT(1));
            identifier.SetUnquotedIdentifier(this.LT(1).getText());
            switch (this.LA(1)) {
                case 105:
                    this.match(105);
                    break;
                case 103:
                    this.match(103);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return identifier;
        }

        public SqlCommandIdentifier sqlCommandIdentifier() {
            SqlCommandIdentifier sqlCommandIdentifier = base.FragmentFactory.CreateFragment<SqlCommandIdentifier>();
            IToken token = null;
            token = this.LT(1);
            this.match(226);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(sqlCommandIdentifier, token);
                sqlCommandIdentifier.SetUnquotedIdentifier(token.getText());
            }
            return sqlCommandIdentifier;
        }

        public AlterDatabaseStatement alterDbAdd() {
            AlterDatabaseStatement alterDatabaseStatement = null;
            this.match(4);
            if (this.LA(1) != 65 && this.LA(1) != 232) {
                goto IL_0044;
            }
            if (this.LA(2) != 65 && this.LA(2) != 191) {
                goto IL_0044;
            }
            return this.alterDbAddFile();
            IL_0044:
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                return this.alterDbAddFilegroup();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public AlterDatabaseStatement alterDbRemove() {
            AlterDatabaseStatement result = null;
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "REMOVE");
            }
            switch (this.LA(1)) {
                case 65: {
                        this.match(65);
                        Identifier fileGroup = this.identifier();
                        if (base.inputState.guessing == 0) {
                            AlterDatabaseRemoveFileStatement alterDatabaseRemoveFileStatement = base.FragmentFactory.CreateFragment<AlterDatabaseRemoveFileStatement>();
                            alterDatabaseRemoveFileStatement.File = fileGroup;
                            result = alterDatabaseRemoveFileStatement;
                        }
                        break;
                    }
                case 232: {
                        token2 = this.LT(1);
                        this.match(232);
                        Identifier fileGroup = this.identifier();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token2, "FILEGROUP");
                            AlterDatabaseRemoveFileGroupStatement alterDatabaseRemoveFileGroupStatement = base.FragmentFactory.CreateFragment<AlterDatabaseRemoveFileGroupStatement>();
                            alterDatabaseRemoveFileGroupStatement.FileGroup = fileGroup;
                            result = alterDatabaseRemoveFileGroupStatement;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public AlterDatabaseStatement alterDbModify() {
            AlterDatabaseStatement result = null;
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MODIFY");
            }
            switch (this.LA(1)) {
                case 65:
                    result = this.alterDbModifyFile();
                    break;
                case 191:
                    result = this.alterDbModifyAzureOptions();
                    break;
                default:
                    if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("NAME")) {
                        token2 = this.LT(1);
                        this.match(232);
                        this.match(206);
                        Identifier newDatabaseName = this.identifier();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token2, "NAME");
                            AlterDatabaseModifyNameStatement alterDatabaseModifyNameStatement = base.FragmentFactory.CreateFragment<AlterDatabaseModifyNameStatement>();
                            alterDatabaseModifyNameStatement.NewDatabaseName = newDatabaseName;
                            result = alterDatabaseModifyNameStatement;
                        }
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                        token3 = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token3, "FILEGROUP");
                        }
                        result = this.alterDbModifyFilegroup();
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public AlterDatabaseSetStatement alterDbSet() {
            this.match(142);
            AlterDatabaseSetStatement alterDatabaseSetStatement = this.dbOptionStateList();
            if (this.LA(1) == 171 && (this.LA(2) == 134 || this.LA(2) == 232)) {
                AlterDatabaseTermination termination = this.xactTermination();
                if (base.inputState.guessing == 0) {
                    alterDatabaseSetStatement.Termination = termination;
                }
                goto IL_0092;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0092;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0092:
            return alterDatabaseSetStatement;
        }

        public AlterDatabaseCollateStatement alterDbCollate() {
            AlterDatabaseCollateStatement alterDatabaseCollateStatement = base.FragmentFactory.CreateFragment<AlterDatabaseCollateStatement>();
            this.collation(alterDatabaseCollateStatement);
            return alterDatabaseCollateStatement;
        }

        public AlterDatabaseRebuildLogStatement alterDbRebuild() {
            AlterDatabaseRebuildLogStatement alterDatabaseRebuildLogStatement = base.FragmentFactory.CreateFragment<AlterDatabaseRebuildLogStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "REBUILD");
                TSql80ParserBaseInternal.Match(token2, "LOG");
                TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseRebuildLogStatement, token2);
                base.ThrowPartialAstIfPhaseOne(alterDatabaseRebuildLogStatement);
            }
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_0311;
                }
            } else {
                switch (num) {
                    case 105: {
                            this.match(105);
                            FileDeclaration fileDeclaration = this.fileDecl(false);
                            if (base.inputState.guessing == 0) {
                                alterDatabaseRebuildLogStatement.FileDeclaration = fileDeclaration;
                            }
                            goto IL_0311;
                        }
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0311;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0311:
            return alterDatabaseRebuildLogStatement;
        }

        public void collation(ICollationSetter vParent) {
            this.match(26);
            Identifier collation = this.nonQuotedIdentifier();
            if (base.inputState.guessing == 0) {
                vParent.Collation = collation;
            }
        }

        public FileDeclaration fileDecl(bool isAlterDbModifyFileStatement) {
            IToken token = null;
            FileDeclaration fileDeclaration;
            switch (this.LA(1)) {
                case 118:
                    token = this.LT(1);
                    this.match(118);
                    fileDeclaration = this.fileDeclBody(isAlterDbModifyFileStatement);
                    if (base.inputState.guessing == 0) {
                        fileDeclaration.IsPrimary = true;
                        TSql80ParserBaseInternal.UpdateTokenInfo(fileDeclaration, token);
                    }
                    break;
                case 191:
                    fileDeclaration = this.fileDeclBody(isAlterDbModifyFileStatement);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return fileDeclaration;
        }

        public AlterDatabaseAddFileStatement alterDbAddFile() {
            AlterDatabaseAddFileStatement alterDatabaseAddFileStatement = base.FragmentFactory.CreateFragment<AlterDatabaseAddFileStatement>();
            IToken token = null;
            switch (this.LA(1)) {
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token, "LOG");
                        alterDatabaseAddFileStatement.IsLog = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 65:
                    break;
            }
            this.match(65);
            if (base.inputState.guessing == 0) {
                base.ThrowPartialAstIfPhaseOne(alterDatabaseAddFileStatement);
            }
            this.fileDeclBodyList(alterDatabaseAddFileStatement, alterDatabaseAddFileStatement.FileDeclarations);
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_033b;
                }
            } else {
                switch (num) {
                    case 151: {
                            Identifier fileGroup = this.toFilegroup();
                            if (base.inputState.guessing == 0) {
                                alterDatabaseAddFileStatement.FileGroup = fileGroup;
                            }
                            goto IL_033b;
                        }
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_033b;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_033b:
            return alterDatabaseAddFileStatement;
        }

        public AlterDatabaseAddFileGroupStatement alterDbAddFilegroup() {
            AlterDatabaseAddFileGroupStatement alterDatabaseAddFileGroupStatement = base.FragmentFactory.CreateFragment<AlterDatabaseAddFileGroupStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            Identifier fileGroup = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FILEGROUP");
                alterDatabaseAddFileGroupStatement.FileGroup = fileGroup;
            }
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 31:
                        this.match(31);
                        token2 = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            if (TSql80ParserBaseInternal.TryMatch(token2, "FILESTREAM")) {
                                alterDatabaseAddFileGroupStatement.ContainsFileStream = true;
                            } else {
                                TSql80ParserBaseInternal.Match(token2, "MEMORY_OPTIMIZED_DATA");
                                alterDatabaseAddFileGroupStatement.ContainsMemoryOptimizedData = true;
                            }
                            TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseAddFileGroupStatement, token2);
                        }
                        goto IL_0337;
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_0337;
                }
            } else {
                switch (num) {
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0337;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0337:
            return alterDatabaseAddFileGroupStatement;
        }

        public void fileDeclBodyList(TSqlFragment vParent, IList<FileDeclaration> fileDeclarations) {
            FileDeclaration item = this.fileDeclBody(false);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, fileDeclarations, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.fileDeclBody(false);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, fileDeclarations, item);
                }
            }
        }

        public Identifier toFilegroup() {
            IToken token = null;
            this.match(151);
            token = this.LT(1);
            this.match(232);
            Identifier result = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FILEGROUP");
            }
            return result;
        }

        public AlterDatabaseModifyFileGroupStatement alterDbModifyFilegroup() {
            AlterDatabaseModifyFileGroupStatement alterDatabaseModifyFileGroupStatement = base.FragmentFactory.CreateFragment<AlterDatabaseModifyFileGroupStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            Identifier fileGroup = this.identifier();
            if (base.inputState.guessing == 0) {
                alterDatabaseModifyFileGroupStatement.FileGroup = fileGroup;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                token = this.LT(1);
                this.match(232);
                this.match(206);
                Identifier newFileGroupName = this.identifier();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "NAME");
                    alterDatabaseModifyFileGroupStatement.NewFileGroupName = newFileGroupName;
                    base.ThrowPartialAstIfPhaseOne(alterDatabaseModifyFileGroupStatement);
                }
                goto IL_01db;
            }
            if (this.LA(1) == 47) {
                token2 = this.LT(1);
                this.match(47);
                if (base.inputState.guessing == 0) {
                    alterDatabaseModifyFileGroupStatement.MakeDefault = true;
                    TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseModifyFileGroupStatement, token2);
                }
                goto IL_01db;
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2))) {
                token3 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    base.ThrowPartialAstIfPhaseOne(alterDatabaseModifyFileGroupStatement);
                    alterDatabaseModifyFileGroupStatement.UpdatabilityOption = ModifyFilegroupOptionsHelper.Instance.ParseOption(token3, SqlVersionFlags.TSql140);
                    TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseModifyFileGroupStatement, token3);
                }
                if (this.LA(1) == 171 && (this.LA(2) == 134 || this.LA(2) == 232)) {
                    AlterDatabaseTermination termination = this.xactTermination();
                    if (base.inputState.guessing == 0) {
                        alterDatabaseModifyFileGroupStatement.Termination = termination;
                    }
                    goto IL_01db;
                }
                if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                    goto IL_01db;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_01db:
            return alterDatabaseModifyFileGroupStatement;
        }

        public AlterDatabaseModifyFileStatement alterDbModifyFile() {
            AlterDatabaseModifyFileStatement alterDatabaseModifyFileStatement = base.FragmentFactory.CreateFragment<AlterDatabaseModifyFileStatement>();
            this.match(65);
            if (base.inputState.guessing == 0) {
                base.ThrowPartialAstIfPhaseOne(alterDatabaseModifyFileStatement);
            }
            FileDeclaration fileDeclaration = this.fileDecl(true);
            if (base.inputState.guessing == 0) {
                alterDatabaseModifyFileStatement.FileDeclaration = fileDeclaration;
            }
            return alterDatabaseModifyFileStatement;
        }

        public AlterDatabaseSetStatement alterDbModifyAzureOptions() {
            AlterDatabaseSetStatement alterDatabaseSetStatement = base.FragmentFactory.CreateFragment<AlterDatabaseSetStatement>();
            this.azureOptions(alterDatabaseSetStatement, alterDatabaseSetStatement.Options);
            return alterDatabaseSetStatement;
        }

        public void azureOptions(TSqlFragment vParent, IList<DatabaseOption> vOptions) {
            IToken token = null;
            int num = 0;
            this.match(191);
            DatabaseOption databaseOption = this.azureOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)databaseOption.OptionKind, databaseOption);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vOptions, databaseOption);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                databaseOption = this.azureOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)databaseOption.OptionKind, databaseOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vOptions, databaseOption);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public AlterDatabaseTermination xactTermination() {
            AlterDatabaseTermination alterDatabaseTermination = base.FragmentFactory.CreateFragment<AlterDatabaseTermination>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            token = this.LT(1);
            this.match(171);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseTermination, token);
            }
            switch (this.LA(1)) {
                case 134:
                    this.match(134);
                    if (this.LA(1) == 232 && this.LA(2) == 221) {
                        token2 = this.LT(1);
                        this.match(232);
                        Literal rollbackAfter = this.integer();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token2, "AFTER");
                            alterDatabaseTermination.RollbackAfter = rollbackAfter;
                        }
                        if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2))) {
                            token3 = this.LT(1);
                            this.match(232);
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.Match(token3, "SECONDS");
                                TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseTermination, token3);
                            }
                            break;
                        }
                        if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                            break;
                        }
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2))) {
                        token4 = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token4, "IMMEDIATE");
                            TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseTermination, token4);
                            alterDatabaseTermination.ImmediateRollback = true;
                        }
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 232:
                    token5 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token5, "NO_WAIT");
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseTermination, token5);
                        alterDatabaseTermination.NoWait = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return alterDatabaseTermination;
        }

        public AlterDatabaseSetStatement dbOptionStateList() {
            AlterDatabaseSetStatement alterDatabaseSetStatement = base.FragmentFactory.CreateFragment<AlterDatabaseSetStatement>();
            ulong num = 0uL;
            DatabaseOption item = this.dbOptionStateItem(ref num);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterDatabaseSetStatement, alterDatabaseSetStatement.Options, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.dbOptionStateItem(ref num);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterDatabaseSetStatement, alterDatabaseSetStatement.Options, item);
                }
            }
            return alterDatabaseSetStatement;
        }

        public DatabaseOption dbOptionStateItem(ref ulong encounteredOptions) {
            DatabaseOption databaseOption = null;
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("CURSOR_DEFAULT")) {
                return this.cursorDefaultDbOption();
            }
            if (this.LA(1) == 232 && (this.LA(2) == 72 || this.LA(2) == 232) && base.NextTokenMatches("RECOVERY")) {
                return this.recoveryDbOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("TARGET_RECOVERY_TIME")) {
                return this.targetRecoveryTimeDbOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("PAGE_VERIFY")) {
                return this.pageVerifyDbOption();
            }
            if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 206 || this.LA(2) == 232) && base.NextTokenMatches("PARTNER")) {
                return this.partnerOption();
            }
            if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 206) && base.NextTokenMatches("WITNESS")) {
                return this.witnessOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("PARAMETERIZATION")) {
                return this.parameterizationOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("COMPATIBILITY_LEVEL")) {
                return this.compatibilityLevelDbOption();
            }
            if (this.LA(1) == 232 && (this.LA(2) == 191 || this.LA(2) == 206) && base.NextTokenMatches("CHANGE_TRACKING")) {
                return this.changeTrackingDbOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("CONTAINMENT")) {
                return this.dbContainmentOption();
            }
            if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 232) && base.NextTokenMatches("HADR")) {
                return this.hadrDbOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DELAYED_DURABILITY")) {
                return this.dbDelayedDurabilityOption();
            }
            if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 105) && base.NextTokenMatches("AUTO_CREATE_STATISTICS")) {
                return this.autoCreateStatisticsDbOption();
            }
            if (this.LA(1) == 232 && (this.LA(2) == 191 || this.LA(2) == 206) && base.NextTokenMatches("REMOTE_DATA_ARCHIVE")) {
                return this.remoteDataArchiveDbOption();
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_55_.member(this.LA(2)) && base.NextTokenMatchesOneOf(base.OptionValidForCreateDatabase())) {
                return this.createAlterDbOption(ref encounteredOptions);
            }
            if (this.LA(1) == 232 && (this.LA(2) == 191 || this.LA(2) == 206 || this.LA(2) == 232) && base.NextTokenMatches("QUERY_STORE")) {
                return this.queryStoreDbOption();
            }
            if (this.LA(1) == 232 && (this.LA(2) == 191 || this.LA(2) == 206) && base.NextTokenMatches("AUTOMATIC_TUNING")) {
                return this.automaticTuningDbOption();
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_56_.member(this.LA(2))) {
                return this.dbSingleIdentOption();
            }
            if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 105 || this.LA(2) == 206)) {
                return this.alterDbOnOffOption();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public CursorDefaultDatabaseOption cursorDefaultDbOption() {
            CursorDefaultDatabaseOption cursorDefaultDatabaseOption = base.FragmentFactory.CreateFragment<CursorDefaultDatabaseOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CURSOR_DEFAULT");
                cursorDefaultDatabaseOption.OptionKind = DatabaseOptionKind.CursorDefault;
                if (TSql80ParserBaseInternal.TryMatch(token2, "LOCAL")) {
                    cursorDefaultDatabaseOption.IsLocal = true;
                } else {
                    TSql80ParserBaseInternal.Match(token2, "GLOBAL");
                    cursorDefaultDatabaseOption.IsLocal = false;
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(cursorDefaultDatabaseOption, token2);
            }
            return cursorDefaultDatabaseOption;
        }

        public RecoveryDatabaseOption recoveryDbOption() {
            RecoveryDatabaseOption recoveryDatabaseOption = base.FragmentFactory.CreateFragment<RecoveryDatabaseOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "RECOVERY");
                recoveryDatabaseOption.OptionKind = DatabaseOptionKind.Recovery;
            }
            switch (this.LA(1)) {
                case 72:
                    token2 = this.LT(1);
                    this.match(72);
                    if (base.inputState.guessing == 0) {
                        recoveryDatabaseOption.Value = RecoveryDatabaseOptionKind.Full;
                        TSql80ParserBaseInternal.UpdateTokenInfo(recoveryDatabaseOption, token2);
                    }
                    break;
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        recoveryDatabaseOption.Value = RecoveryDbOptionsHelper.Instance.ParseOption(token3);
                        TSql80ParserBaseInternal.UpdateTokenInfo(recoveryDatabaseOption, token3);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return recoveryDatabaseOption;
        }

        public TargetRecoveryTimeDatabaseOption targetRecoveryTimeDbOption() {
            TargetRecoveryTimeDatabaseOption targetRecoveryTimeDatabaseOption = base.FragmentFactory.CreateFragment<TargetRecoveryTimeDatabaseOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal recoveryTime = this.integer();
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "TARGET_RECOVERY_TIME");
                targetRecoveryTimeDatabaseOption.OptionKind = DatabaseOptionKind.TargetRecoveryTime;
                targetRecoveryTimeDatabaseOption.RecoveryTime = recoveryTime;
                targetRecoveryTimeDatabaseOption.Unit = TargetRecoveryTimeUnitHelper.Instance.ParseOption(token2);
                TSql80ParserBaseInternal.UpdateTokenInfo(targetRecoveryTimeDatabaseOption, token2);
            }
            return targetRecoveryTimeDatabaseOption;
        }

        public PageVerifyDatabaseOption pageVerifyDbOption() {
            PageVerifyDatabaseOption pageVerifyDatabaseOption = base.FragmentFactory.CreateFragment<PageVerifyDatabaseOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "PAGE_VERIFY");
                pageVerifyDatabaseOption.OptionKind = DatabaseOptionKind.PageVerify;
                pageVerifyDatabaseOption.Value = PageVerifyDbOptionsHelper.Instance.ParseOption(token2);
                TSql80ParserBaseInternal.UpdateTokenInfo(pageVerifyDatabaseOption, token2);
            }
            return pageVerifyDatabaseOption;
        }

        public PartnerDatabaseOption partnerOption() {
            PartnerDatabaseOption partnerDatabaseOption = base.FragmentFactory.CreateFragment<PartnerDatabaseOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            IToken token6 = null;
            IToken token7 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "PARTNER");
                partnerDatabaseOption.OptionKind = DatabaseOptionKind.Partner;
            }
            switch (this.LA(1)) {
                case 232:
                    if (this.LA(1) == 232 && this.LA(2) == 221 && base.NextTokenMatches("TIMEOUT")) {
                        token2 = this.LT(1);
                        this.match(232);
                        Literal timeout = this.integer();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token2, "TIMEOUT");
                            partnerDatabaseOption.Timeout = timeout;
                            partnerDatabaseOption.PartnerOption = PartnerDatabaseOptionKind.Timeout;
                        }
                        break;
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 72 || this.LA(2) == 103) && base.NextTokenMatches("SAFETY")) {
                        token3 = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token3, "SAFETY");
                        }
                        switch (this.LA(1)) {
                            case 72:
                                token4 = this.LT(1);
                                this.match(72);
                                if (base.inputState.guessing == 0) {
                                    partnerDatabaseOption.PartnerOption = PartnerDatabaseOptionKind.SafetyFull;
                                    TSql80ParserBaseInternal.UpdateTokenInfo(partnerDatabaseOption, token4);
                                }
                                break;
                            case 103:
                                token5 = this.LT(1);
                                this.match(103);
                                if (base.inputState.guessing == 0) {
                                    partnerDatabaseOption.PartnerOption = PartnerDatabaseOptionKind.SafetyOff;
                                    TSql80ParserBaseInternal.UpdateTokenInfo(partnerDatabaseOption, token5);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                        }
                        break;
                    }
                    if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_56_.member(this.LA(2))) {
                        token6 = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            partnerDatabaseOption.PartnerOption = PartnerDbOptionsHelper.Instance.ParseOption(token6);
                            TSql80ParserBaseInternal.UpdateTokenInfo(partnerDatabaseOption, token6);
                        }
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 103:
                    token7 = this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        partnerDatabaseOption.PartnerOption = PartnerDatabaseOptionKind.Off;
                        TSql80ParserBaseInternal.UpdateTokenInfo(partnerDatabaseOption, token7);
                    }
                    break;
                case 206: {
                        this.match(206);
                        Literal partnerServer = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            partnerDatabaseOption.PartnerServer = partnerServer;
                            partnerDatabaseOption.PartnerOption = PartnerDatabaseOptionKind.PartnerServer;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return partnerDatabaseOption;
        }

        public WitnessDatabaseOption witnessOption() {
            WitnessDatabaseOption witnessDatabaseOption = base.FragmentFactory.CreateFragment<WitnessDatabaseOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "WITNESS");
                witnessDatabaseOption.OptionKind = DatabaseOptionKind.Witness;
            }
            switch (this.LA(1)) {
                case 103:
                    token2 = this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        witnessDatabaseOption.IsOff = true;
                        TSql80ParserBaseInternal.UpdateTokenInfo(witnessDatabaseOption, token2);
                    }
                    break;
                case 206: {
                        this.match(206);
                        Literal witnessServer = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            witnessDatabaseOption.WitnessServer = witnessServer;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return witnessDatabaseOption;
        }

        public ParameterizationDatabaseOption parameterizationOption() {
            ParameterizationDatabaseOption parameterizationDatabaseOption = base.FragmentFactory.CreateFragment<ParameterizationDatabaseOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "PARAMETERIZATION");
                parameterizationDatabaseOption.OptionKind = DatabaseOptionKind.Parameterization;
                if (TSql80ParserBaseInternal.TryMatch(token2, "SIMPLE")) {
                    parameterizationDatabaseOption.IsSimple = true;
                } else {
                    TSql80ParserBaseInternal.Match(token2, "FORCED");
                    parameterizationDatabaseOption.IsSimple = false;
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(parameterizationDatabaseOption, token2);
            }
            return parameterizationDatabaseOption;
        }

        public LiteralDatabaseOption compatibilityLevelDbOption() {
            LiteralDatabaseOption literalDatabaseOption = base.FragmentFactory.CreateFragment<LiteralDatabaseOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal value = this.integer();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "COMPATIBILITY_LEVEL");
                literalDatabaseOption.OptionKind = DatabaseOptionKind.CompatibilityLevel;
                TSql80ParserBaseInternal.UpdateTokenInfo(literalDatabaseOption, token);
                literalDatabaseOption.Value = value;
            }
            return literalDatabaseOption;
        }

        public ChangeTrackingDatabaseOption changeTrackingDbOption() {
            ChangeTrackingDatabaseOption changeTrackingDatabaseOption = base.FragmentFactory.CreateFragment<ChangeTrackingDatabaseOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CHANGE_TRACKING");
                changeTrackingDatabaseOption.OptionKind = DatabaseOptionKind.ChangeTracking;
                TSql80ParserBaseInternal.UpdateTokenInfo(changeTrackingDatabaseOption, token);
            }
            if (this.LA(1) == 206 && this.LA(2) == 103) {
                this.match(206);
                token2 = this.LT(1);
                this.match(103);
                if (base.inputState.guessing == 0) {
                    changeTrackingDatabaseOption.OptionState = OptionState.Off;
                    TSql80ParserBaseInternal.UpdateTokenInfo(changeTrackingDatabaseOption, token2);
                }
                goto IL_0180;
            }
            if (this.LA(1) == 206 && this.LA(2) == 105) {
                this.match(206);
                token3 = this.LT(1);
                this.match(105);
                if (base.inputState.guessing == 0) {
                    changeTrackingDatabaseOption.OptionState = OptionState.On;
                    TSql80ParserBaseInternal.UpdateTokenInfo(changeTrackingDatabaseOption, token3);
                }
                if (this.LA(1) == 191 && this.LA(2) == 232) {
                    this.changeTrackingOnOptions(changeTrackingDatabaseOption);
                    goto IL_0180;
                }
                if (TSql140ParserInternal.tokenSet_56_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                    goto IL_0180;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (this.LA(1) == 191) {
                this.changeTrackingOnOptions(changeTrackingDatabaseOption);
                goto IL_0180;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0180:
            return changeTrackingDatabaseOption;
        }

        public ContainmentDatabaseOption dbContainmentOption() {
            ContainmentDatabaseOption containmentDatabaseOption = base.FragmentFactory.CreateFragment<ContainmentDatabaseOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CONTAINMENT");
                TSql80ParserBaseInternal.UpdateTokenInfo(containmentDatabaseOption, token);
                containmentDatabaseOption.OptionKind = DatabaseOptionKind.Containment;
            }
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                containmentDatabaseOption.Value = ContainmentOptionKindHelper.Instance.ParseOption(token2);
                TSql80ParserBaseInternal.UpdateTokenInfo(containmentDatabaseOption, token2);
            }
            return containmentDatabaseOption;
        }

        public DatabaseOption hadrDbOption() {
            DatabaseOption databaseOption = null;
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (this.LA(1) == 232 && this.LA(2) == 76 && base.NextTokenMatches("AVAILABILITY")) {
                databaseOption = this.hadrAvailabilityDbOption();
                goto IL_008e;
            }
            if ((this.LA(1) == 103 || this.LA(1) == 232) && TSql140ParserInternal.tokenSet_56_.member(this.LA(2))) {
                databaseOption = this.simpleHadrDbOption();
                goto IL_008e;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_008e:
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "HADR");
                databaseOption.OptionKind = DatabaseOptionKind.Hadr;
                TSql80ParserBaseInternal.UpdateTokenInfo(databaseOption, token);
            }
            return databaseOption;
        }

        public DelayedDurabilityDatabaseOption dbDelayedDurabilityOption() {
            DelayedDurabilityDatabaseOption delayedDurabilityDatabaseOption = base.FragmentFactory.CreateFragment<DelayedDurabilityDatabaseOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "DELAYED_DURABILITY");
                delayedDurabilityDatabaseOption.OptionKind = DatabaseOptionKind.DelayedDurability;
                delayedDurabilityDatabaseOption.Value = DelayedDurabilityOptionKindHelper.Instance.ParseOption(token2);
                TSql80ParserBaseInternal.UpdateTokenInfo(delayedDurabilityDatabaseOption, token2);
            }
            return delayedDurabilityDatabaseOption;
        }

        public AutoCreateStatisticsDatabaseOption autoCreateStatisticsDbOption() {
            AutoCreateStatisticsDatabaseOption autoCreateStatisticsDatabaseOption = base.FragmentFactory.CreateFragment<AutoCreateStatisticsDatabaseOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "AUTO_CREATE_STATISTICS");
                autoCreateStatisticsDatabaseOption.OptionKind = DatabaseOptionKind.AutoCreateStatistics;
                TSql80ParserBaseInternal.UpdateTokenInfo(autoCreateStatisticsDatabaseOption, token);
                autoCreateStatisticsDatabaseOption.HasIncremental = false;
            }
            OptionState optionState = this.optionOnOff(autoCreateStatisticsDatabaseOption);
            if (base.inputState.guessing == 0) {
                autoCreateStatisticsDatabaseOption.OptionState = optionState;
            }
            if (this.LA(1) == 191 && this.LA(2) == 232) {
                this.match(191);
                token2 = this.LT(1);
                this.match(232);
                this.match(206);
                OptionState incrementalState = this.optionOnOff(autoCreateStatisticsDatabaseOption);
                if (base.inputState.guessing == 0) {
                    if (optionState != OptionState.On) {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token2);
                    }
                    TSql80ParserBaseInternal.Match(token2, "INCREMENTAL");
                    autoCreateStatisticsDatabaseOption.IncrementalState = incrementalState;
                    autoCreateStatisticsDatabaseOption.HasIncremental = true;
                }
                token3 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(autoCreateStatisticsDatabaseOption, token3);
                }
                goto IL_0159;
            }
            if (TSql140ParserInternal.tokenSet_56_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0159;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0159:
            return autoCreateStatisticsDatabaseOption;
        }

        public RemoteDataArchiveDatabaseOption remoteDataArchiveDbOption() {
            RemoteDataArchiveDatabaseOption remoteDataArchiveDatabaseOption = base.FragmentFactory.CreateFragment<RemoteDataArchiveDatabaseOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "REMOTE_DATA_ARCHIVE");
                remoteDataArchiveDatabaseOption.OptionKind = DatabaseOptionKind.RemoteDataArchive;
                TSql80ParserBaseInternal.UpdateTokenInfo(remoteDataArchiveDatabaseOption, token);
            }
            if (this.LA(1) == 206 && this.LA(2) == 103) {
                this.match(206);
                token2 = this.LT(1);
                this.match(103);
                if (base.inputState.guessing == 0) {
                    remoteDataArchiveDatabaseOption.OptionState = OptionState.Off;
                    TSql80ParserBaseInternal.UpdateTokenInfo(remoteDataArchiveDatabaseOption, token2);
                }
                goto IL_0125;
            }
            if (this.LA(1) == 206 && this.LA(2) == 105) {
                this.match(206);
                token3 = this.LT(1);
                this.match(105);
                if (base.inputState.guessing == 0) {
                    remoteDataArchiveDatabaseOption.OptionState = OptionState.On;
                    TSql80ParserBaseInternal.UpdateTokenInfo(remoteDataArchiveDatabaseOption, token3);
                }
                this.remoteDataArchiveDbSettingsList(remoteDataArchiveDatabaseOption);
                goto IL_0125;
            }
            if (this.LA(1) == 191) {
                this.remoteDataArchiveDbSettingsList(remoteDataArchiveDatabaseOption);
                goto IL_0125;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0125:
            return remoteDataArchiveDatabaseOption;
        }

        public DatabaseOption createAlterDbOption(ref ulong encounteredOptions) {
            DatabaseOption databaseOption;
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_56_.member(this.LA(2)) && base.NextTokenMatches("RESTRICTED_USER")) {
                databaseOption = this.restrictedUserCreateDbOption();
                goto IL_0118;
            }
            if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 105) && (base.NextTokenMatches("DB_CHAINING") || base.NextTokenMatches("TRUSTWORTHY"))) {
                databaseOption = this.createDbOnOffOption();
                goto IL_0118;
            }
            if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("FILESTREAM")) {
                databaseOption = this.fileStreamCreateAlterDbOption();
                goto IL_0118;
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_56_.member(this.LA(2))) {
                databaseOption = this.createDbServiceBrokerOption();
                goto IL_0118;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                databaseOption = this.createAlterDbEqualsSignOption();
                goto IL_0118;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0118:
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, (int)databaseOption.OptionKind, (TSqlFragment)databaseOption);
            }
            return databaseOption;
        }

        public QueryStoreDatabaseOption queryStoreDbOption() {
            QueryStoreDatabaseOption queryStoreDatabaseOption = base.FragmentFactory.CreateFragment<QueryStoreDatabaseOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "QUERY_STORE");
                queryStoreDatabaseOption.OptionKind = DatabaseOptionKind.QueryStore;
                TSql80ParserBaseInternal.UpdateTokenInfo(queryStoreDatabaseOption, token);
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_56_.member(this.LA(2))) {
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "CLEAR");
                    queryStoreDatabaseOption.Clear = true;
                    TSql80ParserBaseInternal.UpdateTokenInfo(queryStoreDatabaseOption, token2);
                }
                goto IL_024c;
            }
            if (this.LA(1) == 232 && this.LA(2) == 5) {
                token3 = this.LT(1);
                this.match(232);
                this.match(5);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token3, "CLEAR");
                    queryStoreDatabaseOption.ClearAll = true;
                    TSql80ParserBaseInternal.UpdateTokenInfo(queryStoreDatabaseOption, token3);
                }
                goto IL_024c;
            }
            if (this.LA(1) == 206 && this.LA(2) == 103) {
                this.match(206);
                token4 = this.LT(1);
                this.match(103);
                if (base.inputState.guessing == 0) {
                    queryStoreDatabaseOption.OptionState = OptionState.Off;
                    TSql80ParserBaseInternal.UpdateTokenInfo(queryStoreDatabaseOption, token4);
                }
                goto IL_024c;
            }
            if (this.LA(1) == 206 && this.LA(2) == 105) {
                this.match(206);
                token5 = this.LT(1);
                this.match(105);
                if (base.inputState.guessing == 0) {
                    queryStoreDatabaseOption.OptionState = OptionState.On;
                    TSql80ParserBaseInternal.UpdateTokenInfo(queryStoreDatabaseOption, token5);
                }
                if (this.LA(1) == 191 && this.LA(2) == 232) {
                    this.queryStoreOnOptions(queryStoreDatabaseOption);
                    goto IL_024c;
                }
                if (TSql140ParserInternal.tokenSet_56_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                    goto IL_024c;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (this.LA(1) == 191) {
                this.queryStoreOnOptions(queryStoreDatabaseOption);
                goto IL_024c;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_024c:
            return queryStoreDatabaseOption;
        }

        public AutomaticTuningDatabaseOption automaticTuningDbOption() {
            AutomaticTuningDatabaseOption automaticTuningDatabaseOption = base.FragmentFactory.CreateFragment<AutomaticTuningDatabaseOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "AUTOMATIC_TUNING");
                automaticTuningDatabaseOption.OptionKind = DatabaseOptionKind.AutomaticTuning;
                TSql80ParserBaseInternal.UpdateTokenInfo(automaticTuningDatabaseOption, token);
            }
            switch (this.LA(1)) {
                case 206:
                    this.match(206);
                    if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_56_.member(this.LA(2)) && base.NextTokenMatches("AUTO")) {
                        token2 = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token2, "AUTO");
                            automaticTuningDatabaseOption.AutomaticTuningState = AutomaticTuningState.Auto;
                            TSql80ParserBaseInternal.UpdateTokenInfo(automaticTuningDatabaseOption, token2);
                        }
                        break;
                    }
                    if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_56_.member(this.LA(2)) && base.NextTokenMatches("INHERIT")) {
                        token3 = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token3, "INHERIT");
                            automaticTuningDatabaseOption.AutomaticTuningState = AutomaticTuningState.Inherit;
                            TSql80ParserBaseInternal.UpdateTokenInfo(automaticTuningDatabaseOption, token3);
                        }
                        break;
                    }
                    if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_56_.member(this.LA(2)) && base.NextTokenMatches("CUSTOM")) {
                        token4 = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token4, "CUSTOM");
                            automaticTuningDatabaseOption.AutomaticTuningState = AutomaticTuningState.Custom;
                            TSql80ParserBaseInternal.UpdateTokenInfo(automaticTuningDatabaseOption, token4);
                        }
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 191:
                    this.automaticTuningOptions(automaticTuningDatabaseOption);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return automaticTuningDatabaseOption;
        }

        public DatabaseOption dbSingleIdentOption() {
            DatabaseOption databaseOption = base.FragmentFactory.CreateFragment<DatabaseOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                databaseOption.OptionKind = SimpleDbOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
                TSql80ParserBaseInternal.UpdateTokenInfo(databaseOption, token);
            }
            return databaseOption;
        }

        public OnOffDatabaseOption alterDbOnOffOption() {
            OnOffDatabaseOption onOffDatabaseOption = base.FragmentFactory.CreateFragment<OnOffDatabaseOption>();
            IToken token = null;
            bool flag = false;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                onOffDatabaseOption.OptionKind = OnOffSimpleDbOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
            }
            switch (this.LA(1)) {
                case 206:
                    this.match(206);
                    if (base.inputState.guessing == 0) {
                        flag = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 103:
                case 105:
                    break;
            }
            OptionState optionState = this.optionOnOff(onOffDatabaseOption);
            if (base.inputState.guessing == 0) {
                bool flag2 = OnOffSimpleDbOptionsHelper.Instance.RequiresEqualsSign(onOffDatabaseOption.OptionKind);
                if (flag && !flag2) {
                    goto IL_00cf;
                }
                if (!flag && flag2) {
                    goto IL_00cf;
                }
                goto IL_00d5;
            }
            goto IL_00dc;
            IL_00dc:
            return onOffDatabaseOption;
            IL_00cf:
            TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
            goto IL_00d5;
            IL_00d5:
            onOffDatabaseOption.OptionState = optionState;
            goto IL_00dc;
        }

        public void changeTrackingOnOptions(ChangeTrackingDatabaseOption vParent) {
            IToken token = null;
            bool flag = false;
            bool flag2 = false;
            this.match(191);
            ChangeTrackingOptionDetail item = this.changeTrackingOneOption(ref flag, ref flag2);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Details, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.changeTrackingOneOption(ref flag, ref flag2);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Details, item);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public ChangeTrackingOptionDetail changeTrackingOneOption(ref bool autoCleanupEncountered, ref bool changeRetentionEncountered) {
            ChangeTrackingOptionDetail result = null;
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            switch (this.LA(1)) {
                case 105:
                    token2 = this.LT(1);
                    this.match(105);
                    if (base.inputState.guessing == 0) {
                        result = base.CreateAutoCleanupDetail(token, token2, ref autoCleanupEncountered);
                    }
                    break;
                case 103:
                    token3 = this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        result = base.CreateAutoCleanupDetail(token, token3, ref autoCleanupEncountered);
                    }
                    break;
                case 221: {
                        Literal retentionPeriod = this.integer();
                        token4 = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token, "CHANGE_RETENTION");
                            if (changeRetentionEncountered) {
                                TSql80ParserBaseInternal.ThrowParseErrorException("SQL46050", token, TSqlParserResource.SQL46050Message, token.getText());
                            }
                            changeRetentionEncountered = true;
                            ChangeRetentionChangeTrackingOptionDetail changeRetentionChangeTrackingOptionDetail = base.FragmentFactory.CreateFragment<ChangeRetentionChangeTrackingOptionDetail>();
                            changeRetentionChangeTrackingOptionDetail.Unit = RetentionUnitHelper.Instance.ParseOption(token4);
                            changeRetentionChangeTrackingOptionDetail.RetentionPeriod = retentionPeriod;
                            TSql80ParserBaseInternal.UpdateTokenInfo(changeRetentionChangeTrackingOptionDetail, token);
                            TSql80ParserBaseInternal.UpdateTokenInfo(changeRetentionChangeTrackingOptionDetail, token4);
                            result = changeRetentionChangeTrackingOptionDetail;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public void queryStoreOnOptions(QueryStoreDatabaseOption vParent) {
            IToken token = null;
            this.match(191);
            QueryStoreOption item = this.queryStoreOneOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.queryStoreOneOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, item);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public QueryStoreOption queryStoreOneOption() {
            QueryStoreOption queryStoreOption = null;
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DESIRED_STATE")) {
                return this.queryStoreDesiredStateOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("OPERATION_MODE")) {
                return this.queryStoreDesiredStateOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("QUERY_CAPTURE_MODE")) {
                return this.queryStoreCaptureModeOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SIZE_BASED_CLEANUP_MODE")) {
                return this.queryStoreSizeCleanupModeOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("FLUSH_INTERVAL_SECONDS")) {
                return this.queryStoreDataFlushIntervalOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DATA_FLUSH_INTERVAL_SECONDS")) {
                return this.queryStoreDataFlushIntervalOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("INTERVAL_LENGTH_MINUTES")) {
                return this.queryStoreIntervalLengthOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAX_STORAGE_SIZE_MB")) {
                return this.queryStoreMaxQdsSizeOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAX_PLANS_PER_QUERY")) {
                return this.queryStoreMaxPlansPerQueryOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("CLEANUP_POLICY")) {
                return this.queryStoreTimeCleanupPolicy();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public QueryStoreDesiredStateOption queryStoreDesiredStateOption() {
            QueryStoreDesiredStateOption queryStoreDesiredStateOption = base.FragmentFactory.CreateFragment<QueryStoreDesiredStateOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DESIRED_STATE")) {
                token = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "DESIRED_STATE");
                    queryStoreDesiredStateOption.OptionKind = QueryStoreOptionKind.Desired_State;
                    TSql80ParserBaseInternal.UpdateTokenInfo(queryStoreDesiredStateOption, token);
                }
                goto IL_00f7;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("OPERATION_MODE")) {
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "OPERATION_MODE");
                    queryStoreDesiredStateOption.OperationModeSpecified = true;
                    queryStoreDesiredStateOption.OptionKind = QueryStoreOptionKind.Desired_State;
                    TSql80ParserBaseInternal.UpdateTokenInfo(queryStoreDesiredStateOption, token2);
                }
                goto IL_00f7;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00f7:
            this.match(206);
            token3 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                queryStoreDesiredStateOption.Value = QueryStoreDesiredStateHelper.Instance.ParseOption(token3);
            }
            return queryStoreDesiredStateOption;
        }

        public QueryStoreCapturePolicyOption queryStoreCaptureModeOption() {
            QueryStoreCapturePolicyOption queryStoreCapturePolicyOption = base.FragmentFactory.CreateFragment<QueryStoreCapturePolicyOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "QUERY_CAPTURE_MODE");
                queryStoreCapturePolicyOption.OptionKind = QueryStoreOptionKind.Query_Capture_Mode;
                TSql80ParserBaseInternal.UpdateTokenInfo(queryStoreCapturePolicyOption, token);
            }
            this.match(206);
            switch (this.LA(1)) {
                case 5:
                    token2 = this.LT(1);
                    this.match(5);
                    if (base.inputState.guessing == 0) {
                        queryStoreCapturePolicyOption.Value = QueryStoreCapturePolicyOptionKind.ALL;
                        TSql80ParserBaseInternal.UpdateTokenInfo(queryStoreCapturePolicyOption, token2);
                    }
                    break;
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        queryStoreCapturePolicyOption.Value = QueryStoreCapturePolicyHelper.Instance.ParseOption(token3);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return queryStoreCapturePolicyOption;
        }

        public QueryStoreSizeCleanupPolicyOption queryStoreSizeCleanupModeOption() {
            QueryStoreSizeCleanupPolicyOption queryStoreSizeCleanupPolicyOption = base.FragmentFactory.CreateFragment<QueryStoreSizeCleanupPolicyOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SIZE_BASED_CLEANUP_MODE");
                queryStoreSizeCleanupPolicyOption.OptionKind = QueryStoreOptionKind.Size_Based_Cleanup_Mode;
                TSql80ParserBaseInternal.UpdateTokenInfo(queryStoreSizeCleanupPolicyOption, token);
            }
            this.match(206);
            switch (this.LA(1)) {
                case 103:
                    token2 = this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        queryStoreSizeCleanupPolicyOption.Value = QueryStoreSizeCleanupPolicyOptionKind.OFF;
                        TSql80ParserBaseInternal.UpdateTokenInfo(queryStoreSizeCleanupPolicyOption, token2);
                    }
                    break;
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        queryStoreSizeCleanupPolicyOption.Value = QueryStoreSizeCleanupPolicyHelper.Instance.ParseOption(token3);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return queryStoreSizeCleanupPolicyOption;
        }

        public QueryStoreDataFlushIntervalOption queryStoreDataFlushIntervalOption() {
            QueryStoreDataFlushIntervalOption queryStoreDataFlushIntervalOption = base.FragmentFactory.CreateFragment<QueryStoreDataFlushIntervalOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(token, "DATA_FLUSH_INTERVAL_SECONDS")) {
                    TSql80ParserBaseInternal.Match(token, "DATA_FLUSH_INTERVAL_SECONDS");
                } else {
                    TSql80ParserBaseInternal.Match(token, "FLUSH_INTERVAL_SECONDS");
                }
                queryStoreDataFlushIntervalOption.OptionKind = QueryStoreOptionKind.Flush_Interval_Seconds;
                TSql80ParserBaseInternal.UpdateTokenInfo(queryStoreDataFlushIntervalOption, token);
            }
            this.match(206);
            IntegerLiteral flushInterval = this.integer();
            if (base.inputState.guessing == 0) {
                queryStoreDataFlushIntervalOption.FlushInterval = flushInterval;
            }
            return queryStoreDataFlushIntervalOption;
        }

        public QueryStoreIntervalLengthOption queryStoreIntervalLengthOption() {
            QueryStoreIntervalLengthOption queryStoreIntervalLengthOption = base.FragmentFactory.CreateFragment<QueryStoreIntervalLengthOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "INTERVAL_LENGTH_MINUTES");
                queryStoreIntervalLengthOption.OptionKind = QueryStoreOptionKind.Interval_Length_Minutes;
                TSql80ParserBaseInternal.UpdateTokenInfo(queryStoreIntervalLengthOption, token);
            }
            this.match(206);
            IntegerLiteral statsIntervalLength = this.integer();
            if (base.inputState.guessing == 0) {
                queryStoreIntervalLengthOption.StatsIntervalLength = statsIntervalLength;
            }
            return queryStoreIntervalLengthOption;
        }

        public QueryStoreMaxStorageSizeOption queryStoreMaxQdsSizeOption() {
            QueryStoreMaxStorageSizeOption queryStoreMaxStorageSizeOption = base.FragmentFactory.CreateFragment<QueryStoreMaxStorageSizeOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MAX_STORAGE_SIZE_MB");
                queryStoreMaxStorageSizeOption.OptionKind = QueryStoreOptionKind.Current_Storage_Size_MB;
                TSql80ParserBaseInternal.UpdateTokenInfo(queryStoreMaxStorageSizeOption, token);
            }
            this.match(206);
            IntegerLiteral maxQdsSize = this.integer();
            if (base.inputState.guessing == 0) {
                queryStoreMaxStorageSizeOption.MaxQdsSize = maxQdsSize;
            }
            return queryStoreMaxStorageSizeOption;
        }

        public QueryStoreMaxPlansPerQueryOption queryStoreMaxPlansPerQueryOption() {
            QueryStoreMaxPlansPerQueryOption queryStoreMaxPlansPerQueryOption = base.FragmentFactory.CreateFragment<QueryStoreMaxPlansPerQueryOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MAX_PLANS_PER_QUERY");
                queryStoreMaxPlansPerQueryOption.OptionKind = QueryStoreOptionKind.Max_Plans_Per_Query;
                TSql80ParserBaseInternal.UpdateTokenInfo(queryStoreMaxPlansPerQueryOption, token);
            }
            this.match(206);
            IntegerLiteral maxPlansPerQuery = this.integer();
            if (base.inputState.guessing == 0) {
                queryStoreMaxPlansPerQueryOption.MaxPlansPerQuery = maxPlansPerQuery;
            }
            return queryStoreMaxPlansPerQueryOption;
        }

        public QueryStoreTimeCleanupPolicyOption queryStoreTimeCleanupPolicy() {
            QueryStoreTimeCleanupPolicyOption queryStoreTimeCleanupPolicyOption = base.FragmentFactory.CreateFragment<QueryStoreTimeCleanupPolicyOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            this.match(191);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CLEANUP_POLICY");
                TSql80ParserBaseInternal.Match(token2, "STALE_QUERY_THRESHOLD_DAYS");
                queryStoreTimeCleanupPolicyOption.OptionKind = QueryStoreOptionKind.Stale_Query_Threshold_Days;
                TSql80ParserBaseInternal.UpdateTokenInfo(queryStoreTimeCleanupPolicyOption, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(queryStoreTimeCleanupPolicyOption, token2);
            }
            this.match(206);
            IntegerLiteral staleQueryThreshold = this.integer();
            if (base.inputState.guessing == 0) {
                queryStoreTimeCleanupPolicyOption.StaleQueryThreshold = staleQueryThreshold;
            }
            token3 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(queryStoreTimeCleanupPolicyOption, token3);
            }
            return queryStoreTimeCleanupPolicyOption;
        }

        public void automaticTuningOptions(AutomaticTuningDatabaseOption vParent) {
            IToken token = null;
            int num = 0;
            this.match(191);
            AutomaticTuningOption automaticTuningOption = this.automaticTuningOneOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)automaticTuningOption.OptionKind, automaticTuningOption);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, automaticTuningOption);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                automaticTuningOption = this.automaticTuningOneOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)automaticTuningOption.OptionKind, automaticTuningOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, automaticTuningOption);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public AutomaticTuningOption automaticTuningOneOption() {
            AutomaticTuningOption automaticTuningOption = null;
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("FORCE_LAST_GOOD_PLAN")) {
                return this.automaticTuningForceLastGoodPlanOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("CREATE_INDEX")) {
                return this.automaticTuningCreateIndexOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DROP_INDEX")) {
                return this.automaticTuningDropIndexOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAINTAIN_INDEX")) {
                return this.automaticTuningMaintainIndexOption();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public AutomaticTuningForceLastGoodPlanOption automaticTuningForceLastGoodPlanOption() {
            AutomaticTuningForceLastGoodPlanOption automaticTuningForceLastGoodPlanOption = base.FragmentFactory.CreateFragment<AutomaticTuningForceLastGoodPlanOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FORCE_LAST_GOOD_PLAN");
                automaticTuningForceLastGoodPlanOption.OptionKind = AutomaticTuningOptionKind.Force_Last_Good_Plan;
                TSql80ParserBaseInternal.UpdateTokenInfo(automaticTuningForceLastGoodPlanOption, token);
            }
            this.match(206);
            switch (this.LA(1)) {
                case 105:
                    token2 = this.LT(1);
                    this.match(105);
                    if (base.inputState.guessing == 0) {
                        automaticTuningForceLastGoodPlanOption.Value = AutomaticTuningOptionState.On;
                        TSql80ParserBaseInternal.UpdateTokenInfo(automaticTuningForceLastGoodPlanOption, token2);
                    }
                    break;
                case 103:
                    token3 = this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        automaticTuningForceLastGoodPlanOption.Value = AutomaticTuningOptionState.Off;
                        TSql80ParserBaseInternal.UpdateTokenInfo(automaticTuningForceLastGoodPlanOption, token3);
                    }
                    break;
                case 47:
                    token4 = this.LT(1);
                    this.match(47);
                    if (base.inputState.guessing == 0) {
                        automaticTuningForceLastGoodPlanOption.Value = AutomaticTuningOptionState.Default;
                        TSql80ParserBaseInternal.UpdateTokenInfo(automaticTuningForceLastGoodPlanOption, token4);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return automaticTuningForceLastGoodPlanOption;
        }

        public AutomaticTuningCreateIndexOption automaticTuningCreateIndexOption() {
            AutomaticTuningCreateIndexOption automaticTuningCreateIndexOption = base.FragmentFactory.CreateFragment<AutomaticTuningCreateIndexOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CREATE_INDEX");
                automaticTuningCreateIndexOption.OptionKind = AutomaticTuningOptionKind.Create_Index;
                TSql80ParserBaseInternal.UpdateTokenInfo(automaticTuningCreateIndexOption, token);
            }
            this.match(206);
            switch (this.LA(1)) {
                case 105:
                    token2 = this.LT(1);
                    this.match(105);
                    if (base.inputState.guessing == 0) {
                        automaticTuningCreateIndexOption.Value = AutomaticTuningOptionState.On;
                        TSql80ParserBaseInternal.UpdateTokenInfo(automaticTuningCreateIndexOption, token2);
                    }
                    break;
                case 103:
                    token3 = this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        automaticTuningCreateIndexOption.Value = AutomaticTuningOptionState.Off;
                        TSql80ParserBaseInternal.UpdateTokenInfo(automaticTuningCreateIndexOption, token3);
                    }
                    break;
                case 47:
                    token4 = this.LT(1);
                    this.match(47);
                    if (base.inputState.guessing == 0) {
                        automaticTuningCreateIndexOption.Value = AutomaticTuningOptionState.Default;
                        TSql80ParserBaseInternal.UpdateTokenInfo(automaticTuningCreateIndexOption, token4);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return automaticTuningCreateIndexOption;
        }

        public AutomaticTuningDropIndexOption automaticTuningDropIndexOption() {
            AutomaticTuningDropIndexOption automaticTuningDropIndexOption = base.FragmentFactory.CreateFragment<AutomaticTuningDropIndexOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "DROP_INDEX");
                automaticTuningDropIndexOption.OptionKind = AutomaticTuningOptionKind.Drop_Index;
                TSql80ParserBaseInternal.UpdateTokenInfo(automaticTuningDropIndexOption, token);
            }
            this.match(206);
            switch (this.LA(1)) {
                case 105:
                    token2 = this.LT(1);
                    this.match(105);
                    if (base.inputState.guessing == 0) {
                        automaticTuningDropIndexOption.Value = AutomaticTuningOptionState.On;
                        TSql80ParserBaseInternal.UpdateTokenInfo(automaticTuningDropIndexOption, token2);
                    }
                    break;
                case 103:
                    token3 = this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        automaticTuningDropIndexOption.Value = AutomaticTuningOptionState.Off;
                        TSql80ParserBaseInternal.UpdateTokenInfo(automaticTuningDropIndexOption, token3);
                    }
                    break;
                case 47:
                    token4 = this.LT(1);
                    this.match(47);
                    if (base.inputState.guessing == 0) {
                        automaticTuningDropIndexOption.Value = AutomaticTuningOptionState.Default;
                        TSql80ParserBaseInternal.UpdateTokenInfo(automaticTuningDropIndexOption, token4);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return automaticTuningDropIndexOption;
        }

        public AutomaticTuningMaintainIndexOption automaticTuningMaintainIndexOption() {
            AutomaticTuningMaintainIndexOption automaticTuningMaintainIndexOption = base.FragmentFactory.CreateFragment<AutomaticTuningMaintainIndexOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MAINTAIN_INDEX");
                automaticTuningMaintainIndexOption.OptionKind = AutomaticTuningOptionKind.Maintain_Index;
                TSql80ParserBaseInternal.UpdateTokenInfo(automaticTuningMaintainIndexOption, token);
            }
            this.match(206);
            switch (this.LA(1)) {
                case 105:
                    token2 = this.LT(1);
                    this.match(105);
                    if (base.inputState.guessing == 0) {
                        automaticTuningMaintainIndexOption.Value = AutomaticTuningOptionState.On;
                        TSql80ParserBaseInternal.UpdateTokenInfo(automaticTuningMaintainIndexOption, token2);
                    }
                    break;
                case 103:
                    token3 = this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        automaticTuningMaintainIndexOption.Value = AutomaticTuningOptionState.Off;
                        TSql80ParserBaseInternal.UpdateTokenInfo(automaticTuningMaintainIndexOption, token3);
                    }
                    break;
                case 47:
                    token4 = this.LT(1);
                    this.match(47);
                    if (base.inputState.guessing == 0) {
                        automaticTuningMaintainIndexOption.Value = AutomaticTuningOptionState.Default;
                        TSql80ParserBaseInternal.UpdateTokenInfo(automaticTuningMaintainIndexOption, token4);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return automaticTuningMaintainIndexOption;
        }

        public HadrAvailabilityGroupDatabaseOption hadrAvailabilityDbOption() {
            HadrAvailabilityGroupDatabaseOption hadrAvailabilityGroupDatabaseOption = base.FragmentFactory.CreateFragment<HadrAvailabilityGroupDatabaseOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(76);
            this.match(206);
            Identifier groupName = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "AVAILABILITY");
                hadrAvailabilityGroupDatabaseOption.GroupName = groupName;
                hadrAvailabilityGroupDatabaseOption.HadrOption = HadrDatabaseOptionKind.AvailabilityGroup;
            }
            return hadrAvailabilityGroupDatabaseOption;
        }

        public HadrDatabaseOption simpleHadrDbOption() {
            HadrDatabaseOption hadrDatabaseOption = base.FragmentFactory.CreateFragment<HadrDatabaseOption>();
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        if (TSql80ParserBaseInternal.TryMatch(token, "RESUME")) {
                            hadrDatabaseOption.HadrOption = HadrDatabaseOptionKind.Resume;
                        } else {
                            TSql80ParserBaseInternal.Match(token, "SUSPEND");
                            hadrDatabaseOption.HadrOption = HadrDatabaseOptionKind.Suspend;
                        }
                        TSql80ParserBaseInternal.UpdateTokenInfo(hadrDatabaseOption, token);
                    }
                    break;
                case 103:
                    token2 = this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        hadrDatabaseOption.HadrOption = HadrDatabaseOptionKind.Off;
                        TSql80ParserBaseInternal.UpdateTokenInfo(hadrDatabaseOption, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return hadrDatabaseOption;
        }

        public AuditSpecificationPart auditSpecificationDetailDb() {
            AuditSpecificationPart auditSpecificationPart = base.FragmentFactory.CreateFragment<AuditSpecificationPart>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            switch (this.LA(1)) {
                case 4:
                    token = this.LT(1);
                    this.match(4);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(auditSpecificationPart, token);
                        auditSpecificationPart.IsDrop = false;
                    }
                    break;
                case 54:
                    token2 = this.LT(1);
                    this.match(54);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(auditSpecificationPart, token2);
                        auditSpecificationPart.IsDrop = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            this.match(191);
            AuditSpecificationDetail details;
            if (TSql140ParserInternal.tokenSet_57_.member(this.LA(1)) && (this.LA(2) == 105 || this.LA(2) == 198)) {
                details = this.auditActionSpecification();
                goto IL_010e;
            }
            if (this.LA(1) == 232 && this.LA(2) == 192) {
                details = this.databaseAuditActionGroup();
                goto IL_010e;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_010e:
            token3 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                auditSpecificationPart.Details = details;
                TSql80ParserBaseInternal.UpdateTokenInfo(auditSpecificationPart, token3);
            }
            return auditSpecificationPart;
        }

        public CryptoMechanism dekEncryptor() {
            CryptoMechanism cryptoMechanism = base.FragmentFactory.CreateFragment<CryptoMechanism>();
            this.dekEncryptorType(cryptoMechanism);
            Identifier identifier = this.identifier();
            if (base.inputState.guessing == 0) {
                cryptoMechanism.Identifier = identifier;
            }
            return cryptoMechanism;
        }

        public CreateDatabaseAuditSpecificationStatement createDatabaseAuditSpecification() {
            CreateDatabaseAuditSpecificationStatement createDatabaseAuditSpecificationStatement = base.FragmentFactory.CreateFragment<CreateDatabaseAuditSpecificationStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier specificationName = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "AUDIT");
                TSql80ParserBaseInternal.Match(token2, "SPECIFICATION");
                createDatabaseAuditSpecificationStatement.SpecificationName = specificationName;
                base.ThrowPartialAstIfPhaseOne(createDatabaseAuditSpecificationStatement);
            }
            this.auditSpecificationForClause(createDatabaseAuditSpecificationStatement);
            bool flag = false;
            if (this.LA(1) == 4 && this.LA(2) == 191) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(4);
                    this.match(191);
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                AuditSpecificationPart item = this.createAuditSpecificationDetailDb();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createDatabaseAuditSpecificationStatement, createDatabaseAuditSpecificationStatement.Parts, item);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    item = this.createAuditSpecificationDetailDb();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createDatabaseAuditSpecificationStatement, createDatabaseAuditSpecificationStatement.Parts, item);
                    }
                }
                goto IL_0181;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0181;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0181:
            this.auditSpecificationStateOpt(createDatabaseAuditSpecificationStatement);
            return createDatabaseAuditSpecificationStatement;
        }

        public CreateDatabaseStatement createDatabase() {
            CreateDatabaseStatement createDatabaseStatement = base.FragmentFactory.CreateFragment<CreateDatabaseStatement>();
            Identifier databaseName = this.identifier();
            if (base.inputState.guessing == 0) {
                createDatabaseStatement.DatabaseName = databaseName;
                base.ThrowPartialAstIfPhaseOne(createDatabaseStatement);
            }
            if (this.LA(1) == 191 && this.LA(2) == 232 && (base.NextTokenMatches("MAXSIZE", 2) || base.NextTokenMatches("EDITION", 2) || base.NextTokenMatches("SERVICE_OBJECTIVE", 2))) {
                this.azureOptions(createDatabaseStatement, createDatabaseStatement.Options);
                goto IL_0450;
            }
            if (this.LA(1) == 9 && this.LA(2) == 232 && base.NextTokenMatches("COPY", 2)) {
                this.azureAsCopyOf(createDatabaseStatement);
                goto IL_0450;
            }
            if (TSql140ParserInternal.tokenSet_32_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_58_.member(this.LA(2))) {
                if (this.LA(1) == 232 && this.LA(2) == 206) {
                    ContainmentDatabaseOption containment = this.dbContainmentOption();
                    if (base.inputState.guessing == 0) {
                        createDatabaseStatement.Containment = containment;
                    }
                    goto IL_0157;
                }
                if (TSql140ParserInternal.tokenSet_32_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                    goto IL_0157;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_03df:
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.withCreateDbOptions(createDatabaseStatement);
                goto IL_0450;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0450;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0157:
            this.recoveryUnitList(createDatabaseStatement);
            this.collationOpt(createDatabaseStatement);
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 9:
                    case 67:
                        this.dbAddendums(createDatabaseStatement);
                        goto IL_03df;
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_03df;
                }
            } else {
                switch (num) {
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_03df;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0450:
            return createDatabaseStatement;
        }

        public CreateDatabaseEncryptionKeyStatement createDatabaseEncryptionKey() {
            CreateDatabaseEncryptionKeyStatement createDatabaseEncryptionKeyStatement = base.FragmentFactory.CreateFragment<CreateDatabaseEncryptionKeyStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            this.match(91);
            this.match(171);
            token2 = this.LT(1);
            this.match(232);
            this.match(206);
            token3 = this.LT(1);
            this.match(232);
            token4 = this.LT(1);
            this.match(232);
            this.match(18);
            CryptoMechanism encryptor = this.dekEncryptor();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
                TSql80ParserBaseInternal.Match(token4, "ENCRYPTION");
                TSql80ParserBaseInternal.Match(token2, "ALGORITHM");
                createDatabaseEncryptionKeyStatement.Algorithm = DatabaseEncryptionKeyAlgorithmHelper.Instance.ParseOption(token3);
                createDatabaseEncryptionKeyStatement.Encryptor = encryptor;
            }
            return createDatabaseEncryptionKeyStatement;
        }

        public void azureAsCopyOf(CreateDatabaseStatement vParent) {
            IToken token = null;
            this.match(9);
            token = this.LT(1);
            this.match(232);
            this.match(102);
            MultiPartIdentifier copyOf = this.multiPartIdentifier(2);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "COPY");
                vParent.CopyOf = copyOf;
            }
        }

        public void recoveryUnitList(CreateDatabaseStatement vParent) {
            IToken token = null;
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 9:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 26:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 67:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_0290;
                }
            } else {
                switch (num) {
                    case 105:
                        this.onDisk(vParent);
                        goto IL_0290;
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0290;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0290:
            if (this.LA(1) == 232 && this.LA(2) == 105 && base.NextTokenMatches("LOG")) {
                token = this.LT(1);
                this.match(232);
                this.match(105);
                this.fileDeclBodyList(vParent, vParent.LogOn);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "LOG");
                }
                return;
            }
            if (TSql140ParserInternal.tokenSet_59_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void collationOpt(ICollationSetter vParent) {
            switch (this.LA(1)) {
                case 1:
                case 4:
                case 6:
                case 7:
                case 9:
                case 10:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 21:
                case 22:
                case 23:
                case 28:
                case 30:
                case 33:
                case 35:
                case 36:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 54:
                case 55:
                case 56:
                case 58:
                case 59:
                case 60:
                case 61:
                case 64:
                case 67:
                case 68:
                case 71:
                case 72:
                case 74:
                case 75:
                case 76:
                case 77:
                case 79:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 92:
                case 93:
                case 94:
                case 95:
                case 99:
                case 100:
                case 105:
                case 106:
                case 111:
                case 112:
                case 113:
                case 114:
                case 116:
                case 118:
                case 119:
                case 123:
                case 125:
                case 126:
                case 127:
                case 129:
                case 131:
                case 132:
                case 133:
                case 134:
                case 136:
                case 138:
                case 140:
                case 142:
                case 143:
                case 144:
                case 150:
                case 151:
                case 156:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 164:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 176:
                case 177:
                case 178:
                case 182:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 195:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 204:
                case 205:
                case 206:
                case 208:
                case 209:
                case 210:
                case 219:
                case 220:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                    break;
                case 26:
                    this.collation(vParent);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void dbAddendums(CreateDatabaseStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 67:
                    this.match(67);
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        vParent.AttachMode = AttachModeHelper.Instance.ParseOption(token);
                        if (vParent.AttachMode == AttachMode.Load) {
                            TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                        }
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                    }
                    break;
                case 9: {
                        this.match(9);
                        token2 = this.LT(1);
                        this.match(232);
                        this.match(102);
                        Identifier databaseSnapshot = this.identifier();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token2, "SNAPSHOT");
                            vParent.DatabaseSnapshot = databaseSnapshot;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void withCreateDbOptions(CreateDatabaseStatement vParent) {
            ulong num = 0uL;
            this.match(171);
            DatabaseOption item = this.createAlterDbOption(ref num);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.createAlterDbOption(ref num);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, item);
                }
            }
        }

        public DatabaseOption azureOption() {
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXSIZE")) {
                return this.azureMaxSizeDatabaseOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("EDITION")) {
                return this.azureEditionDatabaseOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                return this.azureServiceObjectiveDatabaseOption();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public MaxSizeDatabaseOption azureMaxSizeDatabaseOption() {
            MaxSizeDatabaseOption maxSizeDatabaseOption = base.FragmentFactory.CreateFragment<MaxSizeDatabaseOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal maxSize = this.integer();
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MAXSIZE");
                maxSizeDatabaseOption.OptionKind = DatabaseOptionKind.MaxSize;
                TSql80ParserBaseInternal.UpdateTokenInfo(maxSizeDatabaseOption, token);
                maxSizeDatabaseOption.MaxSize = maxSize;
                TSql80ParserBaseInternal.Match(token2, "GB", "MB");
                if (TSql80ParserBaseInternal.TryMatch(token2, "GB")) {
                    maxSizeDatabaseOption.Units = MemoryUnit.GB;
                } else {
                    TSql80ParserBaseInternal.Match(token2, "MB");
                    maxSizeDatabaseOption.Units = MemoryUnit.MB;
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(maxSizeDatabaseOption, token2);
            }
            return maxSizeDatabaseOption;
        }

        public LiteralDatabaseOption azureEditionDatabaseOption() {
            LiteralDatabaseOption literalDatabaseOption = base.FragmentFactory.CreateFragment<LiteralDatabaseOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal value = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "EDITION");
                TSql80ParserBaseInternal.UpdateTokenInfo(literalDatabaseOption, token);
                literalDatabaseOption.OptionKind = DatabaseOptionKind.Edition;
                literalDatabaseOption.Value = value;
            }
            return literalDatabaseOption;
        }

        public LiteralDatabaseOption azureServiceObjectiveDatabaseOption() {
            LiteralDatabaseOption literalDatabaseOption = base.FragmentFactory.CreateFragment<LiteralDatabaseOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal value = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SERVICE_OBJECTIVE");
                TSql80ParserBaseInternal.UpdateTokenInfo(literalDatabaseOption, token);
                literalDatabaseOption.OptionKind = DatabaseOptionKind.ServiceObjective;
                literalDatabaseOption.Value = value;
            }
            return literalDatabaseOption;
        }

        public MultiPartIdentifier multiPartIdentifier(int vMaxNumber) {
            MultiPartIdentifier multiPartIdentifier = base.FragmentFactory.CreateFragment<MultiPartIdentifier>();
            List<Identifier> otherCollection = this.identifierList(vMaxNumber);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(multiPartIdentifier, multiPartIdentifier.Identifiers, otherCollection);
            }
            return multiPartIdentifier;
        }

        public void onDisk(CreateDatabaseStatement vParent) {
            FileGroupDefinition fileGroupDefinition = base.FragmentFactory.CreateFragment<FileGroupDefinition>();
            vParent.FileGroups.Add(fileGroupDefinition);
            this.match(105);
            FileDeclaration fileDeclaration = this.fileDecl(false);
            if (base.inputState.guessing == 0) {
                fileGroupDefinition.FileDeclarations.Add(fileDeclaration);
                vParent.UpdateTokenInfo(fileDeclaration);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                switch (this.LA(1)) {
                    case 118:
                    case 191:
                        fileDeclaration = this.fileDecl(false);
                        if (base.inputState.guessing == 0) {
                            fileGroupDefinition.FileDeclarations.Add(fileDeclaration);
                            vParent.UpdateTokenInfo(fileDeclaration);
                        }
                        break;
                    case 232: {
                            FileGroupDefinition fileGroupDefinition2 = this.fileGroupDecl();
                            if (base.inputState.guessing == 0) {
                                fileGroupDefinition = fileGroupDefinition2;
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.FileGroups, fileGroupDefinition);
                            }
                            break;
                        }
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
            }
        }

        public FileGroupDefinition fileGroupDecl() {
            FileGroupDefinition fileGroupDefinition = base.FragmentFactory.CreateFragment<FileGroupDefinition>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FILEGROUP");
                TSql80ParserBaseInternal.UpdateTokenInfo(fileGroupDefinition, token);
                fileGroupDefinition.Name = name;
            }
            switch (this.LA(1)) {
                case 31:
                    this.match(31);
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        if (TSql80ParserBaseInternal.TryMatch(token2, "FILESTREAM")) {
                            fileGroupDefinition.ContainsFileStream = true;
                        } else {
                            TSql80ParserBaseInternal.Match(token2, "MEMORY_OPTIMIZED_DATA");
                            fileGroupDefinition.ContainsMemoryOptimizedData = true;
                        }
                        TSql80ParserBaseInternal.UpdateTokenInfo(fileGroupDefinition, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 47:
                case 191:
                    break;
            }
            switch (this.LA(1)) {
                case 47:
                    this.match(47);
                    if (base.inputState.guessing == 0) {
                        fileGroupDefinition.IsDefault = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 191:
                    break;
            }
            FileDeclaration item = this.fileDeclBody(false);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(fileGroupDefinition, fileGroupDefinition.FileDeclarations, item);
            }
            return fileGroupDefinition;
        }

        public FileDeclaration fileDeclBody(bool isAlterDbModifyFileStatement) {
            FileDeclaration fileDeclaration = base.FragmentFactory.CreateFragment<FileDeclaration>();
            IToken token = null;
            IToken token2 = null;
            int num = 0;
            token = this.LT(1);
            this.match(191);
            FileDeclarationOption fileDeclarationOption = this.fileOption(isAlterDbModifyFileStatement);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)fileDeclarationOption.OptionKind, fileDeclarationOption);
                TSql80ParserBaseInternal.UpdateTokenInfo(fileDeclaration, token);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(fileDeclaration, fileDeclaration.Options, fileDeclarationOption);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                fileDeclarationOption = this.fileOption(isAlterDbModifyFileStatement);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)fileDeclarationOption.OptionKind, fileDeclarationOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(fileDeclaration, fileDeclaration.Options, fileDeclarationOption);
                }
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(fileDeclaration, token2);
                if (!isAlterDbModifyFileStatement && (num & 8) == 0) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46065", fileDeclaration, TSqlParserResource.SQL46065Message);
                }
            }
            return fileDeclaration;
        }

        public FileDeclarationOption fileOption(bool newNameAllowed) {
            FileDeclarationOption fileDeclarationOption = null;
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("NAME")) {
                fileDeclarationOption = this.nameFileOption();
                goto IL_01b6;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("FILENAME")) {
                fileDeclarationOption = this.fileNameFileOption();
                goto IL_01b6;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SIZE")) {
                fileDeclarationOption = this.sizeFileOption();
                goto IL_01b6;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXSIZE")) {
                fileDeclarationOption = this.maxSizeFileOption();
                goto IL_01b6;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("FILEGROWTH")) {
                fileDeclarationOption = this.fileGrowthFileOption();
                goto IL_01b6;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("NEWNAME")) {
                fileDeclarationOption = this.newNameFileOption();
                if (base.inputState.guessing == 0 && !newNameAllowed) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46062", fileDeclarationOption, TSqlParserResource.SQL46062Message);
                }
                goto IL_01b6;
            }
            if (this.LA(1) == 232 && (this.LA(2) == 192 || this.LA(2) == 198) && base.NextTokenMatches("OFFLINE")) {
                fileDeclarationOption = this.offlineFileOption();
                goto IL_01b6;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_01b6:
            return fileDeclarationOption;
        }

        public NameFileDeclarationOption nameFileOption() {
            NameFileDeclarationOption nameFileDeclarationOption = base.FragmentFactory.CreateFragment<NameFileDeclarationOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            IdentifierOrValueExpression logicalFileName = this.nonEmptyStringOrIdentifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "NAME");
                nameFileDeclarationOption.OptionKind = FileDeclarationOptionKind.Name;
                TSql80ParserBaseInternal.UpdateTokenInfo(nameFileDeclarationOption, token);
                nameFileDeclarationOption.LogicalFileName = logicalFileName;
                nameFileDeclarationOption.IsNewName = false;
            }
            return nameFileDeclarationOption;
        }

        public FileNameFileDeclarationOption fileNameFileOption() {
            FileNameFileDeclarationOption fileNameFileDeclarationOption = base.FragmentFactory.CreateFragment<FileNameFileDeclarationOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal oSFileName = this.nonEmptyString();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FILENAME");
                fileNameFileDeclarationOption.OptionKind = FileDeclarationOptionKind.FileName;
                TSql80ParserBaseInternal.UpdateTokenInfo(fileNameFileDeclarationOption, token);
                fileNameFileDeclarationOption.OSFileName = oSFileName;
            }
            return fileNameFileDeclarationOption;
        }

        public SizeFileDeclarationOption sizeFileOption() {
            SizeFileDeclarationOption sizeFileDeclarationOption = base.FragmentFactory.CreateFragment<SizeFileDeclarationOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal size = this.integer();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SIZE");
                sizeFileDeclarationOption.OptionKind = FileDeclarationOptionKind.Size;
                TSql80ParserBaseInternal.UpdateTokenInfo(sizeFileDeclarationOption, token);
                sizeFileDeclarationOption.Size = size;
            }
            switch (this.LA(1)) {
                case 232: {
                        MemoryUnit units = this.memUnit(sizeFileDeclarationOption);
                        if (base.inputState.guessing == 0) {
                            sizeFileDeclarationOption.Units = units;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                case 198:
                    break;
            }
            return sizeFileDeclarationOption;
        }

        public MaxSizeFileDeclarationOption maxSizeFileOption() {
            MaxSizeFileDeclarationOption maxSizeFileDeclarationOption = base.FragmentFactory.CreateFragment<MaxSizeFileDeclarationOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MAXSIZE");
                TSql80ParserBaseInternal.UpdateTokenInfo(maxSizeFileDeclarationOption, token);
                maxSizeFileDeclarationOption.OptionKind = FileDeclarationOptionKind.MaxSize;
            }
            switch (this.LA(1)) {
                case 221: {
                        Literal maxSize = this.integer();
                        if (base.inputState.guessing == 0) {
                            maxSizeFileDeclarationOption.MaxSize = maxSize;
                        }
                        switch (this.LA(1)) {
                            case 232: {
                                    MemoryUnit units = this.memUnit(maxSizeFileDeclarationOption);
                                    if (base.inputState.guessing == 0) {
                                        maxSizeFileDeclarationOption.Units = units;
                                    }
                                    break;
                                }
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 192:
                            case 198:
                                break;
                        }
                        break;
                    }
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "UNLIMITED");
                        maxSizeFileDeclarationOption.Unlimited = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return maxSizeFileDeclarationOption;
        }

        public FileGrowthFileDeclarationOption fileGrowthFileOption() {
            FileGrowthFileDeclarationOption fileGrowthFileDeclarationOption = base.FragmentFactory.CreateFragment<FileGrowthFileDeclarationOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FILEGROWTH");
                TSql80ParserBaseInternal.UpdateTokenInfo(fileGrowthFileDeclarationOption, token);
                fileGrowthFileDeclarationOption.OptionKind = FileDeclarationOptionKind.FileGrowth;
            }
            Literal growthIncrement = this.integer();
            if (base.inputState.guessing == 0) {
                fileGrowthFileDeclarationOption.GrowthIncrement = growthIncrement;
            }
            switch (this.LA(1)) {
                case 232: {
                        MemoryUnit units = this.memUnit(fileGrowthFileDeclarationOption);
                        if (base.inputState.guessing == 0) {
                            fileGrowthFileDeclarationOption.Units = units;
                        }
                        break;
                    }
                case 189:
                    token2 = this.LT(1);
                    this.match(189);
                    if (base.inputState.guessing == 0) {
                        fileGrowthFileDeclarationOption.Units = MemoryUnit.Percent;
                        TSql80ParserBaseInternal.UpdateTokenInfo(fileGrowthFileDeclarationOption, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                case 198:
                    break;
            }
            return fileGrowthFileDeclarationOption;
        }

        public NameFileDeclarationOption newNameFileOption() {
            NameFileDeclarationOption nameFileDeclarationOption = base.FragmentFactory.CreateFragment<NameFileDeclarationOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            IdentifierOrValueExpression logicalFileName = this.nonEmptyStringOrIdentifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "NEWNAME");
                nameFileDeclarationOption.OptionKind = FileDeclarationOptionKind.NewName;
                TSql80ParserBaseInternal.UpdateTokenInfo(nameFileDeclarationOption, token);
                nameFileDeclarationOption.LogicalFileName = logicalFileName;
                nameFileDeclarationOption.IsNewName = true;
            }
            return nameFileDeclarationOption;
        }

        public FileDeclarationOption offlineFileOption() {
            FileDeclarationOption fileDeclarationOption = base.FragmentFactory.CreateFragment<FileDeclarationOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "OFFLINE");
                fileDeclarationOption.OptionKind = FileDeclarationOptionKind.Offline;
                TSql80ParserBaseInternal.UpdateTokenInfo(fileDeclarationOption, token);
            }
            return fileDeclarationOption;
        }

        public IdentifierOrValueExpression nonEmptyStringOrIdentifier() {
            IdentifierOrValueExpression identifierOrValueExpression = base.FragmentFactory.CreateFragment<IdentifierOrValueExpression>();
            switch (this.LA(1)) {
                case 230:
                case 231: {
                        Literal valueExpression = this.nonEmptyString();
                        if (base.inputState.guessing == 0) {
                            identifierOrValueExpression.ValueExpression = valueExpression;
                        }
                        break;
                    }
                case 232:
                case 233: {
                        Identifier identifier = this.identifier();
                        if (base.inputState.guessing == 0) {
                            identifierOrValueExpression.Identifier = identifier;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return identifierOrValueExpression;
        }

        public StringLiteral nonEmptyString() {
            StringLiteral stringLiteral = this.stringLiteral();
            if (base.inputState.guessing == 0 && (stringLiteral.Value == null || stringLiteral.Value.Length == 0)) {
                TSql80ParserBaseInternal.ThrowParseErrorException("SQL46063", stringLiteral, TSqlParserResource.SQL46063Message);
            }
            return stringLiteral;
        }

        public DatabaseOption createDbServiceBrokerOption() {
            DatabaseOption databaseOption = base.FragmentFactory.CreateFragment<DatabaseOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                switch (ServiceBrokerOptionsHelper.Instance.ParseOption(token)) {
                    case ServiceBrokerOption.EnableBroker:
                        databaseOption.OptionKind = DatabaseOptionKind.EnableBroker;
                        break;
                    case ServiceBrokerOption.NewBroker:
                        databaseOption.OptionKind = DatabaseOptionKind.NewBroker;
                        break;
                    case ServiceBrokerOption.ErrorBrokerConversations:
                        databaseOption.OptionKind = DatabaseOptionKind.ErrorBrokerConversations;
                        break;
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(databaseOption, token);
            }
            return databaseOption;
        }

        public DatabaseOption restrictedUserCreateDbOption() {
            DatabaseOption databaseOption = base.FragmentFactory.CreateFragment<DatabaseOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "RESTRICTED_USER");
                databaseOption.OptionKind = DatabaseOptionKind.RestrictedUser;
                TSql80ParserBaseInternal.UpdateTokenInfo(databaseOption, token);
            }
            return databaseOption;
        }

        public OnOffDatabaseOption createDbOnOffOption() {
            OnOffDatabaseOption onOffDatabaseOption = base.FragmentFactory.CreateFragment<OnOffDatabaseOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            OptionState optionState = this.optionOnOff(onOffDatabaseOption);
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(token, "DB_CHAINING")) {
                    onOffDatabaseOption.OptionKind = DatabaseOptionKind.DBChaining;
                } else {
                    TSql80ParserBaseInternal.Match(token, "TRUSTWORTHY");
                    onOffDatabaseOption.OptionKind = DatabaseOptionKind.Trustworthy;
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(onOffDatabaseOption, token);
                onOffDatabaseOption.OptionState = optionState;
            }
            return onOffDatabaseOption;
        }

        public FileStreamDatabaseOption fileStreamCreateAlterDbOption() {
            FileStreamDatabaseOption fileStreamDatabaseOption = base.FragmentFactory.CreateFragment<FileStreamDatabaseOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(191);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FILESTREAM");
                fileStreamDatabaseOption.OptionKind = DatabaseOptionKind.FileStream;
                TSql80ParserBaseInternal.UpdateTokenInfo(fileStreamDatabaseOption, token);
            }
            this.fileStreamOption(fileStreamDatabaseOption);
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                this.fileStreamOption(fileStreamDatabaseOption);
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(fileStreamDatabaseOption, token2);
            }
            return fileStreamDatabaseOption;
        }

        public DatabaseOption createAlterDbEqualsSignOption() {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            switch (this.LA(1)) {
                case 221:
                    return this.createAlterDbLiteralOption(token);
                case 232:
                case 233:
                    return this.createAlterDbIdentifierOption(token);
                case 103:
                case 105:
                    return this.createAlterDbOnOffOption(token);
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public LiteralDatabaseOption createAlterDbLiteralOption(IToken tOption) {
            LiteralDatabaseOption literalDatabaseOption = base.FragmentFactory.CreateFragment<LiteralDatabaseOption>();
            IntegerLiteral integerLiteral = this.integer();
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(tOption, "DEFAULT_LANGUAGE")) {
                    literalDatabaseOption.OptionKind = DatabaseOptionKind.DefaultLanguage;
                    TSql80ParserBaseInternal.CheckIfValidLanguageInteger(integerLiteral);
                } else if (TSql80ParserBaseInternal.TryMatch(tOption, "DEFAULT_FULLTEXT_LANGUAGE")) {
                    literalDatabaseOption.OptionKind = DatabaseOptionKind.DefaultFullTextLanguage;
                    TSql80ParserBaseInternal.CheckIfValidLanguageInteger(integerLiteral);
                } else {
                    TSql80ParserBaseInternal.Match(tOption, "TWO_DIGIT_YEAR_CUTOFF");
                    literalDatabaseOption.OptionKind = DatabaseOptionKind.TwoDigitYearCutoff;
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(literalDatabaseOption, tOption);
                literalDatabaseOption.Value = integerLiteral;
            }
            return literalDatabaseOption;
        }

        public IdentifierDatabaseOption createAlterDbIdentifierOption(IToken tOption) {
            IdentifierDatabaseOption identifierDatabaseOption = base.FragmentFactory.CreateFragment<IdentifierDatabaseOption>();
            Identifier identifier = this.identifier();
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(tOption, "DEFAULT_LANGUAGE")) {
                    identifierDatabaseOption.OptionKind = DatabaseOptionKind.DefaultLanguage;
                    TSql80ParserBaseInternal.CheckIfValidLanguageIdentifier(identifier);
                } else if (TSql80ParserBaseInternal.TryMatch(tOption, "DEFAULT_FULLTEXT_LANGUAGE")) {
                    identifierDatabaseOption.OptionKind = DatabaseOptionKind.DefaultFullTextLanguage;
                    TSql80ParserBaseInternal.CheckIfValidLanguageIdentifier(identifier);
                } else {
                    TSql80ParserBaseInternal.Match(tOption, "CATALOG_COLLATION");
                    identifierDatabaseOption.OptionKind = DatabaseOptionKind.CatalogCollation;
                    if (!TSql80ParserBaseInternal.TryMatch(identifier, "DATABASE_DEFAULT")) {
                        TSql80ParserBaseInternal.Match(identifier, "SQL_LATIN1_GENERAL_CP1_CI_AS");
                    }
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(identifierDatabaseOption, tOption);
                identifierDatabaseOption.Value = identifier;
            }
            return identifierDatabaseOption;
        }

        public OnOffDatabaseOption createAlterDbOnOffOption(IToken tOption) {
            OnOffDatabaseOption onOffDatabaseOption = base.FragmentFactory.CreateFragment<OnOffDatabaseOption>();
            OptionState optionState = this.optionOnOff(onOffDatabaseOption);
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(tOption, "NESTED_TRIGGERS")) {
                    onOffDatabaseOption.OptionKind = DatabaseOptionKind.NestedTriggers;
                } else {
                    TSql80ParserBaseInternal.Match(tOption, "TRANSFORM_NOISE_WORDS");
                    onOffDatabaseOption.OptionKind = DatabaseOptionKind.TransformNoiseWords;
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(onOffDatabaseOption, tOption);
                onOffDatabaseOption.OptionState = optionState;
            }
            return onOffDatabaseOption;
        }

        public void fileStreamOption(FileStreamDatabaseOption vParent) {
            IToken token = null;
            IToken token2 = null;
            NonTransactedFileStreamAccess? nullable = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            switch (this.LA(1)) {
                case 72:
                case 103:
                case 232:
                    switch (this.LA(1)) {
                        case 103:
                            this.match(103);
                            if (base.inputState.guessing == 0) {
                                nullable = NonTransactedFileStreamAccess.Off;
                            }
                            break;
                        case 72:
                            this.match(72);
                            if (base.inputState.guessing == 0) {
                                nullable = NonTransactedFileStreamAccess.Full;
                            }
                            break;
                        case 232:
                            token2 = this.LT(1);
                            this.match(232);
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.Match(token2, "READ_ONLY");
                                nullable = NonTransactedFileStreamAccess.ReadOnly;
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token, "NON_TRANSACTED_ACCESS");
                        if (vParent.NonTransactedAccess.HasValue) {
                            TSql80ParserBaseInternal.ThrowParseErrorException("SQL46049", token, TSqlParserResource.SQL46049Message, token.getText());
                        }
                        vParent.NonTransactedAccess = nullable.Value;
                    }
                    break;
                case 100:
                case 230:
                case 231: {
                        Literal directoryName = this.stringLiteralOrNull();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token, "DIRECTORY_NAME");
                            if (vParent.DirectoryName != null) {
                                TSql80ParserBaseInternal.ThrowParseErrorException("SQL46049", token, TSqlParserResource.SQL46049Message, token.getText());
                            }
                            vParent.DirectoryName = directoryName;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public Literal stringLiteralOrNull() {
            switch (this.LA(1)) {
                case 230:
                case 231:
                    return this.stringLiteral();
                case 100:
                    return this.nullLiteral();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void remoteDataArchiveDbSettingsList(RemoteDataArchiveDatabaseOption vParent) {
            IToken token = null;
            int num = 0;
            Identifier vOption = null;
            this.match(191);
            RemoteDataArchiveDatabaseSetting remoteDataArchiveDatabaseSetting = this.remoteDataArchiveDbSetting(ref vOption);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)remoteDataArchiveDatabaseSetting.SettingKind, vOption);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Settings, remoteDataArchiveDatabaseSetting);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.LT(1);
                this.match(198);
                remoteDataArchiveDatabaseSetting = this.remoteDataArchiveDbSetting(ref vOption);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)remoteDataArchiveDatabaseSetting.SettingKind, vOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Settings, remoteDataArchiveDatabaseSetting);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public RemoteDataArchiveDatabaseSetting remoteDataArchiveDbSetting(ref Identifier rdaOptionIdentifier) {
            RemoteDataArchiveDatabaseSetting result = null;
            if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 206 && base.NextTokenMatches("SERVER")) {
                rdaOptionIdentifier = this.identifier();
                this.match(206);
                StringLiteral server = this.stringLiteral();
                if (base.inputState.guessing == 0) {
                    RemoteDataArchiveDbServerSetting remoteDataArchiveDbServerSetting = base.FragmentFactory.CreateFragment<RemoteDataArchiveDbServerSetting>();
                    remoteDataArchiveDbServerSetting.SettingKind = RemoteDataArchiveDatabaseSettingKind.Server;
                    remoteDataArchiveDbServerSetting.Server = server;
                    result = remoteDataArchiveDbServerSetting;
                }
                goto IL_01a9;
            }
            if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 206 && base.NextTokenMatches("CREDENTIAL")) {
                rdaOptionIdentifier = this.identifier();
                this.match(206);
                Identifier credential = this.identifier();
                if (base.inputState.guessing == 0) {
                    RemoteDataArchiveDbCredentialSetting remoteDataArchiveDbCredentialSetting = base.FragmentFactory.CreateFragment<RemoteDataArchiveDbCredentialSetting>();
                    remoteDataArchiveDbCredentialSetting.SettingKind = RemoteDataArchiveDatabaseSettingKind.Credential;
                    remoteDataArchiveDbCredentialSetting.Credential = credential;
                    result = remoteDataArchiveDbCredentialSetting;
                }
                goto IL_01a9;
            }
            if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 206 && base.NextTokenMatches("FEDERATED_SERVICE_ACCOUNT")) {
                rdaOptionIdentifier = this.identifier();
                this.match(206);
                OnOffOptionValue onOffOptionValue = this.onOffOptionValue();
                if (base.inputState.guessing == 0) {
                    RemoteDataArchiveDbFederatedServiceAccountSetting remoteDataArchiveDbFederatedServiceAccountSetting = base.FragmentFactory.CreateFragment<RemoteDataArchiveDbFederatedServiceAccountSetting>();
                    remoteDataArchiveDbFederatedServiceAccountSetting.SettingKind = RemoteDataArchiveDatabaseSettingKind.FederatedServiceAccount;
                    remoteDataArchiveDbFederatedServiceAccountSetting.IsOn = (onOffOptionValue.OptionState == OptionState.On);
                    result = remoteDataArchiveDbFederatedServiceAccountSetting;
                }
                goto IL_01a9;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_01a9:
            return result;
        }

        public AuditSpecificationPart createAuditSpecificationDetailDb() {
            AuditSpecificationPart auditSpecificationPart = base.FragmentFactory.CreateFragment<AuditSpecificationPart>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(4);
            this.match(191);
            AuditSpecificationDetail details;
            if (TSql140ParserInternal.tokenSet_57_.member(this.LA(1)) && (this.LA(2) == 105 || this.LA(2) == 198)) {
                details = this.auditActionSpecification();
                goto IL_0097;
            }
            if (this.LA(1) == 232 && this.LA(2) == 192) {
                details = this.databaseAuditActionGroup();
                goto IL_0097;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0097:
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                auditSpecificationPart.Details = details;
                auditSpecificationPart.IsDrop = false;
                TSql80ParserBaseInternal.UpdateTokenInfo(auditSpecificationPart, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(auditSpecificationPart, token2);
            }
            return auditSpecificationPart;
        }

        public AuditActionSpecification auditActionSpecification() {
            AuditActionSpecification auditActionSpecification = base.FragmentFactory.CreateFragment<AuditActionSpecification>();
            DatabaseAuditAction item = this.actionWithQual();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(auditActionSpecification, auditActionSpecification.Actions, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.actionWithQual();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(auditActionSpecification, auditActionSpecification.Actions, item);
                }
            }
            SecurityTargetObject targetObject = this.securityTargetObject(true);
            if (base.inputState.guessing == 0) {
                auditActionSpecification.TargetObject = targetObject;
            }
            this.match(18);
            SecurityPrincipal item2 = this.principal();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(auditActionSpecification, auditActionSpecification.Principals, item2);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item2 = this.principal();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(auditActionSpecification, auditActionSpecification.Principals, item2);
                }
            }
            return auditActionSpecification;
        }

        public AuditActionGroupReference databaseAuditActionGroup() {
            AuditActionGroupReference auditActionGroupReference = base.FragmentFactory.CreateFragment<AuditActionGroupReference>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                auditActionGroupReference.Group = DatabaseAuditActionGroupHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
                TSql80ParserBaseInternal.UpdateTokenInfo(auditActionGroupReference, token);
            }
            return auditActionGroupReference;
        }

        public AuditActionGroupReference serverAuditActionGroup() {
            AuditActionGroupReference auditActionGroupReference = base.FragmentFactory.CreateFragment<AuditActionGroupReference>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                auditActionGroupReference.Group = ServerAuditActionGroupHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
                TSql80ParserBaseInternal.UpdateTokenInfo(auditActionGroupReference, token);
            }
            return auditActionGroupReference;
        }

        public DatabaseAuditAction actionWithQual() {
            DatabaseAuditAction databaseAuditAction = base.FragmentFactory.CreateFragment<DatabaseAuditAction>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            IToken token6 = null;
            IToken token7 = null;
            switch (this.LA(1)) {
                case 140:
                    token = this.LT(1);
                    this.match(140);
                    if (base.inputState.guessing == 0) {
                        databaseAuditAction.ActionKind = DatabaseAuditActionKind.Select;
                        TSql80ParserBaseInternal.UpdateTokenInfo(databaseAuditAction, token);
                    }
                    break;
                case 160:
                    token2 = this.LT(1);
                    this.match(160);
                    if (base.inputState.guessing == 0) {
                        databaseAuditAction.ActionKind = DatabaseAuditActionKind.Update;
                        TSql80ParserBaseInternal.UpdateTokenInfo(databaseAuditAction, token2);
                    }
                    break;
                case 86:
                    token3 = this.LT(1);
                    this.match(86);
                    if (base.inputState.guessing == 0) {
                        databaseAuditAction.ActionKind = DatabaseAuditActionKind.Insert;
                        TSql80ParserBaseInternal.UpdateTokenInfo(databaseAuditAction, token3);
                    }
                    break;
                case 48:
                    token4 = this.LT(1);
                    this.match(48);
                    if (base.inputState.guessing == 0) {
                        databaseAuditAction.ActionKind = DatabaseAuditActionKind.Delete;
                        TSql80ParserBaseInternal.UpdateTokenInfo(databaseAuditAction, token4);
                    }
                    break;
                case 61:
                    token5 = this.LT(1);
                    this.match(61);
                    if (base.inputState.guessing == 0) {
                        databaseAuditAction.ActionKind = DatabaseAuditActionKind.Execute;
                        TSql80ParserBaseInternal.UpdateTokenInfo(databaseAuditAction, token5);
                    }
                    break;
                case 232:
                    token6 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token6, "RECEIVE");
                        databaseAuditAction.ActionKind = DatabaseAuditActionKind.Receive;
                        TSql80ParserBaseInternal.UpdateTokenInfo(databaseAuditAction, token6);
                    }
                    break;
                case 127:
                    token7 = this.LT(1);
                    this.match(127);
                    if (base.inputState.guessing == 0) {
                        databaseAuditAction.ActionKind = DatabaseAuditActionKind.References;
                        TSql80ParserBaseInternal.UpdateTokenInfo(databaseAuditAction, token7);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return databaseAuditAction;
        }

        public SecurityTargetObject securityTargetObject(bool vColumnsDisallowed) {
            SecurityTargetObject securityTargetObject = base.FragmentFactory.CreateFragment<SecurityTargetObject>();
            this.securityTargetObjectCommon(securityTargetObject);
            switch (this.LA(1)) {
                case 191:
                    this.columnNameList(securityTargetObject, securityTargetObject.Columns);
                    if (base.inputState.guessing == 0 && vColumnsDisallowed) {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(securityTargetObject.Columns[0]);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 18:
                case 71:
                case 151:
                    break;
            }
            return securityTargetObject;
        }

        public SecurityPrincipal principal() {
            SecurityPrincipal securityPrincipal = base.FragmentFactory.CreateFragment<SecurityPrincipal>();
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 122:
                    token = this.LT(1);
                    this.match(122);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(securityPrincipal, token);
                        securityPrincipal.PrincipalType = PrincipalType.Public;
                    }
                    break;
                case 100:
                    token2 = this.LT(1);
                    this.match(100);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(securityPrincipal, token2);
                        securityPrincipal.PrincipalType = PrincipalType.Null;
                    }
                    break;
                case 232:
                case 233: {
                        Identifier identifier = this.identifier();
                        if (base.inputState.guessing == 0) {
                            securityPrincipal.PrincipalType = PrincipalType.Identifier;
                            securityPrincipal.Identifier = identifier;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return securityPrincipal;
        }

        public void dekEncryptorType(CryptoMechanism vParent) {
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SERVER");
            }
            if (this.LA(1) == 232 && (this.LA(2) == 206 || this.LA(2) == 232 || this.LA(2) == 233)) {
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "CERTIFICATE");
                    vParent.CryptoMechanismType = CryptoMechanismType.Certificate;
                }
                return;
            }
            if (this.LA(1) == 232 && this.LA(2) == 91) {
                token3 = this.LT(1);
                this.match(232);
                this.match(91);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token3, "ASYMMETRIC");
                    vParent.CryptoMechanismType = CryptoMechanismType.AsymmetricKey;
                }
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public BackupCertificateStatement backupCertificateStatement() {
            BackupCertificateStatement backupCertificateStatement = base.FragmentFactory.CreateFragment<BackupCertificateStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            this.match(151);
            this.match(65);
            this.match(206);
            Literal file = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
                backupCertificateStatement.Name = name;
                backupCertificateStatement.File = file;
            }
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                this.privateKeySpec(backupCertificateStatement);
                goto IL_00dc;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00dc;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00dc:
            return backupCertificateStatement;
        }

        public BackupServiceMasterKeyStatement backupServiceMasterKeyStatement() {
            BackupServiceMasterKeyStatement backupServiceMasterKeyStatement = base.FragmentFactory.CreateFragment<BackupServiceMasterKeyStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SERVICE");
            }
            this.backupMasterKeyBody(backupServiceMasterKeyStatement);
            return backupServiceMasterKeyStatement;
        }

        public BackupMasterKeyStatement backupMasterKeyStatement() {
            BackupMasterKeyStatement backupMasterKeyStatement = base.FragmentFactory.CreateFragment<BackupMasterKeyStatement>();
            this.backupMasterKeyBody(backupMasterKeyStatement);
            return backupMasterKeyStatement;
        }

        public BackupStatement backupStatement() {
            BackupStatement backupStatement = this.backupMain();
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0278;
                }
            } else {
                switch (num) {
                    case 151:
                        this.backupDevices(backupStatement);
                        goto IL_0278;
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0278;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0278:
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.backupOptions(backupStatement);
                goto IL_02d6;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_02d6;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_02d6:
            return backupStatement;
        }

        public BackupStatement backupMain() {
            BackupStatement backupStatement = null;
            switch (this.LA(1)) {
                case 43:
                    return this.backupDatabase();
                case 232:
                    return this.backupTransactionLog();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void backupDevices(BackupStatement vParent) {
            this.match(151);
            this.devList(vParent, vParent.Devices);
            while (true) {
                if (this.LA(1) != 232) {
                    break;
                }
                if (this.LA(2) != 151) {
                    break;
                }
                MirrorToClause item = this.mirrorTo();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.MirrorToClauses, item);
                }
            }
        }

        public void backupOptions(BackupStatement vParent) {
            this.match(171);
            BackupOption item = this.backupOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.backupOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, item);
                }
            }
        }

        public RestoreServiceMasterKeyStatement restoreServiceMasterKeyStatement() {
            RestoreServiceMasterKeyStatement restoreServiceMasterKeyStatement = base.FragmentFactory.CreateFragment<RestoreServiceMasterKeyStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SERVICE");
            }
            this.restoreMasterKeyBody(restoreServiceMasterKeyStatement);
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2))) {
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "FORCE");
                    restoreServiceMasterKeyStatement.IsForce = true;
                    TSql80ParserBaseInternal.UpdateTokenInfo(restoreServiceMasterKeyStatement, token2);
                }
                goto IL_00d7;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00d7;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00d7:
            return restoreServiceMasterKeyStatement;
        }

        public RestoreMasterKeyStatement restoreMasterKeyStatement() {
            RestoreMasterKeyStatement restoreMasterKeyStatement = base.FragmentFactory.CreateFragment<RestoreMasterKeyStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            this.restoreMasterKeyBody(restoreMasterKeyStatement);
            token = this.LT(1);
            this.match(232);
            this.match(18);
            token2 = this.LT(1);
            this.match(232);
            this.match(206);
            Literal encryptionPassword = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
                TSql80ParserBaseInternal.Match(token2, "PASSWORD");
                restoreMasterKeyStatement.EncryptionPassword = encryptionPassword;
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2))) {
                token3 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token3, "FORCE");
                    restoreMasterKeyStatement.IsForce = true;
                    TSql80ParserBaseInternal.UpdateTokenInfo(restoreMasterKeyStatement, token3);
                }
                goto IL_011a;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_011a;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_011a:
            return restoreMasterKeyStatement;
        }

        public RestoreStatement restoreStatement() {
            RestoreStatement restoreStatement = base.FragmentFactory.CreateFragment<RestoreStatement>();
            IToken token = null;
            if ((this.LA(1) == 43 || this.LA(1) == 232) && this.LA(2) >= 232 && this.LA(2) <= 234) {
                this.restoreMain(restoreStatement);
                int num = this.LA(1);
                if (num <= 92) {
                    switch (num) {
                        case 71:
                            this.match(71);
                            this.devList(restoreStatement, restoreStatement.Devices);
                            goto IL_0358;
                        case 1:
                        case 4:
                        case 6:
                        case 12:
                        case 13:
                        case 15:
                        case 17:
                        case 22:
                        case 23:
                        case 28:
                        case 33:
                        case 35:
                        case 44:
                        case 45:
                        case 46:
                        case 48:
                        case 49:
                        case 54:
                        case 55:
                        case 56:
                        case 60:
                        case 61:
                        case 64:
                        case 74:
                        case 75:
                        case 82:
                        case 86:
                        case 92:
                            goto IL_0358;
                    }
                } else {
                    switch (num) {
                        case 95:
                        case 106:
                        case 119:
                        case 123:
                        case 125:
                        case 126:
                        case 129:
                        case 131:
                        case 132:
                        case 134:
                        case 138:
                        case 140:
                        case 142:
                        case 143:
                        case 144:
                        case 156:
                        case 160:
                        case 161:
                        case 162:
                        case 167:
                        case 170:
                        case 171:
                        case 172:
                        case 176:
                        case 182:
                        case 191:
                        case 204:
                        case 219:
                        case 220:
                        case 232:
                            goto IL_0358;
                    }
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (this.LA(1) == 232 && this.LA(2) == 71) {
                token = this.LT(1);
                this.match(232);
                this.match(71);
                this.devList(restoreStatement, restoreStatement.Devices);
                if (base.inputState.guessing == 0) {
                    restoreStatement.Kind = RestoreStatementKindsHelper.Instance.ParseOption(token);
                }
                goto IL_0358;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_03c1:
            return restoreStatement;
            IL_0358:
            if (this.LA(1) == 171 && (this.LA(2) == 65 || this.LA(2) == 232)) {
                this.restoreOptions(restoreStatement);
                goto IL_03c1;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_03c1;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void restoreMain(RestoreStatement vParent) {
            IToken token = null;
            switch (this.LA(1)) {
                case 43: {
                        this.match(43);
                        IdentifierOrValueExpression databaseName = this.identifierOrVariable();
                        if (base.inputState.guessing == 0) {
                            vParent.DatabaseName = databaseName;
                            vParent.Kind = RestoreStatementKind.Database;
                            base.ThrowPartialAstIfPhaseOne(vParent);
                        }
                        this.restoreFileListOpt(vParent);
                        break;
                    }
                case 232: {
                        token = this.LT(1);
                        this.match(232);
                        IdentifierOrValueExpression databaseName = this.identifierOrVariable();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token, "LOG");
                            vParent.DatabaseName = databaseName;
                            vParent.Kind = RestoreStatementKind.TransactionLog;
                            base.ThrowPartialAstIfPhaseOne(vParent);
                        }
                        this.restoreFileListOpt(vParent);
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void devList(TSqlFragment vParent, IList<DeviceInfo> deviceInfos) {
            DeviceInfo item = this.deviceInfo();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, deviceInfos, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.deviceInfo();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, deviceInfos, item);
                }
            }
        }

        public void restoreOptions(RestoreStatement vParent) {
            this.match(171);
            this.restoreOptionsList(vParent);
        }

        public BackupDatabaseStatement backupDatabase() {
            BackupDatabaseStatement backupDatabaseStatement = base.FragmentFactory.CreateFragment<BackupDatabaseStatement>();
            this.match(43);
            IdentifierOrValueExpression databaseName = this.identifierOrVariable();
            if (base.inputState.guessing == 0) {
                backupDatabaseStatement.DatabaseName = databaseName;
                base.ThrowPartialAstIfPhaseOne(backupDatabaseStatement);
            }
            this.backupFileListOpt(backupDatabaseStatement);
            return backupDatabaseStatement;
        }

        public BackupTransactionLogStatement backupTransactionLog() {
            BackupTransactionLogStatement backupTransactionLogStatement = base.FragmentFactory.CreateFragment<BackupTransactionLogStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            IdentifierOrValueExpression databaseName = this.identifierOrVariable();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "LOG");
                backupTransactionLogStatement.DatabaseName = databaseName;
                base.ThrowPartialAstIfPhaseOne(backupTransactionLogStatement);
            }
            return backupTransactionLogStatement;
        }

        public IdentifierOrValueExpression identifierOrVariable() {
            IdentifierOrValueExpression identifierOrValueExpression = base.FragmentFactory.CreateFragment<IdentifierOrValueExpression>();
            switch (this.LA(1)) {
                case 234: {
                        ValueExpression valueExpression = this.variable();
                        if (base.inputState.guessing == 0) {
                            identifierOrValueExpression.ValueExpression = valueExpression;
                        }
                        break;
                    }
                case 232:
                case 233: {
                        Identifier identifier = this.identifier();
                        if (base.inputState.guessing == 0) {
                            identifierOrValueExpression.Identifier = identifier;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return identifierOrValueExpression;
        }

        public void backupFileListOpt(BackupDatabaseStatement vParent) {
            if ((this.LA(1) == 65 || this.LA(1) == 232) && TSql140ParserInternal.tokenSet_60_.member(this.LA(2))) {
                BackupRestoreFileInfo item = this.backupRestoreFile();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Files, item);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    item = this.backupRestoreFile();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Files, item);
                    }
                }
                return;
            }
            if (TSql140ParserInternal.tokenSet_61_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public BackupRestoreFileInfo backupRestoreFile() {
            BackupRestoreFileInfo backupRestoreFileInfo = base.FragmentFactory.CreateFragment<BackupRestoreFileInfo>();
            IToken token = null;
            IToken token2 = null;
            if (this.LA(1) == 65) {
                this.LT(1);
                this.match(65);
                this.match(206);
                if (base.inputState.guessing == 0) {
                    backupRestoreFileInfo.ItemKind = BackupRestoreItemKind.Files;
                }
                switch (this.LA(1)) {
                    case 230:
                    case 231:
                    case 234: {
                            ValueExpression item = this.stringOrVariable();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(backupRestoreFileInfo, backupRestoreFileInfo.Items, item);
                            }
                            break;
                        }
                    case 191:
                        this.backupRestoreFileNameList(backupRestoreFileInfo);
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                goto IL_024a;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                token = this.LT(1);
                this.match(232);
                this.match(206);
                switch (this.LA(1)) {
                    case 230:
                    case 231:
                    case 234: {
                            ValueExpression item = this.stringOrVariable();
                            if (base.inputState.guessing == 0) {
                                if (TSql80ParserBaseInternal.TryMatch(token, "PAGE")) {
                                    backupRestoreFileInfo.ItemKind = BackupRestoreItemKind.Page;
                                } else {
                                    TSql80ParserBaseInternal.Match(token, "FILEGROUP");
                                    backupRestoreFileInfo.ItemKind = BackupRestoreItemKind.FileGroups;
                                }
                                TSql80ParserBaseInternal.UpdateTokenInfo(backupRestoreFileInfo, token);
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(backupRestoreFileInfo, backupRestoreFileInfo.Items, item);
                            }
                            break;
                        }
                    case 191:
                        this.backupRestoreFileNameList(backupRestoreFileInfo);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token, "FILEGROUP");
                            backupRestoreFileInfo.ItemKind = BackupRestoreItemKind.FileGroups;
                        }
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                goto IL_024a;
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_62_.member(this.LA(2))) {
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "READ_WRITE_FILEGROUPS");
                    backupRestoreFileInfo.ItemKind = BackupRestoreItemKind.ReadWriteFileGroups;
                    TSql80ParserBaseInternal.UpdateTokenInfo(backupRestoreFileInfo, token2);
                }
                goto IL_024a;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_024a:
            return backupRestoreFileInfo;
        }

        public void restoreFileListOpt(RestoreStatement vParent) {
            if ((this.LA(1) == 65 || this.LA(1) == 232) && TSql140ParserInternal.tokenSet_63_.member(this.LA(2))) {
                BackupRestoreFileInfo item = this.backupRestoreFile();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Files, item);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    item = this.backupRestoreFile();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Files, item);
                    }
                }
                return;
            }
            if (TSql140ParserInternal.tokenSet_64_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ValueExpression stringOrVariable() {
            ValueExpression valueExpression = null;
            switch (this.LA(1)) {
                case 230:
                case 231:
                    return this.stringLiteral();
                case 234:
                    return this.variable();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void backupRestoreFileNameList(BackupRestoreFileInfo vParent) {
            IToken token = null;
            this.LT(1);
            this.match(191);
            ValueExpression item = this.stringOrVariable();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Items, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.stringOrVariable();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Items, item);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public MirrorToClause mirrorTo() {
            MirrorToClause mirrorToClause = base.FragmentFactory.CreateFragment<MirrorToClause>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(151);
            this.devList(mirrorToClause, mirrorToClause.Devices);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MIRROR");
            }
            return mirrorToClause;
        }

        public DeviceInfo deviceInfo() {
            DeviceInfo deviceInfo = base.FragmentFactory.CreateFragment<DeviceInfo>();
            IToken token = null;
            if (this.LA(1) >= 232 && this.LA(1) <= 234 && TSql140ParserInternal.tokenSet_56_.member(this.LA(2))) {
                IdentifierOrValueExpression logicalDevice = this.identifierOrVariable();
                if (base.inputState.guessing == 0) {
                    deviceInfo.LogicalDevice = logicalDevice;
                }
                goto IL_014d;
            }
            if ((this.LA(1) == 173 || this.LA(1) == 232) && this.LA(2) == 206) {
                switch (this.LA(1)) {
                    case 232:
                        token = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            deviceInfo.DeviceType = DeviceTypesHelper.Instance.ParseOption(token);
                        }
                        break;
                    case 173:
                        this.match(173);
                        if (base.inputState.guessing == 0) {
                            deviceInfo.DeviceType = DeviceType.Disk;
                        }
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                this.match(206);
                ValueExpression physicalDevice = this.stringOrVariable();
                if (base.inputState.guessing == 0) {
                    deviceInfo.PhysicalDevice = physicalDevice;
                }
                goto IL_014d;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_014d:
            return deviceInfo;
        }

        public BackupOption backupOption() {
            BackupOption backupOption = null;
            IToken token = null;
            IToken token2 = null;
            if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("ENCRYPTION")) {
                backupOption = this.backupEncryptionOption();
                goto IL_0195;
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_56_.member(this.LA(2))) {
                token = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    backupOption = base.FragmentFactory.CreateFragment<BackupOption>();
                    backupOption.OptionKind = BackupOptionsNoValueHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
                    TSql80ParserBaseInternal.UpdateTokenInfo(backupOption, token);
                }
                goto IL_0195;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                token2 = this.LT(1);
                this.match(232);
                this.match(206);
                ScalarExpression value;
                switch (this.LA(1)) {
                    case 199:
                    case 221:
                    case 234:
                        value = this.signedIntegerOrVariable();
                        break;
                    case 230:
                    case 231:
                        value = this.stringLiteral();
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                if (base.inputState.guessing == 0) {
                    backupOption = base.FragmentFactory.CreateFragment<BackupOption>();
                    backupOption.OptionKind = BackupOptionsWithValueHelper.Instance.ParseOption(token2, SqlVersionFlags.TSql140);
                    backupOption.Value = value;
                }
                goto IL_0195;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0195:
            return backupOption;
        }

        public BackupEncryptionOption backupEncryptionOption() {
            BackupEncryptionOption backupEncryptionOption = base.FragmentFactory.CreateFragment<BackupEncryptionOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            this.match(191);
            token2 = this.LT(1);
            this.match(232);
            this.match(206);
            token3 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
                TSql80ParserBaseInternal.Match(token2, "ALGORITHM");
                backupEncryptionOption.Algorithm = EncryptionAlgorithmsHelper.Instance.ParseOption(token3);
            }
            this.match(198);
            CryptoMechanism encryptor = this.backupEncrytor();
            token4 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                backupEncryptionOption.Encryptor = encryptor;
                TSql80ParserBaseInternal.UpdateTokenInfo(backupEncryptionOption, token4);
            }
            return backupEncryptionOption;
        }

        public ScalarExpression signedIntegerOrVariable() {
            switch (this.LA(1)) {
                case 199:
                case 221:
                    return this.signedInteger();
                case 234:
                    return this.variable();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public CryptoMechanism backupEncrytor() {
            CryptoMechanism cryptoMechanism = base.FragmentFactory.CreateFragment<CryptoMechanism>();
            this.dekEncryptorType(cryptoMechanism);
            this.match(206);
            Identifier identifier = this.identifier();
            if (base.inputState.guessing == 0) {
                cryptoMechanism.Identifier = identifier;
            }
            return cryptoMechanism;
        }

        public void restoreOptionsList(RestoreStatement vParent) {
            RestoreOption item = this.restoreOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.restoreOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, item);
                }
            }
        }

        public RestoreOption restoreOption() {
            RestoreOption result = null;
            IToken token = null;
            if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("FILESTREAM")) {
                result = this.fileStreamRestoreOption();
                goto IL_0247;
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_56_.member(this.LA(2))) {
                result = this.simpleRestoreOption();
                goto IL_0247;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                token = this.LT(1);
                this.match(232);
                this.match(206);
                if ((this.LA(1) == 230 || this.LA(1) == 231 || this.LA(1) == 234) && this.LA(2) == 232 && TSql80ParserBaseInternal.IsStopAtBeforeMarkRestoreOption(token)) {
                    ValueExpression mark = this.stringOrVariable();
                    ValueExpression afterClause = this.afterClause();
                    if (base.inputState.guessing == 0) {
                        result = base.CreateStopRestoreOption(token, mark, afterClause);
                    }
                    goto IL_0247;
                }
                if (this.LA(1) != 199 && this.LA(1) != 221) {
                    if ((this.LA(1) == 230 || this.LA(1) == 231 || this.LA(1) == 234) && TSql140ParserInternal.tokenSet_56_.member(this.LA(2))) {
                        ValueExpression mark = this.stringOrVariable();
                        if (base.inputState.guessing == 0) {
                            result = ((!TSql80ParserBaseInternal.IsStopAtBeforeMarkRestoreOption(token)) ? ((RestoreOption)base.CreateSimpleRestoreOptionWithValue(token, mark)) : ((RestoreOption)base.CreateStopRestoreOption(token, mark, null)));
                        }
                        goto IL_0247;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                ScalarExpression optionValue = this.signedInteger();
                if (base.inputState.guessing == 0) {
                    result = base.CreateSimpleRestoreOptionWithValue(token, optionValue);
                }
                goto IL_0247;
            }
            if (this.LA(1) == 232 && (this.LA(2) == 230 || this.LA(2) == 231 || this.LA(2) == 234)) {
                result = this.moveRestoreOption();
                goto IL_0247;
            }
            if (this.LA(1) == 65) {
                result = this.fileRestoreOption();
                goto IL_0247;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0247:
            return result;
        }

        public FileStreamRestoreOption fileStreamRestoreOption() {
            FileStreamRestoreOption fileStreamRestoreOption = base.FragmentFactory.CreateFragment<FileStreamRestoreOption>();
            FileStreamDatabaseOption fileStreamOption = this.fileStreamCreateAlterDbOption();
            if (base.inputState.guessing == 0) {
                fileStreamRestoreOption.OptionKind = RestoreOptionKind.FileStream;
                fileStreamRestoreOption.FileStreamOption = fileStreamOption;
            }
            return fileStreamRestoreOption;
        }

        public RestoreOption simpleRestoreOption() {
            RestoreOption restoreOption = base.FragmentFactory.CreateFragment<RestoreOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                restoreOption.OptionKind = RestoreOptionNoValueHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
                TSql80ParserBaseInternal.UpdateTokenInfo(restoreOption, token);
            }
            return restoreOption;
        }

        public ValueExpression afterClause() {
            ValueExpression valueExpression = null;
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            valueExpression = this.stringOrVariable();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "AFTER");
            }
            return valueExpression;
        }

        public ScalarExpression signedInteger() {
            ScalarExpression result = null;
            IToken token = null;
            UnaryExpression unaryExpression = null;
            switch (this.LA(1)) {
                case 199:
                    token = this.LT(1);
                    this.match(199);
                    if (base.inputState.guessing == 0) {
                        unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
                        TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token);
                        unaryExpression.UnaryExpressionType = UnaryExpressionType.Negative;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 221:
                    break;
            }
            Literal literal = this.integer();
            if (base.inputState.guessing == 0) {
                if (unaryExpression == null) {
                    result = literal;
                } else {
                    unaryExpression.Expression = literal;
                    result = unaryExpression;
                }
            }
            return result;
        }

        public MoveRestoreOption moveRestoreOption() {
            MoveRestoreOption moveRestoreOption = base.FragmentFactory.CreateFragment<MoveRestoreOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            ValueExpression logicalFileName = this.stringOrVariable();
            this.match(151);
            ValueExpression oSFileName = this.stringOrVariable();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MOVE");
                moveRestoreOption.OptionKind = RestoreOptionKind.Move;
                moveRestoreOption.LogicalFileName = logicalFileName;
                moveRestoreOption.OSFileName = oSFileName;
            }
            return moveRestoreOption;
        }

        public ScalarExpressionRestoreOption fileRestoreOption() {
            ScalarExpressionRestoreOption scalarExpressionRestoreOption = base.FragmentFactory.CreateFragment<ScalarExpressionRestoreOption>();
            this.match(65);
            this.match(206);
            ScalarExpression value = this.signedIntegerOrVariable();
            if (base.inputState.guessing == 0) {
                scalarExpressionRestoreOption.OptionKind = RestoreOptionKind.File;
                scalarExpressionRestoreOption.Value = value;
            }
            return scalarExpressionRestoreOption;
        }

        public void backupMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent) {
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            this.match(91);
            this.match(151);
            this.match(65);
            this.match(206);
            Literal file = this.stringLiteral();
            token2 = this.LT(1);
            this.match(232);
            this.match(18);
            token3 = this.LT(1);
            this.match(232);
            this.match(206);
            Literal password = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MASTER");
                vParent.File = file;
                TSql80ParserBaseInternal.Match(token2, "ENCRYPTION");
                TSql80ParserBaseInternal.Match(token3, "PASSWORD");
                vParent.Password = password;
            }
        }

        public void restoreMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent) {
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            this.match(91);
            this.match(71);
            this.match(65);
            this.match(206);
            Literal file = this.stringLiteral();
            token2 = this.LT(1);
            this.match(232);
            this.match(18);
            token3 = this.LT(1);
            this.match(232);
            this.match(206);
            Literal password = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MASTER");
                vParent.File = file;
                TSql80ParserBaseInternal.Match(token2, "DECRYPTION");
                TSql80ParserBaseInternal.Match(token3, "PASSWORD");
                vParent.Password = password;
            }
        }

        public IdentifierOrValueExpression bulkInsertFrom() {
            IdentifierOrValueExpression result = null;
            switch (this.LA(1)) {
                case 221: {
                        Literal valueExpression = this.integer();
                        if (base.inputState.guessing == 0) {
                            result = base.IdentifierOrValueExpression(valueExpression);
                        }
                        break;
                    }
                case 230:
                case 231:
                case 232:
                case 233:
                    result = this.stringOrIdentifier();
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public void bulkInsertOptions(BulkInsertStatement vParent) {
            IToken token = null;
            int encounteredOptions = 0;
            this.match(171);
            this.match(191);
            BulkInsertOption bulkInsertOption = this.bulkInsertOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, (int)bulkInsertOption.OptionKind, bulkInsertOption);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, bulkInsertOption);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                bulkInsertOption = this.bulkInsertOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, (int)bulkInsertOption.OptionKind, bulkInsertOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, bulkInsertOption);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql140ParserBaseInternal.CheckForDataFileFormatProhibitedOptionsBulkInsert(encounteredOptions, vParent);
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public IdentifierOrValueExpression stringOrIdentifier() {
            IdentifierOrValueExpression identifierOrValueExpression = base.FragmentFactory.CreateFragment<IdentifierOrValueExpression>();
            switch (this.LA(1)) {
                case 230:
                case 231: {
                        Literal valueExpression = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            identifierOrValueExpression.ValueExpression = valueExpression;
                        }
                        break;
                    }
                case 232:
                case 233: {
                        Identifier identifier = this.identifier();
                        if (base.inputState.guessing == 0) {
                            identifierOrValueExpression.Identifier = identifier;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return identifierOrValueExpression;
        }

        public BulkInsertOption bulkInsertOption() {
            BulkInsertOption bulkInsertOption = null;
            if (this.LA(1) == 113) {
                return this.bulkInsertSortOrderOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                return this.simpleBulkInsertOptionWithValue();
            }
            if (this.LA(1) == 232 && (this.LA(2) == 192 || this.LA(2) == 198)) {
                return this.simpleBulkInsertOptionNoValue();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public OrderBulkInsertOption bulkInsertSortOrderOption() {
            OrderBulkInsertOption orderBulkInsertOption = base.FragmentFactory.CreateFragment<OrderBulkInsertOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(113);
            this.match(191);
            ColumnWithSortOrder item = this.columnWithSortOrder();
            if (base.inputState.guessing == 0) {
                orderBulkInsertOption.OptionKind = BulkInsertOptionKind.Order;
                TSql80ParserBaseInternal.UpdateTokenInfo(orderBulkInsertOption, token);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(orderBulkInsertOption, orderBulkInsertOption.Columns, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.columnWithSortOrder();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(orderBulkInsertOption, orderBulkInsertOption.Columns, item);
                }
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(orderBulkInsertOption, token2);
            }
            return orderBulkInsertOption;
        }

        public LiteralBulkInsertOption simpleBulkInsertOptionWithValue() {
            LiteralBulkInsertOption literalBulkInsertOption = base.FragmentFactory.CreateFragment<LiteralBulkInsertOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            switch (this.LA(1)) {
                case 221:
                case 222: {
                        Literal literal = this.integerOrNumeric();
                        if (base.inputState.guessing == 0) {
                            literalBulkInsertOption.OptionKind = BulkInsertIntOptionsHelper.Instance.ParseOption(token);
                            TSql80ParserBaseInternal.UpdateTokenInfo(literalBulkInsertOption, token);
                            literalBulkInsertOption.Value = literal;
                        }
                        break;
                    }
                case 230:
                case 231: {
                        Literal literal = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            literalBulkInsertOption.OptionKind = BulkInsertStringOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
                            TSql80ParserBaseInternal.UpdateTokenInfo(literalBulkInsertOption, token);
                            if (literalBulkInsertOption.OptionKind == BulkInsertOptionKind.CodePage) {
                                TSql80ParserBaseInternal.MatchString(literal, "ACP", "OEM", "RAW");
                            } else if (literalBulkInsertOption.OptionKind == BulkInsertOptionKind.DataFileType) {
                                TSql80ParserBaseInternal.MatchString(literal, "CHAR", "NATIVE", "WIDECHAR", "WIDENATIVE", "WIDECHAR_ANSI", "DTS_BUFFERS");
                            } else if (literalBulkInsertOption.OptionKind == BulkInsertOptionKind.DataFileFormat) {
                                TSql80ParserBaseInternal.MatchString(literal, "CSV");
                            }
                            literalBulkInsertOption.Value = literal;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return literalBulkInsertOption;
        }

        public BulkInsertOption simpleBulkInsertOptionNoValue() {
            BulkInsertOption bulkInsertOption = base.FragmentFactory.CreateFragment<BulkInsertOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                bulkInsertOption.OptionKind = BulkInsertFlagOptionsHelper.Instance.ParseOption(token);
                TSql80ParserBaseInternal.UpdateTokenInfo(bulkInsertOption, token);
            }
            return bulkInsertOption;
        }

        public BulkInsertOption insertBulkOption() {
            BulkInsertOption bulkInsertOption = null;
            switch (this.LA(1)) {
                case 113:
                    return this.bulkInsertSortOrderOption();
                case 232:
                    return this.simpleInsertBulkOption();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public BulkInsertOption simpleInsertBulkOption() {
            BulkInsertOption bulkInsertOption = null;
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            switch (this.LA(1)) {
                case 206: {
                        this.match(206);
                        Literal value = this.integerOrNumeric();
                        if (base.inputState.guessing == 0) {
                            LiteralBulkInsertOption literalBulkInsertOption = base.FragmentFactory.CreateFragment<LiteralBulkInsertOption>();
                            TSql80ParserBaseInternal.UpdateTokenInfo(literalBulkInsertOption, token);
                            if (TSql80ParserBaseInternal.TryMatch(token, "ROWS_PER_BATCH")) {
                                literalBulkInsertOption.OptionKind = BulkInsertOptionKind.RowsPerBatch;
                            } else {
                                TSql80ParserBaseInternal.Match(token, "KILOBYTES_PER_BATCH");
                                literalBulkInsertOption.OptionKind = BulkInsertOptionKind.KilobytesPerBatch;
                            }
                            literalBulkInsertOption.Value = value;
                            bulkInsertOption = literalBulkInsertOption;
                        }
                        break;
                    }
                case 192:
                case 198:
                    if (base.inputState.guessing != 0) {
                        break;
                    }
                    bulkInsertOption = base.FragmentFactory.CreateFragment<BulkInsertOption>();
                    TSql80ParserBaseInternal.UpdateTokenInfo(bulkInsertOption, token);
                    bulkInsertOption.OptionKind = BulkInsertFlagOptionsHelper.Instance.ParseOption(token);
                    if (bulkInsertOption.OptionKind != BulkInsertOptionKind.KeepIdentity) {
                        break;
                    }
                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return bulkInsertOption;
        }

        public Literal integerOrNumeric() {
            switch (this.LA(1)) {
                case 221:
                    return this.integer();
                case 222:
                    return this.numeric();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void coldefList(InsertBulkStatement vParent) {
            IToken token = null;
            this.match(191);
            InsertBulkColumnDefinition item = this.coldefItem();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.ColumnDefinitions, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.coldefItem();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.ColumnDefinitions, item);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public void insertBulkOptions(InsertBulkStatement vParent) {
            IToken token = null;
            int num = 0;
            this.match(171);
            this.match(191);
            BulkInsertOption bulkInsertOption = this.insertBulkOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)bulkInsertOption.OptionKind, bulkInsertOption);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, bulkInsertOption);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                bulkInsertOption = this.insertBulkOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)bulkInsertOption.OptionKind, bulkInsertOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, bulkInsertOption);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public InsertBulkColumnDefinition coldefItem() {
            InsertBulkColumnDefinition insertBulkColumnDefinition = base.FragmentFactory.CreateFragment<InsertBulkColumnDefinition>();
            ColumnDefinitionBase column = this.columnDefinitionEx();
            if (base.inputState.guessing == 0) {
                insertBulkColumnDefinition.Column = column;
            }
            switch (this.LA(1)) {
                case 99:
                case 100: {
                        bool flag = this.nullNotNull(insertBulkColumnDefinition);
                        if (base.inputState.guessing == 0) {
                            insertBulkColumnDefinition.NullNotNull = (NullNotNull)(flag ? 1 : 2);
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                case 198:
                    break;
            }
            return insertBulkColumnDefinition;
        }

        public ColumnDefinitionBase columnDefinitionEx() {
            ColumnDefinitionBase columnDefinitionBase = null;
            IToken token = null;
            if ((this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_65_.member(this.LA(2))) {
                columnDefinitionBase = this.columnDefinitionBasic();
                goto IL_00d1;
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_66_.member(this.LA(2))) {
                token = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "TIMESTAMP");
                    columnDefinitionBase = base.FragmentFactory.CreateFragment<ColumnDefinitionBase>();
                    Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
                    TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token);
                    identifier.SetUnquotedIdentifier("TIMESTAMP");
                    columnDefinitionBase.ColumnIdentifier = identifier;
                }
                goto IL_00d1;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00d1:
            return columnDefinitionBase;
        }

        public bool nullNotNull(TSqlFragment vParent) {
            bool result = true;
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 99:
                    token = this.LT(1);
                    this.match(99);
                    if (base.inputState.guessing == 0) {
                        result = false;
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 100:
                    break;
            }
            token2 = this.LT(1);
            this.match(100);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
            }
            return result;
        }

        public ColumnWithSortOrder columnWithSortOrder() {
            ColumnWithSortOrder columnWithSortOrder = base.FragmentFactory.CreateFragment<ColumnWithSortOrder>();
            ColumnReferenceExpression column = this.identifierColumnReferenceExpression();
            if (base.inputState.guessing == 0) {
                columnWithSortOrder.Column = column;
            }
            switch (this.LA(1)) {
                case 10:
                case 50: {
                        SortOrder sortOrder = this.orderByOption(columnWithSortOrder);
                        if (base.inputState.guessing == 0) {
                            columnWithSortOrder.SortOrder = sortOrder;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                case 198:
                    break;
            }
            return columnWithSortOrder;
        }

        public OrderBulkInsertOption openRowsetBulkOrderHint() {
            OrderBulkInsertOption orderBulkInsertOption = this.bulkInsertSortOrderOption();
            switch (this.LA(1)) {
                case 159:
                    this.LT(1);
                    this.match(159);
                    if (base.inputState.guessing == 0) {
                        orderBulkInsertOption.IsUnique = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                case 198:
                    break;
            }
            return orderBulkInsertOption;
        }

        public void dbccNamedLiteralList(DbccStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(191);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
            switch (this.LA(1)) {
                case 100:
                case 193:
                case 199:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234: {
                        DbccNamedLiteral item = this.dbccNamedLiteral();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Literals, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.dbccNamedLiteral();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Literals, item);
                            }
                        }
                        break;
                    }
                case 192:
                    if (base.inputState.guessing == 0) {
                        vParent.ParenthesisRequired = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
            }
        }

        public void dbccOptions(DbccStatement vParent) {
            this.match(171);
            this.dbccOptionsList(vParent);
        }

        public void dbccOptionsList(DbccStatement vParent) {
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_56_.member(this.LA(2))) {
                this.dbccOptionsListItems(vParent);
                return;
            }
            if (this.LA(1) == 232 && this.LA(2) == 90) {
                this.dbccOptionsJoin(vParent);
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void dbccOptionsListItems(DbccStatement vParent) {
            DbccOption item = this.dbccOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.dbccOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, item);
                }
            }
        }

        public void dbccOptionsJoin(DbccStatement vParent) {
            DbccOption item = this.dbccJoinOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, item);
            }
            int num = 0;
            while (true) {
                if (this.LA(1) != 90) {
                    break;
                }
                this.match(90);
                item = this.dbccJoinOption();
                if (base.inputState.guessing == 0) {
                    vParent.OptionsUseJoin = true;
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, item);
                }
                num++;
            }
            if (num < 1) {
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public DbccOption dbccOption() {
            DbccOption dbccOption = base.FragmentFactory.CreateFragment<DbccOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                dbccOption.OptionKind = DbccOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
                TSql80ParserBaseInternal.UpdateTokenInfo(dbccOption, token);
            }
            return dbccOption;
        }

        public DbccOption dbccJoinOption() {
            DbccOption dbccOption = base.FragmentFactory.CreateFragment<DbccOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                dbccOption.OptionKind = DbccJoinOptionsHelper.Instance.ParseOption(token);
                TSql80ParserBaseInternal.UpdateTokenInfo(dbccOption, token);
            }
            return dbccOption;
        }

        public DbccNamedLiteral dbccNamedLiteral() {
            DbccNamedLiteral dbccNamedLiteral = base.FragmentFactory.CreateFragment<DbccNamedLiteral>();
            IToken token = null;
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                token = this.LT(1);
                this.match(232);
                this.match(206);
                if (base.inputState.guessing == 0) {
                    dbccNamedLiteral.Name = token.getText();
                    TSql80ParserBaseInternal.UpdateTokenInfo(dbccNamedLiteral, token);
                }
                goto IL_00a3;
            }
            if (TSql140ParserInternal.tokenSet_67_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_68_.member(this.LA(2))) {
                goto IL_00a3;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00a3:
            ScalarExpression value = this.possibleNegativeConstantOrIdentifier();
            if (base.inputState.guessing == 0) {
                dbccNamedLiteral.Value = value;
            }
            return dbccNamedLiteral;
        }

        public void endpointOptions(AlterCreateEndpointStatementBase vParent) {
            this.endpointOption(vParent);
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                this.endpointOption(vParent);
            }
        }

        public void protocolInfo(AlterCreateEndpointStatementBase vParent) {
            IToken token = null;
            IToken token2 = null;
            EndpointProtocolOptions endpointProtocolOptions = EndpointProtocolOptions.None;
            this.match(9);
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                vParent.Protocol = EndpointProtocolsHelper.Instance.ParseOption(token);
            }
            this.match(191);
            EndpointProtocolOption endpointProtocolOption = this.protocolOptionsItem(vParent.Protocol, endpointProtocolOptions);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.ProtocolOptions, endpointProtocolOption);
                endpointProtocolOptions = endpointProtocolOption.Kind;
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                endpointProtocolOption = this.protocolOptionsItem(vParent.Protocol, endpointProtocolOptions);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.ProtocolOptions, endpointProtocolOption);
                    endpointProtocolOptions |= endpointProtocolOption.Kind;
                }
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
            }
        }

        public void payloadInfo(AlterCreateEndpointStatementBase vParent) {
            IToken token = null;
            IToken token2 = null;
            PayloadOptionKinds payloadOptionKinds = PayloadOptionKinds.None;
            this.match(67);
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(token, "DATA_MIRRORING")) {
                    vParent.EndpointType = EndpointType.DatabaseMirroring;
                } else {
                    vParent.EndpointType = EndpointTypesHelper.Instance.ParseOption(token);
                }
            }
            this.match(191);
            switch (this.LA(1)) {
                case 4:
                case 6:
                case 43:
                case 54:
                case 139:
                case 232: {
                        PayloadOption payloadOption = this.payloadOption(vParent.EndpointType, payloadOptionKinds);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.PayloadOptions, payloadOption);
                            payloadOptionKinds = payloadOption.Kind;
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            payloadOption = this.payloadOption(vParent.EndpointType, payloadOptionKinds);
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.PayloadOptions, payloadOption);
                                payloadOptionKinds |= payloadOption.Kind;
                            }
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            if (base.inputState.guessing == 0 && vParent.EndpointType == EndpointType.DatabaseMirroring && (payloadOptionKinds & PayloadOptionKinds.Role) != PayloadOptionKinds.Role) {
                TSql80ParserBaseInternal.ThrowParseErrorException("SQL46080", token, TSqlParserResource.SQL46080Message);
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
            }
        }

        public void endpointOption(AlterCreateEndpointStatementBase vParent) {
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("STATE")) {
                this.endpointState(vParent);
                return;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                this.endpointAffinity(vParent);
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void endpointState(AlterCreateEndpointStatementBase vParent) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                if (vParent.State != 0) {
                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                }
                vParent.State = EndpointStateHelper.Instance.ParseOption(token2);
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
            }
        }

        public void endpointAffinity(AlterCreateEndpointStatementBase vParent) {
            IToken token = null;
            IToken token2 = null;
            EndpointAffinity endpointAffinity = base.FragmentFactory.CreateFragment<EndpointAffinity>();
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "AFFINITY");
                if (vParent.Affinity != null) {
                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(endpointAffinity, token);
            }
            switch (this.LA(1)) {
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        if (TSql80ParserBaseInternal.TryMatch(token2, "NONE")) {
                            endpointAffinity.Kind = AffinityKind.None;
                        } else {
                            TSql80ParserBaseInternal.Match(token2, "ADMIN");
                            endpointAffinity.Kind = AffinityKind.Admin;
                        }
                        TSql80ParserBaseInternal.UpdateTokenInfo(endpointAffinity, token2);
                    }
                    break;
                case 221: {
                        Literal value = this.integer();
                        if (base.inputState.guessing == 0) {
                            endpointAffinity.Kind = AffinityKind.Integer;
                            endpointAffinity.Value = value;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                vParent.Affinity = endpointAffinity;
            }
        }

        public EndpointProtocolOption protocolOptionsItem(EndpointProtocol protocol, EndpointProtocolOptions encountered) {
            EndpointProtocolOption endpointProtocolOption = null;
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LISTENER_IP")) {
                return this.listenerIpProtocolOption(protocol, encountered);
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LISTENER_PORT")) {
                return this.listenerPortProtocolOption(protocol, encountered);
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("PATH")) {
                return this.pathProtocolOption(protocol, encountered);
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SITE")) {
                return this.siteProtocolOption(protocol, encountered);
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("CLEAR_PORT")) {
                return this.clearPortProtocolOption(protocol, encountered);
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SSL_PORT")) {
                return this.sslPortProtocolOption(protocol, encountered);
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("AUTHENTICATION")) {
                return this.authenticationProtocolOption(protocol, encountered);
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("PORTS")) {
                return this.portsProtocolOption(protocol, encountered);
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("AUTH_REALM")) {
                return this.authenticationRealmProtocolOption(protocol, encountered);
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DEFAULT_LOGON_DOMAIN")) {
                return this.defaultLogonDomainProtocolOption(protocol, encountered);
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                return this.compressionProtocolOption(protocol, encountered);
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ListenerIPEndpointProtocolOption listenerIpProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered) {
            ListenerIPEndpointProtocolOption listenerIPEndpointProtocolOption = base.FragmentFactory.CreateFragment<ListenerIPEndpointProtocolOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                listenerIPEndpointProtocolOption.Kind = EndpointProtocolOptions.TcpListenerIP;
                TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, listenerIPEndpointProtocolOption.Kind, protocol, token);
            }
            switch (this.LA(1)) {
                case 191:
                    this.match(191);
                    switch (this.LA(1)) {
                        case 221:
                        case 222: {
                                IPv4 iPv4PartOne = this.ipAddressV4();
                                if (base.inputState.guessing == 0) {
                                    listenerIPEndpointProtocolOption.IPv4PartOne = iPv4PartOne;
                                }
                                switch (this.LA(1)) {
                                    case 202:
                                        this.match(202);
                                        iPv4PartOne = this.ipAddressV4();
                                        if (base.inputState.guessing == 0) {
                                            listenerIPEndpointProtocolOption.IPv4PartTwo = iPv4PartOne;
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this.LT(1), this.getFilename());
                                    case 192:
                                        break;
                                }
                                break;
                            }
                        case 230:
                        case 231: {
                                Literal iPv = this.stringLiteral();
                                if (base.inputState.guessing == 0) {
                                    listenerIPEndpointProtocolOption.IPv6 = iPv;
                                }
                                break;
                            }
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    token2 = this.LT(1);
                    this.match(192);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(listenerIPEndpointProtocolOption, token2);
                    }
                    break;
                case 5:
                    this.match(5);
                    if (base.inputState.guessing == 0) {
                        listenerIPEndpointProtocolOption.IsAll = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return listenerIPEndpointProtocolOption;
        }

        public LiteralEndpointProtocolOption listenerPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered) {
            LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal value = this.integer();
            if (base.inputState.guessing == 0) {
                literalEndpointProtocolOption.Kind = EndpointProtocolOptions.TcpListenerPort;
                TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
                TSql90ParserBaseInternal.ThrowIfInvalidListenerPortValue(value);
                literalEndpointProtocolOption.Value = value;
            }
            return literalEndpointProtocolOption;
        }

        public LiteralEndpointProtocolOption pathProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered) {
            LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal value = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpPath;
                TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
                literalEndpointProtocolOption.Value = value;
            }
            return literalEndpointProtocolOption;
        }

        public LiteralEndpointProtocolOption siteProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered) {
            LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal value = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpSite;
                TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
                literalEndpointProtocolOption.Value = value;
            }
            return literalEndpointProtocolOption;
        }

        public LiteralEndpointProtocolOption clearPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered) {
            LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal value = this.integer();
            if (base.inputState.guessing == 0) {
                literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpClearPort;
                TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
                literalEndpointProtocolOption.Value = value;
            }
            return literalEndpointProtocolOption;
        }

        public LiteralEndpointProtocolOption sslPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered) {
            LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal value = this.integer();
            if (base.inputState.guessing == 0) {
                literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpSslPort;
                TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
                literalEndpointProtocolOption.Value = value;
            }
            return literalEndpointProtocolOption;
        }

        public AuthenticationEndpointProtocolOption authenticationProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered) {
            AuthenticationEndpointProtocolOption authenticationEndpointProtocolOption = base.FragmentFactory.CreateFragment<AuthenticationEndpointProtocolOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                authenticationEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpAuthentication;
                TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, authenticationEndpointProtocolOption.Kind, protocol, token);
            }
            this.match(191);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                authenticationEndpointProtocolOption.AuthenticationTypes = AuthenticationTypesHelper.Instance.ParseOption(token2);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                token3 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    authenticationEndpointProtocolOption.AuthenticationTypes = TSql90ParserBaseInternal.AggregateAuthenticationType(authenticationEndpointProtocolOption.AuthenticationTypes, AuthenticationTypesHelper.Instance.ParseOption(token3), token3);
                }
            }
            token4 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(authenticationEndpointProtocolOption, token4);
            }
            return authenticationEndpointProtocolOption;
        }

        public PortsEndpointProtocolOption portsProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered) {
            PortsEndpointProtocolOption portsEndpointProtocolOption = base.FragmentFactory.CreateFragment<PortsEndpointProtocolOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                portsEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpPorts;
                TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, portsEndpointProtocolOption.Kind, protocol, token);
            }
            this.match(191);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                portsEndpointProtocolOption.PortTypes = PortTypesHelper.Instance.ParseOption(token2);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                token3 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    portsEndpointProtocolOption.PortTypes = TSql90ParserBaseInternal.AggregatePortType(portsEndpointProtocolOption.PortTypes, PortTypesHelper.Instance.ParseOption(token3), token3);
                }
            }
            token4 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(portsEndpointProtocolOption, token4);
            }
            return portsEndpointProtocolOption;
        }

        public LiteralEndpointProtocolOption authenticationRealmProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered) {
            LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpAuthenticationRealm;
                TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
            }
            switch (this.LA(1)) {
                case 230:
                case 231: {
                        Literal value = this.nonEmptyString();
                        if (base.inputState.guessing == 0) {
                            literalEndpointProtocolOption.Value = value;
                        }
                        break;
                    }
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "NONE");
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return literalEndpointProtocolOption;
        }

        public LiteralEndpointProtocolOption defaultLogonDomainProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered) {
            LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpDefaultLogonDomain;
                TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
            }
            switch (this.LA(1)) {
                case 230:
                case 231: {
                        Literal value = this.nonEmptyString();
                        if (base.inputState.guessing == 0) {
                            literalEndpointProtocolOption.Value = value;
                        }
                        break;
                    }
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "NONE");
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return literalEndpointProtocolOption;
        }

        public CompressionEndpointProtocolOption compressionProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered) {
            CompressionEndpointProtocolOption compressionEndpointProtocolOption = base.FragmentFactory.CreateFragment<CompressionEndpointProtocolOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                compressionEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpCompression;
                TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, compressionEndpointProtocolOption.Kind, protocol, token);
                if (TSql80ParserBaseInternal.TryMatch(token2, "ENABLED")) {
                    compressionEndpointProtocolOption.IsEnabled = true;
                } else {
                    TSql80ParserBaseInternal.Match(token2, "DISABLED");
                    compressionEndpointProtocolOption.IsEnabled = false;
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(compressionEndpointProtocolOption, token2);
            }
            return compressionEndpointProtocolOption;
        }

        public void ipV4DotNumberTail(IPv4 vParent) {
            IToken token = null;
            switch (this.LA(1)) {
                case 222:
                    token = this.LT(1);
                    this.match(222);
                    if (base.inputState.guessing == 0) {
                        vParent.OctetFour = base.GetIPv4FragmentFromDotNumberNumeric(token);
                    }
                    break;
                case 200: {
                        this.match(200);
                        Literal octetFour = this.integer();
                        if (base.inputState.guessing == 0) {
                            vParent.OctetFour = octetFour;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void ipV4DotLastTwoPartsTail(IPv4 vParent) {
            this.match(200);
            switch (this.LA(1)) {
                case 222:
                    this.ipV4NumericOrNumericIntegerTail(vParent);
                    break;
                case 221: {
                        Literal octetThree = this.integer();
                        this.ipV4DotNumberTail(vParent);
                        if (base.inputState.guessing == 0) {
                            vParent.OctetThree = octetThree;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void ipV4NumericOrNumericIntegerTail(IPv4 vParent) {
            IToken token = null;
            token = this.LT(1);
            this.match(222);
            switch (this.LA(1)) {
                case 221: {
                        Literal octetFour2 = this.integer();
                        if (base.inputState.guessing == 0) {
                            vParent.OctetThree = base.GetIPv4FragmentFromNumberDotNumeric(token);
                            vParent.OctetFour = octetFour2;
                        }
                        break;
                    }
                case 1:
                case 192:
                case 202:
                    if (base.inputState.guessing == 0) {
                        Literal octetThree = default(Literal);
                        Literal octetFour = default(Literal);
                        base.GetIPv4FragmentsFromNumberDotNumberNumeric(token, out octetThree, out octetFour);
                        vParent.OctetThree = octetThree;
                        vParent.OctetFour = octetFour;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public PayloadOption payloadOption(EndpointType type, PayloadOptionKinds encountered) {
            PayloadOption payloadOption = null;
            switch (this.LA(1)) {
                case 43:
                    return this.databasePayloadOption(type, encountered);
                case 139:
                    return this.schemaPayloadOption(type, encountered);
                default:
                    if (TSql140ParserInternal.tokenSet_69_.member(this.LA(1)) && this.LA(2) >= 230 && this.LA(2) <= 232) {
                        return this.soapMethod(type, encountered);
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("BATCHES")) {
                        return this.batchesPayloadOption(type, encountered);
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("WSDL")) {
                        return this.wsdlPayloadOption(type, encountered);
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SESSIONS")) {
                        return this.sessionsPayloadOption(type, encountered);
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LOGIN_TYPE")) {
                        return this.loginTypePayloadOption(type, encountered);
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SESSION_TIMEOUT")) {
                        return this.sessionTimeoutPayloadOption(type, encountered);
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("NAMESPACE")) {
                        return this.namespacePayloadOption(type, encountered);
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("CHARACTER_SET")) {
                        return this.characterSetPayloadOption(type, encountered);
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("HEADER_LIMIT")) {
                        return this.headerLimitPayloadOption(type, encountered);
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("AUTHENTICATION")) {
                        return this.authenticationPayloadOption(type, encountered);
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ENCRYPTION")) {
                        return this.encryptionPayloadOption(type, encountered);
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MESSAGE_FORWARDING")) {
                        return this.messageForwardingPayloadOption(type, encountered);
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MESSAGE_FORWARD_SIZE")) {
                        return this.messageForwardSizePayloadOption(type, encountered);
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 206) {
                        return this.rolePayloadOption(type, encountered);
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public SoapMethod soapMethod(EndpointType type, PayloadOptionKinds encountered) {
            SoapMethod soapMethod = base.FragmentFactory.CreateFragment<SoapMethod>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            switch (this.LA(1)) {
                case 4:
                case 6:
                case 232:
                    switch (this.LA(1)) {
                        case 4:
                            this.match(4);
                            if (base.inputState.guessing == 0) {
                                soapMethod.Action = SoapMethodAction.Add;
                            }
                            break;
                        case 6:
                            this.match(6);
                            if (base.inputState.guessing == 0) {
                                soapMethod.Action = SoapMethodAction.Alter;
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                        case 232:
                            break;
                    }
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token, "WEBMETHOD");
                        soapMethod.Kind = PayloadOptionKinds.WebMethod;
                        TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, soapMethod.Kind, type, token);
                    }
                    this.soapMethodAlias(soapMethod);
                    this.match(191);
                    this.soapMethodOption(soapMethod);
                    while (true) {
                        if (this.LA(1) != 198) {
                            break;
                        }
                        this.match(198);
                        this.soapMethodOption(soapMethod);
                    }
                    token2 = this.LT(1);
                    this.match(192);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(soapMethod, token2);
                    }
                    break;
                case 54:
                    this.match(54);
                    token3 = this.LT(1);
                    this.match(232);
                    this.soapMethodAlias(soapMethod);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token3, "WEBMETHOD");
                        soapMethod.Action = SoapMethodAction.Drop;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return soapMethod;
        }

        public EnabledDisabledPayloadOption batchesPayloadOption(EndpointType type, PayloadOptionKinds encountered) {
            EnabledDisabledPayloadOption enabledDisabledPayloadOption = base.FragmentFactory.CreateFragment<EnabledDisabledPayloadOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            this.enabledDisabled(enabledDisabledPayloadOption);
            if (base.inputState.guessing == 0) {
                enabledDisabledPayloadOption.Kind = PayloadOptionKinds.Batches;
                TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, enabledDisabledPayloadOption.Kind, type, token);
            }
            return enabledDisabledPayloadOption;
        }

        public WsdlPayloadOption wsdlPayloadOption(EndpointType type, PayloadOptionKinds encountered) {
            WsdlPayloadOption wsdlPayloadOption = base.FragmentFactory.CreateFragment<WsdlPayloadOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                wsdlPayloadOption.Kind = PayloadOptionKinds.Wsdl;
                TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, wsdlPayloadOption.Kind, type, token);
            }
            switch (this.LA(1)) {
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "NONE");
                        wsdlPayloadOption.IsNone = true;
                    }
                    break;
                case 47: {
                        Literal value = this.defaultLiteral();
                        if (base.inputState.guessing == 0) {
                            wsdlPayloadOption.Value = value;
                        }
                        break;
                    }
                case 230:
                case 231: {
                        Literal value = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            wsdlPayloadOption.Value = value;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return wsdlPayloadOption;
        }

        public EnabledDisabledPayloadOption sessionsPayloadOption(EndpointType type, PayloadOptionKinds encountered) {
            EnabledDisabledPayloadOption enabledDisabledPayloadOption = base.FragmentFactory.CreateFragment<EnabledDisabledPayloadOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            this.enabledDisabled(enabledDisabledPayloadOption);
            if (base.inputState.guessing == 0) {
                enabledDisabledPayloadOption.Kind = PayloadOptionKinds.Sessions;
                TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, enabledDisabledPayloadOption.Kind, type, token);
            }
            return enabledDisabledPayloadOption;
        }

        public LoginTypePayloadOption loginTypePayloadOption(EndpointType type, PayloadOptionKinds encountered) {
            LoginTypePayloadOption loginTypePayloadOption = base.FragmentFactory.CreateFragment<LoginTypePayloadOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                loginTypePayloadOption.Kind = PayloadOptionKinds.LoginType;
                TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, loginTypePayloadOption.Kind, type, token);
                if (TSql80ParserBaseInternal.TryMatch(token2, "WINDOWS")) {
                    loginTypePayloadOption.IsWindows = true;
                } else {
                    TSql80ParserBaseInternal.Match(token2, "MIXED");
                    loginTypePayloadOption.IsWindows = false;
                }
            }
            return loginTypePayloadOption;
        }

        public SessionTimeoutPayloadOption sessionTimeoutPayloadOption(EndpointType type, PayloadOptionKinds encountered) {
            SessionTimeoutPayloadOption sessionTimeoutPayloadOption = base.FragmentFactory.CreateFragment<SessionTimeoutPayloadOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                sessionTimeoutPayloadOption.Kind = PayloadOptionKinds.SessionTimeout;
                TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, sessionTimeoutPayloadOption.Kind, type, token);
            }
            switch (this.LA(1)) {
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "NEVER");
                        sessionTimeoutPayloadOption.IsNever = true;
                    }
                    break;
                case 221: {
                        Literal timeout = this.integer();
                        if (base.inputState.guessing == 0) {
                            sessionTimeoutPayloadOption.Timeout = timeout;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return sessionTimeoutPayloadOption;
        }

        public LiteralPayloadOption databasePayloadOption(EndpointType type, PayloadOptionKinds encountered) {
            LiteralPayloadOption literalPayloadOption = base.FragmentFactory.CreateFragment<LiteralPayloadOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(43);
            this.match(206);
            if (base.inputState.guessing == 0) {
                literalPayloadOption.Kind = PayloadOptionKinds.Database;
                TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, literalPayloadOption.Kind, type, token);
            }
            Literal value;
            switch (this.LA(1)) {
                case 230:
                case 231:
                    value = this.stringLiteral();
                    break;
                case 47:
                    value = this.defaultLiteral();
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                literalPayloadOption.Value = value;
            }
            return literalPayloadOption;
        }

        public LiteralPayloadOption namespacePayloadOption(EndpointType type, PayloadOptionKinds encountered) {
            LiteralPayloadOption literalPayloadOption = base.FragmentFactory.CreateFragment<LiteralPayloadOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                literalPayloadOption.Kind = PayloadOptionKinds.Namespace;
                TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, literalPayloadOption.Kind, type, token);
            }
            Literal value;
            switch (this.LA(1)) {
                case 230:
                case 231:
                    value = this.stringLiteral();
                    break;
                case 47:
                    value = this.defaultLiteral();
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                literalPayloadOption.Value = value;
            }
            return literalPayloadOption;
        }

        public SchemaPayloadOption schemaPayloadOption(EndpointType type, PayloadOptionKinds encountered) {
            SchemaPayloadOption schemaPayloadOption = base.FragmentFactory.CreateFragment<SchemaPayloadOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(139);
            this.match(206);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                schemaPayloadOption.Kind = PayloadOptionKinds.Schema;
                TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, schemaPayloadOption.Kind, type, token);
                if (TSql80ParserBaseInternal.TryMatch(token2, "STANDARD")) {
                    schemaPayloadOption.IsStandard = true;
                } else {
                    TSql80ParserBaseInternal.Match(token2, "NONE");
                    schemaPayloadOption.IsStandard = false;
                }
            }
            return schemaPayloadOption;
        }

        public CharacterSetPayloadOption characterSetPayloadOption(EndpointType type, PayloadOptionKinds encountered) {
            CharacterSetPayloadOption characterSetPayloadOption = base.FragmentFactory.CreateFragment<CharacterSetPayloadOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                characterSetPayloadOption.Kind = PayloadOptionKinds.CharacterSet;
                TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, characterSetPayloadOption.Kind, type, token);
                if (TSql80ParserBaseInternal.TryMatch(token2, "SQL")) {
                    characterSetPayloadOption.IsSql = true;
                } else {
                    TSql80ParserBaseInternal.Match(token2, "XML");
                    characterSetPayloadOption.IsSql = false;
                }
            }
            return characterSetPayloadOption;
        }

        public LiteralPayloadOption headerLimitPayloadOption(EndpointType type, PayloadOptionKinds encountered) {
            LiteralPayloadOption literalPayloadOption = base.FragmentFactory.CreateFragment<LiteralPayloadOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal value = this.integer();
            if (base.inputState.guessing == 0) {
                literalPayloadOption.Kind = PayloadOptionKinds.HeaderLimit;
                TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, literalPayloadOption.Kind, type, token);
                literalPayloadOption.Value = value;
            }
            return literalPayloadOption;
        }

        public AuthenticationPayloadOption authenticationPayloadOption(EndpointType type, PayloadOptionKinds encountered) {
            AuthenticationPayloadOption authenticationPayloadOption = base.FragmentFactory.CreateFragment<AuthenticationPayloadOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                authenticationPayloadOption.Kind = PayloadOptionKinds.Authentication;
                TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, authenticationPayloadOption.Kind, type, token);
            }
            token2 = this.LT(1);
            this.match(232);
            Identifier identifier;
            if (this.LA(1) == 192 || this.LA(1) == 198) {
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "WINDOWS");
                    authenticationPayloadOption.Protocol = AuthenticationProtocol.Windows;
                }
            } else {
                if (this.LA(1) != 232 && this.LA(1) != 233) {
                    goto IL_0136;
                }
                if (this.LA(2) != 192 && this.LA(2) != 198) {
                    goto IL_0136;
                }
                identifier = this.identifier();
                if (base.inputState.guessing == 0) {
                    if (TSql80ParserBaseInternal.TryMatch(token2, "CERTIFICATE")) {
                        authenticationPayloadOption.Certificate = identifier;
                        authenticationPayloadOption.TryCertificateFirst = true;
                    } else {
                        TSql80ParserBaseInternal.Match(token2, "WINDOWS");
                        authenticationPayloadOption.Protocol = TSql90ParserBaseInternal.RecognizeAuthenticationProtocol(identifier, token2);
                    }
                }
            }
            goto IL_02c2;
            IL_02c2:
            return authenticationPayloadOption;
            IL_0136:
            if (this.LA(1) != 232 && this.LA(1) != 233) {
                goto IL_02af;
            }
            if (this.LA(2) != 232 && this.LA(2) != 233) {
                goto IL_02af;
            }
            identifier = this.identifier();
            Identifier identifier2 = this.identifier();
            switch (this.LA(1)) {
                case 192:
                case 198:
                    if (base.inputState.guessing == 0) {
                        if (TSql80ParserBaseInternal.TryMatch(token2, "CERTIFICATE")) {
                            authenticationPayloadOption.Certificate = identifier;
                            TSql80ParserBaseInternal.Match(identifier2, "WINDOWS", token2);
                            authenticationPayloadOption.TryCertificateFirst = true;
                        } else {
                            TSql80ParserBaseInternal.Match(token2, "WINDOWS");
                            TSql80ParserBaseInternal.Match(identifier, "CERTIFICATE", token2);
                            authenticationPayloadOption.Certificate = identifier2;
                        }
                        authenticationPayloadOption.Protocol = AuthenticationProtocol.Windows;
                    }
                    break;
                case 232:
                case 233: {
                        Identifier identifier3 = this.identifier();
                        if (base.inputState.guessing == 0) {
                            if (TSql80ParserBaseInternal.TryMatch(token2, "CERTIFICATE")) {
                                authenticationPayloadOption.Certificate = identifier;
                                TSql80ParserBaseInternal.Match(identifier2, "WINDOWS", token2);
                                authenticationPayloadOption.Protocol = TSql90ParserBaseInternal.RecognizeAuthenticationProtocol(identifier3, token2);
                                authenticationPayloadOption.TryCertificateFirst = true;
                            } else {
                                TSql80ParserBaseInternal.Match(token2, "WINDOWS");
                                authenticationPayloadOption.Protocol = TSql90ParserBaseInternal.RecognizeAuthenticationProtocol(identifier, token2);
                                TSql80ParserBaseInternal.Match(identifier2, "CERTIFICATE", token2);
                                authenticationPayloadOption.Certificate = identifier3;
                            }
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            goto IL_02c2;
            IL_02af:
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public EncryptionPayloadOption encryptionPayloadOption(EndpointType type, PayloadOptionKinds encountered) {
            EncryptionPayloadOption encryptionPayloadOption = base.FragmentFactory.CreateFragment<EncryptionPayloadOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                encryptionPayloadOption.Kind = PayloadOptionKinds.Encryption;
                TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, encryptionPayloadOption.Kind, type, token);
            }
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                encryptionPayloadOption.EncryptionSupport = EndpointEncryptionSupportHelper.Instance.ParseOption(token2);
            }
            Identifier id;
            Identifier id2;
            switch (this.LA(1)) {
                case 232:
                case 233: {
                        Identifier identifier = this.identifier();
                        if (base.inputState.guessing == 0 && (encryptionPayloadOption.EncryptionSupport == EndpointEncryptionSupport.Disabled || !string.Equals(TSql90ParserBaseInternal.Unquote(identifier.Value), "ALGORITHM", StringComparison.OrdinalIgnoreCase))) {
                            throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
                        }
                        if (this.LA(1) != 232 && this.LA(1) != 233) {
                            goto IL_015f;
                        }
                        if (this.LA(2) != 192 && this.LA(2) != 198) {
                            goto IL_015f;
                        }
                        id = this.identifier();
                        if (base.inputState.guessing == 0) {
                            encryptionPayloadOption.AlgorithmPartOne = TSql90ParserBaseInternal.RecognizeAesOrRc4(id, token2);
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                case 198:
                    break;
                    IL_015f:
                    if (this.LA(1) != 232 && this.LA(1) != 233) {
                        goto IL_01e5;
                    }
                    if (this.LA(2) != 232 && this.LA(2) != 233) {
                        goto IL_01e5;
                    }
                    id = this.identifier();
                    id2 = this.identifier();
                    if (base.inputState.guessing != 0) {
                        break;
                    }
                    encryptionPayloadOption.AlgorithmPartOne = TSql90ParserBaseInternal.RecognizeAesOrRc4(id, token2);
                    encryptionPayloadOption.AlgorithmPartTwo = TSql90ParserBaseInternal.RecognizeAesOrRc4(id2, token2);
                    if (encryptionPayloadOption.AlgorithmPartOne != encryptionPayloadOption.AlgorithmPartTwo) {
                        break;
                    }
                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
                    IL_01e5:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return encryptionPayloadOption;
        }

        public EnabledDisabledPayloadOption messageForwardingPayloadOption(EndpointType type, PayloadOptionKinds encountered) {
            EnabledDisabledPayloadOption enabledDisabledPayloadOption = base.FragmentFactory.CreateFragment<EnabledDisabledPayloadOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            this.enabledDisabled(enabledDisabledPayloadOption);
            if (base.inputState.guessing == 0) {
                enabledDisabledPayloadOption.Kind = PayloadOptionKinds.MessageForwarding;
                TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, enabledDisabledPayloadOption.Kind, type, token);
            }
            return enabledDisabledPayloadOption;
        }

        public LiteralPayloadOption messageForwardSizePayloadOption(EndpointType type, PayloadOptionKinds encountered) {
            LiteralPayloadOption literalPayloadOption = base.FragmentFactory.CreateFragment<LiteralPayloadOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal value = this.integer();
            if (base.inputState.guessing == 0) {
                literalPayloadOption.Kind = PayloadOptionKinds.MessageForwardSize;
                TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, literalPayloadOption.Kind, type, token);
                literalPayloadOption.Value = value;
            }
            return literalPayloadOption;
        }

        public RolePayloadOption rolePayloadOption(EndpointType type, PayloadOptionKinds encountered) {
            RolePayloadOption rolePayloadOption = base.FragmentFactory.CreateFragment<RolePayloadOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ROLE");
                rolePayloadOption.Kind = PayloadOptionKinds.Role;
                TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, rolePayloadOption.Kind, type, token);
            }
            switch (this.LA(1)) {
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        if (TSql80ParserBaseInternal.TryMatch(token2, "WITNESS")) {
                            rolePayloadOption.Role = DatabaseMirroringEndpointRole.Witness;
                        } else {
                            TSql80ParserBaseInternal.Match(token2, "PARTNER");
                            rolePayloadOption.Role = DatabaseMirroringEndpointRole.Partner;
                        }
                    }
                    break;
                case 5:
                    this.match(5);
                    if (base.inputState.guessing == 0) {
                        rolePayloadOption.Role = DatabaseMirroringEndpointRole.All;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return rolePayloadOption;
        }

        public void enabledDisabled(EnabledDisabledPayloadOption vParent) {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(token, "ENABLED")) {
                    vParent.IsEnabled = true;
                } else {
                    TSql80ParserBaseInternal.Match(token, "DISABLED");
                    vParent.IsEnabled = false;
                }
            }
        }

        public DefaultLiteral defaultLiteral() {
            DefaultLiteral defaultLiteral = base.FragmentFactory.CreateFragment<DefaultLiteral>();
            IToken token = null;
            token = this.LT(1);
            this.match(47);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(defaultLiteral, token);
                defaultLiteral.Value = token.getText();
            }
            return defaultLiteral;
        }

        public void soapMethodAlias(SoapMethod vParent) {
            if (this.LA(1) != 230 && this.LA(1) != 231) {
                goto IL_0062;
            }
            if (this.LA(2) != 191 && this.LA(2) != 192 && this.LA(2) != 198) {
                goto IL_0062;
            }
            Literal alias = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                vParent.Alias = alias;
            }
            return;
            IL_0062:
            if ((this.LA(1) == 230 || this.LA(1) == 231) && this.LA(2) == 200) {
                Literal @namespace = this.stringLiteral();
                this.match(200);
                alias = this.stringLiteral();
                if (base.inputState.guessing == 0) {
                    vParent.Alias = alias;
                    vParent.Namespace = @namespace;
                }
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void soapMethodOption(SoapMethod vParent) {
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            switch (this.LA(1)) {
                case 139:
                    token = this.LT(1);
                    this.match(139);
                    this.match(206);
                    if (base.inputState.guessing == 0 && vParent.Schema != 0) {
                        throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                    }
                    switch (this.LA(1)) {
                        case 232:
                            token2 = this.LT(1);
                            this.match(232);
                            if (base.inputState.guessing == 0) {
                                if (TSql80ParserBaseInternal.TryMatch(token2, "NONE")) {
                                    vParent.Schema = SoapMethodSchemas.None;
                                } else {
                                    TSql80ParserBaseInternal.Match(token2, "STANDARD");
                                    vParent.Schema = SoapMethodSchemas.Standard;
                                }
                            }
                            break;
                        case 47:
                            this.match(47);
                            if (base.inputState.guessing == 0) {
                                vParent.Schema = SoapMethodSchemas.Default;
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    break;
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    this.match(206);
                    switch (this.LA(1)) {
                        case 232:
                            token4 = this.LT(1);
                            this.match(232);
                            if (base.inputState.guessing == 0) {
                                if (vParent.Format != 0) {
                                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token3);
                                }
                                TSql80ParserBaseInternal.Match(token3, "FORMAT");
                                vParent.Format = SoapMethodFormatsHelper.Instance.ParseOption(token4);
                            }
                            break;
                        case 230:
                        case 231: {
                                Literal name = this.stringLiteral();
                                if (base.inputState.guessing == 0) {
                                    TSql80ParserBaseInternal.Match(token3, "NAME");
                                    if (vParent.Name != null) {
                                        throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token3);
                                    }
                                    vParent.Name = name;
                                }
                                break;
                            }
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public CreateEventNotificationStatement createEventNotificationStatement() {
            CreateEventNotificationStatement createEventNotificationStatement = base.FragmentFactory.CreateFragment<CreateEventNotificationStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "NOTIFICATION");
                createEventNotificationStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createEventNotificationStatement);
            }
            EventNotificationObjectScope scope = this.eventNotificationObjectScope();
            if (base.inputState.guessing == 0) {
                createEventNotificationStatement.Scope = scope;
            }
            switch (this.LA(1)) {
                case 171:
                    this.match(171);
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "FAN_IN");
                        createEventNotificationStatement.WithFanIn = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 67:
                    break;
            }
            this.match(67);
            EventTypeGroupContainer item = this.eventTypeGroupContainer();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createEventNotificationStatement, createEventNotificationStatement.EventTypeGroups, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.eventTypeGroupContainer();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createEventNotificationStatement, createEventNotificationStatement.EventTypeGroups, item);
                }
            }
            this.match(151);
            token3 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token3, "SERVICE");
            }
            Literal brokerService = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                createEventNotificationStatement.BrokerService = brokerService;
            }
            this.match(198);
            brokerService = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                createEventNotificationStatement.BrokerInstanceSpecifier = brokerService;
            }
            return createEventNotificationStatement;
        }

        public CreateEventSessionStatement createEventSessionStatement() {
            CreateEventSessionStatement createEventSessionStatement = base.FragmentFactory.CreateFragment<CreateEventSessionStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SESSION");
                createEventSessionStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createEventSessionStatement);
            }
            this.eventSessionScope(createEventSessionStatement);
            this.eventDeclarationList(createEventSessionStatement);
            if (this.LA(1) == 4 && this.LA(2) == 232) {
                this.targetDeclarationList(createEventSessionStatement);
                goto IL_00b6;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00b6;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00b6:
            this.optSessionOptionList(createEventSessionStatement);
            return createEventSessionStatement;
        }

        public EventNotificationObjectScope eventNotificationObjectScope() {
            EventNotificationObjectScope eventNotificationObjectScope = base.FragmentFactory.CreateFragment<EventNotificationObjectScope>();
            IToken token = null;
            IToken token2 = null;
            this.match(105);
            if (this.LA(1) == 43) {
                token = this.LT(1);
                this.match(43);
                if (base.inputState.guessing == 0) {
                    eventNotificationObjectScope.Target = EventNotificationTarget.Database;
                    TSql80ParserBaseInternal.UpdateTokenInfo(eventNotificationObjectScope, token);
                }
                goto IL_0141;
            }
            if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("QUEUE")) {
                this.LT(1);
                this.match(232);
                SchemaObjectName queueName = this.schemaObjectThreePartName();
                if (base.inputState.guessing == 0) {
                    eventNotificationObjectScope.Target = EventNotificationTarget.Queue;
                    eventNotificationObjectScope.QueueName = queueName;
                }
                goto IL_0141;
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_70_.member(this.LA(2))) {
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "SERVER");
                    eventNotificationObjectScope.Target = EventNotificationTarget.Server;
                    TSql80ParserBaseInternal.UpdateTokenInfo(eventNotificationObjectScope, token2);
                }
                goto IL_0141;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0141:
            return eventNotificationObjectScope;
        }

        public EventTypeGroupContainer eventTypeGroupContainer() {
            EventTypeGroupContainer result = null;
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                EventNotificationEventType eventTypeValue = default(EventNotificationEventType);
                EventNotificationEventGroup eventGroupValue = default(EventNotificationEventGroup);
                if (((OptionsHelper<EventNotificationEventType>)TriggerEventTypeHelper.Instance).TryParseOption(token, SqlVersionFlags.TSql140, out eventTypeValue)) {
                    result = base.CreateEventTypeContainer(eventTypeValue, token);
                } else if (((OptionsHelper<EventNotificationEventType>)AuditEventTypeHelper.Instance).TryParseOption(token, SqlVersionFlags.TSql140, out eventTypeValue)) {
                    result = base.CreateEventTypeContainer(eventTypeValue, token);
                } else if (((OptionsHelper<EventNotificationEventGroup>)TriggerEventGroupHelper.Instance).TryParseOption(token, SqlVersionFlags.TSql140, out eventGroupValue)) {
                    result = base.CreateEventGroupContainer(eventGroupValue, token);
                } else {
                    eventGroupValue = AuditEventGroupHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
                    result = base.CreateEventGroupContainer(eventGroupValue, token);
                }
            }
            return result;
        }

        public void eventSessionScope(EventSessionStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            this.match(105);
            switch (this.LA(1)) {
                case 43:
                    token = this.LT(1);
                    this.match(43);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                        vParent.SessionScope = EventSessionScope.Database;
                    }
                    break;
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "SERVER");
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                        vParent.SessionScope = EventSessionScope.Server;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void eventDeclarationList(EventSessionStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            this.match(4);
            token = this.LT(1);
            this.match(232);
            EventDeclaration item = this.eventDeclaration();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "EVENT");
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.EventDeclarations, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                this.match(4);
                token2 = this.LT(1);
                this.match(232);
                item = this.eventDeclaration();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "EVENT");
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.EventDeclarations, item);
                }
            }
        }

        public void targetDeclarationList(EventSessionStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            this.match(4);
            token = this.LT(1);
            this.match(232);
            TargetDeclaration item = this.targetDeclaration();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "TARGET");
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.TargetDeclarations, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                this.match(4);
                token2 = this.LT(1);
                this.match(232);
                item = this.targetDeclaration();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "TARGET");
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.TargetDeclarations, item);
                }
            }
        }

        public void optSessionOptionList(EventSessionStatement vParent) {
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.sessionOptionList(vParent);
                return;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public AlterEventSessionStatement alterEventSessionStatement() {
            AlterEventSessionStatement alterEventSessionStatement = base.FragmentFactory.CreateFragment<AlterEventSessionStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "EVENT");
                TSql80ParserBaseInternal.Match(token2, "SESSION");
                alterEventSessionStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterEventSessionStatement);
            }
            this.eventSessionScope(alterEventSessionStatement);
            switch (this.LA(1)) {
                case 4:
                    if (this.LA(1) == 4 && this.LA(2) == 232 && base.NextTokenMatches("ADD") && base.NextTokenMatches("EVENT", 2)) {
                        this.eventDeclarationList(alterEventSessionStatement);
                        if (base.inputState.guessing == 0) {
                            alterEventSessionStatement.StatementType = AlterEventSessionStatementType.AddEventDeclarationOptionalSessionOptions;
                        }
                        goto IL_016e;
                    }
                    if (this.LA(1) == 4 && this.LA(2) == 232 && base.NextTokenMatches("ADD") && base.NextTokenMatches("TARGET", 2)) {
                        this.targetDeclarationList(alterEventSessionStatement);
                        if (base.inputState.guessing == 0) {
                            alterEventSessionStatement.StatementType = AlterEventSessionStatementType.AddTargetDeclarationOptionalSessionOptions;
                        }
                        goto IL_016e;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 54:
                    if (this.LA(1) == 54 && this.LA(2) == 232 && base.NextTokenMatches("DROP") && base.NextTokenMatches("EVENT", 2)) {
                        this.dropEventDeclarationList(alterEventSessionStatement);
                        if (base.inputState.guessing == 0) {
                            alterEventSessionStatement.StatementType = AlterEventSessionStatementType.DropEventSpecificationOptionalSessionOptions;
                        }
                        goto IL_022f;
                    }
                    if (this.LA(1) == 54 && this.LA(2) == 232 && base.NextTokenMatches("DROP") && base.NextTokenMatches("TARGET", 2)) {
                        this.dropTargetDeclarationList(alterEventSessionStatement);
                        if (base.inputState.guessing == 0) {
                            alterEventSessionStatement.StatementType = AlterEventSessionStatementType.DropTargetSpecificationOptionalSessionOptions;
                        }
                        goto IL_022f;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 171:
                    this.sessionOptionList(alterEventSessionStatement);
                    if (base.inputState.guessing == 0) {
                        alterEventSessionStatement.StatementType = AlterEventSessionStatementType.RequiredSessionOptions;
                    }
                    break;
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    this.match(206);
                    token4 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token3, "STATE");
                        if (TSql80ParserBaseInternal.TryMatch(token4, "START")) {
                            alterEventSessionStatement.StatementType = AlterEventSessionStatementType.AlterStateIsStart;
                        } else if (TSql80ParserBaseInternal.TryMatch(token4, "STOP")) {
                            alterEventSessionStatement.StatementType = AlterEventSessionStatementType.AlterStateIsStop;
                        } else {
                            TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token4);
                        }
                    }
                    break;
                default: {
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    IL_016e:
                    this.optSessionOptionList(alterEventSessionStatement);
                    break;
                    IL_022f:
                    this.optSessionOptionList(alterEventSessionStatement);
                    break;
            }
            return alterEventSessionStatement;
        }

        public void dropEventDeclarationList(AlterEventSessionStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            this.match(54);
            token = this.LT(1);
            this.match(232);
            EventSessionObjectName item = this.eventSessionNonEmptyThreePartObjectName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "EVENT");
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.DropEventDeclarations, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                this.match(54);
                token2 = this.LT(1);
                this.match(232);
                item = this.eventSessionNonEmptyThreePartObjectName();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "EVENT");
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.DropEventDeclarations, item);
                }
            }
        }

        public void dropTargetDeclarationList(AlterEventSessionStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            this.match(54);
            token = this.LT(1);
            this.match(232);
            EventSessionObjectName item = this.eventSessionNonEmptyThreePartObjectName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "TARGET");
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.DropTargetDeclarations, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                this.match(54);
                token2 = this.LT(1);
                this.match(232);
                item = this.eventSessionNonEmptyThreePartObjectName();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "TARGET");
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.DropTargetDeclarations, item);
                }
            }
        }

        public void sessionOptionList(EventSessionStatement vParent) {
            IToken token = null;
            this.match(171);
            this.match(191);
            SessionOption item = this.sessionOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.SessionOptions, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.sessionOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.SessionOptions, item);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public EventDeclaration eventDeclaration() {
            EventDeclaration eventDeclaration = base.FragmentFactory.CreateFragment<EventDeclaration>();
            IToken token = null;
            EventSessionObjectName objectName = this.eventSessionNonEmptyThreePartObjectName();
            if (base.inputState.guessing == 0) {
                eventDeclaration.ObjectName = objectName;
            }
            if (this.LA(1) == 191 && TSql140ParserInternal.tokenSet_71_.member(this.LA(2))) {
                this.LT(1);
                this.match(191);
                switch (this.LA(1)) {
                    case 142:
                        this.eventDeclarationSetParameters(eventDeclaration);
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    case 169:
                    case 192:
                    case 232:
                        break;
                }
                switch (this.LA(1)) {
                    case 232:
                        this.eventDeclarationActionParameters(eventDeclaration);
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    case 169:
                    case 192:
                        break;
                }
                switch (this.LA(1)) {
                    case 169: {
                            this.match(169);
                            BooleanExpression eventDeclarationPredicateParameter = this.eventBooleanExpression();
                            if (base.inputState.guessing == 0) {
                                eventDeclaration.EventDeclarationPredicateParameter = eventDeclarationPredicateParameter;
                            }
                            break;
                        }
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    case 192:
                        break;
                }
                token = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(eventDeclaration, token);
                }
                goto IL_01b3;
            }
            if (TSql140ParserInternal.tokenSet_56_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_01b3;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_01b3:
            return eventDeclaration;
        }

        public TargetDeclaration targetDeclaration() {
            TargetDeclaration targetDeclaration = base.FragmentFactory.CreateFragment<TargetDeclaration>();
            IToken token = null;
            EventSessionObjectName objectName = this.eventSessionNonEmptyThreePartObjectName();
            if (base.inputState.guessing == 0) {
                targetDeclaration.ObjectName = objectName;
            }
            if (this.LA(1) == 191 && this.LA(2) == 142) {
                this.match(191);
                this.match(142);
                EventDeclarationSetParameter item = this.eventDeclarationSetParameter();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(targetDeclaration, targetDeclaration.TargetDeclarationParameters, item);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    item = this.eventDeclarationSetParameter();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(targetDeclaration, targetDeclaration.TargetDeclarationParameters, item);
                    }
                }
                token = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(targetDeclaration, token);
                }
                goto IL_0120;
            }
            if (TSql140ParserInternal.tokenSet_56_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0120;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0120:
            return targetDeclaration;
        }

        public SessionOption sessionOption() {
            SessionOption sessionOption = null;
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAX_MEMORY")) {
                return this.maxMemorySessionOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAX_EVENT_SIZE")) {
                return this.maxEventSizeSessionOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("TRACK_CAUSALITY")) {
                return this.trackCausalitySessionOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("STARTUP_STATE")) {
                return this.startupStateSessionOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("EVENT_RETENTION_MODE")) {
                return this.eventRetentionSessionOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MEMORY_PARTITION_MODE")) {
                return this.memoryPartitionSessionOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAX_DISPATCH_LATENCY")) {
                return this.maxDispatchLatencySessionOption();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public EventSessionObjectName eventSessionNonEmptyThreePartObjectName() {
            EventSessionObjectName eventSessionObjectName = base.FragmentFactory.CreateFragment<EventSessionObjectName>();
            MultiPartIdentifier multiPartIdentifier = this.nonEmptyThreePartObjectName();
            if (base.inputState.guessing == 0) {
                eventSessionObjectName.MultiPartIdentifier = multiPartIdentifier;
            }
            return eventSessionObjectName;
        }

        public void eventDeclarationSetParameters(EventDeclaration vParent) {
            this.match(142);
            EventDeclarationSetParameter item = this.eventDeclarationSetParameter();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.EventDeclarationSetParameters, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.eventDeclarationSetParameter();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.EventDeclarationSetParameters, item);
                }
            }
        }

        public void eventDeclarationActionParameters(EventDeclaration vParent) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ACTION");
            }
            this.match(191);
            EventSessionObjectName item = this.eventSessionNonEmptyThreePartObjectName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.EventDeclarationActionParameters, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.eventSessionNonEmptyThreePartObjectName();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.EventDeclarationActionParameters, item);
                }
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
            }
        }

        public EventDeclarationSetParameter eventDeclarationSetParameter() {
            EventDeclarationSetParameter eventDeclarationSetParameter = base.FragmentFactory.CreateFragment<EventDeclarationSetParameter>();
            Identifier eventField = this.identifier();
            this.match(206);
            ScalarExpression eventValue = this.eventDeclarationValue();
            if (base.inputState.guessing == 0) {
                eventDeclarationSetParameter.EventField = eventField;
                eventDeclarationSetParameter.EventValue = eventValue;
            }
            return eventDeclarationSetParameter;
        }

        public LiteralSessionOption maxMemorySessionOption() {
            LiteralSessionOption literalSessionOption = base.FragmentFactory.CreateFragment<LiteralSessionOption>();
            this.LT(1);
            this.match(232);
            this.integerSessionOptionValue(literalSessionOption);
            if (base.inputState.guessing == 0) {
                literalSessionOption.OptionKind = SessionOptionKind.MaxMemory;
            }
            return literalSessionOption;
        }

        public LiteralSessionOption maxEventSizeSessionOption() {
            LiteralSessionOption literalSessionOption = base.FragmentFactory.CreateFragment<LiteralSessionOption>();
            this.LT(1);
            this.match(232);
            this.integerSessionOptionValue(literalSessionOption);
            if (base.inputState.guessing == 0) {
                literalSessionOption.OptionKind = SessionOptionKind.MaxEventSize;
            }
            return literalSessionOption;
        }

        public OnOffSessionOption trackCausalitySessionOption() {
            OnOffSessionOption onOffSessionOption = base.FragmentFactory.CreateFragment<OnOffSessionOption>();
            this.LT(1);
            this.match(232);
            this.onOffSessionOption(onOffSessionOption);
            if (base.inputState.guessing == 0) {
                onOffSessionOption.OptionKind = SessionOptionKind.TrackCausality;
            }
            return onOffSessionOption;
        }

        public OnOffSessionOption startupStateSessionOption() {
            OnOffSessionOption onOffSessionOption = base.FragmentFactory.CreateFragment<OnOffSessionOption>();
            this.LT(1);
            this.match(232);
            this.onOffSessionOption(onOffSessionOption);
            if (base.inputState.guessing == 0) {
                onOffSessionOption.OptionKind = SessionOptionKind.StartUpState;
            }
            return onOffSessionOption;
        }

        public EventRetentionSessionOption eventRetentionSessionOption() {
            EventRetentionSessionOption eventRetentionSessionOption = base.FragmentFactory.CreateFragment<EventRetentionSessionOption>();
            IToken token = null;
            this.LT(1);
            this.match(232);
            this.match(206);
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                eventRetentionSessionOption.OptionKind = SessionOptionKind.EventRetention;
                eventRetentionSessionOption.Value = EventSessionEventRetentionModeTypeHelper.Instance.ParseOption(token);
            }
            return eventRetentionSessionOption;
        }

        public MemoryPartitionSessionOption memoryPartitionSessionOption() {
            MemoryPartitionSessionOption memoryPartitionSessionOption = base.FragmentFactory.CreateFragment<MemoryPartitionSessionOption>();
            IToken token = null;
            this.LT(1);
            this.match(232);
            this.match(206);
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                memoryPartitionSessionOption.OptionKind = SessionOptionKind.MemoryPartition;
                memoryPartitionSessionOption.Value = EventSessionMemoryPartitionModeTypeHelper.Instance.ParseOption(token);
            }
            return memoryPartitionSessionOption;
        }

        public MaxDispatchLatencySessionOption maxDispatchLatencySessionOption() {
            MaxDispatchLatencySessionOption maxDispatchLatencySessionOption = base.FragmentFactory.CreateFragment<MaxDispatchLatencySessionOption>();
            IToken token = null;
            IToken token2 = null;
            this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                maxDispatchLatencySessionOption.OptionKind = SessionOptionKind.MaxDispatchLatency;
            }
            switch (this.LA(1)) {
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token, "INFINITE");
                        maxDispatchLatencySessionOption.IsInfinite = true;
                    }
                    break;
                case 221: {
                        Literal value = this.integer();
                        token2 = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token2, "SECONDS");
                            maxDispatchLatencySessionOption.IsInfinite = false;
                            maxDispatchLatencySessionOption.Value = value;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return maxDispatchLatencySessionOption;
        }

        public void integerSessionOptionValue(LiteralSessionOption vParent) {
            IToken token = null;
            this.match(206);
            Literal value = this.integer();
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                vParent.Value = value;
                vParent.Unit = SessionOptionUnitHelper.Instance.ParseOption(token);
            }
        }

        public void onOffSessionOption(OnOffSessionOption vParent) {
            this.match(206);
            OptionState optionState = this.optionOnOff(vParent);
            if (base.inputState.guessing == 0) {
                vParent.OptionState = optionState;
            }
        }

        public ScalarExpression eventDeclarationValue() {
            ScalarExpression result = null;
            IToken token = null;
            ScalarExpression scalarExpression = null;
            UnaryExpression unaryExpression = null;
            switch (this.LA(1)) {
                case 199:
                    token = this.LT(1);
                    this.match(199);
                    scalarExpression = this.integerOrRealOrNumeric();
                    if (base.inputState.guessing == 0) {
                        unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
                        TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token);
                        unaryExpression.UnaryExpressionType = UnaryExpressionType.Negative;
                        unaryExpression.Expression = scalarExpression;
                        result = unaryExpression;
                    }
                    break;
                case 191:
                    result = this.eventSessionExpressionParenthesis();
                    break;
                case 221:
                case 222:
                case 223:
                case 230:
                case 231:
                    result = this.eventSessionLiteral();
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public Literal integerOrRealOrNumeric() {
            switch (this.LA(1)) {
                case 221:
                    return this.integer();
                case 223:
                    return this.real();
                case 222:
                    return this.numeric();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public ParenthesisExpression eventSessionExpressionParenthesis() {
            ParenthesisExpression parenthesisExpression = base.FragmentFactory.CreateFragment<ParenthesisExpression>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(191);
            ScalarExpression expression = this.eventDeclarationValue();
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(parenthesisExpression, token);
                parenthesisExpression.Expression = expression;
                TSql80ParserBaseInternal.UpdateTokenInfo(parenthesisExpression, token2);
            }
            return parenthesisExpression;
        }

        public Literal eventSessionLiteral() {
            switch (this.LA(1)) {
                case 221:
                    return this.integer();
                case 222:
                    return this.numeric();
                case 223:
                    return this.real();
                case 230:
                case 231:
                    return this.stringLiteral();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public NumericLiteral numeric() {
            NumericLiteral numericLiteral = base.FragmentFactory.CreateFragment<NumericLiteral>();
            IToken token = null;
            token = this.LT(1);
            this.match(222);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(numericLiteral, token);
                numericLiteral.Value = token.getText();
            }
            return numericLiteral;
        }

        public RealLiteral real() {
            RealLiteral realLiteral = base.FragmentFactory.CreateFragment<RealLiteral>();
            IToken token = null;
            token = this.LT(1);
            this.match(223);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(realLiteral, token);
                realLiteral.Value = token.getText();
            }
            return realLiteral;
        }

        public BooleanExpression eventBooleanExpressionOr() {
            BooleanExpression result = null;
            result = this.eventBooleanExpressionAnd();
            while (true) {
                if (this.LA(1) != 112) {
                    break;
                }
                this.match(112);
                BooleanExpression expression = this.eventBooleanExpressionAnd();
                if (base.inputState.guessing == 0) {
                    base.AddBinaryExpression(ref result, expression, BooleanBinaryExpressionType.Or);
                }
            }
            return result;
        }

        public BooleanExpression eventBooleanExpressionAnd() {
            BooleanExpression result = null;
            result = this.eventBooleanExpressionUnary();
            while (true) {
                if (this.LA(1) != 7) {
                    break;
                }
                this.match(7);
                BooleanExpression expression = this.eventBooleanExpressionUnary();
                if (base.inputState.guessing == 0) {
                    base.AddBinaryExpression(ref result, expression, BooleanBinaryExpressionType.And);
                }
            }
            return result;
        }

        public BooleanExpression eventBooleanExpressionUnary() {
            BooleanExpression result = null;
            IToken token = null;
            switch (this.LA(1)) {
                case 99: {
                        token = this.LT(1);
                        this.match(99);
                        BooleanExpression expression = this.eventBooleanExpressionUnary();
                        if (base.inputState.guessing == 0) {
                            BooleanNotExpression booleanNotExpression = base.FragmentFactory.CreateFragment<BooleanNotExpression>();
                            result = booleanNotExpression;
                            TSql80ParserBaseInternal.UpdateTokenInfo(booleanNotExpression, token);
                            booleanNotExpression.Expression = expression;
                        }
                        break;
                    }
                case 191:
                    result = this.eventBooleanExpressionParenthesis();
                    break;
                case 232:
                case 233:
                    result = this.eventDeclarationPredicateParameter();
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public BooleanParenthesisExpression eventBooleanExpressionParenthesis() {
            BooleanParenthesisExpression booleanParenthesisExpression = base.FragmentFactory.CreateFragment<BooleanParenthesisExpression>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(191);
            BooleanExpression expression = this.eventBooleanExpression();
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(booleanParenthesisExpression, token);
                booleanParenthesisExpression.Expression = expression;
                TSql80ParserBaseInternal.UpdateTokenInfo(booleanParenthesisExpression, token2);
            }
            return booleanParenthesisExpression;
        }

        public BooleanExpression eventDeclarationPredicateParameter() {
            BooleanExpression booleanExpression = null;
            IToken token = null;
            IToken token2 = null;
            SourceDeclaration sourceDeclaration = base.FragmentFactory.CreateFragment<SourceDeclaration>();
            EventDeclarationCompareFunctionParameter eventDeclarationCompareFunctionParameter = base.FragmentFactory.CreateFragment<EventDeclarationCompareFunctionParameter>();
            BooleanComparisonExpression booleanComparisonExpression = base.FragmentFactory.CreateFragment<BooleanComparisonExpression>();
            EventSessionObjectName eventSessionObjectName = this.eventSessionOneOrTwoOrThreePartObjectName();
            switch (this.LA(1)) {
                case 191:
                    token = this.LT(1);
                    this.match(191);
                    if (base.inputState.guessing == 0) {
                        if (eventSessionObjectName.MultiPartIdentifier.Count < 2) {
                            TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                        }
                        sourceDeclaration.Value = eventSessionObjectName;
                        eventDeclarationCompareFunctionParameter.Name = eventSessionObjectName;
                    }
                    this.eventDeclarationCompareFunction(eventDeclarationCompareFunctionParameter);
                    if (base.inputState.guessing == 0) {
                        booleanExpression = eventDeclarationCompareFunctionParameter;
                    }
                    token2 = this.LT(1);
                    this.match(192);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(booleanExpression, token2);
                    }
                    break;
                case 188:
                case 205:
                case 206:
                case 208:
                    this.eventDeclarationComparisonPredicate(booleanComparisonExpression, eventSessionObjectName);
                    if (base.inputState.guessing == 0) {
                        booleanExpression = booleanComparisonExpression;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return booleanExpression;
        }

        public EventSessionObjectName eventSessionOneOrTwoOrThreePartObjectName() {
            EventSessionObjectName eventSessionObjectName = base.FragmentFactory.CreateFragment<EventSessionObjectName>();
            MultiPartIdentifier multiPartIdentifier = this.oneOrTwoOrThreePartObjectName();
            if (base.inputState.guessing == 0) {
                eventSessionObjectName.MultiPartIdentifier = multiPartIdentifier;
            }
            return eventSessionObjectName;
        }

        public void eventDeclarationCompareFunction(EventDeclarationCompareFunctionParameter vParent) {
            SourceDeclaration sourceDeclaration = base.FragmentFactory.CreateFragment<SourceDeclaration>();
            EventSessionObjectName value = this.eventSessionOneOrTwoOrThreePartObjectName();
            this.match(198);
            ScalarExpression eventValue = this.eventDeclarationValue();
            if (base.inputState.guessing == 0) {
                sourceDeclaration.Value = value;
                vParent.SourceDeclaration = sourceDeclaration;
                vParent.EventValue = eventValue;
            }
        }

        public void eventDeclarationComparisonPredicate(BooleanComparisonExpression vParent, EventSessionObjectName vSource) {
            SourceDeclaration sourceDeclaration = base.FragmentFactory.CreateFragment<SourceDeclaration>();
            BooleanComparisonType booleanComparisonType = BooleanComparisonType.Equals;
            booleanComparisonType = this.comparisonOperator();
            ScalarExpression secondExpression = this.eventDeclarationValue();
            if (base.inputState.guessing == 0) {
                sourceDeclaration.Value = vSource;
                vParent.FirstExpression = sourceDeclaration;
                vParent.ComparisonType = booleanComparisonType;
                vParent.SecondExpression = secondExpression;
            }
        }

        public BooleanComparisonType comparisonOperator() {
            BooleanComparisonType result = BooleanComparisonType.Equals;
            switch (this.LA(1)) {
                case 206:
                    this.match(206);
                    if (base.inputState.guessing == 0) {
                        result = BooleanComparisonType.Equals;
                    }
                    break;
                case 208:
                    this.match(208);
                    if (base.inputState.guessing == 0) {
                        result = BooleanComparisonType.GreaterThan;
                    }
                    switch (this.LA(1)) {
                        case 206:
                            this.match(206);
                            if (base.inputState.guessing == 0) {
                                result = BooleanComparisonType.GreaterThanOrEqualTo;
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                        case 5:
                        case 8:
                        case 20:
                        case 25:
                        case 34:
                        case 40:
                        case 41:
                        case 81:
                        case 93:
                        case 100:
                        case 101:
                        case 133:
                        case 136:
                        case 141:
                        case 145:
                        case 147:
                        case 163:
                        case 187:
                        case 191:
                        case 193:
                        case 197:
                        case 199:
                        case 200:
                        case 211:
                        case 221:
                        case 222:
                        case 223:
                        case 224:
                        case 225:
                        case 227:
                        case 228:
                        case 230:
                        case 231:
                        case 232:
                        case 233:
                        case 234:
                        case 235:
                            break;
                    }
                    break;
                case 205:
                    this.match(205);
                    if (base.inputState.guessing == 0) {
                        result = BooleanComparisonType.LessThan;
                    }
                    switch (this.LA(1)) {
                        case 206:
                            this.match(206);
                            if (base.inputState.guessing == 0) {
                                result = BooleanComparisonType.LessThanOrEqualTo;
                            }
                            break;
                        case 208:
                            this.match(208);
                            if (base.inputState.guessing == 0) {
                                result = BooleanComparisonType.NotEqualToBrackets;
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                        case 5:
                        case 8:
                        case 20:
                        case 25:
                        case 34:
                        case 40:
                        case 41:
                        case 81:
                        case 93:
                        case 100:
                        case 101:
                        case 133:
                        case 136:
                        case 141:
                        case 145:
                        case 147:
                        case 163:
                        case 187:
                        case 191:
                        case 193:
                        case 197:
                        case 199:
                        case 200:
                        case 211:
                        case 221:
                        case 222:
                        case 223:
                        case 224:
                        case 225:
                        case 227:
                        case 228:
                        case 230:
                        case 231:
                        case 232:
                        case 233:
                        case 234:
                        case 235:
                            break;
                    }
                    break;
                case 188:
                    this.match(188);
                    switch (this.LA(1)) {
                        case 206:
                            this.match(206);
                            if (base.inputState.guessing == 0) {
                                result = BooleanComparisonType.NotEqualToExclamation;
                            }
                            break;
                        case 205:
                            this.match(205);
                            if (base.inputState.guessing == 0) {
                                result = BooleanComparisonType.NotLessThan;
                            }
                            break;
                        case 208:
                            this.match(208);
                            if (base.inputState.guessing == 0) {
                                result = BooleanComparisonType.NotGreaterThan;
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public CreateFullTextCatalogStatement createFulltextCatalogStatement() {
            CreateFullTextCatalogStatement createFullTextCatalogStatement = base.FragmentFactory.CreateFragment<CreateFullTextCatalogStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CATALOG");
                createFullTextCatalogStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createFullTextCatalogStatement);
            }
            int num = this.LA(1);
            if (num <= 106) {
                switch (num) {
                    case 105: {
                            this.match(105);
                            token2 = this.LT(1);
                            this.match(232);
                            Identifier fileGroup = this.identifier();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.Match(token2, "FILEGROUP");
                                createFullTextCatalogStatement.FileGroup = fileGroup;
                            }
                            goto IL_034a;
                        }
                    case 1:
                    case 4:
                    case 6:
                    case 9:
                    case 11:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 83:
                    case 86:
                    case 92:
                    case 95:
                    case 106:
                        goto IL_034a;
                }
            } else {
                switch (num) {
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_034a;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_034a:
            int num2 = this.LA(1);
            if (num2 <= 106) {
                switch (num2) {
                    case 83: {
                            this.match(83);
                            token3 = this.LT(1);
                            this.match(232);
                            Literal path = this.stringLiteral();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.Match(token3, "PATH");
                                createFullTextCatalogStatement.Path = path;
                            }
                            goto IL_0634;
                        }
                    case 1:
                    case 4:
                    case 6:
                    case 9:
                    case 11:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                    case 106:
                        goto IL_0634;
                }
            } else {
                switch (num2) {
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0634;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0634:
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                FullTextCatalogOption item = this.accentSensitivity();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createFullTextCatalogStatement, createFullTextCatalogStatement.Options, item);
                }
                goto IL_06b9;
            }
            if (TSql140ParserInternal.tokenSet_72_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_06b9;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_06b9:
            int num3 = this.LA(1);
            if (num3 <= 95) {
                switch (num3) {
                    case 9:
                        this.match(9);
                        token4 = this.LT(1);
                        this.match(47);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(createFullTextCatalogStatement, token4);
                            createFullTextCatalogStatement.IsDefault = true;
                        }
                        goto IL_0980;
                    case 1:
                    case 4:
                    case 6:
                    case 11:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0980;
                }
            } else {
                switch (num3) {
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0980;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0980:
            this.authorizationOpt(createFullTextCatalogStatement);
            return createFullTextCatalogStatement;
        }

        public CreateFullTextIndexStatement createFulltextIndexStatement() {
            CreateFullTextIndexStatement createFullTextIndexStatement = base.FragmentFactory.CreateFragment<CreateFullTextIndexStatement>();
            this.match(84);
            this.match(105);
            SchemaObjectName onName = this.schemaObjectFourPartName();
            if (base.inputState.guessing == 0) {
                createFullTextIndexStatement.OnName = onName;
                base.ThrowPartialAstIfPhaseOne(createFullTextIndexStatement);
            }
            switch (this.LA(1)) {
                case 191: {
                        this.match(191);
                        FullTextIndexColumn item = this.fulltextIndexColumn();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createFullTextIndexStatement, createFullTextIndexStatement.FullTextIndexColumns, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.fulltextIndexColumn();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createFullTextIndexStatement, createFullTextIndexStatement.FullTextIndexColumns, item);
                            }
                        }
                        this.match(192);
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 91:
                    break;
            }
            this.match(91);
            this.match(84);
            Identifier keyIndexName = this.identifier();
            if (base.inputState.guessing == 0) {
                createFullTextIndexStatement.KeyIndexName = keyIndexName;
            }
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_03af;
                }
            } else {
                switch (num) {
                    case 105: {
                            FullTextCatalogAndFileGroup catalogAndFileGroup = this.fullTextCatalogAndFileGroup();
                            if (base.inputState.guessing == 0) {
                                createFullTextIndexStatement.CatalogAndFileGroup = catalogAndFileGroup;
                            }
                            goto IL_03af;
                        }
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_03af;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_03af:
            this.createFulltextOptions(createFullTextIndexStatement);
            return createFullTextIndexStatement;
        }

        public CreateFullTextStopListStatement createFulltextStoplistStatement() {
            CreateFullTextStopListStatement createFullTextStopListStatement = base.FragmentFactory.CreateFragment<CreateFullTextStopListStatement>();
            IToken token = null;
            this.match(183);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                createFullTextStopListStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createFullTextStopListStatement);
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 71:
                        break;
                    default:
                        goto IL_0446;
                    case 1:
                    case 4:
                    case 6:
                    case 11:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0459;
                }
                this.match(71);
                if ((this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_73_.member(this.LA(2))) {
                    if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 200) {
                        Identifier databaseName = this.identifier();
                        this.match(200);
                        if (base.inputState.guessing == 0) {
                            createFullTextStopListStatement.DatabaseName = databaseName;
                        }
                        goto IL_03a5;
                    }
                    if (this.LA(1) != 232 && this.LA(1) != 233) {
                        goto IL_0392;
                    }
                    if (!TSql140ParserInternal.tokenSet_74_.member(this.LA(2))) {
                        goto IL_0392;
                    }
                    goto IL_03a5;
                }
                if (this.LA(1) == 232 && this.LA(2) == 183) {
                    token = this.LT(1);
                    this.match(232);
                    this.match(183);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token, "SYSTEM");
                        createFullTextStopListStatement.IsSystemStopList = true;
                        createFullTextStopListStatement.SourceStopListName = null;
                    }
                    goto IL_0459;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            switch (num) {
                case 106:
                case 119:
                case 123:
                case 125:
                case 126:
                case 129:
                case 131:
                case 132:
                case 134:
                case 138:
                case 140:
                case 142:
                case 143:
                case 144:
                case 156:
                case 160:
                case 161:
                case 162:
                case 167:
                case 170:
                case 171:
                case 172:
                case 176:
                case 182:
                case 191:
                case 204:
                case 219:
                case 220:
                case 232:
                    goto IL_0459;
            }
            goto IL_0446;
            IL_0459:
            this.authorizationOpt(createFullTextStopListStatement);
            this.requiredSemicolon(createFullTextStopListStatement, "FullText Stoplist");
            return createFullTextStopListStatement;
            IL_0446:
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_03a5:
            Identifier sourceStopListName = this.identifier();
            if (base.inputState.guessing == 0) {
                createFullTextStopListStatement.SourceStopListName = sourceStopListName;
                createFullTextStopListStatement.IsSystemStopList = false;
            }
            goto IL_0459;
            IL_0392:
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public OnOffFullTextCatalogOption accentSensitivity() {
            OnOffFullTextCatalogOption onOffFullTextCatalogOption = base.FragmentFactory.CreateFragment<OnOffFullTextCatalogOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            OptionState optionState = this.optionOnOff(onOffFullTextCatalogOption);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ACCENT_SENSITIVITY");
                onOffFullTextCatalogOption.OptionKind = FullTextCatalogOptionKind.AccentSensitivity;
                onOffFullTextCatalogOption.OptionState = optionState;
            }
            return onOffFullTextCatalogOption;
        }

        public FullTextIndexColumn fulltextIndexColumn() {
            FullTextIndexColumn fullTextIndexColumn = base.FragmentFactory.CreateFragment<FullTextIndexColumn>();
            IToken token = null;
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                fullTextIndexColumn.Name = name;
            }
            if (this.LA(1) == 232 && this.LA(2) == 27 && base.NextTokenMatches("TYPE")) {
                this.match(232);
                this.match(27);
                name = this.identifier();
                if (base.inputState.guessing == 0) {
                    fullTextIndexColumn.TypeColumn = name;
                }
            } else {
                if (this.LA(1) != 192 && this.LA(1) != 198 && this.LA(1) != 232) {
                    goto IL_00bc;
                }
                if (!TSql140ParserInternal.tokenSet_75_.member(this.LA(2))) {
                    goto IL_00bc;
                }
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_76_.member(this.LA(2)) && base.NextTokenMatches("LANGUAGE")) {
                IdentifierOrValueExpression languageTerm = this.languageTerm();
                if (base.inputState.guessing == 0) {
                    fullTextIndexColumn.LanguageTerm = languageTerm;
                }
            } else {
                if (this.LA(1) != 192 && this.LA(1) != 198 && this.LA(1) != 232) {
                    goto IL_0157;
                }
                if (!TSql140ParserInternal.tokenSet_77_.member(this.LA(2))) {
                    goto IL_0157;
                }
            }
            if (this.LA(1) == 232 && base.NextTokenMatches("STATISTICAL_SEMANTICS")) {
                token = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "STATISTICAL_SEMANTICS");
                    fullTextIndexColumn.StatisticalSemantics = true;
                }
            } else if (this.LA(1) != 192 && this.LA(1) != 198) {
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return fullTextIndexColumn;
            IL_0157:
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00bc:
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public IdentifierOrValueExpression languageTerm() {
            IdentifierOrValueExpression identifierOrValueExpression = base.FragmentFactory.CreateFragment<IdentifierOrValueExpression>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "LANGUAGE");
            }
            switch (this.LA(1)) {
                case 230:
                case 231: {
                        Literal literal = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.CheckIfValidLanguageString(literal);
                            identifierOrValueExpression.ValueExpression = literal;
                        }
                        break;
                    }
                case 221: {
                        Literal literal = this.integer();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.CheckIfValidLanguageInteger(literal);
                            identifierOrValueExpression.ValueExpression = literal;
                        }
                        break;
                    }
                case 232:
                case 233: {
                        Identifier identifier = this.identifier();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.CheckIfValidLanguageIdentifier(identifier);
                            identifierOrValueExpression.Identifier = identifier;
                        }
                        break;
                    }
                case 224: {
                        Literal literal = this.binary();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.CheckIfValidLanguageHex(literal);
                            identifierOrValueExpression.ValueExpression = literal;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return identifierOrValueExpression;
        }

        public FullTextCatalogAndFileGroup fullTextCatalogAndFileGroup() {
            FullTextCatalogAndFileGroup fullTextCatalogAndFileGroup = base.FragmentFactory.CreateFragment<FullTextCatalogAndFileGroup>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(105);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(fullTextCatalogAndFileGroup, token);
            }
            switch (this.LA(1)) {
                case 232:
                case 233: {
                        Identifier catalogName = this.identifier();
                        if (base.inputState.guessing == 0) {
                            fullTextCatalogAndFileGroup.CatalogName = catalogName;
                        }
                        break;
                    }
                case 191: {
                        this.match(191);
                        if (this.LA(1) != 232 && this.LA(1) != 233) {
                            goto IL_0176;
                        }
                        if (this.LA(2) != 192 && this.LA(2) != 198) {
                            goto IL_0176;
                        }
                        Identifier catalogName = this.identifier();
                        if (base.inputState.guessing == 0) {
                            fullTextCatalogAndFileGroup.CatalogName = catalogName;
                            fullTextCatalogAndFileGroup.FileGroupIsFirst = false;
                        }
                        switch (this.LA(1)) {
                            case 198: {
                                    this.match(198);
                                    token2 = this.LT(1);
                                    this.match(232);
                                    Identifier fileGroupName = this.identifier();
                                    if (base.inputState.guessing == 0) {
                                        TSql80ParserBaseInternal.Match(token2, "FILEGROUP");
                                        fullTextCatalogAndFileGroup.FileGroupName = fileGroupName;
                                    }
                                    break;
                                }
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 192:
                                break;
                        }
                        goto IL_0253;
                    }
                default: {
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    IL_0176:
                    if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                        token3 = this.LT(1);
                        this.match(232);
                        Identifier fileGroupName = this.identifier();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token3, "FILEGROUP");
                            fullTextCatalogAndFileGroup.FileGroupName = fileGroupName;
                            fullTextCatalogAndFileGroup.FileGroupIsFirst = true;
                        }
                        switch (this.LA(1)) {
                            case 198: {
                                    this.match(198);
                                    Identifier catalogName = this.identifier();
                                    if (base.inputState.guessing == 0) {
                                        fullTextCatalogAndFileGroup.CatalogName = catalogName;
                                    }
                                    break;
                                }
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 192:
                                break;
                        }
                        goto IL_0253;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                    IL_0253:
                    token4 = this.LT(1);
                    this.match(192);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(fullTextCatalogAndFileGroup, token4);
                    }
                    break;
            }
            return fullTextCatalogAndFileGroup;
        }

        public void createFulltextOptions(CreateFullTextIndexStatement vParent) {
            IToken token = null;
            if (this.LA(1) == 171 && (this.LA(2) == 183 || this.LA(2) == 191 || this.LA(2) == 232)) {
                this.match(171);
                switch (this.LA(1)) {
                    case 183:
                    case 232:
                        this.createFulltextOptionsList(vParent);
                        break;
                    case 191:
                        this.match(191);
                        this.createFulltextOptionsList(vParent);
                        token = this.LT(1);
                        this.match(192);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                return;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void createFulltextOptionsList(CreateFullTextIndexStatement vParent) {
            int num = 0;
            FullTextIndexOption fullTextIndexOption = this.fullTextIndexOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)fullTextIndexOption.OptionKind, fullTextIndexOption);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, fullTextIndexOption);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                fullTextIndexOption = this.fullTextIndexOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)fullTextIndexOption.OptionKind, fullTextIndexOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, fullTextIndexOption);
                }
            }
        }

        public FullTextIndexOption fullTextIndexOption() {
            if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 206 || this.LA(2) == 232) && base.NextTokenMatches("CHANGE_TRACKING")) {
                return this.changeTrackingFulltextIndexOption();
            }
            if (this.LA(1) == 183) {
                return this.stoplistFulltextIndexOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 232) {
                return this.searchPropertyListFullTextIndexOption();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ChangeTrackingFullTextIndexOption changeTrackingFulltextIndexOption() {
            ChangeTrackingFullTextIndexOption changeTrackingFullTextIndexOption = base.FragmentFactory.CreateFragment<ChangeTrackingFullTextIndexOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            token = this.LT(1);
            this.match(232);
            switch (this.LA(1)) {
                case 206:
                    this.match(206);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 103:
                case 232:
                    break;
            }
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CHANGE_TRACKING");
                changeTrackingFullTextIndexOption.OptionKind = FullTextIndexOptionKind.ChangeTracking;
                TSql80ParserBaseInternal.UpdateTokenInfo(changeTrackingFullTextIndexOption, token);
            }
            switch (this.LA(1)) {
                case 103:
                    token2 = this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(changeTrackingFullTextIndexOption, token2);
                        changeTrackingFullTextIndexOption.Value = ChangeTrackingOption.Off;
                    }
                    if (this.LA(1) == 198 && this.LA(2) == 232) {
                        this.match(198);
                        token3 = this.LT(1);
                        this.match(232);
                        token4 = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token3, "NO");
                            TSql80ParserBaseInternal.Match(token4, "POPULATION");
                            TSql80ParserBaseInternal.UpdateTokenInfo(changeTrackingFullTextIndexOption, token4);
                            changeTrackingFullTextIndexOption.Value = ChangeTrackingOption.OffNoPopulation;
                        }
                        break;
                    }
                    if (TSql140ParserInternal.tokenSet_78_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 232:
                    token5 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        if (TSql80ParserBaseInternal.TryMatch(token5, "MANUAL")) {
                            changeTrackingFullTextIndexOption.Value = ChangeTrackingOption.Manual;
                        } else {
                            TSql80ParserBaseInternal.Match(token5, "AUTO");
                            changeTrackingFullTextIndexOption.Value = ChangeTrackingOption.Auto;
                        }
                        TSql80ParserBaseInternal.UpdateTokenInfo(changeTrackingFullTextIndexOption, token5);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return changeTrackingFullTextIndexOption;
        }

        public StopListFullTextIndexOption stoplistFulltextIndexOption() {
            StopListFullTextIndexOption stopListFullTextIndexOption = base.FragmentFactory.CreateFragment<StopListFullTextIndexOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(183);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(stopListFullTextIndexOption, token);
                stopListFullTextIndexOption.OptionKind = FullTextIndexOptionKind.StopList;
            }
            switch (this.LA(1)) {
                case 206:
                    this.match(206);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 103:
                case 232:
                case 233:
                    break;
            }
            switch (this.LA(1)) {
                case 232:
                case 233: {
                        Identifier stopListName = this.identifier();
                        if (base.inputState.guessing == 0) {
                            stopListFullTextIndexOption.StopListName = stopListName;
                            stopListFullTextIndexOption.IsOff = false;
                        }
                        break;
                    }
                case 103:
                    token2 = this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        stopListFullTextIndexOption.IsOff = true;
                        TSql80ParserBaseInternal.UpdateTokenInfo(stopListFullTextIndexOption, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return stopListFullTextIndexOption;
        }

        public SearchPropertyListFullTextIndexOption searchPropertyListFullTextIndexOption() {
            SearchPropertyListFullTextIndexOption searchPropertyListFullTextIndexOption = base.FragmentFactory.CreateFragment<SearchPropertyListFullTextIndexOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            token3 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SEARCH");
                TSql80ParserBaseInternal.Match(token2, "PROPERTY");
                TSql80ParserBaseInternal.Match(token3, "LIST");
                searchPropertyListFullTextIndexOption.OptionKind = FullTextIndexOptionKind.SearchPropertyList;
            }
            switch (this.LA(1)) {
                case 206:
                    this.match(206);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 103:
                case 232:
                case 233:
                    break;
            }
            switch (this.LA(1)) {
                case 232:
                case 233: {
                        Identifier propertyListName = this.identifier();
                        if (base.inputState.guessing == 0) {
                            searchPropertyListFullTextIndexOption.PropertyListName = propertyListName;
                        }
                        break;
                    }
                case 103:
                    token4 = this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        searchPropertyListFullTextIndexOption.IsOff = true;
                        TSql80ParserBaseInternal.UpdateTokenInfo(searchPropertyListFullTextIndexOption, token4);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return searchPropertyListFullTextIndexOption;
        }

        public void requiredSemicolon(TSqlFragment vParent, string vStatement) {
            IToken token = null;
            if (this.LA(1) == 204 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2))) {
                token = this.LT(1);
                this.match(204);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                }
                goto IL_0085;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0085;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0085:
            if (base.inputState.guessing == 0 && token == null) {
                TSql80ParserBaseInternal.ThrowParseErrorException("SQL46097", vParent, TSqlParserResource.SQL46097Message, vStatement);
            }
        }

        public AlterFullTextStopListStatement alterFulltextStoplistStatement() {
            AlterFullTextStopListStatement alterFullTextStopListStatement = base.FragmentFactory.CreateFragment<AlterFullTextStopListStatement>();
            this.match(183);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                alterFullTextStopListStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterFullTextStopListStatement);
            }
            FullTextStopListAction action = this.fulltextStoplistAction();
            if (base.inputState.guessing == 0) {
                alterFullTextStopListStatement.Action = action;
            }
            this.requiredSemicolon(alterFullTextStopListStatement, "FullText Stoplist");
            return alterFullTextStopListStatement;
        }

        public FullTextStopListAction fulltextStoplistAction() {
            FullTextStopListAction fullTextStopListAction = null;
            switch (this.LA(1)) {
                case 4:
                    return this.addFulltextStoplistAction();
                case 54:
                    return this.dropFulltextStoplistAction();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public FullTextStopListAction addFulltextStoplistAction() {
            FullTextStopListAction fullTextStopListAction = base.FragmentFactory.CreateFragment<FullTextStopListAction>();
            this.match(4);
            if (base.inputState.guessing == 0) {
                fullTextStopListAction.IsAdd = true;
            }
            Literal stopWord = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                fullTextStopListAction.StopWord = stopWord;
            }
            IdentifierOrValueExpression languageTerm = this.languageTerm();
            if (base.inputState.guessing == 0) {
                fullTextStopListAction.LanguageTerm = languageTerm;
            }
            return fullTextStopListAction;
        }

        public FullTextStopListAction dropFulltextStoplistAction() {
            FullTextStopListAction fullTextStopListAction = base.FragmentFactory.CreateFragment<FullTextStopListAction>();
            this.match(54);
            if (base.inputState.guessing == 0) {
                fullTextStopListAction.IsAdd = false;
            }
            switch (this.LA(1)) {
                case 230:
                case 231: {
                        Literal stopWord = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            fullTextStopListAction.StopWord = stopWord;
                        }
                        IdentifierOrValueExpression languageTerm = this.languageTerm();
                        if (base.inputState.guessing == 0) {
                            fullTextStopListAction.LanguageTerm = languageTerm;
                        }
                        break;
                    }
                case 5:
                    this.match(5);
                    if (base.inputState.guessing == 0) {
                        fullTextStopListAction.IsAll = true;
                    }
                    if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_76_.member(this.LA(2))) {
                        IdentifierOrValueExpression languageTerm = this.languageTerm();
                        if (base.inputState.guessing == 0) {
                            fullTextStopListAction.LanguageTerm = languageTerm;
                        }
                        break;
                    }
                    if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return fullTextStopListAction;
        }

        public BinaryLiteral binary() {
            BinaryLiteral binaryLiteral = base.FragmentFactory.CreateFragment<BinaryLiteral>();
            IToken token = null;
            token = this.LT(1);
            this.match(224);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(binaryLiteral, token);
                binaryLiteral.Value = token.getText();
                binaryLiteral.IsLargeObject = TSql80ParserBaseInternal.IsBinaryLiteralLob(binaryLiteral.Value);
            }
            return binaryLiteral;
        }

        public DropFullTextStopListStatement dropFulltextStoplistStatement() {
            DropFullTextStopListStatement dropFullTextStopListStatement = base.FragmentFactory.CreateFragment<DropFullTextStopListStatement>();
            this.match(183);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                dropFullTextStopListStatement.Name = name;
            }
            this.requiredSemicolon(dropFullTextStopListStatement, "FullText Stoplist");
            return dropFullTextStopListStatement;
        }

        public AlterSearchPropertyListStatement alterSearchPropertyListStatement() {
            AlterSearchPropertyListStatement alterSearchPropertyListStatement = base.FragmentFactory.CreateFragment<AlterSearchPropertyListStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            token3 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SEARCH");
                TSql80ParserBaseInternal.Match(token2, "PROPERTY");
                TSql80ParserBaseInternal.Match(token3, "LIST");
                alterSearchPropertyListStatement.Name = name;
            }
            SearchPropertyListAction action = this.searchPropertyListAction();
            if (base.inputState.guessing == 0) {
                alterSearchPropertyListStatement.Action = action;
            }
            this.requiredSemicolon(alterSearchPropertyListStatement, "Search Property List");
            return alterSearchPropertyListStatement;
        }

        public SearchPropertyListAction searchPropertyListAction() {
            switch (this.LA(1)) {
                case 4:
                    return this.addSearchPropertyListAction();
                case 54:
                    return this.dropSearchPropertyListAction();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public AddSearchPropertyListAction addSearchPropertyListAction() {
            AddSearchPropertyListAction addSearchPropertyListAction = base.FragmentFactory.CreateFragment<AddSearchPropertyListAction>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(4);
            StringLiteral propertyName = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                addSearchPropertyListAction.PropertyName = propertyName;
                TSql80ParserBaseInternal.UpdateTokenInfo(addSearchPropertyListAction, token);
            }
            this.match(171);
            this.match(191);
            token2 = this.LT(1);
            this.match(232);
            this.match(206);
            StringLiteral guid = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "PROPERTY_SET_GUID");
                addSearchPropertyListAction.Guid = guid;
            }
            this.match(198);
            token3 = this.LT(1);
            this.match(232);
            this.match(206);
            IntegerLiteral id = this.integer();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token3, "PROPERTY_INT_ID");
                addSearchPropertyListAction.Id = id;
            }
            switch (this.LA(1)) {
                case 198: {
                        this.match(198);
                        this.LT(1);
                        this.match(232);
                        this.match(206);
                        StringLiteral description = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            addSearchPropertyListAction.Description = description;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token4 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(addSearchPropertyListAction, token4);
            }
            return addSearchPropertyListAction;
        }

        public DropSearchPropertyListAction dropSearchPropertyListAction() {
            DropSearchPropertyListAction dropSearchPropertyListAction = base.FragmentFactory.CreateFragment<DropSearchPropertyListAction>();
            IToken token = null;
            token = this.LT(1);
            this.match(54);
            StringLiteral propertyName = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(dropSearchPropertyListAction, token);
                dropSearchPropertyListAction.PropertyName = propertyName;
            }
            return dropSearchPropertyListAction;
        }

        public DropSearchPropertyListStatement dropSearchPropertyListStatement() {
            DropSearchPropertyListStatement dropSearchPropertyListStatement = base.FragmentFactory.CreateFragment<DropSearchPropertyListStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            token3 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SEARCH");
                TSql80ParserBaseInternal.Match(token2, "PROPERTY");
                TSql80ParserBaseInternal.Match(token3, "LIST");
                dropSearchPropertyListStatement.Name = name;
            }
            this.requiredSemicolon(dropSearchPropertyListStatement, "Search Property List");
            return dropSearchPropertyListStatement;
        }

        public CreateExternalTableStatement createExternalTableStatement() {
            CreateExternalTableStatement createExternalTableStatement = base.FragmentFactory.CreateFragment<CreateExternalTableStatement>();
            IToken token = null;
            this.match(148);
            SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                createExternalTableStatement.SchemaObjectName = schemaObjectName;
                base.ThrowPartialAstIfPhaseOne(createExternalTableStatement);
            }
            this.match(191);
            this.externalTableColumnElement(createExternalTableStatement);
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                this.externalTableColumnElement(createExternalTableStatement);
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createExternalTableStatement, token);
            }
            this.withExternalTableOptions(createExternalTableStatement);
            return createExternalTableStatement;
        }

        public CreateExternalDataSourceStatement createExternalDataSourceStatement() {
            CreateExternalDataSourceStatement createExternalDataSourceStatement = base.FragmentFactory.CreateFragment<CreateExternalDataSourceStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            int num = 0;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "DATA");
                TSql80ParserBaseInternal.Match(token2, "SOURCE");
                createExternalDataSourceStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createExternalDataSourceStatement);
            }
            this.LT(1);
            this.match(171);
            this.match(191);
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("TYPE")) {
                this.externalDataSourceType(createExternalDataSourceStatement);
                goto IL_015e;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LOCATION")) {
                this.externalDataSourceLocation(createExternalDataSourceStatement);
                goto IL_015e;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                ExternalDataSourceOption externalDataSourceOption = this.externalDataSourceLiteralOrIdentifierOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)externalDataSourceOption.OptionKind, externalDataSourceOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createExternalDataSourceStatement, createExternalDataSourceStatement.ExternalDataSourceOptions, externalDataSourceOption);
                }
                goto IL_015e;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_015e:
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.LT(1);
                this.match(198);
                if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("TYPE")) {
                    this.externalDataSourceType(createExternalDataSourceStatement);
                    continue;
                }
                if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LOCATION")) {
                    this.externalDataSourceLocation(createExternalDataSourceStatement);
                    continue;
                }
                if (this.LA(1) == 232 && this.LA(2) == 206) {
                    ExternalDataSourceOption externalDataSourceOption = this.externalDataSourceLiteralOrIdentifierOption();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)externalDataSourceOption.OptionKind, externalDataSourceOption);
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createExternalDataSourceStatement, createExternalDataSourceStatement.ExternalDataSourceOptions, externalDataSourceOption);
                    }
                    continue;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            token3 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createExternalDataSourceStatement, token3);
            }
            return createExternalDataSourceStatement;
        }

        public CreateExternalFileFormatStatement createExternalFileFormatStatement() {
            CreateExternalFileFormatStatement createExternalFileFormatStatement = base.FragmentFactory.CreateFragment<CreateExternalFileFormatStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            this.match(65);
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FORMAT");
                createExternalFileFormatStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createExternalFileFormatStatement);
            }
            this.LT(1);
            this.match(171);
            this.match(191);
            token2 = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "FORMAT_TYPE");
                TSql80ParserBaseInternal.UpdateTokenInfo(createExternalFileFormatStatement, token2);
            }
            token3 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                if (!TSql80ParserBaseInternal.TryMatch(token3, "DELIMITEDTEXT")) {
                    if (TSql80ParserBaseInternal.TryMatch(token3, "RCFILE")) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(createExternalFileFormatStatement, token3);
                        createExternalFileFormatStatement.FormatType = ExternalFileFormatType.RcFile;
                        goto IL_0158;
                    }
                    if (TSql80ParserBaseInternal.TryMatch(token3, "ORC")) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(createExternalFileFormatStatement, token3);
                        createExternalFileFormatStatement.FormatType = ExternalFileFormatType.Orc;
                        goto IL_0158;
                    }
                    if (TSql80ParserBaseInternal.TryMatch(token3, "PARQUET")) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(createExternalFileFormatStatement, token3);
                        createExternalFileFormatStatement.FormatType = ExternalFileFormatType.Parquet;
                        goto IL_0158;
                    }
                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token3);
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(createExternalFileFormatStatement, token3);
                createExternalFileFormatStatement.FormatType = ExternalFileFormatType.DelimitedText;
            }
            goto IL_0158;
            IL_0158:
            switch (this.LA(1)) {
                case 198:
                    token4 = this.LT(1);
                    this.match(198);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(createExternalFileFormatStatement, token4);
                    }
                    this.externalFileFormatOptions(createExternalFileFormatStatement);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token5 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createExternalFileFormatStatement, token5);
            }
            return createExternalFileFormatStatement;
        }

        public CreateExternalResourcePoolStatement createExternalResourcePoolStatement() {
            CreateExternalResourcePoolStatement createExternalResourcePoolStatement = base.FragmentFactory.CreateFragment<CreateExternalResourcePoolStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "RESOURCE");
                TSql80ParserBaseInternal.Match(token2, "POOL");
                createExternalResourcePoolStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createExternalResourcePoolStatement);
            }
            this.externalResourcePoolStatementBody(createExternalResourcePoolStatement);
            return createExternalResourcePoolStatement;
        }

        public TSqlStatement alterExternalStatements() {
            TSqlStatement tSqlStatement = null;
            this.match(175);
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("DATA")) {
                return this.alterExternalDataSourceStatement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("RESOURCE")) {
                return this.alterExternalResourcePoolStatement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public AlterExternalDataSourceStatement alterExternalDataSourceStatement() {
            AlterExternalDataSourceStatement alterExternalDataSourceStatement = base.FragmentFactory.CreateFragment<AlterExternalDataSourceStatement>();
            IToken token = null;
            IToken token2 = null;
            int num = 0;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "DATA");
                TSql80ParserBaseInternal.Match(token2, "SOURCE");
                alterExternalDataSourceStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterExternalDataSourceStatement);
            }
            this.LT(1);
            this.match(142);
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LOCATION")) {
                this.externalDataSourceLocation(alterExternalDataSourceStatement);
                goto IL_011a;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                ExternalDataSourceOption externalDataSourceOption = this.externalDataSourceLiteralOrIdentifierOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)externalDataSourceOption.OptionKind, externalDataSourceOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterExternalDataSourceStatement, alterExternalDataSourceStatement.ExternalDataSourceOptions, externalDataSourceOption);
                }
                goto IL_011a;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_011a:
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.LT(1);
                this.match(198);
                if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LOCATION")) {
                    this.externalDataSourceLocation(alterExternalDataSourceStatement);
                    continue;
                }
                if (this.LA(1) == 232 && this.LA(2) == 206) {
                    ExternalDataSourceOption externalDataSourceOption = this.externalDataSourceLiteralOrIdentifierOption();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)externalDataSourceOption.OptionKind, externalDataSourceOption);
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterExternalDataSourceStatement, alterExternalDataSourceStatement.ExternalDataSourceOptions, externalDataSourceOption);
                    }
                    continue;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return alterExternalDataSourceStatement;
        }

        public AlterExternalResourcePoolStatement alterExternalResourcePoolStatement() {
            AlterExternalResourcePoolStatement alterExternalResourcePoolStatement = base.FragmentFactory.CreateFragment<AlterExternalResourcePoolStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "RESOURCE");
                TSql80ParserBaseInternal.Match(token2, "POOL");
                alterExternalResourcePoolStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterExternalResourcePoolStatement);
            }
            this.externalResourcePoolStatementBody(alterExternalResourcePoolStatement);
            return alterExternalResourcePoolStatement;
        }

        public IndexStatement createXmlIndexStatement(bool vPrimary) {
            IndexStatement indexStatement = null;
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            this.match(84);
            Identifier identifier = this.identifier();
            this.match(105);
            SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
            this.match(191);
            Identifier identifier2 = this.identifier();
            token = this.LT(1);
            this.match(192);
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2)) && vPrimary) {
                if (base.inputState.guessing == 0) {
                    CreateXmlIndexStatement createXmlIndexStatement = base.FragmentFactory.CreateFragment<CreateXmlIndexStatement>();
                    createXmlIndexStatement.Primary = vPrimary;
                    createXmlIndexStatement.Name = identifier;
                    createXmlIndexStatement.OnName = schemaObjectName;
                    base.ThrowPartialAstIfPhaseOne(createXmlIndexStatement);
                    createXmlIndexStatement.XmlColumn = identifier2;
                    TSql80ParserBaseInternal.UpdateTokenInfo(createXmlIndexStatement, token);
                    indexStatement = createXmlIndexStatement;
                }
                goto IL_01d3;
            }
            if (this.LA(1) == 232 && this.LA(2) == 232) {
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "USING");
                }
                token3 = this.LT(1);
                this.match(232);
                this.match(84);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token3, "XML");
                }
                Identifier vSecondaryXmlIndexName = this.identifier();
                if (this.LA(1) == 67 && this.LA(2) == 232) {
                    indexStatement = this.secondaryXmlIndexStatementBody(identifier, schemaObjectName, identifier2, token, vSecondaryXmlIndexName);
                    goto IL_01d3;
                }
                if (this.LA(1) == 67 && this.LA(2) == 191) {
                    indexStatement = this.secondarySelectiveXmlIndex(identifier, schemaObjectName, identifier2, token, vSecondaryXmlIndexName);
                    goto IL_01d3;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0244:
            return indexStatement;
            IL_01d3:
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.match(171);
                this.indexOptionList(IndexAffectingStatement.CreateXmlIndex, indexStatement.IndexOptions, indexStatement);
                goto IL_0244;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0244;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public XmlNamespaces xmlNamespaces() {
            XmlNamespaces xmlNamespaces = base.FragmentFactory.CreateFragment<XmlNamespaces>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "XMLNAMESPACES");
            }
            this.match(191);
            XmlNamespacesElement item = this.xmlNamespacesElement();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(xmlNamespaces, xmlNamespaces.XmlNamespacesElements, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.xmlNamespacesElement();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(xmlNamespaces, xmlNamespaces.XmlNamespacesElements, item);
                }
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(xmlNamespaces, token2);
            }
            return xmlNamespaces;
        }

        public SelectiveXmlIndexPromotedPath promotedSelectiveXmlIndexPath() {
            SelectiveXmlIndexPromotedPath selectiveXmlIndexPromotedPath = base.FragmentFactory.CreateFragment<SelectiveXmlIndexPromotedPath>();
            Identifier identifier = null;
            StringLiteral stringLiteral = null;
            bool flag = false;
            IntegerLiteral integerLiteral = null;
            Identifier name = this.identifier();
            this.match(206);
            StringLiteral path = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                selectiveXmlIndexPromotedPath.Path = path;
                selectiveXmlIndexPromotedPath.Name = name;
            }
            switch (this.LA(1)) {
                case 9:
                    this.match(9);
                    if ((this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_79_.member(this.LA(2)) && base.NextTokenMatches("XQUERY")) {
                        identifier = this.identifier();
                        switch (this.LA(1)) {
                            case 230:
                            case 231:
                                stringLiteral = this.stringLiteral();
                                if (base.inputState.guessing == 0) {
                                    selectiveXmlIndexPromotedPath.XQueryDataType = stringLiteral;
                                }
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 192:
                            case 198:
                            case 232:
                            case 233:
                                break;
                        }
                        integerLiteral = this.maxlengthOption(selectiveXmlIndexPromotedPath);
                        if (base.inputState.guessing == 0) {
                            selectiveXmlIndexPromotedPath.MaxLength = integerLiteral;
                        }
                        goto IL_01ec;
                    }
                    if ((this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_65_.member(this.LA(2)) && base.NextTokenMatches("SQL")) {
                        Identifier id = this.identifier();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(id, "SQL");
                        }
                        DataTypeReference sQLDataType = this.scalarDataType();
                        if (base.inputState.guessing == 0) {
                            selectiveXmlIndexPromotedPath.SQLDataType = sQLDataType;
                        }
                        goto IL_01ec;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                case 198:
                    break;
                    IL_01ec:
                    flag = this.singletonOption();
                    if (base.inputState.guessing == 0) {
                        selectiveXmlIndexPromotedPath.IsSingleton = flag;
                    }
                    break;
            }
            if (base.inputState.guessing == 0 && identifier != null && stringLiteral == null && integerLiteral == null && !flag) {
                TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(identifier);
            }
            return selectiveXmlIndexPromotedPath;
        }

        public void indexOptionList(IndexAffectingStatement statementType, IList<IndexOption> optionsList, TSqlFragment vParent) {
            IToken token = null;
            this.match(191);
            IndexOption indexOption = this.indexOption();
            if (base.inputState.guessing == 0) {
                TSql140ParserBaseInternal.VerifyAllowedIndexOption140(statementType, indexOption);
                if (statementType == IndexAffectingStatement.CreateColumnStoreIndex) {
                    CreateColumnStoreIndexStatement createColumnStoreIndexStatement = (CreateColumnStoreIndexStatement)vParent;
                    if (createColumnStoreIndexStatement.Clustered.HasValue && !createColumnStoreIndexStatement.Clustered.Value && indexOption.OptionKind == IndexOptionKind.Order) {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(indexOption);
                    }
                }
                if (indexOption.OptionKind == IndexOptionKind.CompressionDelay) {
                    switch (statementType) {
                        case IndexAffectingStatement.CreateTableInlineIndex: {
                                IndexDefinition indexDefinition = (IndexDefinition)vParent;
                                if (indexDefinition.IndexType.IndexTypeKind != IndexTypeKind.NonClusteredColumnStore && indexDefinition.IndexType.IndexTypeKind != IndexTypeKind.ClusteredColumnStore) {
                                    TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(indexOption);
                                }
                                break;
                            }
                        default:
                            TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(indexOption);
                            break;
                        case IndexAffectingStatement.AlterIndexSet:
                        case IndexAffectingStatement.CreateColumnStoreIndex:
                            break;
                    }
                }
                optionsList.Add(indexOption);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                indexOption = this.indexOption();
                if (base.inputState.guessing == 0) {
                    TSql140ParserBaseInternal.VerifyAllowedIndexOption140(statementType, indexOption);
                    optionsList.Add(indexOption);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public CreateXmlSchemaCollectionStatement createXmlSchemaCollectionStatement() {
            CreateXmlSchemaCollectionStatement createXmlSchemaCollectionStatement = base.FragmentFactory.CreateFragment<CreateXmlSchemaCollectionStatement>();
            IToken token = null;
            this.match(139);
            token = this.LT(1);
            this.match(232);
            SchemaObjectName name = this.schemaObjectNonEmptyTwoPartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "COLLECTION");
                createXmlSchemaCollectionStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createXmlSchemaCollectionStatement);
            }
            this.match(9);
            ScalarExpression expression = this.expression();
            if (base.inputState.guessing == 0) {
                createXmlSchemaCollectionStatement.Expression = expression;
            }
            return createXmlSchemaCollectionStatement;
        }

        public SchemaObjectName schemaObjectNonEmptyTwoPartName() {
            SchemaObjectName schemaObjectName = base.FragmentFactory.CreateFragment<SchemaObjectName>();
            Identifier item = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(schemaObjectName, schemaObjectName.Identifiers, item);
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 9:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0301;
                }
            } else {
                switch (num) {
                    case 200:
                        this.match(200);
                        item = this.identifier();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(schemaObjectName, schemaObjectName.Identifiers, item);
                        }
                        goto IL_0301;
                    case 99:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 198:
                    case 203:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0301;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0301:
            return schemaObjectName;
        }

        public CreateXmlIndexStatement secondaryXmlIndexStatementBody(Identifier vName, SchemaObjectName vSchemaObjectName, Identifier vXmlColumn, IToken tRParen, Identifier vSecondaryXmlIndexName) {
            CreateXmlIndexStatement createXmlIndexStatement = base.FragmentFactory.CreateFragment<CreateXmlIndexStatement>();
            IToken token = null;
            createXmlIndexStatement.Name = vName;
            createXmlIndexStatement.OnName = vSchemaObjectName;
            base.ThrowPartialAstIfPhaseOne(createXmlIndexStatement);
            createXmlIndexStatement.XmlColumn = vXmlColumn;
            TSql80ParserBaseInternal.UpdateTokenInfo(createXmlIndexStatement, tRParen);
            createXmlIndexStatement.SecondaryXmlIndexName = vSecondaryXmlIndexName;
            this.match(67);
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                createXmlIndexStatement.SecondaryXmlIndexType = SecondaryXmlIndexTypeHelper.Instance.ParseOption(token);
                TSql80ParserBaseInternal.UpdateTokenInfo(createXmlIndexStatement, token);
            }
            return createXmlIndexStatement;
        }

        public CreateSelectiveXmlIndexStatement secondarySelectiveXmlIndex(Identifier vName, SchemaObjectName vSchemaObjectName, Identifier vXmlColumn, IToken tRParen, Identifier vSecondaryXmlIndexName) {
            CreateSelectiveXmlIndexStatement createSelectiveXmlIndexStatement = base.FragmentFactory.CreateFragment<CreateSelectiveXmlIndexStatement>();
            IToken token = null;
            createSelectiveXmlIndexStatement.IsSecondary = true;
            createSelectiveXmlIndexStatement.Name = vName;
            createSelectiveXmlIndexStatement.OnName = vSchemaObjectName;
            base.ThrowPartialAstIfPhaseOne(createSelectiveXmlIndexStatement);
            createSelectiveXmlIndexStatement.XmlColumn = vXmlColumn;
            TSql80ParserBaseInternal.UpdateTokenInfo(createSelectiveXmlIndexStatement, tRParen);
            createSelectiveXmlIndexStatement.UsingXmlIndexName = vSecondaryXmlIndexName;
            this.match(67);
            this.match(191);
            Identifier pathName = this.identifier();
            if (base.inputState.guessing == 0) {
                createSelectiveXmlIndexStatement.PathName = pathName;
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createSelectiveXmlIndexStatement, token);
            }
            return createSelectiveXmlIndexStatement;
        }

        public IntegerLiteral maxlengthOption(TSqlFragment vParent) {
            IntegerLiteral result = null;
            IToken token = null;
            if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 191 && base.NextTokenMatches("MAXLENGTH")) {
                this.identifier();
                this.match(191);
                IntegerLiteral integerLiteral = this.integer();
                if (base.inputState.guessing == 0) {
                    result = integerLiteral;
                }
                token = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                }
                goto IL_00c5;
            }
            if (TSql140ParserInternal.tokenSet_80_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_81_.member(this.LA(2))) {
                goto IL_00c5;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00c5:
            return result;
        }

        public bool singletonOption() {
            bool result = false;
            if ((this.LA(1) == 232 || this.LA(1) == 233) && base.NextTokenMatches("SINGLETON")) {
                this.identifier();
                if (base.inputState.guessing == 0) {
                    result = true;
                }
                goto IL_0072;
            }
            if (this.LA(1) != 192 && this.LA(1) != 198) {
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            goto IL_0072;
            IL_0072:
            return result;
        }

        public SelectiveXmlIndexPromotedPath promotedSelectiveXmlIndexPathInAlter() {
            SelectiveXmlIndexPromotedPath selectiveXmlIndexPromotedPath = null;
            IToken token = null;
            switch (this.LA(1)) {
                case 4: {
                        this.match(4);
                        SelectiveXmlIndexPromotedPath selectiveXmlIndexPromotedPath2 = this.promotedSelectiveXmlIndexPath();
                        if (base.inputState.guessing == 0) {
                            selectiveXmlIndexPromotedPath = selectiveXmlIndexPromotedPath2;
                        }
                        break;
                    }
                case 232: {
                        token = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token, "REMOVE");
                        }
                        Identifier name = this.identifier();
                        if (base.inputState.guessing == 0) {
                            selectiveXmlIndexPromotedPath = base.FragmentFactory.CreateFragment<SelectiveXmlIndexPromotedPath>();
                            selectiveXmlIndexPromotedPath.Name = name;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return selectiveXmlIndexPromotedPath;
        }

        public PasswordCreateLoginSource passwordLoginSource() {
            PasswordCreateLoginSource passwordCreateLoginSource = base.FragmentFactory.CreateFragment<PasswordCreateLoginSource>();
            IToken token = null;
            int num = 0;
            this.match(171);
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal password = this.loginPassword();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "PASSWORD");
                passwordCreateLoginSource.Password = password;
            }
            while (true) {
                if (this.LA(1) != 232) {
                    break;
                }
                if (!TSql140ParserInternal.tokenSet_56_.member(this.LA(2))) {
                    break;
                }
                this.createLoginPasswordOption(passwordCreateLoginSource);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                PrincipalOption principalOption = this.createLoginParam();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)principalOption.OptionKind, principalOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(passwordCreateLoginSource, passwordCreateLoginSource.Options, principalOption);
                }
            }
            return passwordCreateLoginSource;
        }

        public WindowsCreateLoginSource windowsLoginSource() {
            WindowsCreateLoginSource windowsCreateLoginSource = base.FragmentFactory.CreateFragment<WindowsCreateLoginSource>();
            IToken token = null;
            int num = 0;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "WINDOWS");
                TSql80ParserBaseInternal.UpdateTokenInfo(windowsCreateLoginSource, token);
            }
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                IdentifierPrincipalOption identifierPrincipalOption = this.createLoginParamWin();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(windowsCreateLoginSource, windowsCreateLoginSource.Options, identifierPrincipalOption);
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)identifierPrincipalOption.OptionKind, identifierPrincipalOption);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    identifierPrincipalOption = this.createLoginParamWin();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(windowsCreateLoginSource, windowsCreateLoginSource.Options, identifierPrincipalOption);
                        TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)identifierPrincipalOption.OptionKind, identifierPrincipalOption);
                    }
                }
                goto IL_0121;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0121;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0121:
            return windowsCreateLoginSource;
        }

        public CertificateCreateLoginSource certificateLoginSource() {
            CertificateCreateLoginSource certificateCreateLoginSource = base.FragmentFactory.CreateFragment<CertificateCreateLoginSource>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier certificate = this.identifier();
            Identifier identifier = this.createLoginParamCertOpt();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
                certificateCreateLoginSource.Certificate = certificate;
                if (identifier != null) {
                    certificateCreateLoginSource.Credential = identifier;
                }
            }
            return certificateCreateLoginSource;
        }

        public AsymmetricKeyCreateLoginSource asymmetricKeyLoginSource() {
            AsymmetricKeyCreateLoginSource asymmetricKeyCreateLoginSource = base.FragmentFactory.CreateFragment<AsymmetricKeyCreateLoginSource>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(91);
            Identifier key = this.identifier();
            Identifier identifier = this.createLoginParamCertOpt();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
                asymmetricKeyCreateLoginSource.Key = key;
                if (identifier != null) {
                    asymmetricKeyCreateLoginSource.Credential = identifier;
                }
            }
            return asymmetricKeyCreateLoginSource;
        }

        public Literal loginPassword() {
            switch (this.LA(1)) {
                case 224:
                    return this.binary();
                case 230:
                case 231:
                    return this.stringLiteral();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void createLoginPasswordOption(PasswordCreateLoginSource vParent) {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(token, "HASHED")) {
                    if (vParent.Hashed) {
                        throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                    }
                    vParent.Hashed = true;
                } else {
                    TSql80ParserBaseInternal.Match(token, "MUST_CHANGE");
                    if (vParent.MustChange) {
                        throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                    }
                    vParent.MustChange = true;
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public PrincipalOption createLoginParam() {
            PrincipalOption principalOption = null;
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            switch (this.LA(1)) {
                case 103:
                case 105:
                    principalOption = this.onOffPrincipalOption(token);
                    break;
                case 224: {
                        Literal value = this.binary();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token, "SID");
                            LiteralPrincipalOption literalPrincipalOption = base.FragmentFactory.CreateFragment<LiteralPrincipalOption>();
                            literalPrincipalOption.OptionKind = PrincipalOptionKind.Sid;
                            literalPrincipalOption.Value = value;
                            principalOption = literalPrincipalOption;
                        }
                        break;
                    }
                case 232:
                case 233: {
                        Identifier identifier = this.identifier();
                        if (base.inputState.guessing == 0) {
                            IdentifierPrincipalOption identifierPrincipalOption = base.FragmentFactory.CreateFragment<IdentifierPrincipalOption>();
                            identifierPrincipalOption.OptionKind = IdentifierCreateLoginOptionsHelper.Instance.ParseOption(token);
                            identifierPrincipalOption.Identifier = identifier;
                            principalOption = identifierPrincipalOption;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(principalOption, token);
            }
            return principalOption;
        }

        public OnOffPrincipalOption onOffPrincipalOption(IToken tOption) {
            OnOffPrincipalOption onOffPrincipalOption = base.FragmentFactory.CreateFragment<OnOffPrincipalOption>();
            OptionState optionState = this.optionOnOff(onOffPrincipalOption);
            if (base.inputState.guessing == 0) {
                onOffPrincipalOption.OptionKind = SecurityLoginOptionsHelper.Instance.ParseOption(tOption);
                onOffPrincipalOption.OptionState = optionState;
            }
            return onOffPrincipalOption;
        }

        public IdentifierPrincipalOption createLoginParamWin() {
            IdentifierPrincipalOption identifierPrincipalOption = base.FragmentFactory.CreateFragment<IdentifierPrincipalOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Identifier identifier = this.identifier();
            if (base.inputState.guessing == 0) {
                identifierPrincipalOption.OptionKind = IdentifierCreateLoginOptionsHelper.Instance.ParseOption(token);
                if (identifierPrincipalOption.OptionKind == PrincipalOptionKind.Credential) {
                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                }
                identifierPrincipalOption.Identifier = identifier;
            }
            return identifierPrincipalOption;
        }

        public Identifier createLoginParamCertOpt() {
            Identifier result = null;
            IToken token = null;
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                token = this.LT(1);
                this.match(232);
                this.match(206);
                result = this.identifier();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "CREDENTIAL");
                }
                goto IL_00a3;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00a3;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00a3:
            return result;
        }

        public void messageTypeValidation(MessageTypeStatementBase vParent) {
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "VALIDATION");
                vParent.ValidationMethod = MessageValidationMethodsHelper.Instance.ParseOption(token2);
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
            }
            if (this.LA(1) == 171 && this.LA(2) == 139) {
                token3 = this.LT(1);
                this.match(171);
                this.match(139);
                token4 = this.LT(1);
                this.match(232);
                SchemaObjectName xmlSchemaCollectionName = this.schemaObjectNonEmptyTwoPartName();
                if (base.inputState.guessing == 0) {
                    if (vParent.ValidationMethod != MessageValidationMethod.ValidXml) {
                        throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token3);
                    }
                    TSql80ParserBaseInternal.Match(token4, "COLLECTION");
                    vParent.XmlSchemaCollectionName = xmlSchemaCollectionName;
                }
                goto IL_0129;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0129;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0129:
            if (base.inputState.guessing == 0 && vParent.ValidationMethod == MessageValidationMethod.ValidXml && vParent.XmlSchemaCollectionName == null) {
                TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token2);
            }
        }

        public LiteralAvailabilityGroupOption availabilityGroupOption() {
            LiteralAvailabilityGroupOption literalAvailabilityGroupOption = base.FragmentFactory.CreateFragment<LiteralAvailabilityGroupOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal value = this.integer();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "REQUIRED_COPIES_TO_COMMIT");
                literalAvailabilityGroupOption.Value = value;
            }
            return literalAvailabilityGroupOption;
        }

        public AvailabilityReplica availabilityReplica() {
            AvailabilityReplica availabilityReplica = base.FragmentFactory.CreateFragment<AvailabilityReplica>();
            IToken token = null;
            int num = 0;
            StringLiteral serverName = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                availabilityReplica.ServerName = serverName;
            }
            this.match(171);
            this.match(191);
            AvailabilityReplicaOption availabilityReplicaOption = this.availabilityReplicaOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)availabilityReplicaOption.OptionKind, availabilityReplicaOption);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(availabilityReplica, availabilityReplica.Options, availabilityReplicaOption);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                availabilityReplicaOption = this.availabilityReplicaOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)availabilityReplicaOption.OptionKind, availabilityReplicaOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(availabilityReplica, availabilityReplica.Options, availabilityReplicaOption);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(availabilityReplica, token);
            }
            return availabilityReplica;
        }

        public AlterAvailabilityGroupStatement alterAvailabilityGroupStatement() {
            AlterAvailabilityGroupStatement alterAvailabilityGroupStatement = base.FragmentFactory.CreateFragment<AlterAvailabilityGroupStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(76);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "AVAILABILITY");
                alterAvailabilityGroupStatement.Name = name;
            }
            if (this.LA(1) == 4 && this.LA(2) == 43) {
                this.alterAvailabilityGroupAddDatabase(alterAvailabilityGroupStatement);
                goto IL_017f;
            }
            if (this.LA(1) == 232 && this.LA(2) == 43) {
                this.alterAvailabilityGroupRemoveDatabase(alterAvailabilityGroupStatement);
                goto IL_017f;
            }
            if (this.LA(1) == 4 && this.LA(2) == 232) {
                this.alterAvailabilityGroupAddReplica(alterAvailabilityGroupStatement);
                goto IL_017f;
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MODIFY")) {
                this.alterAvailabilityGroupModifyReplica(alterAvailabilityGroupStatement);
                goto IL_017f;
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("REMOVE")) {
                this.alterAvailabilityGroupRemoveReplica(alterAvailabilityGroupStatement);
                goto IL_017f;
            }
            if (this.LA(1) == 142) {
                this.alterAvailabilityGroupSetOption(alterAvailabilityGroupStatement);
                goto IL_017f;
            }
            if ((this.LA(1) == 90 || this.LA(1) == 232) && TSql140ParserInternal.tokenSet_19_.member(this.LA(2))) {
                this.alterAvailabilityGroupTakeAction(alterAvailabilityGroupStatement);
                goto IL_017f;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_017f:
            return alterAvailabilityGroupStatement;
        }

        public void alterAvailabilityGroupAddDatabase(AlterAvailabilityGroupStatement vResult) {
            this.match(4);
            this.match(43);
            Identifier item = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.Databases, item);
                vResult.AlterAvailabilityGroupStatementType = AlterAvailabilityGroupStatementType.AddDatabase;
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.identifier();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.Databases, item);
                }
            }
        }

        public void alterAvailabilityGroupRemoveDatabase(AlterAvailabilityGroupStatement vResult) {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(43);
            Identifier item = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "REMOVE");
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.Databases, item);
                vResult.AlterAvailabilityGroupStatementType = AlterAvailabilityGroupStatementType.RemoveDatabase;
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.identifier();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.Databases, item);
                }
            }
        }

        public void alterAvailabilityGroupAddReplica(AlterAvailabilityGroupStatement vResult) {
            IToken token = null;
            this.match(4);
            token = this.LT(1);
            this.match(232);
            this.match(105);
            AvailabilityReplica item = this.availabilityReplica();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "REPLICA");
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.Replicas, item);
                vResult.AlterAvailabilityGroupStatementType = AlterAvailabilityGroupStatementType.AddReplica;
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.availabilityReplica();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.Replicas, item);
                }
            }
        }

        public void alterAvailabilityGroupModifyReplica(AlterAvailabilityGroupStatement vResult) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            this.match(105);
            AvailabilityReplica item = this.availabilityReplica();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MODIFY");
                TSql80ParserBaseInternal.Match(token2, "REPLICA");
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.Replicas, item);
                vResult.AlterAvailabilityGroupStatementType = AlterAvailabilityGroupStatementType.ModifyReplica;
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.availabilityReplica();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.Replicas, item);
                }
            }
        }

        public void alterAvailabilityGroupRemoveReplica(AlterAvailabilityGroupStatement vResult) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            this.match(105);
            AvailabilityReplica item = this.availabilityReplicaName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "REMOVE");
                TSql80ParserBaseInternal.Match(token2, "REPLICA");
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.Replicas, item);
                vResult.AlterAvailabilityGroupStatementType = AlterAvailabilityGroupStatementType.RemoveReplica;
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.availabilityReplicaName();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.Replicas, item);
                }
            }
        }

        public void alterAvailabilityGroupSetOption(AlterAvailabilityGroupStatement vResult) {
            IToken token = null;
            this.match(142);
            this.match(191);
            AvailabilityGroupOption item = this.availabilityGroupOption();
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                vResult.AlterAvailabilityGroupStatementType = AlterAvailabilityGroupStatementType.Set;
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.Options, item);
                TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token);
            }
        }

        public void alterAvailabilityGroupTakeAction(AlterAvailabilityGroupStatement vResult) {
            AlterAvailabilityGroupAction action;
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2)) && base.NextTokenMatches("FAILOVER")) {
                action = this.alterAvailabilityGroupFailoverAction();
                goto IL_007f;
            }
            if ((this.LA(1) == 90 || this.LA(1) == 232) && TSql140ParserInternal.tokenSet_19_.member(this.LA(2))) {
                action = this.alterAvailabilityGroupAction();
                goto IL_007f;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_007f:
            if (base.inputState.guessing == 0) {
                vResult.AlterAvailabilityGroupStatementType = AlterAvailabilityGroupStatementType.Action;
                vResult.Action = action;
            }
        }

        public AvailabilityReplica availabilityReplicaName() {
            AvailabilityReplica availabilityReplica = base.FragmentFactory.CreateFragment<AvailabilityReplica>();
            StringLiteral serverName = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                availabilityReplica.ServerName = serverName;
            }
            return availabilityReplica;
        }

        public AlterAvailabilityGroupFailoverAction alterAvailabilityGroupFailoverAction() {
            AlterAvailabilityGroupFailoverAction alterAvailabilityGroupFailoverAction = base.FragmentFactory.CreateFragment<AlterAvailabilityGroupFailoverAction>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FAILOVER");
                alterAvailabilityGroupFailoverAction.ActionType = AlterAvailabilityGroupActionType.Failover;
                TSql80ParserBaseInternal.UpdateTokenInfo(alterAvailabilityGroupFailoverAction, token);
            }
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.match(171);
                this.match(191);
                AlterAvailabilityGroupFailoverOption item = this.alterAvailabilityGroupFailoverOption();
                token2 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterAvailabilityGroupFailoverAction, alterAvailabilityGroupFailoverAction.Options, item);
                    TSql80ParserBaseInternal.UpdateTokenInfo(alterAvailabilityGroupFailoverAction, token2);
                }
                goto IL_00f1;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00f1;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00f1:
            return alterAvailabilityGroupFailoverAction;
        }

        public AlterAvailabilityGroupAction alterAvailabilityGroupAction() {
            AlterAvailabilityGroupAction alterAvailabilityGroupAction = base.FragmentFactory.CreateFragment<AlterAvailabilityGroupAction>();
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        alterAvailabilityGroupAction.ActionType = AlterAvailabilityGroupActionTypeHelper.Instance.ParseOption(token);
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterAvailabilityGroupAction, token);
                    }
                    break;
                case 90:
                    token2 = this.LT(1);
                    this.match(90);
                    if (base.inputState.guessing == 0) {
                        alterAvailabilityGroupAction.ActionType = AlterAvailabilityGroupActionType.Join;
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterAvailabilityGroupAction, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return alterAvailabilityGroupAction;
        }

        public AlterAvailabilityGroupFailoverOption alterAvailabilityGroupFailoverOption() {
            AlterAvailabilityGroupFailoverOption alterAvailabilityGroupFailoverOption = base.FragmentFactory.CreateFragment<AlterAvailabilityGroupFailoverOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal value = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "TARGET");
                alterAvailabilityGroupFailoverOption.OptionKind = FailoverActionOptionKind.Target;
                alterAvailabilityGroupFailoverOption.Value = value;
            }
            return alterAvailabilityGroupFailoverOption;
        }

        public AvailabilityReplicaOption availabilityReplicaOption() {
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("AVAILABILITY_MODE")) {
                return this.availabilityModeReplicaOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("FAILOVER_MODE")) {
                return this.failoverModeReplicaOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("SECONDARY_ROLE")) {
                return this.secondaryRoleReplicaOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("PRIMARY_ROLE")) {
                return this.primaryRoleReplicaOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                return this.literalReplicaOption();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public AvailabilityModeReplicaOption availabilityModeReplicaOption() {
            AvailabilityModeReplicaOption availabilityModeReplicaOption = base.FragmentFactory.CreateFragment<AvailabilityModeReplicaOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "AVAILABILITY_MODE");
                availabilityModeReplicaOption.OptionKind = AvailabilityReplicaOptionKind.AvailabilityMode;
                if (TSql80ParserBaseInternal.TryMatch(token2, "SYNCHRONOUS_COMMIT")) {
                    availabilityModeReplicaOption.Value = AvailabilityModeOptionKind.SynchronousCommit;
                } else {
                    TSql80ParserBaseInternal.Match(token2, "ASYNCHRONOUS_COMMIT");
                    availabilityModeReplicaOption.Value = AvailabilityModeOptionKind.AsynchronousCommit;
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(availabilityModeReplicaOption, token2);
            }
            return availabilityModeReplicaOption;
        }

        public FailoverModeReplicaOption failoverModeReplicaOption() {
            FailoverModeReplicaOption failoverModeReplicaOption = base.FragmentFactory.CreateFragment<FailoverModeReplicaOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FAILOVER_MODE");
                failoverModeReplicaOption.OptionKind = AvailabilityReplicaOptionKind.FailoverMode;
                if (TSql80ParserBaseInternal.TryMatch(token2, "AUTOMATIC")) {
                    failoverModeReplicaOption.Value = FailoverModeOptionKind.Automatic;
                } else {
                    TSql80ParserBaseInternal.Match(token2, "MANUAL");
                    failoverModeReplicaOption.Value = FailoverModeOptionKind.Manual;
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(failoverModeReplicaOption, token2);
            }
            return failoverModeReplicaOption;
        }

        public SecondaryRoleReplicaOption secondaryRoleReplicaOption() {
            SecondaryRoleReplicaOption secondaryRoleReplicaOption = base.FragmentFactory.CreateFragment<SecondaryRoleReplicaOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            token = this.LT(1);
            this.match(232);
            this.match(191);
            token2 = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SECONDARY_ROLE");
                TSql80ParserBaseInternal.Match(token2, "ALLOW_CONNECTIONS");
                secondaryRoleReplicaOption.OptionKind = AvailabilityReplicaOptionKind.SecondaryRole;
            }
            switch (this.LA(1)) {
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        if (TSql80ParserBaseInternal.TryMatch(token3, "NO")) {
                            secondaryRoleReplicaOption.AllowConnections = AllowConnectionsOptionKind.No;
                        } else {
                            TSql80ParserBaseInternal.Match(token3, "READ_ONLY");
                            secondaryRoleReplicaOption.AllowConnections = AllowConnectionsOptionKind.ReadOnly;
                        }
                        TSql80ParserBaseInternal.UpdateTokenInfo(secondaryRoleReplicaOption, token3);
                    }
                    break;
                case 5:
                    token4 = this.LT(1);
                    this.match(5);
                    if (base.inputState.guessing == 0) {
                        secondaryRoleReplicaOption.AllowConnections = AllowConnectionsOptionKind.All;
                        TSql80ParserBaseInternal.UpdateTokenInfo(secondaryRoleReplicaOption, token4);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            token5 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(secondaryRoleReplicaOption, token5);
            }
            return secondaryRoleReplicaOption;
        }

        public PrimaryRoleReplicaOption primaryRoleReplicaOption() {
            PrimaryRoleReplicaOption primaryRoleReplicaOption = base.FragmentFactory.CreateFragment<PrimaryRoleReplicaOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            token = this.LT(1);
            this.match(232);
            this.match(191);
            token2 = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "PRIMARY_ROLE");
                TSql80ParserBaseInternal.Match(token2, "ALLOW_CONNECTIONS");
                primaryRoleReplicaOption.OptionKind = AvailabilityReplicaOptionKind.PrimaryRole;
            }
            switch (this.LA(1)) {
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        if (TSql80ParserBaseInternal.TryMatch(token3, "NO")) {
                            primaryRoleReplicaOption.AllowConnections = AllowConnectionsOptionKind.No;
                        } else {
                            TSql80ParserBaseInternal.Match(token3, "READ_WRITE");
                            primaryRoleReplicaOption.AllowConnections = AllowConnectionsOptionKind.ReadWrite;
                        }
                        TSql80ParserBaseInternal.UpdateTokenInfo(primaryRoleReplicaOption, token3);
                    }
                    break;
                case 5:
                    token4 = this.LT(1);
                    this.match(5);
                    if (base.inputState.guessing == 0) {
                        primaryRoleReplicaOption.AllowConnections = AllowConnectionsOptionKind.All;
                        TSql80ParserBaseInternal.UpdateTokenInfo(primaryRoleReplicaOption, token4);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            token5 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(primaryRoleReplicaOption, token5);
            }
            return primaryRoleReplicaOption;
        }

        public LiteralReplicaOption literalReplicaOption() {
            LiteralReplicaOption literalReplicaOption = base.FragmentFactory.CreateFragment<LiteralReplicaOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            switch (this.LA(1)) {
                case 230:
                case 231: {
                        Literal value = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token, "ENDPOINT_URL");
                            literalReplicaOption.OptionKind = AvailabilityReplicaOptionKind.EndpointUrl;
                            literalReplicaOption.Value = value;
                        }
                        break;
                    }
                case 221: {
                        Literal value = this.integer();
                        if (base.inputState.guessing == 0) {
                            if (TSql80ParserBaseInternal.TryMatch(token, "SESSION_TIMEOUT")) {
                                literalReplicaOption.OptionKind = AvailabilityReplicaOptionKind.SessionTimeout;
                            } else {
                                TSql80ParserBaseInternal.Match(token, "APPLY_DELAY");
                                literalReplicaOption.OptionKind = AvailabilityReplicaOptionKind.ApplyDelay;
                            }
                            literalReplicaOption.Value = value;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return literalReplicaOption;
        }

        public CreatePartitionFunctionStatement createPartitionFunction() {
            CreatePartitionFunctionStatement createPartitionFunctionStatement = base.FragmentFactory.CreateFragment<CreatePartitionFunctionStatement>();
            this.match(73);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                createPartitionFunctionStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createPartitionFunctionStatement);
            }
            this.match(191);
            PartitionParameterType parameterType = this.partitionParameterType();
            if (base.inputState.guessing == 0) {
                createPartitionFunctionStatement.ParameterType = parameterType;
            }
            this.match(192);
            this.match(9);
            this.partitionFunctionTypes(createPartitionFunctionStatement);
            return createPartitionFunctionStatement;
        }

        public CreatePartitionSchemeStatement createPartitionScheme() {
            CreatePartitionSchemeStatement createPartitionSchemeStatement = base.FragmentFactory.CreateFragment<CreatePartitionSchemeStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SCHEME");
                createPartitionSchemeStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(createPartitionSchemeStatement);
            }
            this.match(9);
            token2 = this.LT(1);
            this.match(232);
            name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "PARTITION");
                createPartitionSchemeStatement.PartitionFunction = name;
            }
            switch (this.LA(1)) {
                case 5:
                    this.match(5);
                    if (base.inputState.guessing == 0) {
                        createPartitionSchemeStatement.IsAll = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 151:
                    break;
            }
            this.match(151);
            this.match(191);
            IdentifierOrValueExpression item = this.stringOrIdentifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createPartitionSchemeStatement, createPartitionSchemeStatement.FileGroups, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.stringOrIdentifier();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createPartitionSchemeStatement, createPartitionSchemeStatement.FileGroups, item);
                }
            }
            token3 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createPartitionSchemeStatement, token3);
            }
            return createPartitionSchemeStatement;
        }

        public PartitionParameterType partitionParameterType() {
            PartitionParameterType partitionParameterType = base.FragmentFactory.CreateFragment<PartitionParameterType>();
            DataTypeReference dataType = this.scalarDataType();
            if (base.inputState.guessing == 0) {
                partitionParameterType.DataType = dataType;
            }
            this.collationOpt(partitionParameterType);
            return partitionParameterType;
        }

        public void partitionFunctionTypes(CreatePartitionFunctionStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.partitionFunctionRange(vParent);
            this.match(67);
            this.match(164);
            this.match(191);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "RANGE");
            }
            switch (this.LA(1)) {
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 163:
                case 187:
                case 191:
                case 193:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235: {
                        ScalarExpression item = this.expression();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.BoundaryValues, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.expression();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.BoundaryValues, item);
                            }
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
            }
        }

        public void partitionFunctionRange(CreatePartitionFunctionStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 67:
                    break;
                case 93:
                    token = this.LT(1);
                    this.match(93);
                    if (base.inputState.guessing == 0) {
                        vParent.Range = PartitionFunctionRange.Left;
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                    }
                    break;
                case 133:
                    token2 = this.LT(1);
                    this.match(133);
                    if (base.inputState.guessing == 0) {
                        vParent.Range = PartitionFunctionRange.Right;
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void partitionOptionTypes(TablePartitionOptionSpecifications vParent) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.partitionTableOptionRange(vParent);
            this.match(67);
            this.match(164);
            this.match(191);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "RANGE");
            }
            switch (this.LA(1)) {
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 163:
                case 187:
                case 191:
                case 193:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235: {
                        ScalarExpression item = this.expression();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.BoundaryValues, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.expression();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.BoundaryValues, item);
                            }
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
            }
        }

        public void partitionTableOptionRange(TablePartitionOptionSpecifications vParent) {
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 67:
                    break;
                case 93:
                    token = this.LT(1);
                    this.match(93);
                    if (base.inputState.guessing == 0) {
                        vParent.Range = PartitionTableOptionRange.Left;
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                    }
                    break;
                case 133:
                    token2 = this.LT(1);
                    this.match(133);
                    if (base.inputState.guessing == 0) {
                        vParent.Range = PartitionTableOptionRange.Right;
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void queueOptionList(QueueStatement vParent, bool vDropAccepted) {
            this.match(171);
            this.queueOption(vParent, vDropAccepted);
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                this.queueOption(vParent, vDropAccepted);
            }
        }

        public UserRemoteServiceBindingOption bindingUserOption() {
            UserRemoteServiceBindingOption userRemoteServiceBindingOption = base.FragmentFactory.CreateFragment<UserRemoteServiceBindingOption>();
            this.match(163);
            this.match(206);
            Identifier user = this.identifier();
            if (base.inputState.guessing == 0) {
                userRemoteServiceBindingOption.OptionKind = RemoteServiceBindingOptionKind.User;
                userRemoteServiceBindingOption.User = user;
            }
            return userRemoteServiceBindingOption;
        }

        public OnOffRemoteServiceBindingOption bindingAnonymousOption() {
            OnOffRemoteServiceBindingOption onOffRemoteServiceBindingOption = base.FragmentFactory.CreateFragment<OnOffRemoteServiceBindingOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            OptionState optionState = this.optionOnOff(onOffRemoteServiceBindingOption);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ANONYMOUS");
                onOffRemoteServiceBindingOption.OptionKind = RemoteServiceBindingOptionKind.Anonymous;
                onOffRemoteServiceBindingOption.OptionState = optionState;
            }
            return onOffRemoteServiceBindingOption;
        }

        public void routeOptionList(RouteStatement vParent) {
            int num = 0;
            this.match(171);
            RouteOption routeOption = this.routeOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)routeOption.OptionKind, routeOption);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.RouteOptions, routeOption);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                routeOption = this.routeOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)routeOption.OptionKind, routeOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.RouteOptions, routeOption);
                }
            }
        }

        public void onQueueClause(AlterCreateServiceStatementBase vParent) {
            IToken token = null;
            this.match(105);
            token = this.LT(1);
            this.match(232);
            SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "QUEUE");
                TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "QUEUE");
                vParent.QueueName = schemaObjectName;
            }
        }

        public ServiceContract serviceContract() {
            ServiceContract serviceContract = base.FragmentFactory.CreateFragment<ServiceContract>();
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                serviceContract.Name = name;
            }
            return serviceContract;
        }

        public AlterServiceStatement alterServiceStatement() {
            AlterServiceStatement alterServiceStatement = base.FragmentFactory.CreateFragment<AlterServiceStatement>();
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                alterServiceStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterServiceStatement);
            }
            switch (this.LA(1)) {
                case 105:
                    this.onQueueClause(alterServiceStatement);
                    if (this.LA(1) == 191 && (this.LA(2) == 4 || this.LA(2) == 54)) {
                        this.addDropServiceContractList(alterServiceStatement);
                        break;
                    }
                    if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 191:
                    this.addDropServiceContractList(alterServiceStatement);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return alterServiceStatement;
        }

        public void addDropServiceContractList(AlterServiceStatement vParent) {
            IToken token = null;
            this.match(191);
            ServiceContract item = this.addDropServiceContract();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.ServiceContracts, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.addDropServiceContract();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.ServiceContracts, item);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public ServiceContract addDropServiceContract() {
            ServiceContract serviceContract = base.FragmentFactory.CreateFragment<ServiceContract>();
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 54:
                    token = this.LT(1);
                    this.match(54);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(serviceContract, token);
                        serviceContract.Action = AlterAction.Drop;
                    }
                    break;
                case 4:
                    token2 = this.LT(1);
                    this.match(4);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(serviceContract, token2);
                        serviceContract.Action = AlterAction.Add;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                serviceContract.Name = name;
            }
            return serviceContract;
        }

        public void keySpecList(CreateSymmetricKeyStatement vParent) {
            bool flag = false;
            bool flag2 = false;
            bool flag3 = false;
            KeyOption item = this.keySpec(ref flag, ref flag2, ref flag3);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.KeyOptions, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.keySpec(ref flag, ref flag2, ref flag3);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.KeyOptions, item);
                }
            }
        }

        public void encryptorListWithNoPassword(SymmetricKeyStatement vParent) {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(18);
            CryptoMechanism item = this.cryptoWithNoPasswordOrJustPassword();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.EncryptingMechanisms, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.cryptoWithNoPasswordOrJustPassword();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.EncryptingMechanisms, item);
                }
            }
        }

        public void providerKeySourceOptionsOpt(IList<KeyOption> optionsList, TSqlFragment vParent) {
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.providerKeySourceOptions(optionsList, vParent);
                return;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public KeyOption keySpec(ref bool keySourceSpecified, ref bool algorithmSpecified, ref bool identityValueSpecified) {
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("KEY_SOURCE")) {
                return this.keySourceKeySpec(ref keySourceSpecified);
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ALGORITHM")) {
                return this.algorithmKeySpec(ref algorithmSpecified);
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                return this.identityValueKeySpec(ref identityValueSpecified);
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public KeySourceKeyOption keySourceKeySpec(ref bool keySourceSpecified) {
            KeySourceKeyOption keySourceKeyOption = base.FragmentFactory.CreateFragment<KeySourceKeyOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal passPhrase = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "KEY_SOURCE");
                keySourceKeyOption.OptionKind = KeyOptionKind.KeySource;
                if (keySourceSpecified) {
                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                }
                keySourceSpecified = true;
                TSql80ParserBaseInternal.UpdateTokenInfo(keySourceKeyOption, token);
                keySourceKeyOption.PassPhrase = passPhrase;
            }
            return keySourceKeyOption;
        }

        public AlgorithmKeyOption algorithmKeySpec(ref bool algorithmSpecified) {
            AlgorithmKeyOption algorithmKeyOption = base.FragmentFactory.CreateFragment<AlgorithmKeyOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ALGORITHM");
                algorithmKeyOption.OptionKind = KeyOptionKind.Algorithm;
                if (algorithmSpecified) {
                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                }
                algorithmSpecified = true;
                algorithmKeyOption.Algorithm = EncryptionAlgorithmsHelper.Instance.ParseOption(token2);
                TSql80ParserBaseInternal.UpdateTokenInfo(algorithmKeyOption, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(algorithmKeyOption, token2);
            }
            return algorithmKeyOption;
        }

        public IdentityValueKeyOption identityValueKeySpec(ref bool identityValueSpecified) {
            IdentityValueKeyOption identityValueKeyOption = base.FragmentFactory.CreateFragment<IdentityValueKeyOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal identityPhrase = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "IDENTITY_VALUE");
                identityValueKeyOption.OptionKind = KeyOptionKind.IdentityValue;
                if (identityValueSpecified) {
                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                }
                identityValueSpecified = true;
                TSql80ParserBaseInternal.UpdateTokenInfo(identityValueKeyOption, token);
                identityValueKeyOption.IdentityPhrase = identityPhrase;
            }
            return identityValueKeyOption;
        }

        public ProviderKeyNameKeyOption providerKeyNameSourceOption(ref bool providerKeyNameSpecified) {
            ProviderKeyNameKeyOption providerKeyNameKeyOption = base.FragmentFactory.CreateFragment<ProviderKeyNameKeyOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal keyName = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                providerKeyNameKeyOption.OptionKind = KeyOptionKind.ProviderKeyName;
                TSql80ParserBaseInternal.Match(token, "PROVIDER_KEY_NAME");
                if (providerKeyNameSpecified) {
                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                }
                providerKeyNameSpecified = true;
                providerKeyNameKeyOption.KeyName = keyName;
                TSql80ParserBaseInternal.UpdateTokenInfo(providerKeyNameKeyOption, token);
            }
            return providerKeyNameKeyOption;
        }

        public CreationDispositionKeyOption creationDispositionSourceOption(ref bool creationDispositionSpecified) {
            CreationDispositionKeyOption creationDispositionKeyOption = base.FragmentFactory.CreateFragment<CreationDispositionKeyOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CREATION_DISPOSITION");
                creationDispositionKeyOption.OptionKind = KeyOptionKind.CreationDisposition;
                if (creationDispositionSpecified) {
                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                }
                creationDispositionSpecified = true;
                if (TSql80ParserBaseInternal.TryMatch(token2, "CREATE_NEW")) {
                    creationDispositionKeyOption.IsCreateNew = true;
                } else {
                    TSql80ParserBaseInternal.Match(token2, "OPEN_EXISTING");
                    creationDispositionKeyOption.IsCreateNew = false;
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(creationDispositionKeyOption, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(creationDispositionKeyOption, token2);
            }
            return creationDispositionKeyOption;
        }

        public CryptoMechanism cryptoWithNoPasswordOrJustPassword() {
            CryptoMechanism cryptoMechanism = null;
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                return this.certificateCrypto();
            }
            if (this.LA(1) == 232 && this.LA(2) == 91) {
                return this.keyCrypto();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                return this.passwordCrypto();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public CryptoMechanism certificateCrypto() {
            CryptoMechanism cryptoMechanism = base.FragmentFactory.CreateFragment<CryptoMechanism>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier identifier = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
                cryptoMechanism.Identifier = identifier;
                cryptoMechanism.CryptoMechanismType = CryptoMechanismType.Certificate;
            }
            return cryptoMechanism;
        }

        public CryptoMechanism keyCrypto() {
            CryptoMechanism cryptoMechanism = base.FragmentFactory.CreateFragment<CryptoMechanism>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(91);
            Identifier identifier = this.identifier();
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(token, "SYMMETRIC")) {
                    cryptoMechanism.CryptoMechanismType = CryptoMechanismType.SymmetricKey;
                } else {
                    TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
                    cryptoMechanism.CryptoMechanismType = CryptoMechanismType.AsymmetricKey;
                }
                cryptoMechanism.Identifier = identifier;
            }
            return cryptoMechanism;
        }

        public CryptoMechanism passwordCrypto() {
            CryptoMechanism cryptoMechanism = base.FragmentFactory.CreateFragment<CryptoMechanism>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal passwordOrSignature = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "PASSWORD");
                cryptoMechanism.PasswordOrSignature = passwordOrSignature;
                cryptoMechanism.CryptoMechanismType = CryptoMechanismType.Password;
            }
            return cryptoMechanism;
        }

        public KeyOption providerKeySourceOption(ref bool algorithmSpecified, ref bool providerKeyNameSpecified, ref bool creationDispositionSpecified) {
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ALGORITHM")) {
                return this.algorithmKeySpec(ref algorithmSpecified);
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("PROVIDER_KEY_NAME")) {
                return this.providerKeyNameSourceOption(ref providerKeyNameSpecified);
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                return this.creationDispositionSourceOption(ref creationDispositionSpecified);
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public AlterSymmetricKeyStatement alterSymmetricKeyStatement() {
            AlterSymmetricKeyStatement alterSymmetricKeyStatement = base.FragmentFactory.CreateFragment<AlterSymmetricKeyStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(91);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SYMMETRIC");
                alterSymmetricKeyStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterSymmetricKeyStatement);
            }
            switch (this.LA(1)) {
                case 4:
                    this.match(4);
                    if (base.inputState.guessing == 0) {
                        alterSymmetricKeyStatement.IsAdd = true;
                    }
                    break;
                case 54:
                    this.match(54);
                    if (base.inputState.guessing == 0) {
                        alterSymmetricKeyStatement.IsAdd = false;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            this.encryptorListWithNoPassword(alterSymmetricKeyStatement);
            return alterSymmetricKeyStatement;
        }

        public CreateTypeUddtStatement createTypeUddtStatement() {
            CreateTypeUddtStatement createTypeUddtStatement = base.FragmentFactory.CreateFragment<CreateTypeUddtStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(71);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createTypeUddtStatement, token);
                base.ThrowPartialAstIfPhaseOne(createTypeUddtStatement);
            }
            DataTypeReference dataType = this.scalarDataType();
            if (base.inputState.guessing == 0) {
                createTypeUddtStatement.DataType = dataType;
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_02ff;
                }
            } else {
                switch (num) {
                    case 99:
                    case 100: {
                            NullableConstraintDefinition nullableConstraint = this.nullableConstraint();
                            if (base.inputState.guessing == 0) {
                                createTypeUddtStatement.NullableConstraint = nullableConstraint;
                            }
                            goto IL_02ff;
                        }
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_02ff;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_02ff:
            return createTypeUddtStatement;
        }

        public CreateTypeUdtStatement createTypeUdtStatement() {
            CreateTypeUdtStatement createTypeUdtStatement = base.FragmentFactory.CreateFragment<CreateTypeUdtStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(175);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createTypeUdtStatement, token);
                base.ThrowPartialAstIfPhaseOne(createTypeUdtStatement);
            }
            AssemblyName assemblyName = this.assemblyName();
            if (base.inputState.guessing == 0) {
                createTypeUdtStatement.AssemblyName = assemblyName;
            }
            return createTypeUdtStatement;
        }

        public CreateTypeTableStatement createTypeTableStatement() {
            CreateTypeTableStatement createTypeTableStatement = base.FragmentFactory.CreateFragment<CreateTypeTableStatement>();
            IToken token = null;
            this.match(9);
            this.match(148);
            this.match(191);
            TableDefinition definition = this.tableDefinition(IndexAffectingStatement.CreateType, null);
            if (base.inputState.guessing == 0) {
                createTypeTableStatement.Definition = definition;
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createTypeTableStatement, token);
            }
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.withTypeTableOptions(createTypeTableStatement);
                goto IL_00cf;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00cf;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00cf:
            return createTypeTableStatement;
        }

        public TableDefinition tableDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement) {
            TableDefinition tableDefinition = base.FragmentFactory.CreateFragment<TableDefinition>();
            if (base.PhaseOne && vStatement != null) {
                vStatement.Definition = tableDefinition;
            }
            this.tableElement(statementType, tableDefinition, vStatement);
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                this.tableElement(statementType, tableDefinition, vStatement);
            }
            if (base.inputState.guessing == 0) {
                TSql130ParserBaseInternal.CheckTemporalPeriodInTableDefinition(tableDefinition, true);
            }
            return tableDefinition;
        }

        public void withTypeTableOptions(CreateTypeTableStatement vParent) {
            IToken token = null;
            this.match(171);
            this.match(191);
            TableOption item = this.memoryOptimizedTableOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, item);
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public MemoryOptimizedTableOption memoryOptimizedTableOption() {
            MemoryOptimizedTableOption memoryOptimizedTableOption = base.FragmentFactory.CreateFragment<MemoryOptimizedTableOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            OptionState optionState = this.optionOnOff(memoryOptimizedTableOption);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MEMORY_OPTIMIZED");
                memoryOptimizedTableOption.OptionKind = TableOptionKind.MemoryOptimized;
                memoryOptimizedTableOption.OptionState = optionState;
            }
            return memoryOptimizedTableOption;
        }

        public UserLoginOption userLoginOption() {
            UserLoginOption userLoginOption = base.FragmentFactory.CreateFragment<UserLoginOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            switch (this.LA(1)) {
                case 67:
                case 71: {
                        switch (this.LA(1)) {
                            case 67:
                                this.match(67);
                                break;
                            case 71:
                                this.match(71);
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                        }
                        Identifier identifier;
                        switch (this.LA(1)) {
                            case 232:
                                if (this.LA(1) == 232 && this.LA(2) == 91) {
                                    token = this.LT(1);
                                    this.match(232);
                                    this.match(91);
                                    if (base.inputState.guessing == 0) {
                                        TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
                                        userLoginOption.UserLoginOptionType = UserLoginOptionType.AsymmetricKey;
                                    }
                                    goto IL_0165;
                                }
                                if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                                    token2 = this.LT(1);
                                    this.match(232);
                                    if (base.inputState.guessing == 0) {
                                        userLoginOption.UserLoginOptionType = UserLoginOptionHelper.Instance.ParseOption(token2);
                                    }
                                    goto IL_0165;
                                }
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 175:
                                this.match(175);
                                token3 = this.LT(1);
                                this.match(232);
                                if (base.inputState.guessing == 0) {
                                    TSql80ParserBaseInternal.Match(token3, "PROVIDER");
                                    userLoginOption.UserLoginOptionType = UserLoginOptionType.External;
                                }
                                break;
                            default: {
                                    throw new NoViableAltException(this.LT(1), this.getFilename());
                                }
                                IL_0165:
                                identifier = this.identifier();
                                if (base.inputState.guessing == 0) {
                                    userLoginOption.Identifier = identifier;
                                }
                                break;
                        }
                        break;
                    }
                case 232:
                    token4 = this.LT(1);
                    this.match(232);
                    token5 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token4, "WITHOUT");
                        TSql80ParserBaseInternal.Match(token5, "LOGIN");
                        TSql80ParserBaseInternal.UpdateTokenInfo(userLoginOption, token5);
                        userLoginOption.UserLoginOptionType = UserLoginOptionType.WithoutLogin;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return userLoginOption;
        }

        public PrincipalOption createUserOption(bool vHasUserLoginOption) {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            PrincipalOption principalOption;
            switch (this.LA(1)) {
                case 232:
                case 233:
                    principalOption = this.identifierCreateUserOption(token, vHasUserLoginOption);
                    break;
                case 100:
                case 221:
                case 224:
                case 230:
                case 231:
                    principalOption = this.literalCreateUserOption(token, vHasUserLoginOption);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0 && vHasUserLoginOption && principalOption.OptionKind != PrincipalOptionKind.DefaultSchema && principalOption.OptionKind != PrincipalOptionKind.Sid && principalOption.OptionKind != PrincipalOptionKind.Type) {
                TSql80ParserBaseInternal.ThrowParseErrorException("SQL46096", token, TSqlParserResource.SQL46096Message, token.getText());
            }
            return principalOption;
        }

        public IdentifierPrincipalOption identifierCreateUserOption(IToken tOption, bool vHasUserLoginOption) {
            IdentifierPrincipalOption identifierPrincipalOption = base.FragmentFactory.CreateFragment<IdentifierPrincipalOption>();
            Identifier identifier = this.identifier();
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(tOption, "DEFAULT_SCHEMA")) {
                    identifierPrincipalOption.OptionKind = PrincipalOptionKind.DefaultSchema;
                } else if (TSql80ParserBaseInternal.TryMatch(tOption, "DEFAULT_LANGUAGE")) {
                    identifierPrincipalOption.OptionKind = PrincipalOptionKind.DefaultLanguage;
                } else {
                    TSql80ParserBaseInternal.Match(tOption, "TYPE");
                    identifierPrincipalOption.OptionKind = PrincipalOptionKind.Type;
                }
                identifierPrincipalOption.Identifier = identifier;
            }
            return identifierPrincipalOption;
        }

        public LiteralPrincipalOption literalCreateUserOption(IToken tOption, bool vHasUserLoginOption) {
            LiteralPrincipalOption literalPrincipalOption = base.FragmentFactory.CreateFragment<LiteralPrincipalOption>();
            TSql80ParserBaseInternal.UpdateTokenInfo(literalPrincipalOption, tOption);
            switch (this.LA(1)) {
                case 224: {
                        Literal value = this.binary();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(tOption, "SID");
                            literalPrincipalOption.OptionKind = PrincipalOptionKind.Sid;
                            literalPrincipalOption.Value = value;
                        }
                        break;
                    }
                case 230:
                case 231: {
                        Literal value = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(tOption, "PASSWORD");
                            literalPrincipalOption.OptionKind = PrincipalOptionKind.Password;
                            literalPrincipalOption.Value = value;
                        }
                        break;
                    }
                case 221: {
                        Literal value = this.integer();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(tOption, "DEFAULT_LANGUAGE");
                            literalPrincipalOption.OptionKind = PrincipalOptionKind.DefaultLanguage;
                            literalPrincipalOption.Value = value;
                        }
                        break;
                    }
                case 100: {
                        Literal value = this.nullLiteral();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(tOption, "DEFAULT_SCHEMA");
                            literalPrincipalOption.OptionKind = PrincipalOptionKind.DefaultSchema;
                            literalPrincipalOption.Value = value;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return literalPrincipalOption;
        }

        public NullLiteral nullLiteral() {
            NullLiteral nullLiteral = base.FragmentFactory.CreateFragment<NullLiteral>();
            IToken token = null;
            token = this.LT(1);
            this.match(100);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(nullLiteral, token);
                nullLiteral.Value = token.getText();
            }
            return nullLiteral;
        }

        public AlterApplicationRoleStatement alterApplicationRoleStatement() {
            AlterApplicationRoleStatement alterApplicationRoleStatement = base.FragmentFactory.CreateFragment<AlterApplicationRoleStatement>();
            this.applicationRoleStatement(alterApplicationRoleStatement, false);
            return alterApplicationRoleStatement;
        }

        public AlterAssemblyStatement alterAssemblyStatement() {
            AlterAssemblyStatement alterAssemblyStatement = base.FragmentFactory.CreateFragment<AlterAssemblyStatement>();
            IToken token = null;
            bool flag = false;
            token = this.LT(1);
            this.match(232);
            Identifier identifier = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ASSEMBLY");
                alterAssemblyStatement.Name = identifier;
                base.ThrowPartialAstIfPhaseOne(alterAssemblyStatement);
            }
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 71: {
                            ScalarExpression item = this.alterAssemblyFromClause();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterAssemblyStatement, alterAssemblyStatement.Parameters, item);
                                flag = true;
                            }
                            goto IL_02fe;
                        }
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_02fe;
                }
            } else {
                switch (num) {
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_02fe;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_02fe:
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.alterAssemblyWith(alterAssemblyStatement);
                if (base.inputState.guessing == 0) {
                    flag = true;
                }
                goto IL_036c;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_036c;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_042c:
            if (this.LA(1) == 4 && this.LA(2) == 65) {
                this.alterAssemblyAddFile(alterAssemblyStatement);
                if (base.inputState.guessing == 0) {
                    flag = true;
                }
                goto IL_0493;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0493;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0493:
            if (base.inputState.guessing == 0 && !flag) {
                throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(identifier);
            }
            return alterAssemblyStatement;
            IL_036c:
            bool flag2 = false;
            if (this.LA(1) == 54 && this.LA(2) == 65) {
                int pos = this.mark();
                flag2 = true;
                base.inputState.guessing++;
                try {
                    this.match(54);
                    this.match(65);
                } catch (RecognitionException) {
                    flag2 = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag2) {
                this.alterAssemblyDropFile(alterAssemblyStatement);
                if (base.inputState.guessing == 0) {
                    flag = true;
                }
                goto IL_042c;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_042c;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public AlterAsymmetricKeyStatement alterAsymmetricKeyStatement() {
            AlterAsymmetricKeyStatement alterAsymmetricKeyStatement = base.FragmentFactory.CreateFragment<AlterAsymmetricKeyStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            IToken token6 = null;
            IToken token7 = null;
            IToken token8 = null;
            token = this.LT(1);
            this.match(232);
            this.match(91);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
                alterAsymmetricKeyStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterAsymmetricKeyStatement);
            }
            if (this.LA(1) == 232 && this.LA(2) == 232) {
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "REMOVE");
                }
                if (this.LA(1) == 232 && this.LA(2) == 91) {
                    token3 = this.LT(1);
                    this.match(232);
                    token4 = this.LT(1);
                    this.match(91);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token3, "PRIVATE");
                        alterAsymmetricKeyStatement.Kind = AlterCertificateStatementKind.RemovePrivateKey;
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterAsymmetricKeyStatement, token4);
                    }
                    goto IL_02c9;
                }
                if (this.LA(1) == 232 && this.LA(2) == 111) {
                    token5 = this.LT(1);
                    this.match(232);
                    token6 = this.LT(1);
                    this.match(111);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token5, "ATTESTED");
                        alterAsymmetricKeyStatement.Kind = AlterCertificateStatementKind.RemoveAttestedOption;
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterAsymmetricKeyStatement, token6);
                    }
                    goto IL_02c9;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (this.LA(1) == 171) {
                this.match(171);
                token7 = this.LT(1);
                this.match(232);
                this.match(91);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token7, "PRIVATE");
                    alterAsymmetricKeyStatement.Kind = AlterCertificateStatementKind.WithPrivateKey;
                }
                this.match(191);
                this.passwordChangeOption(alterAsymmetricKeyStatement);
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    this.passwordChangeOption(alterAsymmetricKeyStatement);
                }
                token8 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(alterAsymmetricKeyStatement, token8);
                }
                goto IL_02c9;
            }
            if (this.LA(1) == 232 && this.LA(2) == 18) {
                this.LT(1);
                this.match(232);
                this.match(18);
                Literal attestedBy = this.stringLiteral();
                if (base.inputState.guessing == 0) {
                    alterAsymmetricKeyStatement.AttestedBy = attestedBy;
                    alterAsymmetricKeyStatement.Kind = AlterCertificateStatementKind.AttestedBy;
                }
                goto IL_02c9;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_02c9:
            return alterAsymmetricKeyStatement;
        }

        public AlterAuthorizationStatement alterAuthorizationStatement() {
            AlterAuthorizationStatement alterAuthorizationStatement = base.FragmentFactory.CreateFragment<AlterAuthorizationStatement>();
            IToken token = null;
            this.match(11);
            SecurityTargetObject securityTargetObject = this.authorizationTargetObject();
            if (base.inputState.guessing == 0) {
                alterAuthorizationStatement.SecurityTargetObject = securityTargetObject;
            }
            this.match(151);
            switch (this.LA(1)) {
                case 139:
                    this.match(139);
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token, "OWNER");
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterAuthorizationStatement, token);
                        alterAuthorizationStatement.ToSchemaOwner = true;
                    }
                    break;
                case 232:
                case 233: {
                        Identifier principalName = this.identifier();
                        if (base.inputState.guessing == 0) {
                            alterAuthorizationStatement.PrincipalName = principalName;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return alterAuthorizationStatement;
        }

        public AlterBrokerPriorityStatement alterBrokerPriorityStatement() {
            AlterBrokerPriorityStatement alterBrokerPriorityStatement = base.FragmentFactory.CreateFragment<AlterBrokerPriorityStatement>();
            this.brokerPriorityStatementBody(alterBrokerPriorityStatement);
            return alterBrokerPriorityStatement;
        }

        public AlterCryptographicProviderStatement alterCryptographicProviderStatement() {
            AlterCryptographicProviderStatement alterCryptographicProviderStatement = base.FragmentFactory.CreateFragment<AlterCryptographicProviderStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CRYPTOGRAPHIC");
                TSql80ParserBaseInternal.Match(token2, "PROVIDER");
                alterCryptographicProviderStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterCryptographicProviderStatement);
            }
            switch (this.LA(1)) {
                case 71: {
                        Literal file = this.cryptographicProviderFile();
                        if (base.inputState.guessing == 0) {
                            alterCryptographicProviderStatement.File = file;
                        }
                        break;
                    }
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        alterCryptographicProviderStatement.Option = EnableDisableOptionTypeHelper.Instance.ParseOption(token3);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return alterCryptographicProviderStatement;
        }

        public AlterRemoteServiceBindingStatement alterRemoteServiceBindingStatement() {
            AlterRemoteServiceBindingStatement alterRemoteServiceBindingStatement = base.FragmentFactory.CreateFragment<AlterRemoteServiceBindingStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            token3 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "REMOTE");
                TSql80ParserBaseInternal.Match(token2, "SERVICE");
                TSql80ParserBaseInternal.Match(token3, "BINDING");
                alterRemoteServiceBindingStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterRemoteServiceBindingStatement);
            }
            this.match(171);
            switch (this.LA(1)) {
                case 163: {
                        RemoteServiceBindingOption item = this.bindingUserOption();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterRemoteServiceBindingStatement, alterRemoteServiceBindingStatement.Options, item);
                        }
                        int num2 = this.LA(1);
                        if (num2 <= 95) {
                            switch (num2) {
                                case 1:
                                case 4:
                                case 6:
                                case 12:
                                case 13:
                                case 15:
                                case 17:
                                case 22:
                                case 23:
                                case 28:
                                case 33:
                                case 35:
                                case 44:
                                case 45:
                                case 46:
                                case 48:
                                case 49:
                                case 54:
                                case 55:
                                case 56:
                                case 60:
                                case 61:
                                case 64:
                                case 74:
                                case 75:
                                case 82:
                                case 86:
                                case 92:
                                case 95:
                                    goto end_IL_0000;
                            }
                        } else {
                            switch (num2) {
                                case 198:
                                    this.match(198);
                                    item = this.bindingAnonymousOption();
                                    if (base.inputState.guessing == 0) {
                                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterRemoteServiceBindingStatement, alterRemoteServiceBindingStatement.Options, item);
                                    }
                                    goto end_IL_0000;
                                case 106:
                                case 119:
                                case 123:
                                case 125:
                                case 126:
                                case 129:
                                case 131:
                                case 132:
                                case 134:
                                case 138:
                                case 140:
                                case 142:
                                case 143:
                                case 144:
                                case 156:
                                case 160:
                                case 161:
                                case 162:
                                case 167:
                                case 170:
                                case 171:
                                case 172:
                                case 176:
                                case 182:
                                case 191:
                                case 204:
                                case 219:
                                case 220:
                                case 232:
                                    goto end_IL_0000;
                            }
                        }
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                case 232: {
                        RemoteServiceBindingOption item = this.bindingAnonymousOption();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterRemoteServiceBindingStatement, alterRemoteServiceBindingStatement.Options, item);
                        }
                        int num = this.LA(1);
                        if (num <= 95) {
                            switch (num) {
                                case 1:
                                case 4:
                                case 6:
                                case 12:
                                case 13:
                                case 15:
                                case 17:
                                case 22:
                                case 23:
                                case 28:
                                case 33:
                                case 35:
                                case 44:
                                case 45:
                                case 46:
                                case 48:
                                case 49:
                                case 54:
                                case 55:
                                case 56:
                                case 60:
                                case 61:
                                case 64:
                                case 74:
                                case 75:
                                case 82:
                                case 86:
                                case 92:
                                case 95:
                                    goto end_IL_0000;
                            }
                        } else {
                            switch (num) {
                                case 198:
                                    this.match(198);
                                    item = this.bindingUserOption();
                                    if (base.inputState.guessing == 0) {
                                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterRemoteServiceBindingStatement, alterRemoteServiceBindingStatement.Options, item);
                                    }
                                    goto end_IL_0000;
                                case 106:
                                case 119:
                                case 123:
                                case 125:
                                case 126:
                                case 129:
                                case 131:
                                case 132:
                                case 134:
                                case 138:
                                case 140:
                                case 142:
                                case 143:
                                case 144:
                                case 156:
                                case 160:
                                case 161:
                                case 162:
                                case 167:
                                case 170:
                                case 171:
                                case 172:
                                case 176:
                                case 182:
                                case 191:
                                case 204:
                                case 219:
                                case 220:
                                case 232:
                                    goto end_IL_0000;
                            }
                        }
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                default: {
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    end_IL_0000:
                    break;
            }
            return alterRemoteServiceBindingStatement;
        }

        public TSqlStatement alterResourceStatement() {
            TSqlStatement tSqlStatement = null;
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "RESOURCE");
            }
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("POOL")) {
                return this.alterResourcePoolStatement();
            }
            if (this.LA(1) == 232 && (this.LA(2) == 126 || this.LA(2) == 171 || this.LA(2) == 232) && base.NextTokenMatches("GOVERNOR")) {
                return this.alterResourceGovernorStatement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public AlterWorkloadGroupStatement alterWorkloadGroupStatement() {
            AlterWorkloadGroupStatement alterWorkloadGroupStatement = base.FragmentFactory.CreateFragment<AlterWorkloadGroupStatement>();
            this.workloadGroupStatementBody(alterWorkloadGroupStatement);
            return alterWorkloadGroupStatement;
        }

        public AlterCertificateStatement alterCertificateStatement() {
            AlterCertificateStatement alterCertificateStatement = base.FragmentFactory.CreateFragment<AlterCertificateStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            IToken token6 = null;
            IToken token7 = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
                alterCertificateStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterCertificateStatement);
            }
            if (this.LA(1) == 232 && this.LA(2) == 232) {
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "REMOVE");
                }
                if (this.LA(1) == 232 && this.LA(2) == 91) {
                    token3 = this.LT(1);
                    this.match(232);
                    token4 = this.LT(1);
                    this.match(91);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token3, "PRIVATE");
                        alterCertificateStatement.Kind = AlterCertificateStatementKind.RemovePrivateKey;
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterCertificateStatement, token4);
                    }
                    goto IL_02bb;
                }
                if (this.LA(1) == 232 && this.LA(2) == 111) {
                    token5 = this.LT(1);
                    this.match(232);
                    token6 = this.LT(1);
                    this.match(111);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token5, "ATTESTED");
                        alterCertificateStatement.Kind = AlterCertificateStatementKind.RemoveAttestedOption;
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterCertificateStatement, token6);
                    }
                    goto IL_02bb;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (this.LA(1) == 171) {
                this.match(171);
                if (this.LA(1) == 232 && this.LA(2) == 91) {
                    this.privateKeySpec(alterCertificateStatement);
                    if (base.inputState.guessing == 0) {
                        alterCertificateStatement.Kind = AlterCertificateStatementKind.WithPrivateKey;
                    }
                    goto IL_02bb;
                }
                if (this.LA(1) == 232 && this.LA(2) == 67) {
                    this.createCertificateActivityFlag(alterCertificateStatement);
                    if (base.inputState.guessing == 0) {
                        alterCertificateStatement.Kind = AlterCertificateStatementKind.WithActiveForBeginDialog;
                    }
                    goto IL_02bb;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (this.LA(1) == 232 && this.LA(2) == 18) {
                token7 = this.LT(1);
                this.match(232);
                this.match(18);
                Literal attestedBy = this.stringLiteral();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token7, "ATTESTED");
                    alterCertificateStatement.Kind = AlterCertificateStatementKind.AttestedBy;
                    alterCertificateStatement.AttestedBy = attestedBy;
                }
                goto IL_02bb;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_02bb:
            return alterCertificateStatement;
        }

        public AlterCredentialStatement alterCredentialStatement() {
            AlterCredentialStatement alterCredentialStatement = base.FragmentFactory.CreateFragment<AlterCredentialStatement>();
            alterCredentialStatement.IsDatabaseScoped = false;
            this.credentialStatementBody(alterCredentialStatement);
            return alterCredentialStatement;
        }

        public AlterEndpointStatement alterEndpointStatement() {
            AlterEndpointStatement alterEndpointStatement = base.FragmentFactory.CreateFragment<AlterEndpointStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ENDPOINT");
                alterEndpointStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterEndpointStatement);
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                this.endpointOptions(alterEndpointStatement);
                goto IL_00ac;
            }
            if (TSql140ParserInternal.tokenSet_82_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00ac;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0326:
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 67:
                        this.payloadInfo(alterEndpointStatement);
                        goto IL_05b4;
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_05b4;
                }
            } else {
                switch (num) {
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_05b4;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_05b4:
            return alterEndpointStatement;
            IL_00ac:
            int num2 = this.LA(1);
            if (num2 <= 92) {
                switch (num2) {
                    case 9:
                        this.protocolInfo(alterEndpointStatement);
                        goto IL_0326;
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 67:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_0326;
                }
            } else {
                switch (num2) {
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0326;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public TSqlStatement alterFulltextStatement() {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FULLTEXT");
            }
            switch (this.LA(1)) {
                case 232:
                    return this.alterFulltextCatalogStatement();
                case 84:
                    return this.alterFulltextIndexStatement();
                case 183:
                    return this.alterFulltextStoplistStatement();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public AlterIndexStatement alterIndexStatement() {
            AlterIndexStatement alterIndexStatement = base.FragmentFactory.CreateFragment<AlterIndexStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            IToken token6 = null;
            IndexAffectingStatement statementType = IndexAffectingStatement.AlterIndexSet;
            this.match(84);
            switch (this.LA(1)) {
                case 232:
                case 233: {
                        Identifier name = this.identifier();
                        if (base.inputState.guessing == 0) {
                            alterIndexStatement.Name = name;
                        }
                        break;
                    }
                case 5:
                    this.match(5);
                    if (base.inputState.guessing == 0) {
                        alterIndexStatement.All = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            this.match(105);
            SchemaObjectName onName = this.schemaObjectFourPartName();
            if (base.inputState.guessing == 0) {
                alterIndexStatement.OnName = onName;
            }
            switch (this.LA(1)) {
                case 142:
                    this.match(142);
                    this.indexOptionList(statementType, alterIndexStatement.IndexOptions, alterIndexStatement);
                    if (base.inputState.guessing == 0) {
                        alterIndexStatement.AlterIndexType = AlterIndexType.Set;
                    }
                    break;
                case 67:
                case 171: {
                        switch (this.LA(1)) {
                            case 171: {
                                    token5 = this.LT(1);
                                    this.match(171);
                                    if (base.inputState.guessing == 0) {
                                        TSql80ParserBaseInternal.UpdateTokenInfo(alterIndexStatement, token5);
                                    }
                                    XmlNamespaces xmlNamespaces = this.xmlNamespaces();
                                    if (base.inputState.guessing == 0) {
                                        alterIndexStatement.XmlNamespaces = xmlNamespaces;
                                    }
                                    break;
                                }
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 67:
                                break;
                        }
                        this.match(67);
                        this.match(191);
                        SelectiveXmlIndexPromotedPath item = this.promotedSelectiveXmlIndexPathInAlter();
                        if (base.inputState.guessing == 0) {
                            alterIndexStatement.AlterIndexType = AlterIndexType.UpdateSelectiveXmlPaths;
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterIndexStatement, alterIndexStatement.PromotedPaths, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.promotedSelectiveXmlIndexPathInAlter();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterIndexStatement, alterIndexStatement.PromotedPaths, item);
                            }
                        }
                        token6 = this.LT(1);
                        this.match(192);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(alterIndexStatement, token6);
                        }
                        break;
                    }
                default: {
                        if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2)) && base.NextTokenMatches("DISABLE")) {
                            token = this.LT(1);
                            this.match(232);
                            if (base.inputState.guessing == 0) {
                                alterIndexStatement.AlterIndexType = AlterIndexType.Disable;
                                TSql80ParserBaseInternal.UpdateTokenInfo(alterIndexStatement, token);
                            }
                            break;
                        }
                        if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2)) && base.NextTokenMatches("PAUSE")) {
                            token2 = this.LT(1);
                            this.match(232);
                            if (base.inputState.guessing == 0) {
                                alterIndexStatement.AlterIndexType = AlterIndexType.Pause;
                                TSql80ParserBaseInternal.UpdateTokenInfo(alterIndexStatement, token2);
                            }
                            break;
                        }
                        if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2)) && base.NextTokenMatches("ABORT")) {
                            token3 = this.LT(1);
                            this.match(232);
                            if (base.inputState.guessing == 0) {
                                alterIndexStatement.AlterIndexType = AlterIndexType.Abort;
                                TSql80ParserBaseInternal.UpdateTokenInfo(alterIndexStatement, token3);
                            }
                            break;
                        }
                        if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2))) {
                            token4 = this.LT(1);
                            this.match(232);
                            if (base.inputState.guessing == 0) {
                                alterIndexStatement.AlterIndexType = AlterIndexTypeHelper.Instance.ParseOption(token4, SqlVersionFlags.TSql140);
                                TSql80ParserBaseInternal.UpdateTokenInfo(alterIndexStatement, token4);
                            }
                            if (this.LA(1) == 232 && this.LA(2) == 206) {
                                PartitionSpecifier partition = this.partitionSpecifier();
                                if (base.inputState.guessing == 0) {
                                    alterIndexStatement.Partition = partition;
                                }
                                goto IL_043e;
                            }
                            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                                goto IL_043e;
                            }
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                        }
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    IL_043e:
                    if (base.inputState.guessing == 0) {
                        statementType = TSql90ParserBaseInternal.GetAlterIndexStatementKind(alterIndexStatement);
                    }
                    if (this.LA(1) == 171 && this.LA(2) == 191) {
                        this.match(171);
                        this.indexOptionList(statementType, alterIndexStatement.IndexOptions, alterIndexStatement);
                        if (base.inputState.guessing == 0 && alterIndexStatement.AlterIndexType == AlterIndexType.Rebuild) {
                            TSql100ParserBaseInternal.CheckPartitionAllSpecifiedForIndexRebuild(alterIndexStatement.Partition, alterIndexStatement.IndexOptions);
                        }
                        break;
                    }
                    if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return alterIndexStatement;
        }

        public AlterLoginStatement alterLoginStatement() {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier vName = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "LOGIN");
            }
            switch (this.LA(1)) {
                case 232:
                    return this.alterLoginEnableDisable(vName);
                case 171:
                    return this.alterLoginOptions(vName);
                case 4:
                case 54:
                    return this.alterLoginAddDropCredential(vName);
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public AlterMasterKeyStatement alterMasterKeyStatement() {
            AlterMasterKeyStatement alterMasterKeyStatement = base.FragmentFactory.CreateFragment<AlterMasterKeyStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            IToken token6 = null;
            IToken token7 = null;
            IToken token8 = null;
            IToken token9 = null;
            IToken token10 = null;
            IToken token11 = null;
            IToken token12 = null;
            IToken token13 = null;
            IToken token14 = null;
            IToken token15 = null;
            IToken token16 = null;
            IToken token17 = null;
            IToken token18 = null;
            token = this.LT(1);
            this.match(232);
            this.match(91);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MASTER");
            }
            switch (this.LA(1)) {
                case 4:
                    this.match(4);
                    token9 = this.LT(1);
                    this.match(232);
                    this.match(18);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token9, "ENCRYPTION");
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232) {
                        token10 = this.LT(1);
                        this.match(232);
                        token11 = this.LT(1);
                        this.match(232);
                        token12 = this.LT(1);
                        this.match(91);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token10, "SERVICE");
                            TSql80ParserBaseInternal.Match(token11, "MASTER");
                            alterMasterKeyStatement.Option = AlterMasterKeyOption.AddEncryptionByServiceMasterKey;
                            TSql80ParserBaseInternal.UpdateTokenInfo(alterMasterKeyStatement, token12);
                        }
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 206) {
                        token13 = this.LT(1);
                        this.match(232);
                        this.match(206);
                        Literal password = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token13, "PASSWORD");
                            alterMasterKeyStatement.Option = AlterMasterKeyOption.AddEncryptionByPassword;
                            alterMasterKeyStatement.Password = password;
                        }
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 54:
                    this.match(54);
                    token14 = this.LT(1);
                    this.match(232);
                    this.match(18);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token14, "ENCRYPTION");
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232) {
                        token15 = this.LT(1);
                        this.match(232);
                        token16 = this.LT(1);
                        this.match(232);
                        token17 = this.LT(1);
                        this.match(91);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token15, "SERVICE");
                            TSql80ParserBaseInternal.Match(token16, "MASTER");
                            alterMasterKeyStatement.Option = AlterMasterKeyOption.DropEncryptionByServiceMasterKey;
                            TSql80ParserBaseInternal.UpdateTokenInfo(alterMasterKeyStatement, token17);
                        }
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 206) {
                        token18 = this.LT(1);
                        this.match(232);
                        this.match(206);
                        Literal password = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token18, "PASSWORD");
                            alterMasterKeyStatement.Option = AlterMasterKeyOption.DropEncryptionByPassword;
                            alterMasterKeyStatement.Password = password;
                        }
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                default:
                    if (this.LA(1) == 232 && this.LA(2) == 171) {
                        token2 = this.LT(1);
                        this.match(232);
                        this.match(171);
                        token3 = this.LT(1);
                        this.match(232);
                        this.match(18);
                        token4 = this.LT(1);
                        this.match(232);
                        this.match(206);
                        Literal password = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token2, "REGENERATE");
                            TSql80ParserBaseInternal.Match(token3, "ENCRYPTION");
                            TSql80ParserBaseInternal.Match(token4, "PASSWORD");
                            alterMasterKeyStatement.Option = AlterMasterKeyOption.Regenerate;
                            alterMasterKeyStatement.Password = password;
                        }
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232) {
                        token5 = this.LT(1);
                        this.match(232);
                        token6 = this.LT(1);
                        this.match(232);
                        this.match(171);
                        token7 = this.LT(1);
                        this.match(232);
                        this.match(18);
                        token8 = this.LT(1);
                        this.match(232);
                        this.match(206);
                        Literal password = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token5, "FORCE");
                            TSql80ParserBaseInternal.Match(token6, "REGENERATE");
                            TSql80ParserBaseInternal.Match(token7, "ENCRYPTION");
                            TSql80ParserBaseInternal.Match(token8, "PASSWORD");
                            alterMasterKeyStatement.Option = AlterMasterKeyOption.ForceRegenerate;
                            alterMasterKeyStatement.Password = password;
                        }
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return alterMasterKeyStatement;
        }

        public AlterMessageTypeStatement alterMessageTypeStatement() {
            AlterMessageTypeStatement alterMessageTypeStatement = base.FragmentFactory.CreateFragment<AlterMessageTypeStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MESSAGE");
                TSql80ParserBaseInternal.Match(token2, "TYPE");
                alterMessageTypeStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterMessageTypeStatement);
            }
            this.messageTypeValidation(alterMessageTypeStatement);
            return alterMessageTypeStatement;
        }

        public TSqlStatement alterPartitionStatement() {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "PARTITION");
            }
            switch (this.LA(1)) {
                case 73:
                    return this.alterPartitionFunctionStatement();
                case 232:
                    return this.alterPartitionSchemeStatement();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public AlterQueueStatement alterQueueStatement() {
            AlterQueueStatement alterQueueStatement = base.FragmentFactory.CreateFragment<AlterQueueStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            SchemaObjectName name = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "QUEUE");
                alterQueueStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterQueueStatement);
            }
            this.queueOptionList(alterQueueStatement, true);
            return alterQueueStatement;
        }

        public AlterRoleStatement alterRoleStatement() {
            AlterRoleStatement alterRoleStatement = base.FragmentFactory.CreateFragment<AlterRoleStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ROLE");
                alterRoleStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterRoleStatement);
            }
            AlterRoleAction action = this.alterRoleAction();
            if (base.inputState.guessing == 0) {
                alterRoleStatement.Action = action;
            }
            return alterRoleStatement;
        }

        public AlterRouteStatement alterRouteStatement() {
            AlterRouteStatement alterRouteStatement = base.FragmentFactory.CreateFragment<AlterRouteStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ROUTE");
                alterRouteStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterRouteStatement);
            }
            this.routeOptionList(alterRouteStatement);
            return alterRouteStatement;
        }

        public AlterSchemaStatement alterSchemaStatement() {
            AlterSchemaStatement alterSchemaStatement = base.FragmentFactory.CreateFragment<AlterSchemaStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            this.match(139);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                alterSchemaStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterSchemaStatement);
            }
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "TRANSFER");
            }
            if (this.LA(1) == 232 && this.LA(2) == 203) {
                token2 = this.LT(1);
                this.match(232);
                this.match(203);
                if (base.inputState.guessing == 0) {
                    if (TSql80ParserBaseInternal.TryMatch(token2, "OBJECT")) {
                        alterSchemaStatement.ObjectKind = SecurityObjectKind.Object;
                    } else {
                        TSql80ParserBaseInternal.Match(token2, "TYPE");
                        alterSchemaStatement.ObjectKind = SecurityObjectKind.Type;
                    }
                }
            } else if (this.LA(1) == 232 && this.LA(2) == 139) {
                token3 = this.LT(1);
                this.match(232);
                this.match(139);
                token4 = this.LT(1);
                this.match(232);
                this.match(203);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token3, "XML");
                    TSql80ParserBaseInternal.Match(token4, "COLLECTION");
                    alterSchemaStatement.ObjectKind = SecurityObjectKind.XmlSchemaCollection;
                }
            } else {
                if (this.LA(1) != 200 && this.LA(1) != 232 && this.LA(1) != 233) {
                    goto IL_01af;
                }
                if (!TSql140ParserInternal.tokenSet_83_.member(this.LA(2))) {
                    goto IL_01af;
                }
            }
            SchemaObjectName objectName = this.schemaObjectTwoPartName();
            if (base.inputState.guessing == 0) {
                alterSchemaStatement.ObjectName = objectName;
            }
            return alterSchemaStatement;
            IL_01af:
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public AlterSequenceStatement alterSequenceStatement() {
            AlterSequenceStatement alterSequenceStatement = base.FragmentFactory.CreateFragment<AlterSequenceStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            SchemaObjectName name = this.schemaObjectTwoPartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SEQUENCE");
                alterSequenceStatement.Name = name;
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_84_.member(this.LA(2))) {
                this.alterSequenceOptionList(alterSequenceStatement);
                goto IL_00aa;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00aa;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00aa:
            return alterSequenceStatement;
        }

        public TSqlStatement alterServiceStatements() {
            TSqlStatement tSqlStatement = null;
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SERVICE");
            }
            if (this.LA(1) == 232 && this.LA(2) == 91) {
                return this.alterServiceMasterKeyStatement();
            }
            if (this.LA(1) != 232 && this.LA(1) != 233) {
                goto IL_008f;
            }
            if (this.LA(2) != 105 && this.LA(2) != 191) {
                goto IL_008f;
            }
            return this.alterServiceStatement();
            IL_008f:
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public AlterUserStatement alterUserStatement() {
            AlterUserStatement alterUserStatement = base.FragmentFactory.CreateFragment<AlterUserStatement>();
            this.match(163);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                alterUserStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterUserStatement);
            }
            this.match(171);
            PrincipalOption item = this.alterUserOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterUserStatement, alterUserStatement.UserOptions, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.alterUserOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterUserStatement, alterUserStatement.UserOptions, item);
                }
            }
            return alterUserStatement;
        }

        public AlterXmlSchemaCollectionStatement alterXmlSchemaCollectionStatement() {
            AlterXmlSchemaCollectionStatement alterXmlSchemaCollectionStatement = base.FragmentFactory.CreateFragment<AlterXmlSchemaCollectionStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(139);
            token2 = this.LT(1);
            this.match(232);
            SchemaObjectName name = this.schemaObjectNonEmptyTwoPartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "XML");
                TSql80ParserBaseInternal.Match(token2, "COLLECTION");
                alterXmlSchemaCollectionStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterXmlSchemaCollectionStatement);
            }
            this.match(4);
            ScalarExpression expression = this.expression();
            if (base.inputState.guessing == 0) {
                alterXmlSchemaCollectionStatement.Expression = expression;
            }
            return alterXmlSchemaCollectionStatement;
        }

        public AlterSecurityPolicyStatement alterSecurityPolicyStatement() {
            AlterSecurityPolicyStatement alterSecurityPolicyStatement = base.FragmentFactory.CreateFragment<AlterSecurityPolicyStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            SchemaObjectName schemaObjectName = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            schemaObjectName = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SECURITY");
                TSql80ParserBaseInternal.Match(token2, "POLICY");
                TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "SECURITY_POLICY");
                alterSecurityPolicyStatement.ActionType = SecurityPolicyActionType.AlterState;
                alterSecurityPolicyStatement.Name = schemaObjectName;
            }
            if (this.LA(1) == 171) {
                this.match(171);
                this.match(191);
                this.securityPolicyOptionsList(alterSecurityPolicyStatement);
                token3 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(alterSecurityPolicyStatement, token3);
                }
                goto IL_0230;
            }
            if ((this.LA(1) == 4 || this.LA(1) == 6 || this.LA(1) == 54) && this.LA(2) == 232) {
                this.alterSecurityPredicateListElement(alterSecurityPolicyStatement);
                if (base.inputState.guessing == 0) {
                    alterSecurityPolicyStatement.ActionType = SecurityPolicyActionType.AlterPredicates;
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    this.alterSecurityPredicateListElement(alterSecurityPolicyStatement);
                }
                goto IL_0230;
            }
            if (this.LA(1) == 4 && this.LA(2) == 99) {
                this.match(4);
                this.match(99);
                this.match(67);
                token4 = this.LT(1);
                this.match(128);
                if (base.inputState.guessing == 0) {
                    alterSecurityPolicyStatement.NotForReplication = true;
                    alterSecurityPolicyStatement.ActionType = SecurityPolicyActionType.AlterReplication;
                    TSql80ParserBaseInternal.UpdateTokenInfo(alterSecurityPolicyStatement, token4);
                }
                goto IL_0230;
            }
            if (this.LA(1) == 54 && this.LA(2) == 99) {
                this.match(54);
                this.match(99);
                this.match(67);
                token5 = this.LT(1);
                this.match(128);
                if (base.inputState.guessing == 0) {
                    alterSecurityPolicyStatement.NotForReplication = false;
                    alterSecurityPolicyStatement.ActionType = SecurityPolicyActionType.AlterReplication;
                    TSql80ParserBaseInternal.UpdateTokenInfo(alterSecurityPolicyStatement, token5);
                }
                goto IL_0230;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0230:
            return alterSecurityPolicyStatement;
        }

        public AlterColumnEncryptionKeyStatement alterColumnEncryptionKeyStatement() {
            AlterColumnEncryptionKeyStatement alterColumnEncryptionKeyStatement = base.FragmentFactory.CreateFragment<AlterColumnEncryptionKeyStatement>();
            IToken token = null;
            this.match(27);
            token = this.LT(1);
            this.match(232);
            this.LT(1);
            this.match(91);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
                alterColumnEncryptionKeyStatement.Name = name;
            }
            if (this.LA(1) == 4 && base.NextTokenMatches("ADD")) {
                this.alterColumnEncryptionKeyAddStatement(alterColumnEncryptionKeyStatement);
                goto IL_00b3;
            }
            if (this.LA(1) == 54 && base.NextTokenMatches("DROP")) {
                this.alterColumnEncryptionKeyDropStatement(alterColumnEncryptionKeyStatement);
                goto IL_00b3;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00b3:
            return alterColumnEncryptionKeyStatement;
        }

        public ApplicationRoleOption applicationRoleOption(bool defaultSchemaAndPasswordOnly) {
            ApplicationRoleOption applicationRoleOption = base.FragmentFactory.CreateFragment<ApplicationRoleOption>();
            IToken token = null;
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("PASSWORD")) {
                this.match(232);
                this.match(206);
                Literal valueExpression = this.stringLiteral();
                if (base.inputState.guessing == 0) {
                    applicationRoleOption.OptionKind = ApplicationRoleOptionKind.Password;
                    applicationRoleOption.Value = base.IdentifierOrValueExpression(valueExpression);
                }
                goto IL_0111;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                token = this.LT(1);
                this.match(232);
                this.match(206);
                Identifier identifier = this.identifier();
                if (base.inputState.guessing == 0) {
                    applicationRoleOption.OptionKind = ApplicationRoleOptionHelper.Instance.ParseOption(token);
                    if (defaultSchemaAndPasswordOnly && applicationRoleOption.OptionKind != ApplicationRoleOptionKind.DefaultSchema) {
                        throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                    }
                    applicationRoleOption.Value = base.IdentifierOrValueExpression(identifier);
                }
                goto IL_0111;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0111:
            return applicationRoleOption;
        }

        public ScalarExpression alterAssemblyFromClause() {
            this.match(71);
            return this.expression();
        }

        public void alterAssemblyWith(AlterAssemblyStatement vParent) {
            int num = 0;
            this.match(171);
            AssemblyOption assemblyOption = this.alterAssemblyWithItem();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)assemblyOption.OptionKind, assemblyOption);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, assemblyOption);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                assemblyOption = this.alterAssemblyWithItem();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)assemblyOption.OptionKind, assemblyOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, assemblyOption);
                }
            }
        }

        public void alterAssemblyDropFile(AlterAssemblyStatement vParent) {
            IToken token = null;
            this.match(54);
            this.match(65);
            switch (this.LA(1)) {
                case 5:
                    token = this.LT(1);
                    this.match(5);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                        vParent.IsDropAll = true;
                    }
                    break;
                case 230:
                case 231: {
                        Literal item = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.DropFiles, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.stringLiteral();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.DropFiles, item);
                            }
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void alterAssemblyAddFile(AlterAssemblyStatement vParent) {
            this.match(4);
            this.match(65);
            this.match(71);
            AddFileSpec item = this.alterAssemblyAddFileSpec();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.AddFiles, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.alterAssemblyAddFileSpec();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.AddFiles, item);
                }
            }
        }

        public AssemblyOption alterAssemblyWithItem() {
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                return this.assemblyPermissionSetOrVisibilityOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 232) {
                return this.assemblyUncheckedDataOption();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public AssemblyOption assemblyPermissionSetOrVisibilityOption() {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            switch (this.LA(1)) {
                case 232:
                    return this.assemblyPermissionSetOption(token);
                case 103:
                case 105:
                    return this.assemblyVisibilityOption(token);
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public AssemblyOption assemblyUncheckedDataOption() {
            AssemblyOption assemblyOption = base.FragmentFactory.CreateFragment<AssemblyOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "UNCHECKED");
                TSql80ParserBaseInternal.Match(token2, "DATA");
                TSql80ParserBaseInternal.UpdateTokenInfo(assemblyOption, token);
                assemblyOption.OptionKind = AssemblyOptionKind.UncheckedData;
                TSql80ParserBaseInternal.UpdateTokenInfo(assemblyOption, token2);
            }
            return assemblyOption;
        }

        public OnOffAssemblyOption assemblyVisibilityOption(IToken tPermissionSetVisibility) {
            OnOffAssemblyOption onOffAssemblyOption = base.FragmentFactory.CreateFragment<OnOffAssemblyOption>();
            OptionState optionState = this.optionOnOff(onOffAssemblyOption);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(tPermissionSetVisibility, "VISIBILITY");
                TSql80ParserBaseInternal.UpdateTokenInfo(onOffAssemblyOption, tPermissionSetVisibility);
                onOffAssemblyOption.OptionKind = AssemblyOptionKind.Visibility;
                onOffAssemblyOption.OptionState = optionState;
            }
            return onOffAssemblyOption;
        }

        public AddFileSpec alterAssemblyAddFileSpec() {
            AddFileSpec addFileSpec = base.FragmentFactory.CreateFragment<AddFileSpec>();
            ScalarExpression file = this.expression();
            if (base.inputState.guessing == 0) {
                addFileSpec.File = file;
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 9: {
                            this.match(9);
                            Literal fileName = this.stringLiteral();
                            if (base.inputState.guessing == 0) {
                                addFileSpec.FileName = fileName;
                            }
                            goto IL_02c3;
                        }
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_02c3;
                }
            } else {
                switch (num) {
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 198:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_02c3;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_02c3:
            return addFileSpec;
        }

        public AlterFullTextCatalogStatement alterFulltextCatalogStatement() {
            AlterFullTextCatalogStatement alterFullTextCatalogStatement = base.FragmentFactory.CreateFragment<AlterFullTextCatalogStatement>();
            IToken token = null;
            IToken token2 = null;
            this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                alterFullTextCatalogStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterFullTextCatalogStatement);
            }
            switch (this.LA(1)) {
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (this.LA(1) == 171 && this.LA(2) == 232) {
                        this.match(171);
                        FullTextCatalogOption item = this.accentSensitivity();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterFullTextCatalogStatement, alterFullTextCatalogStatement.Options, item);
                            TSql80ParserBaseInternal.Match(token, "REBUILD");
                            alterFullTextCatalogStatement.Action = AlterFullTextCatalogAction.Rebuild;
                        }
                        goto IL_010d;
                    }
                    if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                        goto IL_010d;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 9:
                    this.match(9);
                    token2 = this.LT(1);
                    this.match(47);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterFullTextCatalogStatement, token2);
                        alterFullTextCatalogStatement.Action = AlterFullTextCatalogAction.AsDefault;
                    }
                    break;
                default: {
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    IL_010d:
                    if (base.inputState.guessing == 0) {
                        if (alterFullTextCatalogStatement.Action == AlterFullTextCatalogAction.None) {
                            if (TSql80ParserBaseInternal.TryMatch(token, "REORGANIZE")) {
                                alterFullTextCatalogStatement.Action = AlterFullTextCatalogAction.Reorganize;
                            } else {
                                TSql80ParserBaseInternal.Match(token, "REBUILD");
                                alterFullTextCatalogStatement.Action = AlterFullTextCatalogAction.Rebuild;
                            }
                        }
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterFullTextCatalogStatement, token);
                    }
                    break;
            }
            return alterFullTextCatalogStatement;
        }

        public AlterFullTextIndexStatement alterFulltextIndexStatement() {
            AlterFullTextIndexStatement alterFullTextIndexStatement = base.FragmentFactory.CreateFragment<AlterFullTextIndexStatement>();
            this.match(84);
            this.match(105);
            SchemaObjectName onName = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                alterFullTextIndexStatement.OnName = onName;
                base.ThrowPartialAstIfPhaseOne(alterFullTextIndexStatement);
            }
            AlterFullTextIndexAction action = this.alterFulltextIndexAction();
            if (base.inputState.guessing == 0) {
                alterFullTextIndexStatement.Action = action;
            }
            return alterFullTextIndexStatement;
        }

        public AlterFullTextIndexAction alterFulltextIndexAction() {
            switch (this.LA(1)) {
                case 4:
                    return this.addAlterFulltextIndexAction();
                case 54:
                    return this.dropAlterFulltextIndexAction();
                case 142:
                    return this.setAlterFullTextIndexAction();
                case 6:
                    return this.alterColumnAlterFullTextIndexAction();
                default:
                    if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2)) && (base.NextTokenMatches("ENABLE") || base.NextTokenMatches("DISABLE"))) {
                        return this.enableDisableAlterFulltextIndexAction();
                    }
                    if (this.LA(1) == 232 && (this.LA(2) == 72 || this.LA(2) == 160 || this.LA(2) == 232) && base.NextTokenMatches("START")) {
                        return this.startPopulationAlterFulltextIndexAction();
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232) {
                        return this.otherPopulationAlterFulltextIndexAction();
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public SimpleAlterFullTextIndexAction enableDisableAlterFulltextIndexAction() {
            SimpleAlterFullTextIndexAction simpleAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<SimpleAlterFullTextIndexAction>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                simpleAlterFullTextIndexAction.ActionKind = TSql90ParserBaseInternal.EnableDisableMatcher(token, SimpleAlterFullTextIndexActionKind.Enable, SimpleAlterFullTextIndexActionKind.Disable);
                TSql80ParserBaseInternal.UpdateTokenInfo(simpleAlterFullTextIndexAction, token);
            }
            return simpleAlterFullTextIndexAction;
        }

        public AddAlterFullTextIndexAction addAlterFulltextIndexAction() {
            AddAlterFullTextIndexAction addAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<AddAlterFullTextIndexAction>();
            IToken token = null;
            this.match(4);
            this.match(191);
            FullTextIndexColumn item = this.fulltextIndexColumn();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(addAlterFullTextIndexAction, addAlterFullTextIndexAction.Columns, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.fulltextIndexColumn();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(addAlterFullTextIndexAction, addAlterFullTextIndexAction.Columns, item);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(addAlterFullTextIndexAction, token);
            }
            bool withNoPopulation = this.populationOption(addAlterFullTextIndexAction);
            if (base.inputState.guessing == 0) {
                addAlterFullTextIndexAction.WithNoPopulation = withNoPopulation;
            }
            return addAlterFullTextIndexAction;
        }

        public DropAlterFullTextIndexAction dropAlterFulltextIndexAction() {
            DropAlterFullTextIndexAction dropAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<DropAlterFullTextIndexAction>();
            IToken token = null;
            this.match(54);
            this.match(191);
            Identifier item = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(dropAlterFullTextIndexAction, dropAlterFullTextIndexAction.Columns, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.identifier();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(dropAlterFullTextIndexAction, dropAlterFullTextIndexAction.Columns, item);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(dropAlterFullTextIndexAction, token);
            }
            bool withNoPopulation = this.populationOption(dropAlterFullTextIndexAction);
            if (base.inputState.guessing == 0) {
                dropAlterFullTextIndexAction.WithNoPopulation = withNoPopulation;
            }
            return dropAlterFullTextIndexAction;
        }

        public SimpleAlterFullTextIndexAction startPopulationAlterFulltextIndexAction() {
            SimpleAlterFullTextIndexAction simpleAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<SimpleAlterFullTextIndexAction>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "START");
            }
            switch (this.LA(1)) {
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "INCREMENTAL");
                        simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.StartIncrementalPopulation;
                    }
                    break;
                case 160:
                    this.match(160);
                    if (base.inputState.guessing == 0) {
                        simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.StartUpdatePopulation;
                    }
                    break;
                case 72:
                    this.match(72);
                    if (base.inputState.guessing == 0) {
                        simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.StartFullPopulation;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            token3 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token3, "POPULATION");
                TSql80ParserBaseInternal.UpdateTokenInfo(simpleAlterFullTextIndexAction, token3);
            }
            return simpleAlterFullTextIndexAction;
        }

        public SimpleAlterFullTextIndexAction otherPopulationAlterFulltextIndexAction() {
            SimpleAlterFullTextIndexAction simpleAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<SimpleAlterFullTextIndexAction>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(token, "STOP")) {
                    simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.StopPopulation;
                } else if (TSql80ParserBaseInternal.TryMatch(token, "PAUSE")) {
                    simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.PausePopulation;
                } else {
                    TSql80ParserBaseInternal.Match(token, "RESUME");
                    simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.ResumePopulation;
                }
                TSql80ParserBaseInternal.Match(token2, "POPULATION");
                TSql80ParserBaseInternal.UpdateTokenInfo(simpleAlterFullTextIndexAction, token2);
            }
            return simpleAlterFullTextIndexAction;
        }

        public AlterFullTextIndexAction setAlterFullTextIndexAction() {
            this.match(142);
            if (this.LA(1) == 183) {
                return this.setStoplistAlterFulltextIndexAction();
            }
            if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 206 || this.LA(2) == 232) && base.NextTokenMatches("CHANGE_TRACKING")) {
                return this.setChangeTrackingAlterFulltextIndexAction();
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SEARCH")) {
                return this.setSearchPropertyListAlterFullTextIndexAction();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public AlterColumnAlterFullTextIndexAction alterColumnAlterFullTextIndexAction() {
            AlterColumnAlterFullTextIndexAction alterColumnAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<AlterColumnAlterFullTextIndexAction>();
            IToken token = null;
            token = this.LT(1);
            this.match(6);
            this.match(27);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(alterColumnAlterFullTextIndexAction, token);
            }
            FullTextIndexColumn column = this.alterFullTextIndexColumn();
            if (base.inputState.guessing == 0) {
                alterColumnAlterFullTextIndexAction.Column = column;
            }
            bool withNoPopulation = this.populationOption(alterColumnAlterFullTextIndexAction);
            if (base.inputState.guessing == 0) {
                alterColumnAlterFullTextIndexAction.WithNoPopulation = withNoPopulation;
            }
            return alterColumnAlterFullTextIndexAction;
        }

        public SetStopListAlterFullTextIndexAction setStoplistAlterFulltextIndexAction() {
            SetStopListAlterFullTextIndexAction setStopListAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<SetStopListAlterFullTextIndexAction>();
            StopListFullTextIndexOption stopListOption = this.stoplistFulltextIndexOption();
            if (base.inputState.guessing == 0) {
                setStopListAlterFullTextIndexAction.StopListOption = stopListOption;
            }
            bool withNoPopulation = this.populationOption(setStopListAlterFullTextIndexAction);
            if (base.inputState.guessing == 0) {
                setStopListAlterFullTextIndexAction.WithNoPopulation = withNoPopulation;
            }
            return setStopListAlterFullTextIndexAction;
        }

        public SimpleAlterFullTextIndexAction setChangeTrackingAlterFulltextIndexAction() {
            SimpleAlterFullTextIndexAction simpleAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<SimpleAlterFullTextIndexAction>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            switch (this.LA(1)) {
                case 206:
                    this.match(206);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 103:
                case 232:
                    break;
            }
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CHANGE_TRACKING");
            }
            switch (this.LA(1)) {
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        if (TSql80ParserBaseInternal.TryMatch(token2, "MANUAL")) {
                            simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.SetChangeTrackingManual;
                        } else {
                            TSql80ParserBaseInternal.Match(token2, "AUTO");
                            simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.SetChangeTrackingAuto;
                        }
                        TSql80ParserBaseInternal.UpdateTokenInfo(simpleAlterFullTextIndexAction, token2);
                    }
                    break;
                case 103:
                    token3 = this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.SetChangeTrackingOff;
                        TSql80ParserBaseInternal.UpdateTokenInfo(simpleAlterFullTextIndexAction, token3);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return simpleAlterFullTextIndexAction;
        }

        public SetSearchPropertyListAlterFullTextIndexAction setSearchPropertyListAlterFullTextIndexAction() {
            SetSearchPropertyListAlterFullTextIndexAction setSearchPropertyListAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<SetSearchPropertyListAlterFullTextIndexAction>();
            SearchPropertyListFullTextIndexOption searchPropertyListOption = this.searchPropertyListFullTextIndexOption();
            if (base.inputState.guessing == 0) {
                setSearchPropertyListAlterFullTextIndexAction.SearchPropertyListOption = searchPropertyListOption;
            }
            bool withNoPopulation = this.populationOption(setSearchPropertyListAlterFullTextIndexAction);
            if (base.inputState.guessing == 0) {
                setSearchPropertyListAlterFullTextIndexAction.WithNoPopulation = withNoPopulation;
            }
            return setSearchPropertyListAlterFullTextIndexAction;
        }

        public bool populationOption(TSqlFragment vParent) {
            bool result = false;
            IToken token = null;
            IToken token2 = null;
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                token = this.LT(1);
                this.match(232);
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "NO");
                    TSql80ParserBaseInternal.Match(token2, "POPULATION");
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                    result = true;
                }
                goto IL_00ba;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00ba;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00ba:
            return result;
        }

        public FullTextIndexColumn alterFullTextIndexColumn() {
            FullTextIndexColumn fullTextIndexColumn = base.FragmentFactory.CreateFragment<FullTextIndexColumn>();
            IToken token = null;
            IToken token2 = null;
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                fullTextIndexColumn.Name = name;
            }
            switch (this.LA(1)) {
                case 4:
                    token = this.LT(1);
                    this.match(4);
                    break;
                case 54:
                    this.LT(1);
                    this.match(54);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "STATISTICAL_SEMANTICS");
                if (token != null) {
                    fullTextIndexColumn.StatisticalSemantics = true;
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(fullTextIndexColumn, token2);
            }
            return fullTextIndexColumn;
        }

        public PartitionSpecifier partitionSpecifier() {
            PartitionSpecifier partitionSpecifier = base.FragmentFactory.CreateFragment<PartitionSpecifier>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "PARTITION");
            }
            switch (this.LA(1)) {
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 163:
                case 187:
                case 191:
                case 193:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235: {
                        ScalarExpression number = this.expression();
                        if (base.inputState.guessing == 0) {
                            partitionSpecifier.Number = number;
                        }
                        break;
                    }
                case 5:
                    token2 = this.LT(1);
                    this.match(5);
                    if (base.inputState.guessing == 0) {
                        partitionSpecifier.All = true;
                        TSql80ParserBaseInternal.UpdateTokenInfo(partitionSpecifier, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return partitionSpecifier;
        }

        public AlterLoginEnableDisableStatement alterLoginEnableDisable(Identifier vName) {
            AlterLoginEnableDisableStatement alterLoginEnableDisableStatement = base.FragmentFactory.CreateFragment<AlterLoginEnableDisableStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                alterLoginEnableDisableStatement.Name = vName;
                alterLoginEnableDisableStatement.IsEnable = TSql90ParserBaseInternal.EnableDisableMatcher(token, true, false);
                TSql80ParserBaseInternal.UpdateTokenInfo(alterLoginEnableDisableStatement, token);
                base.ThrowPartialAstIfPhaseOne(alterLoginEnableDisableStatement);
            }
            return alterLoginEnableDisableStatement;
        }

        public AlterLoginOptionsStatement alterLoginOptions(Identifier vName) {
            AlterLoginOptionsStatement alterLoginOptionsStatement = base.FragmentFactory.CreateFragment<AlterLoginOptionsStatement>();
            int num = 0;
            this.match(171);
            if (base.inputState.guessing == 0) {
                alterLoginOptionsStatement.Name = vName;
                base.ThrowPartialAstIfPhaseOne(alterLoginOptionsStatement);
            }
            PrincipalOption principalOption = this.alterLoginParam();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterLoginOptionsStatement, alterLoginOptionsStatement.Options, principalOption);
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)principalOption.OptionKind, principalOption);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                principalOption = this.alterLoginParam();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterLoginOptionsStatement, alterLoginOptionsStatement.Options, principalOption);
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)principalOption.OptionKind, principalOption);
                }
            }
            return alterLoginOptionsStatement;
        }

        public AlterLoginAddDropCredentialStatement alterLoginAddDropCredential(Identifier vName) {
            AlterLoginAddDropCredentialStatement alterLoginAddDropCredentialStatement = base.FragmentFactory.CreateFragment<AlterLoginAddDropCredentialStatement>();
            IToken token = null;
            switch (this.LA(1)) {
                case 4:
                    this.match(4);
                    if (base.inputState.guessing == 0) {
                        alterLoginAddDropCredentialStatement.IsAdd = true;
                    }
                    break;
                case 54:
                    this.match(54);
                    if (base.inputState.guessing == 0) {
                        alterLoginAddDropCredentialStatement.IsAdd = false;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                alterLoginAddDropCredentialStatement.Name = vName;
                base.ThrowPartialAstIfPhaseOne(alterLoginAddDropCredentialStatement);
            }
            token = this.LT(1);
            this.match(232);
            Identifier credentialName = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CREDENTIAL");
                alterLoginAddDropCredentialStatement.CredentialName = credentialName;
            }
            return alterLoginAddDropCredentialStatement;
        }

        public PrincipalOption alterLoginParam() {
            PrincipalOption principalOption = null;
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                token = this.LT(1);
                this.match(232);
                this.match(206);
                switch (this.LA(1)) {
                    case 224:
                    case 230:
                    case 231:
                        principalOption = this.passwordAlterLoginOption();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token, "PASSWORD");
                        }
                        break;
                    case 103:
                    case 105:
                        principalOption = this.onOffPrincipalOption(token);
                        break;
                    case 232:
                    case 233: {
                            Identifier identifier = this.identifier();
                            if (base.inputState.guessing == 0) {
                                IdentifierPrincipalOption identifierPrincipalOption = base.FragmentFactory.CreateFragment<IdentifierPrincipalOption>();
                                if (TSql80ParserBaseInternal.TryMatch(token, "NAME")) {
                                    identifierPrincipalOption.OptionKind = PrincipalOptionKind.Name;
                                } else {
                                    identifierPrincipalOption.OptionKind = IdentifierCreateLoginOptionsHelper.Instance.ParseOption(token);
                                }
                                identifierPrincipalOption.Identifier = identifier;
                                principalOption = identifierPrincipalOption;
                            }
                            break;
                        }
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(principalOption, token);
                }
                goto IL_01e2;
            }
            if (this.LA(1) == 232 && this.LA(2) == 232) {
                token2 = this.LT(1);
                this.match(232);
                token3 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "NO");
                    TSql80ParserBaseInternal.Match(token3, "CREDENTIAL");
                    PrincipalOption principalOption2 = base.FragmentFactory.CreateFragment<PrincipalOption>();
                    principalOption2.OptionKind = PrincipalOptionKind.NoCredential;
                    TSql80ParserBaseInternal.UpdateTokenInfo(principalOption2, token3);
                    principalOption = principalOption2;
                }
                goto IL_01e2;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_01e2:
            return principalOption;
        }

        public PasswordAlterPrincipalOption passwordAlterLoginOption() {
            PasswordAlterPrincipalOption passwordAlterPrincipalOption = base.FragmentFactory.CreateFragment<PasswordAlterPrincipalOption>();
            IToken token = null;
            IToken token2 = null;
            Literal password = this.loginPassword();
            if (base.inputState.guessing == 0) {
                passwordAlterPrincipalOption.Password = password;
                passwordAlterPrincipalOption.OptionKind = PrincipalOptionKind.Password;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                token = this.LT(1);
                this.match(232);
                this.match(206);
                Literal oldPassword = this.stringLiteral();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "OLD_PASSWORD");
                    passwordAlterPrincipalOption.OldPassword = oldPassword;
                }
                goto IL_0120;
            }
            if (TSql140ParserInternal.tokenSet_56_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_85_.member(this.LA(2))) {
                while (true) {
                    if (this.LA(1) != 232) {
                        break;
                    }
                    if (!TSql140ParserInternal.tokenSet_56_.member(this.LA(2))) {
                        break;
                    }
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql90ParserBaseInternal.RecognizeAlterLoginSecAdminPasswordOption(token2, passwordAlterPrincipalOption);
                    }
                }
                goto IL_0120;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0120:
            return passwordAlterPrincipalOption;
        }

        public AlterPartitionFunctionStatement alterPartitionFunctionStatement() {
            AlterPartitionFunctionStatement alterPartitionFunctionStatement = base.FragmentFactory.CreateFragment<AlterPartitionFunctionStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            this.match(73);
            Identifier name = this.identifier();
            this.match(191);
            this.match(192);
            if (base.inputState.guessing == 0) {
                alterPartitionFunctionStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterPartitionFunctionStatement);
            }
            switch (this.LA(1)) {
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token, "SPLIT");
                        alterPartitionFunctionStatement.IsSplit = true;
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterPartitionFunctionStatement, token);
                    }
                    break;
                case 182:
                    token2 = this.LT(1);
                    this.match(182);
                    if (base.inputState.guessing == 0) {
                        alterPartitionFunctionStatement.IsSplit = false;
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterPartitionFunctionStatement, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (this.LA(1) == 232 && this.LA(2) == 191) {
                token3 = this.LT(1);
                this.match(232);
                this.match(191);
                ScalarExpression boundary = this.expression();
                token4 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token3, "RANGE");
                    alterPartitionFunctionStatement.Boundary = boundary;
                    TSql80ParserBaseInternal.UpdateTokenInfo(alterPartitionFunctionStatement, token4);
                }
                goto IL_01a9;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_01a9;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_01a9:
            return alterPartitionFunctionStatement;
        }

        public AlterPartitionSchemeStatement alterPartitionSchemeStatement() {
            AlterPartitionSchemeStatement alterPartitionSchemeStatement = base.FragmentFactory.CreateFragment<AlterPartitionSchemeStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SCHEME");
                alterPartitionSchemeStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterPartitionSchemeStatement);
            }
            token2 = this.LT(1);
            this.match(232);
            token3 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "NEXT");
                TSql80ParserBaseInternal.Match(token3, "USED");
                TSql80ParserBaseInternal.UpdateTokenInfo(alterPartitionSchemeStatement, token3);
            }
            if (this.LA(1) >= 230 && this.LA(1) <= 233 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2))) {
                IdentifierOrValueExpression fileGroup = this.stringOrIdentifier();
                if (base.inputState.guessing == 0) {
                    alterPartitionSchemeStatement.FileGroup = fileGroup;
                }
                goto IL_012b;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_012b;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_012b:
            return alterPartitionSchemeStatement;
        }

        public ExecuteAsClause executeAsClause(bool vCallerProhibited, bool vOwnerProhibited) {
            ExecuteAsClause executeAsClause = base.FragmentFactory.CreateFragment<ExecuteAsClause>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            switch (this.LA(1)) {
                case 60:
                    token = this.LT(1);
                    this.match(60);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(executeAsClause, token);
                    }
                    break;
                case 61:
                    token2 = this.LT(1);
                    this.match(61);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(executeAsClause, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            this.match(9);
            switch (this.LA(1)) {
                case 230:
                case 231: {
                        Literal literal = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            executeAsClause.ExecuteAsOption = ExecuteAsOption.String;
                            executeAsClause.Literal = literal;
                        }
                        break;
                    }
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing != 0) {
                        break;
                    }
                    executeAsClause.ExecuteAsOption = ExecuteAsOptionHelper.Instance.ParseOption(token3);
                    if (!vCallerProhibited || executeAsClause.ExecuteAsOption != 0) {
                        if (!vOwnerProhibited) {
                            break;
                        }
                        if (executeAsClause.ExecuteAsOption != ExecuteAsOption.Owner) {
                            break;
                        }
                    }
                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token3);
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return executeAsClause;
        }

        public void queueOption(QueueStatement vParent, bool vDropAccepted) {
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                QueueOption item = this.stateQueueOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.QueueOptions, item);
                }
                return;
            }
            if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("ACTIVATION")) {
                this.queueActivationOption(vParent, vDropAccepted);
                return;
            }
            if (this.LA(1) == 232 && this.LA(2) == 191) {
                QueueOption item = this.queuePoisonMessageHandlingOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.QueueOptions, item);
                }
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public QueueStateOption stateQueueOption() {
            QueueStateOption queueStateOption = base.FragmentFactory.CreateFragment<QueueStateOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            OptionState optionState = this.optionOnOff(queueStateOption);
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(token, "STATUS")) {
                    queueStateOption.OptionKind = QueueOptionKind.Status;
                } else {
                    TSql80ParserBaseInternal.Match(token, "RETENTION");
                    queueStateOption.OptionKind = QueueOptionKind.Retention;
                }
                queueStateOption.OptionState = optionState;
            }
            return queueStateOption;
        }

        public void queueActivationOption(QueueStatement vParent, bool vDropAccepted) {
            IToken token = null;
            IToken token2 = null;
            bool flag = false;
            bool flag2 = false;
            bool flag3 = false;
            token = this.LT(1);
            this.match(232);
            this.match(191);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ACTIVATION");
            }
            QueueOption item = this.activationQueueOptionArgument(vDropAccepted, ref flag, ref flag2, ref flag3);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.QueueOptions, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.activationQueueOptionArgument(vDropAccepted, ref flag, ref flag2, ref flag3);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.QueueOptions, item);
                }
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                if (vParent is CreateQueueStatement) {
                    if (!flag && !flag2 && !flag3) {
                        return;
                    }
                    if (flag && flag2 && flag3) {
                        return;
                    }
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46069", vParent, TSqlParserResource.SQL46069Message);
                }
            }
        }

        public QueueStateOption queuePoisonMessageHandlingOption() {
            QueueStateOption queueStateOption = base.FragmentFactory.CreateFragment<QueueStateOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            this.match(191);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "POISON_MESSAGE_HANDLING");
                TSql80ParserBaseInternal.UpdateTokenInfo(queueStateOption, token);
            }
            token2 = this.LT(1);
            this.match(232);
            this.match(206);
            OptionState optionState = this.optionOnOff(queueStateOption);
            token3 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "STATUS");
                queueStateOption.OptionState = optionState;
                queueStateOption.OptionKind = QueueOptionKind.PoisonMessageHandlingStatus;
                TSql80ParserBaseInternal.UpdateTokenInfo(queueStateOption, token3);
            }
            return queueStateOption;
        }

        public QueueOption activationQueueOptionArgument(bool vDropAccepted, ref bool procedureName, ref bool maxQueueReaders, ref bool executeAs) {
            IToken token = null;
            QueueOption result;
            switch (this.LA(1)) {
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    this.match(206);
                    switch (this.LA(1)) {
                        case 103:
                        case 105:
                            result = this.statusQueueOptionArgument(token);
                            break;
                        case 200:
                        case 232:
                        case 233:
                            result = this.procedureNameQueueOptionArgument(token);
                            if (base.inputState.guessing == 0) {
                                procedureName = true;
                            }
                            break;
                        case 221:
                            result = this.maxQueueReadersQueueOptionArgument(token);
                            if (base.inputState.guessing == 0) {
                                maxQueueReaders = true;
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    break;
                case 54:
                    result = this.dropQueueOptionArgument(vDropAccepted);
                    break;
                case 60:
                case 61:
                    result = this.executeAsQueueOptionArgument();
                    if (base.inputState.guessing == 0) {
                        executeAs = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public QueueStateOption statusQueueOptionArgument(IToken vStartToken) {
            QueueStateOption queueStateOption = base.FragmentFactory.CreateFragment<QueueStateOption>();
            OptionState optionState = this.optionOnOff(queueStateOption);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(vStartToken, "STATUS");
                TSql80ParserBaseInternal.UpdateTokenInfo(queueStateOption, vStartToken);
                queueStateOption.OptionState = optionState;
                queueStateOption.OptionKind = QueueOptionKind.ActivationStatus;
            }
            return queueStateOption;
        }

        public QueueProcedureOption procedureNameQueueOptionArgument(IToken vStartToken) {
            QueueProcedureOption queueProcedureOption = base.FragmentFactory.CreateFragment<QueueProcedureOption>();
            SchemaObjectName optionValue = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(vStartToken, "PROCEDURE_NAME");
                TSql80ParserBaseInternal.UpdateTokenInfo(queueProcedureOption, vStartToken);
                queueProcedureOption.OptionValue = optionValue;
                queueProcedureOption.OptionKind = QueueOptionKind.ActivationProcedureName;
            }
            return queueProcedureOption;
        }

        public QueueValueOption maxQueueReadersQueueOptionArgument(IToken vStartToken) {
            QueueValueOption queueValueOption = base.FragmentFactory.CreateFragment<QueueValueOption>();
            Literal optionValue = this.integer();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(vStartToken, "MAX_QUEUE_READERS");
                TSql80ParserBaseInternal.UpdateTokenInfo(queueValueOption, vStartToken);
                queueValueOption.OptionValue = optionValue;
                queueValueOption.OptionKind = QueueOptionKind.ActivationMaxQueueReaders;
            }
            return queueValueOption;
        }

        public QueueOption dropQueueOptionArgument(bool vDropAccepted) {
            QueueOption queueOption = base.FragmentFactory.CreateFragment<QueueOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(54);
            if (base.inputState.guessing == 0) {
                if (!vDropAccepted) {
                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(queueOption, token);
                queueOption.OptionKind = QueueOptionKind.ActivationDrop;
            }
            return queueOption;
        }

        public QueueExecuteAsOption executeAsQueueOptionArgument() {
            QueueExecuteAsOption queueExecuteAsOption = base.FragmentFactory.CreateFragment<QueueExecuteAsOption>();
            ExecuteAsClause optionValue = this.executeAsClause(true, false);
            if (base.inputState.guessing == 0) {
                queueExecuteAsOption.OptionValue = optionValue;
                queueExecuteAsOption.OptionKind = QueueOptionKind.ActivationExecuteAs;
            }
            return queueExecuteAsOption;
        }

        public AlterRoleAction alterRoleAction() {
            switch (this.LA(1)) {
                case 4:
                    return this.addMemberAlterRoleAction();
                case 54:
                    return this.dropMemberAlterRoleAction();
                case 171:
                    return this.renameAlterRoleAction();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public AddMemberAlterRoleAction addMemberAlterRoleAction() {
            AddMemberAlterRoleAction addMemberAlterRoleAction = base.FragmentFactory.CreateFragment<AddMemberAlterRoleAction>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(4);
            token2 = this.LT(1);
            this.match(232);
            Identifier member = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(addMemberAlterRoleAction, token);
                TSql80ParserBaseInternal.Match(token2, "MEMBER");
                addMemberAlterRoleAction.Member = member;
            }
            return addMemberAlterRoleAction;
        }

        public DropMemberAlterRoleAction dropMemberAlterRoleAction() {
            DropMemberAlterRoleAction dropMemberAlterRoleAction = base.FragmentFactory.CreateFragment<DropMemberAlterRoleAction>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(54);
            token2 = this.LT(1);
            this.match(232);
            Identifier member = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(dropMemberAlterRoleAction, token);
                TSql80ParserBaseInternal.Match(token2, "MEMBER");
                dropMemberAlterRoleAction.Member = member;
            }
            return dropMemberAlterRoleAction;
        }

        public RenameAlterRoleAction renameAlterRoleAction() {
            RenameAlterRoleAction renameAlterRoleAction = base.FragmentFactory.CreateFragment<RenameAlterRoleAction>();
            IToken token = null;
            this.match(171);
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Identifier newName = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "NAME");
                TSql80ParserBaseInternal.UpdateTokenInfo(renameAlterRoleAction, token);
                renameAlterRoleAction.NewName = newName;
            }
            return renameAlterRoleAction;
        }

        public RouteOption routeOption() {
            RouteOption routeOption = base.FragmentFactory.CreateFragment<RouteOption>();
            IToken token = null;
            IToken token2 = null;
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LIFETIME")) {
                token = this.LT(1);
                this.match(232);
                this.match(206);
                Literal literal = this.integer();
                if (base.inputState.guessing == 0) {
                    routeOption.OptionKind = RouteOptionKind.Lifetime;
                    routeOption.Literal = literal;
                    TSql80ParserBaseInternal.UpdateTokenInfo(routeOption, token);
                }
                goto IL_010a;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                token2 = this.LT(1);
                this.match(232);
                this.match(206);
                Literal literal = this.stringLiteral();
                if (base.inputState.guessing == 0) {
                    routeOption.OptionKind = RouteOptionHelper.Instance.ParseOption(token2);
                    routeOption.Literal = literal;
                    TSql80ParserBaseInternal.UpdateTokenInfo(routeOption, token2);
                }
                goto IL_010a;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_010a:
            return routeOption;
        }

        public SchemaObjectName schemaObjectTwoPartName() {
            SchemaObjectName schemaObjectName = null;
            switch (this.LA(1)) {
                case 232:
                case 233:
                    schemaObjectName = this.schemaObjectNonEmptyTwoPartName();
                    break;
                case 200: {
                        this.match(200);
                        Identifier item = this.identifier();
                        if (base.inputState.guessing == 0) {
                            schemaObjectName = base.FragmentFactory.CreateFragment<SchemaObjectName>();
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(schemaObjectName, schemaObjectName.Identifiers, item);
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return schemaObjectName;
        }

        public void alterSequenceOptionList(AlterSequenceStatement vParent) {
            int num = 0;
            int num2 = 0;
            while (true) {
                if (this.LA(1) != 232) {
                    break;
                }
                if (!TSql140ParserInternal.tokenSet_84_.member(this.LA(2))) {
                    break;
                }
                SequenceOption sequenceOption = this.alterSequenceOptionListElement();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)sequenceOption.OptionKind, sequenceOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.SequenceOptions, sequenceOption);
                }
                num2++;
            }
            if (num2 < 1) {
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public SequenceOption alterSequenceOptionListElement() {
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2)) && base.NextTokenMatches("RESTART")) {
                return this.sequenceRestartOptionListElement();
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_84_.member(this.LA(2))) {
                return this.commonSequenceOptionListElement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public AlterServiceMasterKeyStatement alterServiceMasterKeyStatement() {
            AlterServiceMasterKeyStatement alterServiceMasterKeyStatement = base.FragmentFactory.CreateFragment<AlterServiceMasterKeyStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            IToken token6 = null;
            token = this.LT(1);
            this.match(232);
            this.match(91);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MASTER");
                base.ThrowPartialAstIfPhaseOne(alterServiceMasterKeyStatement);
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("FORCE")) {
                token2 = this.LT(1);
                this.match(232);
                token3 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "FORCE");
                    TSql80ParserBaseInternal.Match(token3, "REGENERATE");
                    alterServiceMasterKeyStatement.Kind = AlterServiceMasterKeyOption.ForceRegenerate;
                    TSql80ParserBaseInternal.UpdateTokenInfo(alterServiceMasterKeyStatement, token3);
                }
                goto IL_022b;
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2))) {
                token4 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token4, "REGENERATE");
                    alterServiceMasterKeyStatement.Kind = AlterServiceMasterKeyOption.Regenerate;
                    TSql80ParserBaseInternal.UpdateTokenInfo(alterServiceMasterKeyStatement, token4);
                }
                goto IL_022b;
            }
            if (this.LA(1) == 171) {
                this.match(171);
                token5 = this.LT(1);
                this.match(232);
                this.match(206);
                Literal account = this.stringLiteral();
                this.match(198);
                token6 = this.LT(1);
                this.match(232);
                this.match(206);
                Literal password = this.stringLiteral();
                if (base.inputState.guessing == 0) {
                    if (TSql80ParserBaseInternal.TryMatch(token5, "OLD_ACCOUNT")) {
                        TSql80ParserBaseInternal.Match(token6, "OLD_PASSWORD");
                        alterServiceMasterKeyStatement.Kind = AlterServiceMasterKeyOption.WithOldAccount;
                    } else {
                        TSql80ParserBaseInternal.Match(token5, "NEW_ACCOUNT");
                        TSql80ParserBaseInternal.Match(token6, "NEW_PASSWORD");
                        alterServiceMasterKeyStatement.Kind = AlterServiceMasterKeyOption.WithNewAccount;
                    }
                    alterServiceMasterKeyStatement.Account = account;
                    alterServiceMasterKeyStatement.Password = password;
                }
                goto IL_022b;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_022b:
            return alterServiceMasterKeyStatement;
        }

        public PrincipalOption alterUserOption() {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            switch (this.LA(1)) {
                case 232:
                case 233:
                    return this.identifierAlterUserOption(token);
                case 100:
                case 221:
                    return this.literalAlterUserOption(token);
                default:
                    if ((this.LA(1) == 224 || this.LA(1) == 230 || this.LA(1) == 231) && TSql80ParserBaseInternal.TryMatch(token, "PASSWORD")) {
                        return this.passwordAlterUserOption(token);
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public PasswordAlterPrincipalOption passwordAlterUserOption(IToken tOption) {
            PasswordAlterPrincipalOption passwordAlterPrincipalOption = base.FragmentFactory.CreateFragment<PasswordAlterPrincipalOption>();
            IToken token = null;
            Literal password = this.loginPassword();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(tOption, "PASSWORD");
                TSql80ParserBaseInternal.UpdateTokenInfo(passwordAlterPrincipalOption, tOption);
                passwordAlterPrincipalOption.Password = password;
                passwordAlterPrincipalOption.OptionKind = PrincipalOptionKind.Password;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                token = this.LT(1);
                this.match(232);
                this.match(206);
                Literal oldPassword = this.stringLiteral();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "OLD_PASSWORD");
                    passwordAlterPrincipalOption.OldPassword = oldPassword;
                }
                goto IL_00de;
            }
            if (TSql140ParserInternal.tokenSet_56_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00de;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00de:
            return passwordAlterPrincipalOption;
        }

        public IdentifierPrincipalOption identifierAlterUserOption(IToken tOption) {
            IdentifierPrincipalOption identifierPrincipalOption = base.FragmentFactory.CreateFragment<IdentifierPrincipalOption>();
            Identifier identifier = this.identifier();
            if (base.inputState.guessing == 0) {
                identifierPrincipalOption.OptionKind = UserOptionHelper.Instance.ParseOption(tOption, SqlVersionFlags.TSql140);
                identifierPrincipalOption.Identifier = identifier;
                TSql80ParserBaseInternal.UpdateTokenInfo(identifierPrincipalOption, tOption);
            }
            return identifierPrincipalOption;
        }

        public LiteralPrincipalOption literalAlterUserOption(IToken tOption) {
            LiteralPrincipalOption literalPrincipalOption = base.FragmentFactory.CreateFragment<LiteralPrincipalOption>();
            switch (this.LA(1)) {
                case 221: {
                        Literal value = this.integer();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(tOption, "DEFAULT_LANGUAGE");
                            literalPrincipalOption.OptionKind = PrincipalOptionKind.DefaultLanguage;
                            literalPrincipalOption.Value = value;
                            TSql80ParserBaseInternal.UpdateTokenInfo(literalPrincipalOption, tOption);
                        }
                        break;
                    }
                case 100: {
                        Literal value = this.nullLiteral();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(tOption, "DEFAULT_SCHEMA");
                            literalPrincipalOption.OptionKind = PrincipalOptionKind.DefaultSchema;
                            literalPrincipalOption.Value = value;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return literalPrincipalOption;
        }

        public void authorization(IAuthorization vParent) {
            this.match(11);
            Identifier owner = this.identifier();
            if (base.inputState.guessing == 0) {
                vParent.Owner = owner;
            }
        }

        public StatementList createSchemaElementList() {
            StatementList statementList = base.FragmentFactory.CreateFragment<StatementList>();
            while (true) {
                if (!TSql140ParserInternal.tokenSet_86_.member(this.LA(1))) {
                    break;
                }
                TSqlStatement item = this.createSchemaElement();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(statementList, statementList.Statements, item);
                }
            }
            return statementList;
        }

        public TSqlStatement createSchemaElement() {
            TSqlStatement tSqlStatement = null;
            switch (this.LA(1)) {
                case 75:
                    tSqlStatement = this.grantStatement90();
                    break;
                case 49:
                    tSqlStatement = this.denyStatement90();
                    break;
                case 132:
                    tSqlStatement = this.revokeStatement90();
                    break;
                default:
                    if (this.LA(1) == 35 && this.LA(2) == 166) {
                        tSqlStatement = this.createViewStatement();
                        break;
                    }
                    if (this.LA(1) == 35 && this.LA(2) == 148) {
                        tSqlStatement = this.createTableStatement();
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            this.optSemicolons(tSqlStatement);
            return tSqlStatement;
        }

        public void functionStatementBody(FunctionStatementBody vResult, out bool vParseErrorOccurred) {
            IToken token = null;
            this.match(73);
            SchemaObjectName name = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(name, "TRIGGER");
                vResult.Name = name;
                TSql80ParserBaseInternal.CheckForTemporaryFunction(name);
                base.ThrowPartialAstIfPhaseOne(vResult);
            }
            this.match(191);
            switch (this.LA(1)) {
                case 234:
                    this.functionParameterList(vResult);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            this.match(192);
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "RETURNS");
            }
            this.functionReturnTypeAndBody(vResult, out vParseErrorOccurred);
        }

        public void functionParameterList(FunctionStatementBody vResult) {
            ProcedureParameter item = this.functionParameter();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.Parameters, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.functionParameter();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.Parameters, item);
                }
            }
        }

        public void functionReturnTypeAndBody(FunctionStatementBody vParent, out bool vParseErrorOccurred) {
            vParseErrorOccurred = false;
            switch (this.LA(1)) {
                case 53:
                case 96:
                case 232:
                case 233: {
                        DataTypeReference dataType = this.scalarDataType();
                        if (base.inputState.guessing == 0) {
                            ScalarFunctionReturnType scalarFunctionReturnType = base.FragmentFactory.CreateFragment<ScalarFunctionReturnType>();
                            scalarFunctionReturnType.DataType = dataType;
                            vParent.ReturnType = scalarFunctionReturnType;
                        }
                        switch (this.LA(1)) {
                            case 171:
                                this.functionAttributes(vParent);
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 9:
                            case 13:
                            case 175:
                                break;
                        }
                        switch (this.LA(1)) {
                            case 9:
                                this.match(9);
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 13:
                            case 175:
                                break;
                        }
                        switch (this.LA(1)) {
                            case 13: {
                                    BeginEndBlockStatement beginEndBlockStatement = this.beginEndBlockStatement();
                                    if (base.inputState.guessing == 0) {
                                        base.SetFunctionBodyStatement(vParent, beginEndBlockStatement);
                                        vParseErrorOccurred = (beginEndBlockStatement == null);
                                    }
                                    break;
                                }
                            case 175: {
                                    MethodSpecifier methodSpecifier = this.methodSpecifier();
                                    this.optSemicolons(vParent);
                                    if (base.inputState.guessing == 0) {
                                        vParent.MethodSpecifier = methodSpecifier;
                                    }
                                    break;
                                }
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                        }
                        break;
                    }
                case 234: {
                        DeclareTableVariableBody declareTableVariableBody = this.declareTableBody(IndexAffectingStatement.CreateOrAlterFunction);
                        if (base.inputState.guessing == 0) {
                            TableValuedFunctionReturnType tableValuedFunctionReturnType2 = base.FragmentFactory.CreateFragment<TableValuedFunctionReturnType>();
                            tableValuedFunctionReturnType2.DeclareTableVariableBody = declareTableVariableBody;
                            vParent.ReturnType = tableValuedFunctionReturnType2;
                        }
                        switch (this.LA(1)) {
                            case 171:
                                this.functionAttributes(vParent);
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 9:
                            case 13:
                                break;
                        }
                        switch (this.LA(1)) {
                            case 9:
                                this.match(9);
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 13:
                                break;
                        }
                        BeginEndBlockStatement beginEndBlockStatement = this.beginEndBlockStatement();
                        if (base.inputState.guessing == 0) {
                            base.SetFunctionBodyStatement(vParent, beginEndBlockStatement);
                            vParseErrorOccurred = (beginEndBlockStatement == null);
                        }
                        break;
                    }
                default:
                    if (this.LA(1) == 148 && (this.LA(2) == 9 || this.LA(2) == 131 || this.LA(2) == 171)) {
                        this.match(148);
                        switch (this.LA(1)) {
                            case 171:
                                this.functionAttributesNoExecuteAs(vParent);
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 9:
                            case 131:
                                break;
                        }
                        switch (this.LA(1)) {
                            case 9:
                                this.match(9);
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 131:
                                break;
                        }
                        this.match(131);
                        SelectFunctionReturnType returnType = this.functionReturnClauseRelational();
                        if (base.inputState.guessing == 0) {
                            vParent.ReturnType = returnType;
                        }
                        break;
                    }
                    if (this.LA(1) == 148 && this.LA(2) == 191) {
                        this.match(148);
                        DeclareTableVariableBody declareTableVariableBody = this.declareTableBodyMain(IndexAffectingStatement.CreateOrAlterFunction);
                        if (base.inputState.guessing == 0) {
                            TableValuedFunctionReturnType tableValuedFunctionReturnType = base.FragmentFactory.CreateFragment<TableValuedFunctionReturnType>();
                            tableValuedFunctionReturnType.DeclareTableVariableBody = declareTableVariableBody;
                            vParent.ReturnType = tableValuedFunctionReturnType;
                        }
                        switch (this.LA(1)) {
                            case 171:
                                this.functionAttributes(vParent);
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 9:
                            case 113:
                            case 175:
                                break;
                        }
                        switch (this.LA(1)) {
                            case 113:
                                this.clrTableValuedFunctionOrderHint(vParent);
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 9:
                            case 175:
                                break;
                        }
                        switch (this.LA(1)) {
                            case 9:
                                this.match(9);
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 175:
                                break;
                        }
                        MethodSpecifier methodSpecifier = this.methodSpecifier();
                        this.optSemicolons(vParent);
                        if (base.inputState.guessing == 0) {
                            vParent.MethodSpecifier = methodSpecifier;
                        }
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public ProcedureParameter functionParameter() {
            ProcedureParameter procedureParameter = base.FragmentFactory.CreateFragment<ProcedureParameter>();
            Identifier variableName = this.identifierVariable();
            switch (this.LA(1)) {
                case 9:
                    this.match(9);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 53:
                case 96:
                case 232:
                case 233:
                    break;
            }
            if (base.inputState.guessing == 0) {
                procedureParameter.VariableName = variableName;
            }
            this.scalarProcedureParameter(procedureParameter, false, true);
            return procedureParameter;
        }

        public void scalarProcedureParameter(ProcedureParameter vParent, bool outputAllowed, bool nullableAllowed) {
            IToken token = null;
            DataTypeReference dataType = this.scalarDataType();
            if (base.inputState.guessing == 0) {
                vParent.DataType = dataType;
            }
            switch (this.LA(1)) {
                case 99:
                case 100: {
                        NullableConstraintDefinition nullableConstraintDefinition = this.nullableConstraint();
                        if (base.inputState.guessing == 0) {
                            if (nullableAllowed) {
                                vParent.Nullable = nullableConstraintDefinition;
                            } else {
                                TSql80ParserBaseInternal.ThrowParseErrorException("SQL46039", nullableConstraintDefinition, TSqlParserResource.SQL46039Message);
                            }
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 9:
                case 67:
                case 171:
                case 192:
                case 198:
                case 206:
                case 232:
                    break;
            }
            switch (this.LA(1)) {
                case 206: {
                        this.match(206);
                        ScalarExpression value = this.possibleNegativeConstantOrIdentifierWithDefault();
                        if (base.inputState.guessing == 0) {
                            vParent.Value = value;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 9:
                case 67:
                case 171:
                case 192:
                case 198:
                case 232:
                    break;
            }
            switch (this.LA(1)) {
                case 9:
                case 67:
                case 171:
                case 192:
                case 198:
                    break;
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        if (TSql80ParserBaseInternal.TryMatch(token, "READONLY")) {
                            vParent.Modifier = ParameterModifier.ReadOnly;
                        } else {
                            TSql80ParserBaseInternal.Match(token, "OUTPUT", "OUT");
                            if (outputAllowed) {
                                vParent.Modifier = ParameterModifier.Output;
                            } else {
                                TSql80ParserBaseInternal.ThrowParseErrorException("SQL46039", token, TSqlParserResource.SQL46039Message);
                            }
                        }
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void functionAttributes(FunctionStatementBody vParent) {
            int num = 0;
            this.match(171);
            FunctionOption functionOption = this.functionAttribute();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)functionOption.OptionKind, functionOption);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, functionOption);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                functionOption = this.functionAttribute();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)functionOption.OptionKind, functionOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, functionOption);
                }
            }
        }

        public BeginEndBlockStatement beginEndBlockStatement() {
            BeginEndBlockStatement beginEndBlockStatement = base.FragmentFactory.CreateFragment<BeginEndBlockStatement>();
            IToken token = null;
            IToken token2 = null;
            bool flag = false;
            StatementList statementList = base.FragmentFactory.CreateFragment<StatementList>();
            token = this.LT(1);
            this.match(13);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(beginEndBlockStatement, token);
            }
            if (this.LA(1) == 232 && this.LA(2) == 171) {
                BeginEndAtomicBlockStatement beginEndAtomicBlockStatement = this.beginEndAtomicBlock();
                if (base.inputState.guessing == 0) {
                    beginEndBlockStatement = beginEndAtomicBlockStatement;
                }
                goto IL_00b3;
            }
            if (TSql140ParserInternal.tokenSet_25_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_87_.member(this.LA(2))) {
                goto IL_00b3;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00b3:
            while (true) {
                if (this.LA(1) != 204) {
                    break;
                }
                this.LT(1);
                this.match(204);
            }
            int num = 0;
            while (true) {
                if (!TSql140ParserInternal.tokenSet_3_.member(this.LA(1))) {
                    break;
                }
                if (!TSql140ParserInternal.tokenSet_87_.member(this.LA(2))) {
                    break;
                }
                if (!base.IsStatementIsNext()) {
                    break;
                }
                TSqlStatement tSqlStatement = this.statementOptSemi();
                if (base.inputState.guessing == 0) {
                    if (tSqlStatement != null) {
                        statementList.Statements.Add(tSqlStatement);
                    } else {
                        flag = true;
                        base.ThrowIfEndOfFileOrBatch();
                    }
                }
                num++;
            }
            if (num < 1) {
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            token2 = this.LT(1);
            this.match(56);
            if (base.inputState.guessing == 0) {
                beginEndBlockStatement.StatementList = statementList;
                TSql80ParserBaseInternal.UpdateTokenInfo(beginEndBlockStatement, token2);
                if (flag) {
                    beginEndBlockStatement = null;
                }
            }
            return beginEndBlockStatement;
        }

        public MethodSpecifier methodSpecifier() {
            MethodSpecifier methodSpecifier = base.FragmentFactory.CreateFragment<MethodSpecifier>();
            IToken token = null;
            this.LT(1);
            this.match(175);
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "NAME");
            }
            Identifier assemblyName = this.identifier();
            if (base.inputState.guessing == 0) {
                methodSpecifier.AssemblyName = assemblyName;
            }
            this.match(200);
            assemblyName = this.identifier();
            if (base.inputState.guessing == 0) {
                methodSpecifier.ClassName = assemblyName;
            }
            this.match(200);
            assemblyName = this.identifier();
            if (base.inputState.guessing == 0) {
                methodSpecifier.MethodName = assemblyName;
            }
            return methodSpecifier;
        }

        public void functionAttributesNoExecuteAs(FunctionStatementBody vParent) {
            int num = 0;
            this.match(171);
            FunctionOption functionOption = this.functionAttributeNoExecuteAs();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)functionOption.OptionKind, functionOption);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, functionOption);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                functionOption = this.functionAttributeNoExecuteAs();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)functionOption.OptionKind, functionOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, functionOption);
                }
            }
        }

        public DeclareTableVariableBody declareTableBody(IndexAffectingStatement statementType) {
            bool asDefined = false;
            Identifier variableName = this.identifierVariable();
            switch (this.LA(1)) {
                case 9:
                    this.match(9);
                    if (base.inputState.guessing == 0) {
                        asDefined = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 148:
                    break;
            }
            this.match(148);
            DeclareTableVariableBody declareTableVariableBody = this.declareTableBodyMain(statementType);
            if (base.inputState.guessing == 0) {
                declareTableVariableBody.VariableName = variableName;
                declareTableVariableBody.AsDefined = asDefined;
            }
            return declareTableVariableBody;
        }

        public DeclareTableVariableBody declareTableBodyMain(IndexAffectingStatement statementType) {
            DeclareTableVariableBody declareTableVariableBody = base.FragmentFactory.CreateFragment<DeclareTableVariableBody>();
            IToken token = null;
            this.match(191);
            TableDefinition definition = this.tableDefinition(statementType, null);
            if (base.inputState.guessing == 0) {
                declareTableVariableBody.Definition = definition;
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(declareTableVariableBody, token);
            }
            return declareTableVariableBody;
        }

        public void clrTableValuedFunctionOrderHint(FunctionStatementBody vParent) {
            OrderBulkInsertOption orderHint = this.bulkInsertSortOrderOption();
            if (base.inputState.guessing == 0) {
                vParent.OrderHint = orderHint;
            }
        }

        public SelectStatement subqueryExpressionWithOptionalCTE() {
            SelectStatement selectStatement = base.FragmentFactory.CreateFragment<SelectStatement>();
            switch (this.LA(1)) {
                case 171: {
                        WithCtesAndXmlNamespaces withCtesAndXmlNamespaces = this.withCommonTableExpressionsAndXmlNamespaces();
                        if (base.inputState.guessing == 0) {
                            selectStatement.WithCtesAndXmlNamespaces = withCtesAndXmlNamespaces;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 140:
                case 191:
                    break;
            }
            QueryExpression queryExpression = this.subqueryExpression(SubDmlFlags.SelectNotForInsert);
            if (base.inputState.guessing == 0) {
                selectStatement.QueryExpression = queryExpression;
            }
            return selectStatement;
        }

        public QueryExpression subqueryExpression(SubDmlFlags subDmlFlags) {
            QueryExpression queryExpression = null;
            BinaryQueryExpression binaryQueryExpression = null;
            queryExpression = this.subqueryExpressionUnit(subDmlFlags);
            while (true) {
                if (this.LA(1) != 59 && this.LA(1) != 87 && this.LA(1) != 158) {
                    break;
                }
                if (base.inputState.guessing == 0) {
                    binaryQueryExpression = base.FragmentFactory.CreateFragment<BinaryQueryExpression>();
                    binaryQueryExpression.FirstQueryExpression = queryExpression;
                }
                switch (this.LA(1)) {
                    case 158:
                        this.match(158);
                        if (base.inputState.guessing == 0) {
                            binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Union;
                        }
                        break;
                    case 59:
                        this.match(59);
                        if (base.inputState.guessing == 0) {
                            binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Except;
                        }
                        break;
                    case 87:
                        this.match(87);
                        if (base.inputState.guessing == 0) {
                            binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Intersect;
                        }
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                switch (this.LA(1)) {
                    case 5:
                        this.match(5);
                        if (base.inputState.guessing == 0) {
                            binaryQueryExpression.All = true;
                        }
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    case 140:
                    case 191:
                        break;
                }
                queryExpression = this.subqueryExpressionUnit(subDmlFlags);
                if (base.inputState.guessing == 0) {
                    binaryQueryExpression.SecondQueryExpression = queryExpression;
                    queryExpression = binaryQueryExpression;
                }
            }
            return queryExpression;
        }

        public FunctionOption functionAttribute() {
            switch (this.LA(1)) {
                case 232:
                    return this.functionAttributeNoExecuteAs();
                case 60:
                case 61:
                    return this.functionExecuteAsOption();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public FunctionOption functionAttributeNoExecuteAs() {
            FunctionOption functionOption = base.FragmentFactory.CreateFragment<FunctionOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_88_.member(this.LA(2))) {
                token = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    functionOption.OptionKind = TSql130ParserBaseInternal.ParseAlterCreateFunctionWithOption(token);
                    TSql80ParserBaseInternal.UpdateTokenInfo(functionOption, token);
                }
                goto IL_01a1;
            }
            if (this.LA(1) == 232 && this.LA(2) == 100) {
                token2 = this.LT(1);
                this.match(232);
                this.match(100);
                this.match(105);
                this.match(100);
                token3 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "RETURNS");
                    TSql80ParserBaseInternal.Match(token3, "INPUT");
                    functionOption.OptionKind = FunctionOptionKind.ReturnsNullOnNullInput;
                    TSql80ParserBaseInternal.UpdateTokenInfo(functionOption, token3);
                }
                goto IL_01a1;
            }
            if (this.LA(1) == 232 && this.LA(2) == 105) {
                token4 = this.LT(1);
                this.match(232);
                this.match(105);
                this.match(100);
                token5 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token4, "CALLED");
                    TSql80ParserBaseInternal.Match(token5, "INPUT");
                    functionOption.OptionKind = FunctionOptionKind.CalledOnNullInput;
                    TSql80ParserBaseInternal.UpdateTokenInfo(functionOption, token5);
                }
                goto IL_01a1;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_01a1:
            return functionOption;
        }

        public ExecuteAsFunctionOption functionExecuteAsOption() {
            ExecuteAsFunctionOption executeAsFunctionOption = base.FragmentFactory.CreateFragment<ExecuteAsFunctionOption>();
            ExecuteAsClause executeAs = this.executeAsClause(false, false);
            if (base.inputState.guessing == 0) {
                executeAsFunctionOption.OptionKind = FunctionOptionKind.ExecuteAs;
                executeAsFunctionOption.ExecuteAs = executeAs;
            }
            return executeAsFunctionOption;
        }

        public void identifierColumnList(TSqlFragment vParent, IList<ColumnReferenceExpression> columns) {
            IToken token = null;
            this.match(191);
            ColumnReferenceExpression item = this.identifierColumnReferenceExpression();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, columns, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.identifierColumnReferenceExpression();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, columns, item);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public BooleanExpression filterClause(bool filterProhibited) {
            IToken token = null;
            token = this.LT(1);
            this.match(169);
            BooleanExpression result = this.filterExpression();
            if (base.inputState.guessing == 0 && filterProhibited) {
                TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
            }
            return result;
        }

        public StatisticsOption createStatisticsStatementWithOption(ref bool isConflictingOption) {
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("INCREMENTAL")) {
                return this.incrementalStatisticsOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 221) {
                return this.sampleStatisticsOption(ref isConflictingOption);
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                return this.statsStreamStatisticsOption();
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_56_.member(this.LA(2))) {
                return this.simpleStatisticsOption(ref isConflictingOption);
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public LiteralStatisticsOption sampleStatisticsOption(ref bool isConflictingOption) {
            LiteralStatisticsOption literalStatisticsOption = base.FragmentFactory.CreateFragment<LiteralStatisticsOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            Literal literal = this.integer();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SAMPLE");
                if (isConflictingOption) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46071", token, TSqlParserResource.SQL46071Message);
                } else {
                    isConflictingOption = true;
                }
                literalStatisticsOption.Literal = literal;
            }
            switch (this.LA(1)) {
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(literalStatisticsOption, token2);
                        literalStatisticsOption.OptionKind = TSql80ParserBaseInternal.ParseSampleOptionsWithOption(token2);
                    }
                    break;
                case 116:
                    token3 = this.LT(1);
                    this.match(116);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(literalStatisticsOption, token3);
                        literalStatisticsOption.OptionKind = StatisticsOptionKind.SamplePercent;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return literalStatisticsOption;
        }

        public LiteralStatisticsOption statsStreamStatisticsOption() {
            LiteralStatisticsOption literalStatisticsOption = base.FragmentFactory.CreateFragment<LiteralStatisticsOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal literal = this.binary();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "STATS_STREAM");
                literalStatisticsOption.OptionKind = StatisticsOptionKind.StatsStream;
                literalStatisticsOption.Literal = literal;
            }
            return literalStatisticsOption;
        }

        public StatisticsOption simpleStatisticsOption(ref bool isConflictingOption) {
            StatisticsOption statisticsOption = base.FragmentFactory.CreateFragment<StatisticsOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(token, "FULLSCAN")) {
                    if (isConflictingOption) {
                        TSql80ParserBaseInternal.ThrowParseErrorException("SQL46071", token, TSqlParserResource.SQL46071Message);
                    } else {
                        isConflictingOption = true;
                    }
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(statisticsOption, token);
                statisticsOption.OptionKind = TSql80ParserBaseInternal.ParseCreateStatisticsWithOption(token);
            }
            return statisticsOption;
        }

        public StatisticsPartitionRange statisticsPartitionRange() {
            StatisticsPartitionRange statisticsPartitionRange = base.FragmentFactory.CreateFragment<StatisticsPartitionRange>();
            IntegerLiteral from = this.integer();
            if (base.inputState.guessing == 0) {
                statisticsPartitionRange.From = from;
            }
            switch (this.LA(1)) {
                case 151:
                    this.match(151);
                    from = this.integer();
                    if (base.inputState.guessing == 0) {
                        statisticsPartitionRange.To = from;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                case 198:
                    break;
            }
            return statisticsPartitionRange;
        }

        public ResampleStatisticsOption resampleStatisticsOption() {
            ResampleStatisticsOption resampleStatisticsOption = base.FragmentFactory.CreateFragment<ResampleStatisticsOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "RESAMPLE");
                resampleStatisticsOption.OptionKind = StatisticsOptionHelper.Instance.ParseOption(token);
                TSql80ParserBaseInternal.UpdateTokenInfo(resampleStatisticsOption, token);
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_03bf;
                }
            } else {
                switch (num) {
                    case 105: {
                            this.match(105);
                            token2 = this.LT(1);
                            this.match(232);
                            this.match(191);
                            StatisticsPartitionRange item = this.statisticsPartitionRange();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.Match(token2, "PARTITIONS");
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(resampleStatisticsOption, resampleStatisticsOption.Partitions, item);
                            }
                            while (true) {
                                if (this.LA(1) != 198) {
                                    break;
                                }
                                this.match(198);
                                item = this.statisticsPartitionRange();
                                if (base.inputState.guessing == 0) {
                                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(resampleStatisticsOption, resampleStatisticsOption.Partitions, item);
                                }
                            }
                            token3 = this.LT(1);
                            this.match(192);
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.UpdateTokenInfo(resampleStatisticsOption, token3);
                            }
                            goto IL_03bf;
                        }
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 198:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_03bf;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_03bf:
            return resampleStatisticsOption;
        }

        public OnOffStatisticsOption incrementalStatisticsOption() {
            OnOffStatisticsOption onOffStatisticsOption = base.FragmentFactory.CreateFragment<OnOffStatisticsOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            OptionState optionState = this.optionOnOff(onOffStatisticsOption);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "INCREMENTAL");
                onOffStatisticsOption.OptionKind = StatisticsOptionKind.Incremental;
                onOffStatisticsOption.OptionState = optionState;
                TSql80ParserBaseInternal.UpdateTokenInfo(onOffStatisticsOption, token);
            }
            return onOffStatisticsOption;
        }

        public void columnNameList(TSqlFragment vParent, IList<Identifier> columnNames) {
            IToken token = null;
            this.match(191);
            Identifier item = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, columnNames, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.identifier();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, columnNames, item);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public StatisticsOption updateStatisticsStatementWithOption(ref bool isConflictingOption) {
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_89_.member(this.LA(2)) && base.NextTokenMatches("RESAMPLE")) {
                return this.resampleStatisticsOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("INCREMENTAL")) {
                return this.incrementalStatisticsOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 221) {
                return this.sampleStatisticsOption(ref isConflictingOption);
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("STATS_STREAM")) {
                return this.statsStreamStatisticsOption();
            }
            if ((this.LA(1) == 135 || this.LA(1) == 232) && this.LA(2) == 206) {
                return this.updateStatisticsLiteralOption();
            }
            if ((this.LA(1) == 5 || this.LA(1) == 84 || this.LA(1) == 232) && TSql140ParserInternal.tokenSet_56_.member(this.LA(2))) {
                return this.updateStatisticsSimpleOption(ref isConflictingOption);
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public LiteralStatisticsOption updateStatisticsLiteralOption() {
            LiteralStatisticsOption literalStatisticsOption = base.FragmentFactory.CreateFragment<LiteralStatisticsOption>();
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 232: {
                        token = this.LT(1);
                        this.match(232);
                        this.match(206);
                        Literal literal = this.integer();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token, "PAGECOUNT");
                            literalStatisticsOption.OptionKind = StatisticsOptionKind.PageCount;
                            TSql80ParserBaseInternal.UpdateTokenInfo(literalStatisticsOption, token);
                            literalStatisticsOption.Literal = literal;
                        }
                        break;
                    }
                case 135: {
                        token2 = this.LT(1);
                        this.match(135);
                        this.match(206);
                        Literal literal = this.integer();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(literalStatisticsOption, token2);
                            literalStatisticsOption.OptionKind = StatisticsOptionKind.RowCount;
                            literalStatisticsOption.Literal = literal;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return literalStatisticsOption;
        }

        public StatisticsOption updateStatisticsSimpleOption(ref bool isConflictingOption) {
            StatisticsOption statisticsOption = base.FragmentFactory.CreateFragment<StatisticsOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            switch (this.LA(1)) {
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        if (TSql80ParserBaseInternal.TryMatch(token, "FULLSCAN")) {
                            if (isConflictingOption) {
                                TSql80ParserBaseInternal.ThrowParseErrorException("SQL46071", token, TSqlParserResource.SQL46071Message);
                            } else {
                                isConflictingOption = true;
                            }
                        }
                        TSql80ParserBaseInternal.UpdateTokenInfo(statisticsOption, token);
                        statisticsOption.OptionKind = StatisticsOptionHelper.Instance.ParseOption(token);
                    }
                    break;
                case 5:
                    token2 = this.LT(1);
                    this.match(5);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(statisticsOption, token2);
                        statisticsOption.OptionKind = StatisticsOptionKind.All;
                    }
                    break;
                case 84:
                    token3 = this.LT(1);
                    this.match(84);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(statisticsOption, token3);
                        statisticsOption.OptionKind = StatisticsOptionKind.Index;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return statisticsOption;
        }

        public KillStatement killStatement() {
            KillStatement killStatement = base.FragmentFactory.CreateFragment<KillStatement>();
            IToken token = null;
            ScalarExpression parameter;
            switch (this.LA(1)) {
                case 199:
                case 221:
                    parameter = this.signedInteger();
                    break;
                case 230:
                case 231:
                    parameter = this.stringLiteral();
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                killStatement.Parameter = parameter;
            }
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                token = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "STATUSONLY");
                    killStatement.WithStatusOnly = true;
                    TSql80ParserBaseInternal.UpdateTokenInfo(killStatement, token);
                }
                goto IL_0110;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0110;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0110:
            return killStatement;
        }

        public KillQueryNotificationSubscriptionStatement killQueryNotificationSubscriptionStatement() {
            KillQueryNotificationSubscriptionStatement killQueryNotificationSubscriptionStatement = base.FragmentFactory.CreateFragment<KillQueryNotificationSubscriptionStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "QUERY");
            }
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "NOTIFICATION");
            }
            token3 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token3, "SUBSCRIPTION");
            }
            switch (this.LA(1)) {
                case 5:
                    token4 = this.LT(1);
                    this.match(5);
                    if (base.inputState.guessing == 0) {
                        killQueryNotificationSubscriptionStatement.All = true;
                        TSql80ParserBaseInternal.UpdateTokenInfo(killQueryNotificationSubscriptionStatement, token4);
                    }
                    break;
                case 221: {
                        Literal subscriptionId = this.integer();
                        if (base.inputState.guessing == 0) {
                            killQueryNotificationSubscriptionStatement.SubscriptionId = subscriptionId;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return killQueryNotificationSubscriptionStatement;
        }

        public KillStatsJobStatement killStatsJobStatement() {
            KillStatsJobStatement killStatsJobStatement = base.FragmentFactory.CreateFragment<KillStatsJobStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "STATS");
            }
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "JOB");
            }
            ScalarExpression jobId = this.signedInteger();
            if (base.inputState.guessing == 0) {
                killStatsJobStatement.JobId = jobId;
            }
            return killStatsJobStatement;
        }

        public CompressionPartitionRange compressionPartitionRange() {
            CompressionPartitionRange compressionPartitionRange = base.FragmentFactory.CreateFragment<CompressionPartitionRange>();
            ScalarExpression from = this.expression();
            if (base.inputState.guessing == 0) {
                compressionPartitionRange.From = from;
            }
            switch (this.LA(1)) {
                case 151:
                    this.match(151);
                    from = this.expression();
                    if (base.inputState.guessing == 0) {
                        compressionPartitionRange.To = from;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                case 198:
                    break;
            }
            return compressionPartitionRange;
        }

        public Permission permission() {
            Permission permission = base.FragmentFactory.CreateFragment<Permission>();
            int num = 0;
            while (true) {
                if (!TSql140ParserInternal.tokenSet_41_.member(this.LA(1))) {
                    break;
                }
                Identifier identifier = this.securityStatementPermission();
                if (base.inputState.guessing == 0) {
                    if (permission.Identifiers.Count >= 7) {
                        throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(identifier);
                    }
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(permission, permission.Identifiers, identifier);
                }
                num++;
            }
            if (num < 1) {
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            switch (this.LA(1)) {
                case 191:
                    this.columnNameList(permission, permission.Columns);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 71:
                case 105:
                case 151:
                case 198:
                    break;
            }
            return permission;
        }

        public Identifier securityStatementPermission() {
            Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
            TSql80ParserBaseInternal.UpdateTokenInfo(identifier, this.LT(1));
            identifier.SetUnquotedIdentifier(this.LT(1).getText());
            switch (this.LA(1)) {
                case 232:
                    this.LT(1);
                    this.match(232);
                    break;
                case 4:
                    this.match(4);
                    break;
                case 5:
                    this.match(5);
                    break;
                case 6:
                    this.match(6);
                    break;
                case 7:
                    this.match(7);
                    break;
                case 8:
                    this.match(8);
                    break;
                case 9:
                    this.match(9);
                    break;
                case 10:
                    this.match(10);
                    break;
                case 11:
                    this.match(11);
                    break;
                case 12:
                    this.match(12);
                    break;
                case 13:
                    this.match(13);
                    break;
                case 14:
                    this.match(14);
                    break;
                case 15:
                    this.match(15);
                    break;
                case 16:
                    this.match(16);
                    break;
                case 17:
                    this.match(17);
                    break;
                case 18:
                    this.match(18);
                    break;
                case 19:
                    this.match(19);
                    break;
                case 20:
                    this.match(20);
                    break;
                case 21:
                    this.match(21);
                    break;
                case 22:
                    this.match(22);
                    break;
                case 23:
                    this.match(23);
                    break;
                case 24:
                    this.match(24);
                    break;
                case 25:
                    this.match(25);
                    break;
                case 26:
                    this.match(26);
                    break;
                case 27:
                    this.match(27);
                    break;
                case 28:
                    this.match(28);
                    break;
                case 29:
                    this.match(29);
                    break;
                case 30:
                    this.match(30);
                    break;
                case 31:
                    this.match(31);
                    break;
                case 32:
                    this.match(32);
                    break;
                case 33:
                    this.match(33);
                    break;
                case 34:
                    this.match(34);
                    break;
                case 35:
                    this.match(35);
                    break;
                case 36:
                    this.match(36);
                    break;
                case 37:
                    this.match(37);
                    break;
                case 38:
                    this.match(38);
                    break;
                case 39:
                    this.match(39);
                    break;
                case 40:
                    this.match(40);
                    break;
                case 41:
                    this.match(41);
                    break;
                case 42:
                    this.match(42);
                    break;
                case 43:
                    this.match(43);
                    break;
                case 44:
                    this.match(44);
                    break;
                case 45:
                    this.match(45);
                    break;
                case 46:
                    this.match(46);
                    break;
                case 47:
                    this.match(47);
                    break;
                case 48:
                    this.match(48);
                    break;
                case 49:
                    this.match(49);
                    break;
                case 50:
                    this.match(50);
                    break;
                case 173:
                    this.match(173);
                    break;
                case 51:
                    this.match(51);
                    break;
                case 52:
                    this.match(52);
                    break;
                case 53:
                    this.match(53);
                    break;
                case 54:
                    this.match(54);
                    break;
                case 55:
                    this.match(55);
                    break;
                case 56:
                    this.match(56);
                    break;
                case 57:
                    this.match(57);
                    break;
                case 58:
                    this.match(58);
                    break;
                case 59:
                    this.match(59);
                    break;
                case 60:
                    this.match(60);
                    break;
                case 61:
                    this.match(61);
                    break;
                case 175:
                    this.match(175);
                    break;
                case 62:
                    this.match(62);
                    break;
                case 63:
                    this.match(63);
                    break;
                case 64:
                    this.match(64);
                    break;
                case 65:
                    this.match(65);
                    break;
                case 66:
                    this.match(66);
                    break;
                case 67:
                    this.match(67);
                    break;
                case 68:
                    this.match(68);
                    break;
                case 69:
                    this.match(69);
                    break;
                case 70:
                    this.match(70);
                    break;
                case 72:
                    this.match(72);
                    break;
                case 73:
                    this.match(73);
                    break;
                case 74:
                    this.match(74);
                    break;
                case 76:
                    this.match(76);
                    break;
                case 77:
                    this.match(77);
                    break;
                case 78:
                    this.match(78);
                    break;
                case 79:
                    this.match(79);
                    break;
                case 80:
                    this.match(80);
                    break;
                case 81:
                    this.match(81);
                    break;
                case 82:
                    this.match(82);
                    break;
                case 83:
                    this.match(83);
                    break;
                case 84:
                    this.match(84);
                    break;
                case 85:
                    this.match(85);
                    break;
                case 86:
                    this.match(86);
                    break;
                case 87:
                    this.match(87);
                    break;
                case 88:
                    this.match(88);
                    break;
                case 89:
                    this.match(89);
                    break;
                case 90:
                    this.match(90);
                    break;
                case 91:
                    this.match(91);
                    break;
                case 92:
                    this.match(92);
                    break;
                case 93:
                    this.match(93);
                    break;
                case 94:
                    this.match(94);
                    break;
                case 95:
                    this.match(95);
                    break;
                case 182:
                    this.match(182);
                    break;
                case 96:
                    this.match(96);
                    break;
                case 97:
                    this.match(97);
                    break;
                case 98:
                    this.match(98);
                    break;
                case 99:
                    this.match(99);
                    break;
                case 100:
                    this.match(100);
                    break;
                case 101:
                    this.match(101);
                    break;
                case 102:
                    this.match(102);
                    break;
                case 103:
                    this.match(103);
                    break;
                case 104:
                    this.match(104);
                    break;
                case 106:
                    this.match(106);
                    break;
                case 107:
                    this.match(107);
                    break;
                case 108:
                    this.match(108);
                    break;
                case 109:
                    this.match(109);
                    break;
                case 110:
                    this.match(110);
                    break;
                case 111:
                    this.match(111);
                    break;
                case 112:
                    this.match(112);
                    break;
                case 113:
                    this.match(113);
                    break;
                case 114:
                    this.match(114);
                    break;
                case 115:
                    this.match(115);
                    break;
                case 116:
                    this.match(116);
                    break;
                case 177:
                    this.match(177);
                    break;
                case 117:
                    this.match(117);
                    break;
                case 174:
                    this.match(174);
                    break;
                case 118:
                    this.match(118);
                    break;
                case 119:
                    this.match(119);
                    break;
                case 120:
                    this.match(120);
                    break;
                case 121:
                    this.match(121);
                    break;
                case 122:
                    this.match(122);
                    break;
                case 123:
                    this.match(123);
                    break;
                case 124:
                    this.match(124);
                    break;
                case 125:
                    this.match(125);
                    break;
                case 126:
                    this.match(126);
                    break;
                case 127:
                    this.match(127);
                    break;
                case 128:
                    this.match(128);
                    break;
                case 129:
                    this.match(129);
                    break;
                case 130:
                    this.match(130);
                    break;
                case 131:
                    this.match(131);
                    break;
                case 176:
                    this.match(176);
                    break;
                case 132:
                    this.match(132);
                    break;
                case 133:
                    this.match(133);
                    break;
                case 134:
                    this.match(134);
                    break;
                case 135:
                    this.match(135);
                    break;
                case 136:
                    this.match(136);
                    break;
                case 137:
                    this.match(137);
                    break;
                case 138:
                    this.match(138);
                    break;
                case 139:
                    this.match(139);
                    break;
                case 140:
                    this.match(140);
                    break;
                case 141:
                    this.match(141);
                    break;
                case 142:
                    this.match(142);
                    break;
                case 143:
                    this.match(143);
                    break;
                case 144:
                    this.match(144);
                    break;
                case 145:
                    this.match(145);
                    break;
                case 146:
                    this.match(146);
                    break;
                case 183:
                    this.match(183);
                    break;
                case 147:
                    this.match(147);
                    break;
                case 148:
                    this.match(148);
                    break;
                case 179:
                    this.match(179);
                    break;
                case 149:
                    this.match(149);
                    break;
                case 150:
                    this.match(150);
                    break;
                case 152:
                    this.match(152);
                    break;
                case 153:
                    this.match(153);
                    break;
                case 154:
                    this.match(154);
                    break;
                case 155:
                    this.match(155);
                    break;
                case 156:
                    this.match(156);
                    break;
                case 157:
                    this.match(157);
                    break;
                case 158:
                    this.match(158);
                    break;
                case 159:
                    this.match(159);
                    break;
                case 178:
                    this.match(178);
                    break;
                case 160:
                    this.match(160);
                    break;
                case 161:
                    this.match(161);
                    break;
                case 162:
                    this.match(162);
                    break;
                case 163:
                    this.match(163);
                    break;
                case 164:
                    this.match(164);
                    break;
                case 165:
                    this.match(165);
                    break;
                case 166:
                    this.match(166);
                    break;
                case 167:
                    this.match(167);
                    break;
                case 168:
                    this.match(168);
                    break;
                case 170:
                    this.match(170);
                    break;
                case 171:
                    this.match(171);
                    break;
                case 172:
                    this.match(172);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return identifier;
        }

        public void securityTargetObjectCommon(SecurityTargetObject vParent) {
            IToken token = null;
            SecurityTargetObjectName securityTargetObjectName = base.FragmentFactory.CreateFragment<SecurityTargetObjectName>();
            token = this.LT(1);
            this.match(105);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
            bool flag = false;
            if (TSql140ParserInternal.tokenSet_41_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_90_.member(this.LA(2))) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    int num = 0;
                    while (true) {
                        if (!TSql140ParserInternal.tokenSet_41_.member(this.LA(1))) {
                            break;
                        }
                        this.securityStatementPermission();
                        num++;
                    }
                    if (num < 1) {
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    this.match(203);
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                if (TSql140ParserInternal.tokenSet_41_.member(this.LA(1)) && this.LA(2) == 203) {
                    Identifier identifier = this.securityStatementPermission();
                    if (base.inputState.guessing == 0) {
                        vParent.ObjectKind = TSql90ParserBaseInternal.ParseSecurityObjectKind(identifier);
                    }
                    goto IL_022e;
                }
                if (TSql140ParserInternal.tokenSet_41_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_41_.member(this.LA(2))) {
                    Identifier identifier = this.securityStatementPermission();
                    if (TSql140ParserInternal.tokenSet_41_.member(this.LA(1)) && this.LA(2) == 203) {
                        Identifier identifier2 = this.securityStatementPermission();
                        if (base.inputState.guessing == 0) {
                            vParent.ObjectKind = TSql90ParserBaseInternal.ParseSecurityObjectKind(identifier, identifier2);
                        }
                        goto IL_022e;
                    }
                    if (TSql140ParserInternal.tokenSet_41_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_41_.member(this.LA(2))) {
                        Identifier identifier2 = this.securityStatementPermission();
                        Identifier identifier3 = this.securityStatementPermission();
                        if (base.inputState.guessing == 0) {
                            vParent.ObjectKind = TSql90ParserBaseInternal.ParseSecurityObjectKind(identifier, identifier2, identifier3);
                        }
                        goto IL_022e;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (this.LA(1) != 200 && this.LA(1) != 232 && this.LA(1) != 233) {
                goto IL_0278;
            }
            if (!TSql140ParserInternal.tokenSet_91_.member(this.LA(2))) {
                goto IL_0278;
            }
            goto IL_028b;
            IL_028b:
            MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
            if (base.inputState.guessing == 0) {
                securityTargetObjectName.MultiPartIdentifier = multiPartIdentifier;
                vParent.ObjectName = securityTargetObjectName;
            }
            return;
            IL_022e:
            this.match(203);
            goto IL_028b;
            IL_0278:
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public SecurityTargetObject authorizationTargetObject() {
            SecurityTargetObject securityTargetObject = base.FragmentFactory.CreateFragment<SecurityTargetObject>();
            this.securityTargetObjectCommon(securityTargetObject);
            return securityTargetObject;
        }

        public void permissionsList(SecurityStatement vParent, ref bool vContainsColumnList) {
            Permission permission = this.permission();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Permissions, permission);
                vContainsColumnList = (vContainsColumnList || (permission.Columns != null && permission.Columns.Count > 0));
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                permission = this.permission();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Permissions, permission);
                    vContainsColumnList = (vContainsColumnList || (permission.Columns != null && permission.Columns.Count > 0));
                }
            }
        }

        public void securityStatementTargetObjectOpt(SecurityStatement vParent, bool vColumnsDisallowed) {
            switch (this.LA(1)) {
                case 71:
                case 151:
                    break;
                case 105: {
                        SecurityTargetObject securityTargetObject = this.securityTargetObject(vColumnsDisallowed);
                        if (base.inputState.guessing == 0) {
                            vParent.SecurityTargetObject = securityTargetObject;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void securityStatementPrincipalList(SecurityStatement vParent) {
            SecurityPrincipal item = this.principal();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Principals, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.principal();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Principals, item);
                }
            }
        }

        public void securityStatementAsClauseOpt(SecurityStatement vParent) {
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        return;
                    case 9: {
                            this.match(9);
                            Identifier asClause = this.identifier();
                            if (base.inputState.guessing == 0) {
                                vParent.AsClause = asClause;
                            }
                            return;
                        }
                }
            } else {
                switch (num) {
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        return;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public WaitForSupportedStatement waitforInnerStatement() {
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_33_.member(this.LA(2)) && base.NextTokenMatches("RECEIVE")) {
                return this.receiveStatement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 232) {
                return this.getConversationGroupStatement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ColumnReferenceExpression column() {
            ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
            columnReferenceExpression.ColumnType = ColumnType.Regular;
            switch (this.LA(1)) {
                case 200:
                case 232:
                case 233: {
                        MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
                        if (base.inputState.guessing == 0) {
                            columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
                        }
                        int num = this.LA(1);
                        if (num <= 95) {
                            switch (num) {
                                case 1:
                                case 4:
                                case 6:
                                case 12:
                                case 13:
                                case 15:
                                case 17:
                                case 22:
                                case 23:
                                case 28:
                                case 33:
                                case 35:
                                case 44:
                                case 45:
                                case 46:
                                case 48:
                                case 49:
                                case 54:
                                case 55:
                                case 56:
                                case 60:
                                case 61:
                                case 64:
                                case 74:
                                case 75:
                                case 82:
                                case 86:
                                case 92:
                                case 95:
                                    goto end_IL_0000;
                            }
                        } else {
                            switch (num) {
                                case 200:
                                    this.match(200);
                                    this.specialColumn(columnReferenceExpression);
                                    goto end_IL_0000;
                                case 106:
                                case 111:
                                case 119:
                                case 123:
                                case 125:
                                case 126:
                                case 129:
                                case 131:
                                case 132:
                                case 134:
                                case 138:
                                case 140:
                                case 142:
                                case 143:
                                case 144:
                                case 156:
                                case 160:
                                case 161:
                                case 162:
                                case 167:
                                case 170:
                                case 171:
                                case 172:
                                case 176:
                                case 182:
                                case 191:
                                case 192:
                                case 198:
                                case 204:
                                case 219:
                                case 220:
                                case 221:
                                case 224:
                                case 232:
                                case 234:
                                    goto end_IL_0000;
                            }
                        }
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                case 81:
                case 136:
                case 227:
                    this.specialColumn(columnReferenceExpression);
                    break;
                default: {
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    end_IL_0000:
                    break;
            }
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckSpecialColumn(columnReferenceExpression);
                TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, false);
            }
            return columnReferenceExpression;
        }

        public ValueExpression binaryOrVariable() {
            switch (this.LA(1)) {
                case 224:
                    return this.binary();
                case 234:
                    return this.variable();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public ValueExpression integerOrVariable() {
            switch (this.LA(1)) {
                case 221:
                    return this.integer();
                case 234:
                    return this.variable();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void modificationTextStatement(TextModificationStatement vParent) {
            IToken token = null;
            switch (this.LA(1)) {
                case 17:
                    this.match(17);
                    if (base.inputState.guessing == 0) {
                        vParent.Bulk = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 81:
                case 136:
                case 200:
                case 227:
                case 232:
                case 233:
                    break;
            }
            ColumnReferenceExpression column = this.column();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckTableNameExistsForColumn(column, true);
                vParent.Column = column;
            }
            ValueExpression textId;
            switch (this.LA(1)) {
                case 224:
                case 234:
                    textId = this.binaryOrVariable();
                    break;
                case 221:
                    textId = this.integer();
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                vParent.TextId = textId;
            }
            switch (this.LA(1)) {
                case 100:
                case 171:
                case 199:
                case 221:
                case 224:
                case 230:
                case 231:
                case 234:
                    break;
                case 232: {
                        token = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token, "TIMESTAMP");
                        }
                        this.match(206);
                        Literal timestamp = this.binary();
                        if (base.inputState.guessing == 0) {
                            vParent.Timestamp = timestamp;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public ScalarExpression signedIntegerOrVariableOrNull() {
            switch (this.LA(1)) {
                case 199:
                case 221:
                case 234:
                    return this.signedIntegerOrVariable();
                case 100:
                    return this.nullLiteral();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void modificationTextStatementWithLog(TextModificationStatement vParent) {
            IToken token = null;
            this.match(171);
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "LOG");
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                vParent.WithLog = true;
            }
        }

        public ValueExpression writeString() {
            switch (this.LA(1)) {
                case 100:
                    return this.nullLiteral();
                case 230:
                case 231:
                    return this.stringLiteral();
                case 224:
                    return this.binary();
                case 234:
                    return this.variable();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public VariableReference variable() {
            VariableReference variableReference = base.FragmentFactory.CreateFragment<VariableReference>();
            IToken token = null;
            token = this.LT(1);
            this.match(234);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(variableReference, token);
                variableReference.Name = token.getText();
            }
            return variableReference;
        }

        public OpenMasterKeyStatement openMasterKeyStatement() {
            OpenMasterKeyStatement openMasterKeyStatement = base.FragmentFactory.CreateFragment<OpenMasterKeyStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MASTER");
            }
            this.match(91);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "DECRYPTION");
            }
            this.match(18);
            token3 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token3, "PASSWORD");
            }
            this.match(206);
            Literal password = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                openMasterKeyStatement.Password = password;
            }
            return openMasterKeyStatement;
        }

        public OpenSymmetricKeyStatement openSymmetricKeyStatement() {
            OpenSymmetricKeyStatement openSymmetricKeyStatement = base.FragmentFactory.CreateFragment<OpenSymmetricKeyStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SYMMETRIC");
            }
            this.match(91);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                openSymmetricKeyStatement.Name = name;
            }
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "DECRYPTION");
            }
            this.match(18);
            CryptoMechanism decryptionMechanism = this.decryptionMechanism();
            if (base.inputState.guessing == 0) {
                openSymmetricKeyStatement.DecryptionMechanism = decryptionMechanism;
            }
            return openSymmetricKeyStatement;
        }

        public OpenCursorStatement openCursorStatement() {
            OpenCursorStatement openCursorStatement = base.FragmentFactory.CreateFragment<OpenCursorStatement>();
            CursorId cursor = this.cursorId();
            if (base.inputState.guessing == 0) {
                openCursorStatement.Cursor = cursor;
            }
            return openCursorStatement;
        }

        public CryptoMechanism decryptionMechanism() {
            IToken token = null;
            CryptoMechanism cryptoMechanism;
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                cryptoMechanism = this.passwordCrypto();
                goto IL_0192;
            }
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                cryptoMechanism = this.certificateCrypto();
                if (this.LA(1) == 171 && this.LA(2) == 232) {
                    this.match(171);
                    this.decryptionMechanismPassword(cryptoMechanism);
                    goto IL_0192;
                }
                if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                    goto IL_0192;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (this.LA(1) == 232 && this.LA(2) == 91) {
                cryptoMechanism = this.keyCrypto();
                if (this.LA(1) == 171 && this.LA(2) == 232) {
                    token = this.LT(1);
                    this.match(171);
                    this.decryptionMechanismPassword(cryptoMechanism);
                    if (base.inputState.guessing == 0 && cryptoMechanism.CryptoMechanismType == CryptoMechanismType.SymmetricKey) {
                        throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                    }
                    goto IL_0192;
                }
                if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                    goto IL_0192;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0192:
            return cryptoMechanism;
        }

        public void decryptionMechanismPassword(CryptoMechanism vParent) {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal passwordOrSignature = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "PASSWORD");
                vParent.PasswordOrSignature = passwordOrSignature;
            }
        }

        public CursorId cursorId() {
            CursorId cursorId = base.FragmentFactory.CreateFragment<CursorId>();
            IToken token = null;
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("GLOBAL")) {
                token = this.LT(1);
                this.match(232);
                Identifier identifier = this.identifier();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "GLOBAL");
                    cursorId.Name = base.IdentifierOrValueExpression(identifier);
                    cursorId.IsGlobal = true;
                }
                goto IL_00f6;
            }
            if (this.LA(1) >= 232 && this.LA(1) <= 234 && TSql140ParserInternal.tokenSet_92_.member(this.LA(2))) {
                IdentifierOrValueExpression name = this.identifierOrVariable();
                if (base.inputState.guessing == 0) {
                    cursorId.Name = name;
                    cursorId.IsGlobal = false;
                }
                goto IL_00f6;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00f6:
            return cursorId;
        }

        public CloseMasterKeyStatement closeMasterKeyStatement() {
            CloseMasterKeyStatement closeMasterKeyStatement = base.FragmentFactory.CreateFragment<CloseMasterKeyStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MASTER");
            }
            token2 = this.LT(1);
            this.match(91);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(closeMasterKeyStatement, token2);
            }
            return closeMasterKeyStatement;
        }

        public CloseSymmetricKeyStatement closeSymmetricKeyStatement() {
            CloseSymmetricKeyStatement closeSymmetricKeyStatement = base.FragmentFactory.CreateFragment<CloseSymmetricKeyStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            switch (this.LA(1)) {
                case 232: {
                        token = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token, "SYMMETRIC");
                        }
                        this.match(91);
                        Identifier name = this.identifier();
                        if (base.inputState.guessing == 0) {
                            closeSymmetricKeyStatement.Name = name;
                        }
                        break;
                    }
                case 5:
                    this.match(5);
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "SYMMETRIC");
                        closeSymmetricKeyStatement.All = true;
                    }
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token3, "KEYS");
                        TSql80ParserBaseInternal.UpdateTokenInfo(closeSymmetricKeyStatement, token3);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return closeSymmetricKeyStatement;
        }

        public CloseCursorStatement closeCursorStatement() {
            CloseCursorStatement closeCursorStatement = base.FragmentFactory.CreateFragment<CloseCursorStatement>();
            CursorId cursor = this.cursorId();
            if (base.inputState.guessing == 0) {
                closeCursorStatement.Cursor = cursor;
            }
            return closeCursorStatement;
        }

        public FetchCursorStatement rowSelector() {
            FetchCursorStatement fetchCursorStatement = base.FragmentFactory.CreateFragment<FetchCursorStatement>();
            if (this.LA(1) >= 232 && this.LA(1) <= 234 && TSql140ParserInternal.tokenSet_93_.member(this.LA(2))) {
                CursorId cursor = this.cursorId();
                if (base.inputState.guessing == 0) {
                    fetchCursorStatement.Cursor = cursor;
                }
                goto IL_00f5;
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_94_.member(this.LA(2))) {
                FetchType fetchType = this.fetchType();
                this.match(71);
                CursorId cursor = this.cursorId();
                if (base.inputState.guessing == 0) {
                    fetchCursorStatement.Cursor = cursor;
                    fetchCursorStatement.FetchType = fetchType;
                }
                goto IL_00f5;
            }
            if (this.LA(1) == 71) {
                this.match(71);
                CursorId cursor = this.cursorId();
                if (base.inputState.guessing == 0) {
                    fetchCursorStatement.Cursor = cursor;
                }
                goto IL_00f5;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00f5:
            return fetchCursorStatement;
        }

        public FetchType fetchType() {
            FetchType fetchType = base.FragmentFactory.CreateFragment<FetchType>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                fetchType.Orientation = FetchOrientationHelper.Instance.ParseOption(token);
            }
            switch (this.LA(1)) {
                case 199:
                case 221: {
                        ScalarExpression rowOffset = this.signedInteger();
                        if (base.inputState.guessing == 0) {
                            if (fetchType.Orientation != FetchOrientation.Relative && fetchType.Orientation != FetchOrientation.Absolute) {
                                throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                            }
                            fetchType.RowOffset = rowOffset;
                        }
                        break;
                    }
                case 234: {
                        ScalarExpression rowOffset = this.variable();
                        if (base.inputState.guessing == 0) {
                            if (fetchType.Orientation != FetchOrientation.Relative && fetchType.Orientation != FetchOrientation.Absolute) {
                                throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                            }
                            fetchType.RowOffset = rowOffset;
                        }
                        break;
                    }
                case 71:
                    if (base.inputState.guessing != 0) {
                        break;
                    }
                    if (fetchType.Orientation != FetchOrientation.Relative && fetchType.Orientation != FetchOrientation.Absolute) {
                        break;
                    }
                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return fetchType;
        }

        public TSqlStatement dropDatabaseStatements() {
            this.match(43);
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("AUDIT")) {
                return this.dropDatabaseAuditSpecificationStatement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SCOPED") && base.NextTokenMatches("CREDENTIAL", 2)) {
                return this.dropDatabaseScopedCredentialStatement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 91) {
                return this.dropDatabaseEncryptionKeyStatement();
            }
            if ((this.LA(1) == 82 || this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_95_.member(this.LA(2))) {
                return this.dropDatabaseStatement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public DropIndexStatement dropIndexStatement() {
            DropIndexStatement dropIndexStatement = base.FragmentFactory.CreateFragment<DropIndexStatement>();
            this.match(84);
            switch (this.LA(1)) {
                case 82:
                    this.match(82);
                    this.match(62);
                    if (base.inputState.guessing == 0) {
                        dropIndexStatement.IsIfExists = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 200:
                case 232:
                case 233:
                    break;
            }
            DropIndexClauseBase item = this.dropIndexClause();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(dropIndexStatement, dropIndexStatement.DropIndexClauses, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.dropIndexClause();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(dropIndexStatement, dropIndexStatement.DropIndexClauses, item);
                }
            }
            return dropIndexStatement;
        }

        public DropStatisticsStatement dropStatisticsStatement() {
            DropStatisticsStatement dropStatisticsStatement = base.FragmentFactory.CreateFragment<DropStatisticsStatement>();
            this.match(146);
            ChildObjectName item = this.statisticsDropObject();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(dropStatisticsStatement, dropStatisticsStatement.Objects, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.statisticsDropObject();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(dropStatisticsStatement, dropStatisticsStatement.Objects, item);
                }
            }
            return dropStatisticsStatement;
        }

        public DropTableStatement dropTableStatement() {
            DropTableStatement dropTableStatement = base.FragmentFactory.CreateFragment<DropTableStatement>();
            this.match(148);
            switch (this.LA(1)) {
                case 82:
                    this.match(82);
                    this.match(62);
                    if (base.inputState.guessing == 0) {
                        dropTableStatement.IsIfExists = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 200:
                case 232:
                case 233:
                    break;
            }
            this.dropObjectList(dropTableStatement, false);
            return dropTableStatement;
        }

        public DropProcedureStatement dropProcedureStatement() {
            DropProcedureStatement dropProcedureStatement = base.FragmentFactory.CreateFragment<DropProcedureStatement>();
            switch (this.LA(1)) {
                case 121:
                    this.match(121);
                    break;
                case 120:
                    this.match(120);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            switch (this.LA(1)) {
                case 82:
                    this.match(82);
                    this.match(62);
                    if (base.inputState.guessing == 0) {
                        dropProcedureStatement.IsIfExists = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 200:
                case 232:
                case 233:
                    break;
            }
            this.dropObjectList(dropProcedureStatement, true);
            return dropProcedureStatement;
        }

        public DropFunctionStatement dropFunctionStatement() {
            DropFunctionStatement dropFunctionStatement = base.FragmentFactory.CreateFragment<DropFunctionStatement>();
            this.match(73);
            switch (this.LA(1)) {
                case 82:
                    this.match(82);
                    this.match(62);
                    if (base.inputState.guessing == 0) {
                        dropFunctionStatement.IsIfExists = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 200:
                case 232:
                case 233:
                    break;
            }
            this.dropObjectList(dropFunctionStatement, true);
            return dropFunctionStatement;
        }

        public DropViewStatement dropViewStatement() {
            DropViewStatement dropViewStatement = base.FragmentFactory.CreateFragment<DropViewStatement>();
            this.match(166);
            switch (this.LA(1)) {
                case 82:
                    this.match(82);
                    this.match(62);
                    if (base.inputState.guessing == 0) {
                        dropViewStatement.IsIfExists = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 200:
                case 232:
                case 233:
                    break;
            }
            this.dropObjectList(dropViewStatement, true);
            return dropViewStatement;
        }

        public DropDefaultStatement dropDefaultStatement() {
            DropDefaultStatement dropDefaultStatement = base.FragmentFactory.CreateFragment<DropDefaultStatement>();
            this.match(47);
            switch (this.LA(1)) {
                case 82:
                    this.match(82);
                    this.match(62);
                    if (base.inputState.guessing == 0) {
                        dropDefaultStatement.IsIfExists = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 200:
                case 232:
                case 233:
                    break;
            }
            this.dropObjectList(dropDefaultStatement, true);
            return dropDefaultStatement;
        }

        public DropRuleStatement dropRuleStatement() {
            DropRuleStatement dropRuleStatement = base.FragmentFactory.CreateFragment<DropRuleStatement>();
            this.match(137);
            switch (this.LA(1)) {
                case 82:
                    this.match(82);
                    this.match(62);
                    if (base.inputState.guessing == 0) {
                        dropRuleStatement.IsIfExists = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 200:
                case 232:
                case 233:
                    break;
            }
            this.dropObjectList(dropRuleStatement, true);
            return dropRuleStatement;
        }

        public DropTriggerStatement dropTriggerStatement() {
            DropTriggerStatement dropTriggerStatement = base.FragmentFactory.CreateFragment<DropTriggerStatement>();
            this.match(155);
            switch (this.LA(1)) {
                case 82:
                    this.match(82);
                    this.match(62);
                    if (base.inputState.guessing == 0) {
                        dropTriggerStatement.IsIfExists = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 200:
                case 232:
                case 233:
                    break;
            }
            this.dropObjectList(dropTriggerStatement, true);
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_030e;
                }
            } else {
                switch (num) {
                    case 105: {
                            this.match(105);
                            TriggerScope triggerScope = this.triggerScope(dropTriggerStatement);
                            if (base.inputState.guessing == 0) {
                                dropTriggerStatement.TriggerScope = triggerScope;
                            }
                            goto IL_030e;
                        }
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_030e;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_030e:
            return dropTriggerStatement;
        }

        public DropSchemaStatement dropSchemaStatement() {
            DropSchemaStatement dropSchemaStatement = base.FragmentFactory.CreateFragment<DropSchemaStatement>();
            IToken token = null;
            IToken token2 = null;
            this.match(139);
            switch (this.LA(1)) {
                case 82:
                    this.match(82);
                    this.match(62);
                    if (base.inputState.guessing == 0) {
                        dropSchemaStatement.IsIfExists = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 200:
                case 232:
                case 233:
                    break;
            }
            SchemaObjectName schema = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                dropSchemaStatement.Schema = schema;
            }
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 19:
                        token = this.LT(1);
                        this.match(19);
                        if (base.inputState.guessing == 0) {
                            dropSchemaStatement.DropBehavior = DropSchemaBehavior.Cascade;
                            TSql80ParserBaseInternal.UpdateTokenInfo(dropSchemaStatement, token);
                        }
                        goto IL_0395;
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_0395;
                }
            } else {
                switch (num) {
                    case 130:
                        token2 = this.LT(1);
                        this.match(130);
                        if (base.inputState.guessing == 0) {
                            dropSchemaStatement.DropBehavior = DropSchemaBehavior.Restrict;
                            TSql80ParserBaseInternal.UpdateTokenInfo(dropSchemaStatement, token2);
                        }
                        goto IL_0395;
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0395;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0395:
            if (base.inputState.guessing == 0 && dropSchemaStatement.Schema.SchemaIdentifier != null && dropSchemaStatement.DropBehavior == DropSchemaBehavior.None) {
                throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(dropSchemaStatement.Schema.SchemaIdentifier);
            }
            return dropSchemaStatement;
        }

        public DropAggregateStatement dropAggregateStatement() {
            DropAggregateStatement dropAggregateStatement = base.FragmentFactory.CreateFragment<DropAggregateStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            switch (this.LA(1)) {
                case 82:
                    this.match(82);
                    this.match(62);
                    if (base.inputState.guessing == 0) {
                        dropAggregateStatement.IsIfExists = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 200:
                case 232:
                case 233:
                    break;
            }
            this.dropObjectList(dropAggregateStatement, true);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "AGGREGATE");
            }
            return dropAggregateStatement;
        }

        public DropAssemblyStatement dropAssemblyStatement() {
            DropAssemblyStatement dropAssemblyStatement = base.FragmentFactory.CreateFragment<DropAssemblyStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            switch (this.LA(1)) {
                case 82:
                    this.match(82);
                    this.match(62);
                    if (base.inputState.guessing == 0) {
                        dropAssemblyStatement.IsIfExists = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 200:
                case 232:
                case 233:
                    break;
            }
            this.dropObjectList(dropAssemblyStatement, true);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ASSEMBLY");
            }
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                token2 = this.LT(1);
                this.match(232);
                token3 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "NO");
                    TSql80ParserBaseInternal.Match(token3, "DEPENDENTS");
                    dropAssemblyStatement.WithNoDependents = true;
                    TSql80ParserBaseInternal.UpdateTokenInfo(dropAssemblyStatement, token3);
                }
                goto IL_0166;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0166;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0166:
            return dropAssemblyStatement;
        }

        public DropAvailabilityGroupStatement dropAvailabilityGroupStatement() {
            DropAvailabilityGroupStatement dropAvailabilityGroupStatement = base.FragmentFactory.CreateFragment<DropAvailabilityGroupStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(76);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "AVAILABILITY");
                dropAvailabilityGroupStatement.Name = name;
            }
            return dropAvailabilityGroupStatement;
        }

        public TSqlStatement dropPartitionStatements() {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "PARTITION");
            }
            switch (this.LA(1)) {
                case 73:
                    return this.dropPartitionFunctionStatement();
                case 232:
                    return this.dropPartitionSchemeStatement();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public DropSynonymStatement dropSynonymStatement() {
            DropSynonymStatement dropSynonymStatement = base.FragmentFactory.CreateFragment<DropSynonymStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            switch (this.LA(1)) {
                case 82:
                    this.match(82);
                    this.match(62);
                    if (base.inputState.guessing == 0) {
                        dropSynonymStatement.IsIfExists = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 200:
                case 232:
                case 233:
                    break;
            }
            this.dropObjectList(dropSynonymStatement, true);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SYNONYM");
            }
            return dropSynonymStatement;
        }

        public DropApplicationRoleStatement dropApplicationRoleStatement() {
            DropApplicationRoleStatement dropApplicationRoleStatement = base.FragmentFactory.CreateFragment<DropApplicationRoleStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "APPLICATION");
                TSql80ParserBaseInternal.Match(token2, "ROLE");
                dropApplicationRoleStatement.Name = name;
            }
            return dropApplicationRoleStatement;
        }

        public DropBrokerPriorityStatement dropBrokerPriorityStatement() {
            DropBrokerPriorityStatement dropBrokerPriorityStatement = base.FragmentFactory.CreateFragment<DropBrokerPriorityStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "BROKER");
                TSql80ParserBaseInternal.Match(token2, "PRIORITY");
                dropBrokerPriorityStatement.Name = name;
            }
            return dropBrokerPriorityStatement;
        }

        public DropCryptographicProviderStatement dropCryptographicProviderStatement() {
            DropCryptographicProviderStatement dropCryptographicProviderStatement = base.FragmentFactory.CreateFragment<DropCryptographicProviderStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CRYPTOGRAPHIC");
                TSql80ParserBaseInternal.Match(token2, "PROVIDER");
                dropCryptographicProviderStatement.Name = name;
            }
            return dropCryptographicProviderStatement;
        }

        public TSqlStatement dropFulltextStatements() {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FULLTEXT");
            }
            switch (this.LA(1)) {
                case 232:
                    return this.dropFulltextCatalogStatement();
                case 84:
                    return this.dropFulltextIndexStatement();
                case 183:
                    return this.dropFulltextStoplistStatement();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public DropLoginStatement dropLoginStatement() {
            DropLoginStatement dropLoginStatement = base.FragmentFactory.CreateFragment<DropLoginStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "LOGIN");
                dropLoginStatement.Name = name;
            }
            return dropLoginStatement;
        }

        public DropResourcePoolStatement dropResourcePoolStatement() {
            DropResourcePoolStatement dropResourcePoolStatement = base.FragmentFactory.CreateFragment<DropResourcePoolStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "RESOURCE");
                TSql80ParserBaseInternal.Match(token2, "POOL");
                dropResourcePoolStatement.Name = name;
            }
            return dropResourcePoolStatement;
        }

        public DropWorkloadGroupStatement dropWorkloadGroupStatement() {
            DropWorkloadGroupStatement dropWorkloadGroupStatement = base.FragmentFactory.CreateFragment<DropWorkloadGroupStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.LT(1);
            this.match(76);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "WORKLOAD");
                dropWorkloadGroupStatement.Name = name;
            }
            return dropWorkloadGroupStatement;
        }

        public DropRoleStatement dropRoleStatement() {
            DropRoleStatement dropRoleStatement = base.FragmentFactory.CreateFragment<DropRoleStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            switch (this.LA(1)) {
                case 82:
                    this.match(82);
                    this.match(62);
                    if (base.inputState.guessing == 0) {
                        dropRoleStatement.IsIfExists = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 232:
                case 233:
                    break;
            }
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ROLE");
                dropRoleStatement.Name = name;
            }
            return dropRoleStatement;
        }

        public DropMasterKeyStatement dropMasterKeyStatement() {
            DropMasterKeyStatement dropMasterKeyStatement = base.FragmentFactory.CreateFragment<DropMasterKeyStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(91);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MASTER");
                TSql80ParserBaseInternal.UpdateTokenInfo(dropMasterKeyStatement, token2);
            }
            return dropMasterKeyStatement;
        }

        public DropSymmetricKeyStatement dropSymmetricKeyStatement() {
            DropSymmetricKeyStatement dropSymmetricKeyStatement = base.FragmentFactory.CreateFragment<DropSymmetricKeyStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(91);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SYMMETRIC");
                dropSymmetricKeyStatement.Name = name;
            }
            bool removeProviderKey = this.removeProviderKeyOpt(dropSymmetricKeyStatement);
            if (base.inputState.guessing == 0) {
                dropSymmetricKeyStatement.RemoveProviderKey = removeProviderKey;
            }
            return dropSymmetricKeyStatement;
        }

        public DropAsymmetricKeyStatement dropAsymmetricKeyStatement() {
            DropAsymmetricKeyStatement dropAsymmetricKeyStatement = base.FragmentFactory.CreateFragment<DropAsymmetricKeyStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(91);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
                dropAsymmetricKeyStatement.Name = name;
            }
            bool removeProviderKey = this.removeProviderKeyOpt(dropAsymmetricKeyStatement);
            if (base.inputState.guessing == 0) {
                dropAsymmetricKeyStatement.RemoveProviderKey = removeProviderKey;
            }
            return dropAsymmetricKeyStatement;
        }

        public DropCertificateStatement dropCertificateStatement() {
            DropCertificateStatement dropCertificateStatement = base.FragmentFactory.CreateFragment<DropCertificateStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
                dropCertificateStatement.Name = name;
            }
            return dropCertificateStatement;
        }

        public DropCredentialStatement dropCredentialStatement() {
            DropCredentialStatement dropCredentialStatement = base.FragmentFactory.CreateFragment<DropCredentialStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CREDENTIAL");
                dropCredentialStatement.Name = name;
                dropCredentialStatement.IsDatabaseScoped = false;
            }
            return dropCredentialStatement;
        }

        public DropTypeStatement dropTypeStatement() {
            DropTypeStatement dropTypeStatement = base.FragmentFactory.CreateFragment<DropTypeStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            switch (this.LA(1)) {
                case 82:
                    this.match(82);
                    this.match(62);
                    if (base.inputState.guessing == 0) {
                        dropTypeStatement.IsIfExists = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 200:
                case 232:
                case 233:
                    break;
            }
            SchemaObjectName name = this.dropObject(false);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "TYPE");
                dropTypeStatement.Name = name;
            }
            return dropTypeStatement;
        }

        public DropXmlSchemaCollectionStatement dropXmlSchemaCollectionStatement() {
            DropXmlSchemaCollectionStatement dropXmlSchemaCollectionStatement = base.FragmentFactory.CreateFragment<DropXmlSchemaCollectionStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(139);
            token2 = this.LT(1);
            this.match(232);
            SchemaObjectName name = this.schemaObjectNonEmptyTwoPartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "XML");
                TSql80ParserBaseInternal.Match(token2, "COLLECTION");
                dropXmlSchemaCollectionStatement.Name = name;
            }
            return dropXmlSchemaCollectionStatement;
        }

        public DropContractStatement dropContractStatement() {
            DropContractStatement dropContractStatement = base.FragmentFactory.CreateFragment<DropContractStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CONTRACT");
                dropContractStatement.Name = name;
            }
            return dropContractStatement;
        }

        public DropQueueStatement dropQueueStatement() {
            DropQueueStatement dropQueueStatement = base.FragmentFactory.CreateFragment<DropQueueStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            SchemaObjectName name = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "QUEUE");
                dropQueueStatement.Name = name;
            }
            return dropQueueStatement;
        }

        public DropServiceStatement dropServiceStatement() {
            DropServiceStatement dropServiceStatement = base.FragmentFactory.CreateFragment<DropServiceStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SERVICE");
                dropServiceStatement.Name = name;
            }
            return dropServiceStatement;
        }

        public DropRouteStatement dropRouteStatement() {
            DropRouteStatement dropRouteStatement = base.FragmentFactory.CreateFragment<DropRouteStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ROUTE");
                dropRouteStatement.Name = name;
            }
            return dropRouteStatement;
        }

        public DropMessageTypeStatement dropMessageTypeStatement() {
            DropMessageTypeStatement dropMessageTypeStatement = base.FragmentFactory.CreateFragment<DropMessageTypeStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MESSAGE");
                TSql80ParserBaseInternal.Match(token2, "TYPE");
                dropMessageTypeStatement.Name = name;
            }
            return dropMessageTypeStatement;
        }

        public DropRemoteServiceBindingStatement dropRemoteServiceBindingStatement() {
            DropRemoteServiceBindingStatement dropRemoteServiceBindingStatement = base.FragmentFactory.CreateFragment<DropRemoteServiceBindingStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            token3 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "REMOTE");
                TSql80ParserBaseInternal.Match(token2, "SERVICE");
                TSql80ParserBaseInternal.Match(token3, "BINDING");
                dropRemoteServiceBindingStatement.Name = name;
            }
            return dropRemoteServiceBindingStatement;
        }

        public DropEndpointStatement dropEndpointStatement() {
            DropEndpointStatement dropEndpointStatement = base.FragmentFactory.CreateFragment<DropEndpointStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ENDPOINT");
                dropEndpointStatement.Name = name;
            }
            return dropEndpointStatement;
        }

        public DropSignatureStatement dropSignatureStatement() {
            DropSignatureStatement dropSignatureStatement = base.FragmentFactory.CreateFragment<DropSignatureStatement>();
            this.signatureType(dropSignatureStatement);
            this.match(71);
            this.signableElement(dropSignatureStatement);
            this.match(18);
            this.cryptoListWithOptionalPasswordSignature(dropSignatureStatement);
            return dropSignatureStatement;
        }

        public TSqlStatement dropEventStatement() {
            TSqlStatement tSqlStatement = null;
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "EVENT");
            }
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("NOTIFICATION")) {
                return this.dropEventNotificationStatement();
            }
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SESSION")) {
                return this.dropEventSessionStatement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public DropSequenceStatement dropSequenceStatement() {
            DropSequenceStatement dropSequenceStatement = base.FragmentFactory.CreateFragment<DropSequenceStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            switch (this.LA(1)) {
                case 82:
                    this.match(82);
                    this.match(62);
                    if (base.inputState.guessing == 0) {
                        dropSequenceStatement.IsIfExists = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 200:
                case 232:
                case 233:
                    break;
            }
            this.dropObjectList(dropSequenceStatement, true);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SEQUENCE");
            }
            return dropSequenceStatement;
        }

        public DropFederationStatement dropFederationStatement() {
            DropFederationStatement dropFederationStatement = base.FragmentFactory.CreateFragment<DropFederationStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FEDERATION");
                dropFederationStatement.Name = name;
            }
            return dropFederationStatement;
        }

        public DropSecurityPolicyStatement dropSecurityPolicyStatement() {
            DropSecurityPolicyStatement dropSecurityPolicyStatement = base.FragmentFactory.CreateFragment<DropSecurityPolicyStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            switch (this.LA(1)) {
                case 82:
                    this.match(82);
                    this.match(62);
                    if (base.inputState.guessing == 0) {
                        dropSecurityPolicyStatement.IsIfExists = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 200:
                case 232:
                case 233:
                    break;
            }
            this.dropObjectList(dropSecurityPolicyStatement, true);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SECURITY");
                TSql80ParserBaseInternal.Match(token2, "POLICY");
            }
            return dropSecurityPolicyStatement;
        }

        public TSqlStatement dropColumnStatements() {
            TSqlStatement tSqlStatement = null;
            this.match(27);
            if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER")) {
                return this.dropColumnMasterKeyStatement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("ENCRYPTION")) {
                return this.dropColumnEncryptionKeyStatement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public TSqlStatement dropExternalStatement() {
            TSqlStatement tSqlStatement = null;
            this.match(175);
            if (this.LA(1) == 148 && base.NextTokenMatches("Table")) {
                return this.dropExternalTableStatement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("DATA")) {
                return this.dropExternalDataSourceStatement();
            }
            if (this.LA(1) == 65 && base.NextTokenMatches("FILE")) {
                return this.dropExternalFileFormatStatement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("RESOURCE")) {
                return this.dropExternalResourcePoolStatement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public TSqlStatement dropServerStatements() {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SERVER");
            }
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("AUDIT")) {
                this.LT(1);
                this.match(232);
                if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SPECIFICATION")) {
                    return this.dropServerAuditSpecificationStatement();
                }
                if ((this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_19_.member(this.LA(2))) {
                    return this.dropServerAuditStatement();
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                return this.dropServerRoleStatement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public DropUserStatement dropUserStatement() {
            DropUserStatement dropUserStatement = base.FragmentFactory.CreateFragment<DropUserStatement>();
            this.match(163);
            switch (this.LA(1)) {
                case 82:
                    this.match(82);
                    this.match(62);
                    if (base.inputState.guessing == 0) {
                        dropUserStatement.IsIfExists = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 232:
                case 233:
                    break;
            }
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                dropUserStatement.Name = name;
            }
            return dropUserStatement;
        }

        public DropServerAuditSpecificationStatement dropServerAuditSpecificationStatement() {
            DropServerAuditSpecificationStatement dropServerAuditSpecificationStatement = base.FragmentFactory.CreateFragment<DropServerAuditSpecificationStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SPECIFICATION");
                dropServerAuditSpecificationStatement.Name = name;
            }
            return dropServerAuditSpecificationStatement;
        }

        public DropServerAuditStatement dropServerAuditStatement() {
            DropServerAuditStatement dropServerAuditStatement = base.FragmentFactory.CreateFragment<DropServerAuditStatement>();
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                dropServerAuditStatement.Name = name;
            }
            return dropServerAuditStatement;
        }

        public DropServerRoleStatement dropServerRoleStatement() {
            DropServerRoleStatement dropServerRoleStatement = base.FragmentFactory.CreateFragment<DropServerRoleStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ROLE");
                dropServerRoleStatement.Name = name;
            }
            return dropServerRoleStatement;
        }

        public DropDatabaseAuditSpecificationStatement dropDatabaseAuditSpecificationStatement() {
            DropDatabaseAuditSpecificationStatement dropDatabaseAuditSpecificationStatement = base.FragmentFactory.CreateFragment<DropDatabaseAuditSpecificationStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "AUDIT");
                TSql80ParserBaseInternal.Match(token2, "SPECIFICATION");
                dropDatabaseAuditSpecificationStatement.Name = name;
            }
            return dropDatabaseAuditSpecificationStatement;
        }

        public DropCredentialStatement dropDatabaseScopedCredentialStatement() {
            DropCredentialStatement dropCredentialStatement = base.FragmentFactory.CreateFragment<DropCredentialStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SCOPED");
                TSql80ParserBaseInternal.Match(token2, "CREDENTIAL");
                dropCredentialStatement.Name = name;
                dropCredentialStatement.IsDatabaseScoped = true;
                base.ThrowPartialAstIfPhaseOne(dropCredentialStatement);
            }
            return dropCredentialStatement;
        }

        public DropDatabaseEncryptionKeyStatement dropDatabaseEncryptionKeyStatement() {
            DropDatabaseEncryptionKeyStatement dropDatabaseEncryptionKeyStatement = base.FragmentFactory.CreateFragment<DropDatabaseEncryptionKeyStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(91);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
                TSql80ParserBaseInternal.UpdateTokenInfo(dropDatabaseEncryptionKeyStatement, token2);
            }
            return dropDatabaseEncryptionKeyStatement;
        }

        public DropDatabaseStatement dropDatabaseStatement() {
            DropDatabaseStatement dropDatabaseStatement = base.FragmentFactory.CreateFragment<DropDatabaseStatement>();
            switch (this.LA(1)) {
                case 82:
                    this.match(82);
                    this.match(62);
                    if (base.inputState.guessing == 0) {
                        dropDatabaseStatement.IsIfExists = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 232:
                case 233:
                    break;
            }
            Identifier item = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(dropDatabaseStatement, dropDatabaseStatement.Databases, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.identifier();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(dropDatabaseStatement, dropDatabaseStatement.Databases, item);
                }
            }
            return dropDatabaseStatement;
        }

        public DropIndexClauseBase dropIndexClause() {
            if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_96_.member(this.LA(2))) {
                return this.indexDropObject();
            }
            if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 105) {
                return this.indexDropObjectNewNameFormat();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public BackwardsCompatibleDropIndexClause indexDropObject() {
            BackwardsCompatibleDropIndexClause backwardsCompatibleDropIndexClause = base.FragmentFactory.CreateFragment<BackwardsCompatibleDropIndexClause>();
            ChildObjectName childObjectName = this.childObjectNameWithThreePrefixes();
            if (base.inputState.guessing == 0) {
                if (childObjectName.BaseIdentifier == null) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46027", childObjectName, TSqlParserResource.SQL46027Message);
                }
                backwardsCompatibleDropIndexClause.Index = childObjectName;
            }
            return backwardsCompatibleDropIndexClause;
        }

        public DropIndexClause indexDropObjectNewNameFormat() {
            DropIndexClause dropIndexClause = base.FragmentFactory.CreateFragment<DropIndexClause>();
            Identifier index = this.identifier();
            this.match(105);
            SchemaObjectName @object = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                dropIndexClause.Index = index;
                dropIndexClause.Object = @object;
            }
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.dropClusteredIndexOptions(dropIndexClause);
                goto IL_009b;
            }
            if (TSql140ParserInternal.tokenSet_56_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_009b;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_009b:
            return dropIndexClause;
        }

        public void dropClusteredIndexOptions(DropIndexClause vParent) {
            IToken token = null;
            int num = 0;
            this.match(171);
            this.match(191);
            this.dropClusteredIndexOption(vParent, ref num);
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                this.dropClusteredIndexOption(vParent, ref num);
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public void dropClusteredIndexOption(DropIndexClause vParent, ref int encounteredOptions) {
            IndexOption indexOption;
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXDOP")) {
                indexOption = this.maxDopOption();
                goto IL_0156;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ONLINE")) {
                indexOption = this.onlineIndexOption();
                goto IL_0156;
            }
            if (this.LA(1) == 232 && this.LA(2) == 151 && base.NextTokenMatches("MOVE")) {
                indexOption = this.dropIndexMoveToOption();
                goto IL_0156;
            }
            if (this.LA(1) == 232 && this.LA(2) >= 230 && this.LA(2) <= 233 && base.NextTokenMatches("FILESTREAM_ON")) {
                indexOption = this.dropIndexFileStreamOnOption();
                goto IL_0156;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DATA_COMPRESSION")) {
                indexOption = this.dataCompressionOption();
                goto IL_0156;
            }
            if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("WAIT_AT_LOW_PRIORITY")) {
                indexOption = this.waitAtLowPriorityOption();
                goto IL_0156;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0156:
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, (int)indexOption.OptionKind, (TSqlFragment)indexOption);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, indexOption);
            }
        }

        public IndexExpressionOption maxDopOption() {
            IndexExpressionOption indexExpressionOption = base.FragmentFactory.CreateFragment<IndexExpressionOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal literal = this.integer();
            if (base.inputState.guessing == 0) {
                TSql90ParserBaseInternal.ThrowIfMaxdopValueOutOfRange(literal);
                TSql80ParserBaseInternal.Match(token, "MAXDOP");
                TSql80ParserBaseInternal.UpdateTokenInfo(indexExpressionOption, token);
                indexExpressionOption.OptionKind = IndexOptionKind.MaxDop;
                indexExpressionOption.Expression = literal;
            }
            return indexExpressionOption;
        }

        public OnlineIndexOption onlineIndexOption() {
            OnlineIndexOption onlineIndexOption = base.FragmentFactory.CreateFragment<OnlineIndexOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            OnlineIndexLowPriorityLockWaitOption onlineIndexLowPriorityLockWaitOption = base.FragmentFactory.CreateFragment<OnlineIndexLowPriorityLockWaitOption>();
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ONLINE");
                onlineIndexOption.OptionKind = IndexOptionKind.Online;
                TSql80ParserBaseInternal.UpdateTokenInfo(onlineIndexOption, token);
            }
            this.match(206);
            switch (this.LA(1)) {
                case 105:
                    token2 = this.LT(1);
                    this.match(105);
                    if (base.inputState.guessing == 0) {
                        onlineIndexOption.OptionState = OptionState.On;
                        TSql80ParserBaseInternal.UpdateTokenInfo(onlineIndexOption, token2);
                    }
                    switch (this.LA(1)) {
                        case 191:
                            this.match(191);
                            this.lowPriorityLockWaitOption(onlineIndexLowPriorityLockWaitOption.Options, onlineIndexLowPriorityLockWaitOption);
                            if (base.inputState.guessing == 0) {
                                onlineIndexOption.LowPriorityLockWaitOption = onlineIndexLowPriorityLockWaitOption;
                            }
                            token3 = this.LT(1);
                            this.match(192);
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.UpdateTokenInfo(onlineIndexOption, token3);
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                        case 192:
                        case 198:
                            break;
                    }
                    break;
                case 103:
                    token4 = this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        onlineIndexOption.OptionState = OptionState.Off;
                        TSql80ParserBaseInternal.UpdateTokenInfo(onlineIndexOption, token4);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return onlineIndexOption;
        }

        public MoveToDropIndexOption dropIndexMoveToOption() {
            MoveToDropIndexOption moveToDropIndexOption = base.FragmentFactory.CreateFragment<MoveToDropIndexOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(151);
            FileGroupOrPartitionScheme moveTo = this.filegroupOrPartitionScheme();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MOVE");
                TSql80ParserBaseInternal.UpdateTokenInfo(moveToDropIndexOption, token);
                moveToDropIndexOption.OptionKind = IndexOptionKind.MoveTo;
                moveToDropIndexOption.MoveTo = moveTo;
            }
            return moveToDropIndexOption;
        }

        public FileStreamOnDropIndexOption dropIndexFileStreamOnOption() {
            FileStreamOnDropIndexOption fileStreamOnDropIndexOption = base.FragmentFactory.CreateFragment<FileStreamOnDropIndexOption>();
            this.fileStreamOn(fileStreamOnDropIndexOption);
            if (base.inputState.guessing == 0) {
                fileStreamOnDropIndexOption.OptionKind = IndexOptionKind.FileStreamOn;
            }
            return fileStreamOnDropIndexOption;
        }

        public DataCompressionOption dataCompressionOption() {
            DataCompressionOption dataCompressionOption = base.FragmentFactory.CreateFragment<DataCompressionOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "DATA_COMPRESSION");
                dataCompressionOption.CompressionLevel = DataCompressionLevelHelper.Instance.ParseOption(token2);
                dataCompressionOption.OptionKind = IndexOptionKind.DataCompression;
                TSql80ParserBaseInternal.UpdateTokenInfo(dataCompressionOption, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(dataCompressionOption, token2);
            }
            switch (this.LA(1)) {
                case 105: {
                        this.match(105);
                        token3 = this.LT(1);
                        this.match(232);
                        this.match(191);
                        CompressionPartitionRange item = this.compressionPartitionRange();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token3, "PARTITIONS");
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(dataCompressionOption, dataCompressionOption.PartitionRanges, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.compressionPartitionRange();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(dataCompressionOption, dataCompressionOption.PartitionRanges, item);
                            }
                        }
                        token4 = this.LT(1);
                        this.match(192);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(dataCompressionOption, token4);
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                case 198:
                    break;
            }
            return dataCompressionOption;
        }

        public WaitAtLowPriorityOption waitAtLowPriorityOption() {
            WaitAtLowPriorityOption waitAtLowPriorityOption = base.FragmentFactory.CreateFragment<WaitAtLowPriorityOption>();
            this.lowPriorityLockWaitOption(waitAtLowPriorityOption.Options, waitAtLowPriorityOption);
            if (base.inputState.guessing == 0) {
                waitAtLowPriorityOption.OptionKind = IndexOptionKind.WaitAtLowPriority;
            }
            return waitAtLowPriorityOption;
        }

        public FileGroupOrPartitionScheme filegroupOrPartitionScheme() {
            FileGroupOrPartitionScheme fileGroupOrPartitionScheme = base.FragmentFactory.CreateFragment<FileGroupOrPartitionScheme>();
            IdentifierOrValueExpression name = this.stringOrIdentifier();
            if (base.inputState.guessing == 0) {
                fileGroupOrPartitionScheme.Name = name;
            }
            if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                this.columnNameList(fileGroupOrPartitionScheme, fileGroupOrPartitionScheme.PartitionSchemeColumns);
                goto IL_0099;
            }
            if (TSql140ParserInternal.tokenSet_97_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_98_.member(this.LA(2))) {
                goto IL_0099;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0099:
            return fileGroupOrPartitionScheme;
        }

        public void fileStreamOn(IFileStreamSpecifier vParent) {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            IdentifierOrValueExpression fileStreamOn = this.stringOrIdentifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FILESTREAM_ON");
                TSql80ParserBaseInternal.UpdateTokenInfo((TSqlFragment)vParent, token);
                vParent.FileStreamOn = fileStreamOn;
            }
        }

        public ChildObjectName statisticsDropObject() {
            ChildObjectName childObjectName = this.childObjectNameWithThreePrefixes();
            if (base.inputState.guessing == 0 && childObjectName.BaseIdentifier == null) {
                TSql80ParserBaseInternal.ThrowParseErrorException("SQL46038", childObjectName, TSqlParserResource.SQL46038Message);
            }
            return childObjectName;
        }

        public List<Identifier> identifierList(int vMaxNumber) {
            List<Identifier> list = new List<Identifier>();
            Identifier identifier = null;
            switch (this.LA(1)) {
                case 232:
                case 233:
                    identifier = this.identifier();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddIdentifierToListWithCheck(list, identifier, vMaxNumber);
                    }
                    while (true) {
                        if (this.LA(1) != 200) {
                            break;
                        }
                        if (this.LA(2) != 200 && this.LA(2) != 232 && this.LA(2) != 233) {
                            break;
                        }
                        this.identifierListElement(list, vMaxNumber, false);
                    }
                    break;
                case 200:
                    this.identifierListElement(list, vMaxNumber, true);
                    while (true) {
                        if (this.LA(1) != 200) {
                            break;
                        }
                        if (this.LA(2) != 200 && this.LA(2) != 232 && this.LA(2) != 233) {
                            break;
                        }
                        this.identifierListElement(list, vMaxNumber, false);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return list;
        }

        public void dropObjectList(DropObjectsStatement vParent, bool onlyTwoPartNames) {
            SchemaObjectName item = this.dropObject(onlyTwoPartNames);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Objects, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.dropObject(onlyTwoPartNames);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Objects, item);
                }
            }
        }

        public TriggerScope triggerScope(TSqlFragment vParent) {
            TriggerScope result = TriggerScope.Normal;
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            switch (this.LA(1)) {
                case 43:
                    token = this.LT(1);
                    this.match(43);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                        result = TriggerScope.Database;
                    }
                    break;
                case 5:
                    token2 = this.LT(1);
                    this.match(5);
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token3, "SERVER");
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token3);
                        result = TriggerScope.AllServer;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public DropExternalTableStatement dropExternalTableStatement() {
            DropExternalTableStatement dropExternalTableStatement = base.FragmentFactory.CreateFragment<DropExternalTableStatement>();
            this.match(148);
            this.dropObjectList(dropExternalTableStatement, false);
            return dropExternalTableStatement;
        }

        public SchemaObjectName dropObject(bool onlyTwoPartNames) {
            SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0 && onlyTwoPartNames) {
                TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "DROP");
            }
            return schemaObjectName;
        }

        public DropPartitionFunctionStatement dropPartitionFunctionStatement() {
            DropPartitionFunctionStatement dropPartitionFunctionStatement = base.FragmentFactory.CreateFragment<DropPartitionFunctionStatement>();
            this.match(73);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                dropPartitionFunctionStatement.Name = name;
            }
            return dropPartitionFunctionStatement;
        }

        public DropPartitionSchemeStatement dropPartitionSchemeStatement() {
            DropPartitionSchemeStatement dropPartitionSchemeStatement = base.FragmentFactory.CreateFragment<DropPartitionSchemeStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SCHEME");
                dropPartitionSchemeStatement.Name = name;
            }
            return dropPartitionSchemeStatement;
        }

        public DropFullTextCatalogStatement dropFulltextCatalogStatement() {
            DropFullTextCatalogStatement dropFullTextCatalogStatement = base.FragmentFactory.CreateFragment<DropFullTextCatalogStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CATALOG");
                dropFullTextCatalogStatement.Name = name;
            }
            return dropFullTextCatalogStatement;
        }

        public DropFullTextIndexStatement dropFulltextIndexStatement() {
            DropFullTextIndexStatement dropFullTextIndexStatement = base.FragmentFactory.CreateFragment<DropFullTextIndexStatement>();
            this.match(84);
            this.match(105);
            SchemaObjectName tableName = this.dropObject(false);
            if (base.inputState.guessing == 0) {
                dropFullTextIndexStatement.TableName = tableName;
            }
            return dropFullTextIndexStatement;
        }

        public bool removeProviderKeyOpt(TSqlFragment vParent) {
            bool result = false;
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            if (this.LA(1) == 232 && this.LA(2) == 232) {
                token = this.LT(1);
                this.match(232);
                token2 = this.LT(1);
                this.match(232);
                token3 = this.LT(1);
                this.match(91);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "REMOVE");
                    TSql80ParserBaseInternal.Match(token2, "PROVIDER");
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token3);
                    result = true;
                }
                goto IL_00c1;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00c1;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00c1:
            return result;
        }

        public DropEventNotificationStatement dropEventNotificationStatement() {
            DropEventNotificationStatement dropEventNotificationStatement = base.FragmentFactory.CreateFragment<DropEventNotificationStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier item = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "NOTIFICATION");
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(dropEventNotificationStatement, dropEventNotificationStatement.Notifications, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.identifier();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(dropEventNotificationStatement, dropEventNotificationStatement.Notifications, item);
                }
            }
            EventNotificationObjectScope scope = this.eventNotificationObjectScope();
            if (base.inputState.guessing == 0) {
                dropEventNotificationStatement.Scope = scope;
            }
            return dropEventNotificationStatement;
        }

        public DropEventSessionStatement dropEventSessionStatement() {
            DropEventSessionStatement dropEventSessionStatement = base.FragmentFactory.CreateFragment<DropEventSessionStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SESSION");
                dropEventSessionStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(dropEventSessionStatement);
            }
            this.eventSessionDropScope(dropEventSessionStatement);
            return dropEventSessionStatement;
        }

        public void eventSessionDropScope(DropEventSessionStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            this.match(105);
            switch (this.LA(1)) {
                case 43:
                    token = this.LT(1);
                    this.match(43);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                        vParent.SessionScope = EventSessionScope.Database;
                    }
                    break;
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "SERVER");
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                        vParent.SessionScope = EventSessionScope.Server;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public DropExternalDataSourceStatement dropExternalDataSourceStatement() {
            DropExternalDataSourceStatement dropExternalDataSourceStatement = base.FragmentFactory.CreateFragment<DropExternalDataSourceStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "DATA");
                TSql80ParserBaseInternal.Match(token2, "SOURCE");
                dropExternalDataSourceStatement.Name = name;
            }
            return dropExternalDataSourceStatement;
        }

        public DropExternalFileFormatStatement dropExternalFileFormatStatement() {
            DropExternalFileFormatStatement dropExternalFileFormatStatement = base.FragmentFactory.CreateFragment<DropExternalFileFormatStatement>();
            IToken token = null;
            this.match(65);
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FORMAT");
                dropExternalFileFormatStatement.Name = name;
            }
            return dropExternalFileFormatStatement;
        }

        public DropExternalResourcePoolStatement dropExternalResourcePoolStatement() {
            DropExternalResourcePoolStatement dropExternalResourcePoolStatement = base.FragmentFactory.CreateFragment<DropExternalResourcePoolStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "RESOURCE");
                TSql80ParserBaseInternal.Match(token2, "POOL");
                dropExternalResourcePoolStatement.Name = name;
            }
            return dropExternalResourcePoolStatement;
        }

        public DropColumnMasterKeyStatement dropColumnMasterKeyStatement() {
            DropColumnMasterKeyStatement dropColumnMasterKeyStatement = base.FragmentFactory.CreateFragment<DropColumnMasterKeyStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.LT(1);
            this.match(91);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MASTER");
                dropColumnMasterKeyStatement.Name = name;
            }
            return dropColumnMasterKeyStatement;
        }

        public DropColumnEncryptionKeyStatement dropColumnEncryptionKeyStatement() {
            DropColumnEncryptionKeyStatement dropColumnEncryptionKeyStatement = base.FragmentFactory.CreateFragment<DropColumnEncryptionKeyStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.LT(1);
            this.match(91);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
                dropColumnEncryptionKeyStatement.Name = name;
            }
            return dropColumnEncryptionKeyStatement;
        }

        public void signatureType(SignatureStatementBase vParent) {
            IToken token = null;
            IToken token2 = null;
            if (this.LA(1) == 232 && this.LA(2) == 232) {
                token = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "COUNTER");
                    vParent.IsCounter = true;
                }
                goto IL_008e;
            }
            if (this.LA(1) == 232 && (this.LA(2) == 71 || this.LA(2) == 151)) {
                goto IL_008e;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_008e:
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "SIGNATURE");
            }
        }

        public void signableElement(SignatureStatementBase vParent) {
            IToken token = null;
            if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_99_.member(this.LA(2))) {
                SchemaObjectName element = this.schemaObjectThreePartName();
                if (base.inputState.guessing == 0) {
                    vParent.Element = element;
                }
                return;
            }
            if (this.LA(1) == 232 && this.LA(2) == 203) {
                token = this.LT(1);
                this.match(232);
                this.match(203);
                SchemaObjectName element = this.schemaObjectThreePartName();
                if (base.inputState.guessing == 0) {
                    if (TSql80ParserBaseInternal.TryMatch(token, "OBJECT")) {
                        vParent.ElementKind = SignableElementKind.Object;
                    } else {
                        TSql80ParserBaseInternal.Match(token, "ASSEMBLY");
                        vParent.ElementKind = SignableElementKind.Assembly;
                    }
                    vParent.Element = element;
                }
                return;
            }
            if (this.LA(1) == 43) {
                this.match(43);
                this.match(203);
                SchemaObjectName element = this.schemaObjectThreePartName();
                if (base.inputState.guessing == 0) {
                    vParent.ElementKind = SignableElementKind.Database;
                    vParent.Element = element;
                }
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void cryptoListWithOptionalPasswordSignature(SignatureStatementBase vParent) {
            CryptoMechanism item = this.cryptoWithOptionalPasswordSignature();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Cryptos, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.cryptoWithOptionalPasswordSignature();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Cryptos, item);
                }
            }
        }

        public CryptoMechanism cryptoWithOptionalPasswordSignature() {
            CryptoMechanism cryptoMechanism;
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                cryptoMechanism = this.certificateCrypto();
                Literal literal = this.withSignatureOrPasswordOpt();
                if (base.inputState.guessing == 0 && literal != null) {
                    cryptoMechanism.PasswordOrSignature = literal;
                }
                goto IL_00cf;
            }
            if (this.LA(1) == 232 && this.LA(2) == 91) {
                cryptoMechanism = this.keyCrypto();
                Literal literal = this.withSignatureOrPasswordOpt();
                if (base.inputState.guessing == 0 && literal != null) {
                    cryptoMechanism.PasswordOrSignature = literal;
                }
                goto IL_00cf;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                cryptoMechanism = this.passwordCrypto();
                goto IL_00cf;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00cf:
            return cryptoMechanism;
        }

        public Literal withSignatureOrPasswordOpt() {
            Literal result = null;
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                this.LT(1);
                this.match(232);
                this.match(206);
                switch (this.LA(1)) {
                    case 230:
                    case 231:
                        result = this.stringLiteral();
                        break;
                    case 224:
                        result = this.binary();
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                goto IL_00ce;
            }
            if (TSql140ParserInternal.tokenSet_56_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00ce;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00ce:
            return result;
        }

        public Identifier nonQuotedIdentifier() {
            Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token);
                identifier.SetUnquotedIdentifier(token.getText());
            }
            return identifier;
        }

        public BeginTransactionStatement beginTransactionStatement() {
            BeginTransactionStatement beginTransactionStatement = base.FragmentFactory.CreateFragment<BeginTransactionStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(13);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(beginTransactionStatement, token);
            }
            switch (this.LA(1)) {
                case 52:
                    this.match(52);
                    if (base.inputState.guessing == 0) {
                        beginTransactionStatement.Distributed = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 153:
                case 154:
                    break;
            }
            switch (this.LA(1)) {
                case 153:
                    token2 = this.LT(1);
                    this.match(153);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(beginTransactionStatement, token2);
                    }
                    break;
                case 154:
                    token3 = this.LT(1);
                    this.match(154);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(beginTransactionStatement, token3);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (TSql140ParserInternal.tokenSet_27_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_28_.member(this.LA(2))) {
                this.transactionName(beginTransactionStatement);
                goto IL_017d;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_017d;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_04e0:
            return beginTransactionStatement;
            IL_017d:
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                token4 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token4, "MARK");
                    TSql80ParserBaseInternal.UpdateTokenInfo(beginTransactionStatement, token4);
                    beginTransactionStatement.MarkDefined = true;
                }
                int num = this.LA(1);
                if (num <= 92) {
                    switch (num) {
                        case 1:
                        case 4:
                        case 6:
                        case 12:
                        case 13:
                        case 15:
                        case 17:
                        case 22:
                        case 23:
                        case 28:
                        case 33:
                        case 35:
                        case 44:
                        case 45:
                        case 46:
                        case 48:
                        case 49:
                        case 54:
                        case 55:
                        case 56:
                        case 60:
                        case 61:
                        case 64:
                        case 74:
                        case 75:
                        case 82:
                        case 86:
                        case 92:
                            goto IL_04e0;
                    }
                } else {
                    switch (num) {
                        case 230:
                        case 231:
                        case 234: {
                                ValueExpression markDescription = this.stringOrVariable();
                                if (base.inputState.guessing == 0) {
                                    beginTransactionStatement.MarkDescription = markDescription;
                                }
                                goto IL_04e0;
                            }
                        case 95:
                        case 106:
                        case 119:
                        case 123:
                        case 125:
                        case 126:
                        case 129:
                        case 131:
                        case 132:
                        case 134:
                        case 138:
                        case 140:
                        case 142:
                        case 143:
                        case 144:
                        case 156:
                        case 160:
                        case 161:
                        case 162:
                        case 167:
                        case 170:
                        case 171:
                        case 172:
                        case 176:
                        case 182:
                        case 191:
                        case 204:
                        case 219:
                        case 220:
                        case 232:
                            goto IL_04e0;
                    }
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_04e0;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public TryCatchStatement tryCatchStatement() {
            TryCatchStatement tryCatchStatement = base.FragmentFactory.CreateFragment<TryCatchStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            bool flag = false;
            token = this.LT(1);
            this.match(13);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tryCatchStatement, token);
                TSql80ParserBaseInternal.Match(token2, "TRY");
            }
            StatementList tryStatements = this.tryStatementList(ref flag);
            if (base.inputState.guessing == 0) {
                tryCatchStatement.TryStatements = tryStatements;
            }
            this.match(56);
            token3 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token3, "TRY");
            }
            this.LT(1);
            this.match(13);
            token4 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token4, "CATCH");
            }
            tryStatements = this.catchStatementList(ref flag);
            if (base.inputState.guessing == 0) {
                tryCatchStatement.CatchStatements = tryStatements;
            }
            this.match(56);
            token5 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token5, "CATCH");
                TSql80ParserBaseInternal.UpdateTokenInfo(tryCatchStatement, token5);
                if (flag) {
                    tryCatchStatement = null;
                }
            }
            return tryCatchStatement;
        }

        public BeginConversationTimerStatement beginConversationTimerStatement() {
            BeginConversationTimerStatement beginConversationTimerStatement = base.FragmentFactory.CreateFragment<BeginConversationTimerStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(13);
            token2 = this.LT(1);
            this.match(232);
            token3 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "CONVERSATION");
                TSql80ParserBaseInternal.Match(token3, "TIMER");
                TSql80ParserBaseInternal.UpdateTokenInfo(beginConversationTimerStatement, token);
            }
            this.match(191);
            ScalarExpression handle = this.expression();
            this.match(192);
            token4 = this.LT(1);
            this.match(232);
            this.match(206);
            ScalarExpression timeout = this.expression();
            if (base.inputState.guessing == 0) {
                beginConversationTimerStatement.Handle = handle;
                TSql80ParserBaseInternal.Match(token4, "TIMEOUT");
                beginConversationTimerStatement.Timeout = timeout;
            }
            return beginConversationTimerStatement;
        }

        public BeginDialogStatement beginDialogStatement() {
            BeginDialogStatement beginDialogStatement = base.FragmentFactory.CreateFragment<BeginDialogStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            IToken token6 = null;
            int num = 0;
            token = this.LT(1);
            this.match(13);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "DIALOG");
                TSql80ParserBaseInternal.UpdateTokenInfo(beginDialogStatement, token);
            }
            switch (this.LA(1)) {
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token3, "CONVERSATION");
                        beginDialogStatement.IsConversation = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 234:
                    break;
            }
            VariableReference handle = this.variable();
            this.match(71);
            token4 = this.LT(1);
            this.match(232);
            IdentifierOrValueExpression initiatorServiceName = this.identifierOrVariable();
            this.match(151);
            token5 = this.LT(1);
            this.match(232);
            ValueExpression targetServiceName = this.stringOrVariable();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token4, "SERVICE");
                TSql80ParserBaseInternal.Match(token5, "SERVICE");
                beginDialogStatement.Handle = handle;
                beginDialogStatement.InitiatorServiceName = initiatorServiceName;
                beginDialogStatement.TargetServiceName = targetServiceName;
            }
            int num2 = this.LA(1);
            if (num2 <= 95) {
                switch (num2) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_041c;
                }
            } else {
                switch (num2) {
                    case 198: {
                            this.match(198);
                            ValueExpression instanceSpec = this.stringOrVariable();
                            if (base.inputState.guessing == 0) {
                                beginDialogStatement.InstanceSpec = instanceSpec;
                            }
                            goto IL_041c;
                        }
                    case 105:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_041c;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_07b8:
            return beginDialogStatement;
            IL_06f3:
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                DialogOption item = this.beginConversationArgument(ref num);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(beginDialogStatement, beginDialogStatement.Options, item);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    item = this.beginConversationArgument(ref num);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(beginDialogStatement, beginDialogStatement.Options, item);
                    }
                }
                goto IL_07b8;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_07b8;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_041c:
            int num3 = this.LA(1);
            if (num3 <= 92) {
                switch (num3) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_06f3;
                }
            } else {
                switch (num3) {
                    case 105: {
                            this.match(105);
                            token6 = this.LT(1);
                            this.match(232);
                            IdentifierOrValueExpression contractName = this.identifierOrVariable();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.Match(token6, "CONTRACT");
                                beginDialogStatement.ContractName = contractName;
                            }
                            goto IL_06f3;
                        }
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_06f3;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void transactionName(TransactionStatement vParent) {
            switch (this.LA(1)) {
                case 232:
                case 233:
                case 234: {
                        IdentifierOrValueExpression name = this.identifierOrVariable();
                        if (base.inputState.guessing == 0) {
                            vParent.Name = name;
                        }
                        break;
                    }
                case 199:
                case 221: {
                        Identifier identifier = this.weirdTransactionName();
                        if (base.inputState.guessing == 0) {
                            vParent.Name = base.IdentifierOrValueExpression(identifier);
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public Identifier weirdTransactionName() {
            Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            StringBuilder stringBuilder = new StringBuilder();
            switch (this.LA(1)) {
                case 199:
                    token = this.LT(1);
                    this.match(199);
                    if (base.inputState.guessing == 0) {
                        stringBuilder.Append(token.getText());
                        TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 221:
                    break;
            }
            token2 = this.LT(1);
            this.match(221);
            token3 = this.LT(1);
            this.match(202);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token2);
                stringBuilder.Append(token2.getText());
                stringBuilder.Append(token3.getText());
            }
            this.tranIdentifier(stringBuilder, identifier);
            token4 = this.LT(1);
            this.match(200);
            if (base.inputState.guessing == 0) {
                stringBuilder.Append(token4.getText());
            }
            this.tranIdentifier(stringBuilder, identifier);
            if (base.inputState.guessing == 0) {
                identifier.Value = stringBuilder.ToString();
            }
            return identifier;
        }

        public void tranIdentifier(StringBuilder vStringBuilder, TSqlFragment vParent) {
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        vStringBuilder.Append(token.getText());
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                    }
                    break;
                case 233:
                    token2 = this.LT(1);
                    this.match(233);
                    if (base.inputState.guessing == 0) {
                        vStringBuilder.Append(token2.getText());
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public StatementList tryStatementList(ref bool vParseErrorOccurred) {
            StatementList statementList = base.FragmentFactory.CreateFragment<StatementList>();
            while (true) {
                if (this.LA(1) != 204) {
                    break;
                }
                this.match(204);
            }
            int num = 0;
            while (true) {
                if (!TSql140ParserInternal.tokenSet_3_.member(this.LA(1))) {
                    break;
                }
                if (!TSql140ParserInternal.tokenSet_87_.member(this.LA(2))) {
                    break;
                }
                if (!base.IsStatementIsNext()) {
                    break;
                }
                TSqlStatement tSqlStatement = this.statementOptSemi();
                if (base.inputState.guessing == 0) {
                    if (tSqlStatement != null) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(statementList, statementList.Statements, tSqlStatement);
                    } else {
                        vParseErrorOccurred = true;
                        base.ThrowIfEndOfFileOrBatch();
                    }
                }
                num++;
            }
            if (num < 1) {
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return statementList;
        }

        public StatementList catchStatementList(ref bool vParseErrorOccurred) {
            StatementList statementList = base.FragmentFactory.CreateFragment<StatementList>();
            while (true) {
                if (this.LA(1) != 204) {
                    break;
                }
                this.match(204);
            }
            while (true) {
                if (!TSql140ParserInternal.tokenSet_3_.member(this.LA(1))) {
                    break;
                }
                if (!TSql140ParserInternal.tokenSet_87_.member(this.LA(2))) {
                    break;
                }
                if (!base.IsStatementIsNext()) {
                    break;
                }
                TSqlStatement tSqlStatement = this.statementOptSemi();
                if (base.inputState.guessing == 0) {
                    if (tSqlStatement != null) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(statementList, statementList.Statements, tSqlStatement);
                    } else {
                        vParseErrorOccurred = true;
                        base.ThrowIfEndOfFileOrBatch();
                    }
                }
            }
            return statementList;
        }

        public BeginEndAtomicBlockStatement beginEndAtomicBlock() {
            BeginEndAtomicBlockStatement beginEndAtomicBlockStatement = base.FragmentFactory.CreateFragment<BeginEndAtomicBlockStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.atomicBlockOptions(beginEndAtomicBlockStatement);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ATOMIC");
            }
            return beginEndAtomicBlockStatement;
        }

        public void atomicBlockOptions(BeginEndAtomicBlockStatement vParent) {
            IToken token = null;
            int num = 0;
            this.match(171);
            this.match(191);
            AtomicBlockOption atomicBlockOption = this.atomicBlockOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)atomicBlockOption.OptionKind, atomicBlockOption);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, atomicBlockOption);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                atomicBlockOption = this.atomicBlockOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)atomicBlockOption.OptionKind, atomicBlockOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, atomicBlockOption);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public AtomicBlockOption atomicBlockOption() {
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DATEFIRST")) {
                return this.dateFirstOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DATEFORMAT")) {
                return this.dateFormatOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DELAYED_DURABILITY")) {
                return this.delayedDurabilityOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LANGUAGE")) {
                return this.languageOption();
            }
            if (this.LA(1) == 154) {
                return this.isolationLevelIdentifierAtomicBlockOption();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public LiteralAtomicBlockOption dateFirstOption() {
            LiteralAtomicBlockOption literalAtomicBlockOption = base.FragmentFactory.CreateFragment<LiteralAtomicBlockOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            IntegerLiteral value = this.integer();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "DATEFIRST");
                literalAtomicBlockOption.OptionKind = AtomicBlockOptionKind.DateFirst;
                literalAtomicBlockOption.Value = value;
            }
            return literalAtomicBlockOption;
        }

        public LiteralAtomicBlockOption dateFormatOption() {
            LiteralAtomicBlockOption literalAtomicBlockOption = base.FragmentFactory.CreateFragment<LiteralAtomicBlockOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            StringLiteral value = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "DATEFORMAT");
                literalAtomicBlockOption.OptionKind = AtomicBlockOptionKind.DateFormat;
                literalAtomicBlockOption.Value = value;
            }
            return literalAtomicBlockOption;
        }

        public OnOffAtomicBlockOption delayedDurabilityOption() {
            OnOffAtomicBlockOption onOffAtomicBlockOption = base.FragmentFactory.CreateFragment<OnOffAtomicBlockOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            OptionState optionState = this.optionOnOff(onOffAtomicBlockOption);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "DELAYED_DURABILITY");
                onOffAtomicBlockOption.OptionKind = AtomicBlockOptionKind.DelayedDurability;
                onOffAtomicBlockOption.OptionState = optionState;
            }
            return onOffAtomicBlockOption;
        }

        public LiteralAtomicBlockOption languageOption() {
            LiteralAtomicBlockOption literalAtomicBlockOption = base.FragmentFactory.CreateFragment<LiteralAtomicBlockOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            StringLiteral value = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "LANGUAGE");
                literalAtomicBlockOption.OptionKind = AtomicBlockOptionKind.Language;
                literalAtomicBlockOption.Value = value;
            }
            return literalAtomicBlockOption;
        }

        public IdentifierAtomicBlockOption isolationLevelIdentifierAtomicBlockOption() {
            IdentifierAtomicBlockOption identifierAtomicBlockOption = base.FragmentFactory.CreateFragment<IdentifierAtomicBlockOption>();
            IToken token = null;
            IToken token2 = null;
            this.match(154);
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            this.match(206);
            IsolationLevel isolationLevel = this.isolationLevel(identifierAtomicBlockOption);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ISOLATION");
                TSql80ParserBaseInternal.Match(token2, "LEVEL");
                identifierAtomicBlockOption.OptionKind = AtomicBlockOptionKind.IsolationLevel;
                identifierAtomicBlockOption.Value = new Identifier();
                CultureInfo invariantCulture = CultureInfo.InvariantCulture;
                switch (isolationLevel) {
                    case IsolationLevel.ReadCommitted:
                        identifierAtomicBlockOption.Value.Value = string.Format(invariantCulture, "{0} {1}", new object[2]
                        {
                        "READ",
                        "COMMITTED"
                        });
                        break;
                    case IsolationLevel.ReadUncommitted:
                        identifierAtomicBlockOption.Value.Value = string.Format(invariantCulture, "{0} {1}", new object[2]
                        {
                        "READ",
                        "UNCOMMITTED"
                        });
                        break;
                    case IsolationLevel.RepeatableRead:
                        identifierAtomicBlockOption.Value.Value = string.Format(invariantCulture, "{0} {1}", new object[2]
                        {
                        "REPEATABLE",
                        "READ"
                        });
                        break;
                    case IsolationLevel.Serializable:
                        identifierAtomicBlockOption.Value.Value = "SERIALIZABLE";
                        break;
                    case IsolationLevel.Snapshot:
                        identifierAtomicBlockOption.Value.Value = "SNAPSHOT";
                        break;
                }
            }
            return identifierAtomicBlockOption;
        }

        public IsolationLevel isolationLevel(TSqlFragment vParent) {
            IsolationLevel result = IsolationLevel.ReadCommitted;
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            if (this.LA(1) == 124) {
                this.match(124);
                token = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    if (TSql80ParserBaseInternal.TryMatch(token, "COMMITTED")) {
                        result = IsolationLevel.ReadCommitted;
                    } else {
                        TSql80ParserBaseInternal.Match(token, "UNCOMMITTED");
                        result = IsolationLevel.ReadUncommitted;
                    }
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                }
                goto IL_014c;
            }
            if (this.LA(1) == 232 && this.LA(2) == 124) {
                token2 = this.LT(1);
                this.match(232);
                token3 = this.LT(1);
                this.match(124);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "REPEATABLE");
                    result = IsolationLevel.RepeatableRead;
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token3);
                }
                goto IL_014c;
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_78_.member(this.LA(2))) {
                token4 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    if (TSql80ParserBaseInternal.TryMatch(token4, "SNAPSHOT")) {
                        result = IsolationLevel.Snapshot;
                    } else {
                        TSql80ParserBaseInternal.Match(token4, "SERIALIZABLE");
                        result = IsolationLevel.Serializable;
                    }
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token4);
                }
                goto IL_014c;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_014c:
            return result;
        }

        public DeclareVariableElement declareVariableElement() {
            DeclareVariableElement declareVariableElement = base.FragmentFactory.CreateFragment<DeclareVariableElement>();
            Identifier variableName = this.identifierVariable();
            switch (this.LA(1)) {
                case 9:
                    this.match(9);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 42:
                case 53:
                case 96:
                case 232:
                case 233:
                    break;
            }
            DataTypeReference dataType;
            switch (this.LA(1)) {
                case 53:
                case 96:
                case 232:
                case 233:
                    dataType = this.scalarDataType();
                    break;
                case 42:
                    dataType = this.cursorDataType();
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                declareVariableElement.VariableName = variableName;
                declareVariableElement.DataType = dataType;
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_03c7;
                }
            } else {
                switch (num) {
                    case 99:
                    case 100: {
                            NullableConstraintDefinition nullable = this.nullableConstraint();
                            if (base.inputState.guessing == 0) {
                                declareVariableElement.Nullable = nullable;
                            }
                            goto IL_03c7;
                        }
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 198:
                    case 204:
                    case 206:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_03c7;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0690:
            return declareVariableElement;
            IL_03c7:
            int num2 = this.LA(1);
            if (num2 <= 95) {
                switch (num2) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0690;
                }
            } else {
                switch (num2) {
                    case 206: {
                            this.match(206);
                            ScalarExpression value = this.expression();
                            if (base.inputState.guessing == 0) {
                                declareVariableElement.Value = value;
                            }
                            goto IL_0690;
                        }
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 198:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0690;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public SqlDataTypeReference cursorDataType() {
            SqlDataTypeReference sqlDataTypeReference = base.FragmentFactory.CreateFragment<SqlDataTypeReference>();
            IToken token = null;
            token = this.LT(1);
            this.match(42);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(sqlDataTypeReference, token);
                sqlDataTypeReference.SqlDataTypeOption = SqlDataTypeOption.Cursor;
            }
            return sqlDataTypeReference;
        }

        public DeclareVariableStatement declareVariableStatement() {
            DeclareVariableStatement declareVariableStatement = base.FragmentFactory.CreateFragment<DeclareVariableStatement>();
            DeclareVariableElement item = this.declareVariableElement();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(declareVariableStatement, declareVariableStatement.Declarations, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.declareVariableElement();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(declareVariableStatement, declareVariableStatement.Declarations, item);
                }
            }
            return declareVariableStatement;
        }

        public DeclareCursorStatement declareCursorStatement() {
            DeclareCursorStatement declareCursorStatement = base.FragmentFactory.CreateFragment<DeclareCursorStatement>();
            List<CursorOption> vOptions = new List<CursorOption>();
            Identifier name = this.identifier();
            this.cursorOpts(true, vOptions);
            CursorDefinition cursorDefinition = this.cursorDefinitionOptions(vOptions);
            if (base.inputState.guessing == 0) {
                declareCursorStatement.Name = name;
                declareCursorStatement.CursorDefinition = cursorDefinition;
            }
            return declareCursorStatement;
        }

        public PredicateSetStatement predicateSetStatement() {
            PredicateSetStatement predicateSetStatement = base.FragmentFactory.CreateFragment<PredicateSetStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                SetOptions setOptions2 = predicateSetStatement.Options = PredicateSetOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    SetOptions setOptions2 = PredicateSetOptionsHelper.Instance.ParseOption(token2, SqlVersionFlags.TSql140);
                    predicateSetStatement.Options |= setOptions2;
                }
            }
            this.setOnOff(predicateSetStatement);
            if (base.inputState.guessing == 0 && (predicateSetStatement.Options & SetOptions.QuotedIdentifier) == SetOptions.QuotedIdentifier) {
                base._tokenSource.QuotedIdentifier = predicateSetStatement.IsOn;
            }
            return predicateSetStatement;
        }

        public SetVariableStatement setVariableStatement() {
            SetVariableStatement setVariableStatement = base.FragmentFactory.CreateFragment<SetVariableStatement>();
            VariableReference variable = this.variable();
            if (base.inputState.guessing == 0) {
                setVariableStatement.Variable = variable;
            }
            switch (this.LA(1)) {
                case 200:
                case 203: {
                        switch (this.LA(1)) {
                            case 200:
                                this.match(200);
                                if (base.inputState.guessing == 0) {
                                    setVariableStatement.SeparatorType = SeparatorType.Dot;
                                }
                                break;
                            case 203:
                                this.match(203);
                                if (base.inputState.guessing == 0) {
                                    setVariableStatement.SeparatorType = SeparatorType.DoubleColon;
                                }
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                        }
                        Identifier identifier = this.identifier();
                        if (base.inputState.guessing == 0) {
                            setVariableStatement.Identifier = identifier;
                        }
                        switch (this.LA(1)) {
                            case 191:
                                this.parenthesizedOptExpressionWithDefaultList(setVariableStatement, setVariableStatement.Parameters);
                                if (base.inputState.guessing == 0) {
                                    setVariableStatement.FunctionCallExists = true;
                                }
                                break;
                            case 196:
                            case 206:
                            case 212:
                            case 213:
                            case 214:
                            case 215:
                            case 216:
                            case 217:
                            case 218: {
                                    AssignmentKind assignmentKind = this.assignmentWithOptOp();
                                    ScalarExpression expression = this.expression();
                                    if (base.inputState.guessing == 0) {
                                        setVariableStatement.Expression = expression;
                                        setVariableStatement.AssignmentKind = assignmentKind;
                                    }
                                    break;
                                }
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                        }
                        break;
                    }
                case 196:
                case 206:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                    if (TSql140ParserInternal.tokenSet_100_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_42_.member(this.LA(2))) {
                        AssignmentKind assignmentKind = this.assignmentWithOptOp();
                        ScalarExpression expression = this.expression();
                        if (base.inputState.guessing == 0) {
                            setVariableStatement.Expression = expression;
                            setVariableStatement.AssignmentKind = assignmentKind;
                        }
                        break;
                    }
                    if (this.LA(1) == 206 && this.LA(2) == 42) {
                        this.match(206);
                        CursorDefinition cursorDefinition = this.cursorDefinition();
                        if (base.inputState.guessing == 0) {
                            setVariableStatement.CursorDefinition = cursorDefinition;
                        }
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return setVariableStatement;
        }

        public SetStatisticsStatement setStatisticsStatement() {
            SetStatisticsStatement setStatisticsStatement = base.FragmentFactory.CreateFragment<SetStatisticsStatement>();
            IToken token = null;
            IToken token2 = null;
            this.match(146);
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                setStatisticsStatement.Options = SetStatisticsOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    setStatisticsStatement.Options |= SetStatisticsOptionsHelper.Instance.ParseOption(token2, SqlVersionFlags.TSql140);
                }
            }
            this.setOnOff(setStatisticsStatement);
            return setStatisticsStatement;
        }

        public SetRowCountStatement setRowcountStatement() {
            SetRowCountStatement setRowCountStatement = base.FragmentFactory.CreateFragment<SetRowCountStatement>();
            this.match(135);
            ValueExpression numberRows = this.integerOrVariable();
            if (base.inputState.guessing == 0) {
                setRowCountStatement.NumberRows = numberRows;
            }
            return setRowCountStatement;
        }

        public SetOffsetsStatement setOffsetsStatement() {
            SetOffsetsStatement setOffsetsStatement = base.FragmentFactory.CreateFragment<SetOffsetsStatement>();
            this.match(104);
            SetOffsets options = this.offsetItem();
            if (base.inputState.guessing == 0) {
                setOffsetsStatement.Options = options;
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                options = this.offsetItem();
                if (base.inputState.guessing == 0) {
                    setOffsetsStatement.Options |= options;
                }
            }
            this.setOnOff(setOffsetsStatement);
            return setOffsetsStatement;
        }

        public SetCommandStatement setCommandStatement() {
            SetCommandStatement setCommandStatement = base.FragmentFactory.CreateFragment<SetCommandStatement>();
            SetCommand item = this.setCommand();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(setCommandStatement, setCommandStatement.Commands, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.setCommand();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(setCommandStatement, setCommandStatement.Commands, item);
                }
            }
            return setCommandStatement;
        }

        public SetTransactionIsolationLevelStatement setTransactionIsolationLevelStatement() {
            SetTransactionIsolationLevelStatement setTransactionIsolationLevelStatement = base.FragmentFactory.CreateFragment<SetTransactionIsolationLevelStatement>();
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 154:
                    this.match(154);
                    break;
                case 153:
                    this.match(153);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            IsolationLevel level = this.isolationLevel(setTransactionIsolationLevelStatement);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ISOLATION");
                TSql80ParserBaseInternal.Match(token2, "LEVEL");
                setTransactionIsolationLevelStatement.Level = level;
            }
            return setTransactionIsolationLevelStatement;
        }

        public SetTextSizeStatement setTextSizeStatement() {
            SetTextSizeStatement setTextSizeStatement = base.FragmentFactory.CreateFragment<SetTextSizeStatement>();
            this.match(149);
            ScalarExpression textSize = this.signedInteger();
            if (base.inputState.guessing == 0) {
                setTextSizeStatement.TextSize = textSize;
            }
            return setTextSizeStatement;
        }

        public SetIdentityInsertStatement setIdentityInsertStatement() {
            SetIdentityInsertStatement setIdentityInsertStatement = base.FragmentFactory.CreateFragment<SetIdentityInsertStatement>();
            this.match(80);
            SchemaObjectName table = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                setIdentityInsertStatement.Table = table;
            }
            this.setOnOff(setIdentityInsertStatement);
            return setIdentityInsertStatement;
        }

        public SetErrorLevelStatement setErrorLevelStatement() {
            SetErrorLevelStatement setErrorLevelStatement = base.FragmentFactory.CreateFragment<SetErrorLevelStatement>();
            this.match(57);
            ScalarExpression level = this.signedInteger();
            if (base.inputState.guessing == 0) {
                setErrorLevelStatement.Level = level;
            }
            return setErrorLevelStatement;
        }

        public void parenthesizedOptExpressionWithDefaultList(TSqlFragment vParent, IList<ScalarExpression> expressions) {
            IToken token = null;
            this.match(191);
            switch (this.LA(1)) {
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 47:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 163:
                case 187:
                case 191:
                case 193:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                    this.expressionWithDefaultList(vParent, expressions);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public AssignmentKind assignmentWithOptOp() {
            AssignmentKind result = AssignmentKind.Equals;
            switch (this.LA(1)) {
                case 206:
                    this.match(206);
                    if (base.inputState.guessing == 0) {
                        result = AssignmentKind.Equals;
                    }
                    break;
                case 196:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                    result = this.assignmentWithOp();
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public CursorDefinition cursorDefinition() {
            List<CursorOption> vOptions = new List<CursorOption>();
            return this.cursorDefinitionOptions(vOptions);
        }

        public void setOnOff(SetOnOffStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 105:
                    token = this.LT(1);
                    this.match(105);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                        vParent.IsOn = true;
                    }
                    break;
                case 103:
                    token2 = this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                        vParent.IsOn = false;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public SetOffsets offsetItem() {
            SetOffsets result = SetOffsets.None;
            IToken token = null;
            switch (this.LA(1)) {
                case 140:
                    this.match(140);
                    if (base.inputState.guessing == 0) {
                        result = SetOffsets.Select;
                    }
                    break;
                case 71:
                    this.match(71);
                    if (base.inputState.guessing == 0) {
                        result = SetOffsets.From;
                    }
                    break;
                case 113:
                    this.match(113);
                    if (base.inputState.guessing == 0) {
                        result = SetOffsets.Order;
                    }
                    break;
                case 29:
                    this.match(29);
                    if (base.inputState.guessing == 0) {
                        result = SetOffsets.Compute;
                    }
                    break;
                case 148:
                    this.match(148);
                    if (base.inputState.guessing == 0) {
                        result = SetOffsets.Table;
                    }
                    break;
                case 120:
                case 121:
                    switch (this.LA(1)) {
                        case 121:
                            this.match(121);
                            break;
                        case 120:
                            this.match(120);
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    if (base.inputState.guessing == 0) {
                        result = SetOffsets.Procedure;
                    }
                    break;
                case 60:
                case 61:
                    switch (this.LA(1)) {
                        case 61:
                            this.match(61);
                            break;
                        case 60:
                            this.match(60);
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    if (base.inputState.guessing == 0) {
                        result = SetOffsets.Execute;
                    }
                    break;
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        if (TSql80ParserBaseInternal.TryMatch(token, "STATEMENT")) {
                            result = SetOffsets.Statement;
                        } else {
                            TSql80ParserBaseInternal.Match(token, "PARAM");
                            result = SetOffsets.Param;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public SetCommand setCommand() {
            SetCommand result = null;
            IToken token = null;
            if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 230 || this.LA(2) == 231) && base.NextTokenMatches("FIPS_FLAGGER")) {
                this.LT(1);
                this.match(232);
                result = this.fipsFlaggerLevel();
                goto IL_00e8;
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_67_.member(this.LA(2))) {
                token = this.LT(1);
                this.match(232);
                ScalarExpression parameter = this.possibleNegativeConstantOrIdentifier();
                if (base.inputState.guessing == 0) {
                    GeneralSetCommand generalSetCommand = base.FragmentFactory.CreateFragment<GeneralSetCommand>();
                    generalSetCommand.CommandType = GeneralSetCommandTypeHelper.Instance.ParseOption(token);
                    generalSetCommand.Parameter = parameter;
                    result = generalSetCommand;
                }
                goto IL_00e8;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00e8:
            return result;
        }

        public SetFipsFlaggerCommand fipsFlaggerLevel() {
            SetFipsFlaggerCommand setFipsFlaggerCommand = base.FragmentFactory.CreateFragment<SetFipsFlaggerCommand>();
            IToken token = null;
            switch (this.LA(1)) {
                case 103:
                    token = this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        setFipsFlaggerCommand.ComplianceLevel = FipsComplianceLevel.Off;
                        TSql80ParserBaseInternal.UpdateTokenInfo(setFipsFlaggerCommand, token);
                    }
                    break;
                case 230:
                case 231: {
                        StringLiteral fragment = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            setFipsFlaggerCommand.ComplianceLevel = FipsComplianceLevelHelper.Instance.ParseOption(TSql80ParserBaseInternal.GetFirstToken(fragment));
                            setFipsFlaggerCommand.UpdateTokenInfo(fragment);
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return setFipsFlaggerCommand;
        }

        public void tableElement(IndexAffectingStatement statementType, TableDefinition vParent, AlterTableAddTableElementStatement vStatement) {
            switch (this.LA(1)) {
                case 21:
                case 30:
                case 47:
                case 68:
                case 118:
                case 159: {
                        ConstraintDefinition item3 = this.tableConstraint(statementType, vStatement);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.TableConstraints, item3);
                        }
                        break;
                    }
                case 84: {
                        IndexDefinition item2 = this.inlineIndexTableDefinition();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Indexes, item2);
                        }
                        break;
                    }
                default:
                    if ((this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_101_.member(this.LA(2))) {
                        ColumnDefinition item = this.columnDefinition(statementType, vStatement);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.ColumnDefinitions, item);
                        }
                        break;
                    }
                    if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 67) {
                        SystemTimePeriodDefinition systemTimePeriod = this.tablePeriodDefinition();
                        if (base.inputState.guessing == 0) {
                            vParent.SystemTimePeriod = systemTimePeriod;
                        }
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void cursorOpts(bool oldSyntax, IList<CursorOption> vOptions) {
            while (true) {
                if (this.LA(1) != 232) {
                    break;
                }
                CursorOption cursorOption = this.cursorOption();
                if (base.inputState.guessing == 0) {
                    if (oldSyntax) {
                        if (cursorOption.OptionKind != CursorOptionKind.Insensitive && cursorOption.OptionKind != CursorOptionKind.Scroll) {
                            TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(cursorOption);
                        }
                    } else if (cursorOption.OptionKind == CursorOptionKind.Insensitive) {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(cursorOption);
                    }
                    vOptions.Add(cursorOption);
                }
            }
        }

        public CursorDefinition cursorDefinitionOptions(IList<CursorOption> vOptions) {
            CursorDefinition cursorDefinition = base.FragmentFactory.CreateFragment<CursorDefinition>();
            this.match(42);
            this.cursorOpts(false, vOptions);
            this.match(67);
            SelectStatement select = this.selectStatement(SubDmlFlags.SelectNotForInsert);
            if (base.inputState.guessing == 0) {
                cursorDefinition.Select = select;
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(cursorDefinition, cursorDefinition.Options, vOptions);
            }
            return cursorDefinition;
        }

        public SelectStatement selectStatement(SubDmlFlags subDmlFlags) {
            SelectStatement selectStatement = null;
            WithCtesAndXmlNamespaces withCtesAndXmlNamespaces = null;
            switch (this.LA(1)) {
                case 171:
                    withCtesAndXmlNamespaces = this.withCommonTableExpressionsAndXmlNamespaces();
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 140:
                case 191:
                    break;
            }
            selectStatement = this.select(subDmlFlags);
            if (base.inputState.guessing == 0) {
                selectStatement.WithCtesAndXmlNamespaces = withCtesAndXmlNamespaces;
            }
            return selectStatement;
        }

        public CursorOption cursorOption() {
            CursorOption cursorOption = base.FragmentFactory.CreateFragment<CursorOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                cursorOption.OptionKind = CursorOptionsHelper.Instance.ParseOption(token);
            }
            return cursorOption;
        }

        public CreateIndexStatement createRelationalIndexStatement(IToken tUnique, bool? isClustered) {
            CreateIndexStatement createIndexStatement = base.FragmentFactory.CreateFragment<CreateIndexStatement>();
            IToken token = null;
            createIndexStatement.Unique = (tUnique != null);
            createIndexStatement.Clustered = isClustered;
            this.match(84);
            Identifier name = this.identifier();
            this.match(105);
            SchemaObjectName onName = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                createIndexStatement.Name = name;
                createIndexStatement.OnName = onName;
                base.ThrowPartialAstIfPhaseOne(createIndexStatement);
            }
            this.match(191);
            this.indexKeyColumnList(createIndexStatement);
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(createIndexStatement, token);
            }
            if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("INCLUDE")) {
                this.LT(1);
                this.match(232);
                this.identifierColumnList(createIndexStatement, createIndexStatement.IncludeColumns);
                goto IL_011f;
            }
            if (TSql140ParserInternal.tokenSet_49_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_011f;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_04c7:
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_0772;
                }
            } else {
                switch (num) {
                    case 105: {
                            this.match(105);
                            FileGroupOrPartitionScheme onFileGroupOrPartitionScheme = this.filegroupOrPartitionScheme();
                            if (base.inputState.guessing == 0) {
                                createIndexStatement.OnFileGroupOrPartitionScheme = onFileGroupOrPartitionScheme;
                            }
                            goto IL_0772;
                        }
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0772;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_011f:
            int num2 = this.LA(1);
            if (num2 <= 92) {
                switch (num2) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_03e9;
                }
            } else {
                switch (num2) {
                    case 169: {
                            BooleanExpression filterPredicate = this.filterClause(createIndexStatement.Clustered ?? false);
                            if (base.inputState.guessing == 0) {
                                createIndexStatement.FilterPredicate = filterPredicate;
                            }
                            goto IL_03e9;
                        }
                    case 95:
                    case 105:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_03e9;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_03e9:
            if (this.LA(1) == 171 && (this.LA(2) == 66 || this.LA(2) == 191 || this.LA(2) == 232)) {
                this.match(171);
                switch (this.LA(1)) {
                    case 66:
                    case 232:
                        this.indexLegacyOptionList(createIndexStatement);
                        if (base.inputState.guessing == 0) {
                            createIndexStatement.Translated80SyntaxTo90 = true;
                        }
                        break;
                    case 191:
                        this.indexOptionList(IndexAffectingStatement.CreateIndex, createIndexStatement.IndexOptions, createIndexStatement);
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                goto IL_04c7;
            }
            if (TSql140ParserInternal.tokenSet_50_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_04c7;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0772:
            this.fileStreamOnOpt(createIndexStatement);
            return createIndexStatement;
        }

        public void indexKeyColumnList(CreateIndexStatement vParent) {
            ColumnWithSortOrder item = this.indexKeyColumn();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Columns, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.indexKeyColumn();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Columns, item);
                }
            }
        }

        public void indexLegacyOptionList(CreateIndexStatement vParent) {
            IndexOption indexOption = this.indexLegacyOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.VerifyAllowedIndexOption(IndexAffectingStatement.CreateIndex, indexOption);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.IndexOptions, indexOption);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                indexOption = this.indexLegacyOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.VerifyAllowedIndexOption(IndexAffectingStatement.CreateIndex, indexOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.IndexOptions, indexOption);
                }
            }
        }

        public void fileStreamOnOpt(IFileStreamSpecifier vParent) {
            if (this.LA(1) == 232 && this.LA(2) >= 230 && this.LA(2) <= 233) {
                this.fileStreamOn(vParent);
                return;
            }
            if (TSql140ParserInternal.tokenSet_102_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_98_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void columnstoreIndexKeyColumnList(CreateColumnStoreIndexStatement vParent) {
            ColumnReferenceExpression item = this.columnstoreIndexKeyColumn();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Columns, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.columnstoreIndexKeyColumn();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Columns, item);
                }
            }
        }

        public ColumnWithSortOrder indexKeyColumn() {
            ColumnWithSortOrder columnWithSortOrder = base.FragmentFactory.CreateFragment<ColumnWithSortOrder>();
            ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
            switch (this.LA(1)) {
                case 200:
                case 232:
                case 233:
                    columnWithSortOrder = this.columnWithSortOrder();
                    break;
                case 227:
                    this.graphPseudoColumn(columnReferenceExpression);
                    if (base.inputState.guessing == 0) {
                        columnWithSortOrder.Column = columnReferenceExpression;
                    }
                    switch (this.LA(1)) {
                        case 10:
                        case 50: {
                                SortOrder sortOrder = this.orderByOption(columnWithSortOrder);
                                if (base.inputState.guessing == 0) {
                                    columnWithSortOrder.SortOrder = sortOrder;
                                }
                                break;
                            }
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                        case 192:
                        case 198:
                            break;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return columnWithSortOrder;
        }

        public void graphPseudoColumn(ColumnReferenceExpression vResult) {
            this.systemColumn(vResult);
            if (base.inputState.guessing == 0) {
                switch (vResult.ColumnType) {
                    case ColumnType.PseudoColumnGraphNodeId:
                    case ColumnType.PseudoColumnGraphEdgeId:
                    case ColumnType.PseudoColumnGraphFromId:
                    case ColumnType.PseudoColumnGraphToId:
                        break;
                    default:
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(vResult);
                        break;
                }
            }
        }

        public SortOrder orderByOption(TSqlFragment vParent) {
            SortOrder result = SortOrder.NotSpecified;
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 10:
                    token = this.LT(1);
                    this.match(10);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                        result = SortOrder.Ascending;
                    }
                    break;
                case 50:
                    token2 = this.LT(1);
                    this.match(50);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                        result = SortOrder.Descending;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public ColumnReferenceExpression columnstoreIndexKeyColumn() {
            ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
            switch (this.LA(1)) {
                case 200:
                case 232:
                case 233:
                    columnReferenceExpression = this.identifierColumnReferenceExpression();
                    break;
                case 227:
                    this.graphPseudoColumn(columnReferenceExpression);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return columnReferenceExpression;
        }

        public ColumnReferenceExpression identifierColumnReferenceExpression() {
            ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
            MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(1);
            if (base.inputState.guessing == 0) {
                columnReferenceExpression.ColumnType = ColumnType.Regular;
                columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
            }
            return columnReferenceExpression;
        }

        public void systemColumn(ColumnReferenceExpression vParent) {
            IToken token = null;
            token = this.LT(1);
            this.match(227);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                vParent.ColumnType = PseudoColumnHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
            }
        }

        public BooleanExpression filterExpression() {
            BooleanExpression booleanExpression = this.filterExpressionPrimary();
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 7: {
                            this.match(7);
                            BooleanExpression secondExpression = this.filterExpression();
                            if (base.inputState.guessing == 0) {
                                BooleanBinaryExpression booleanBinaryExpression = base.FragmentFactory.CreateFragment<BooleanBinaryExpression>();
                                booleanBinaryExpression.BinaryExpressionType = BooleanBinaryExpressionType.And;
                                booleanBinaryExpression.SecondExpression = secondExpression;
                                booleanBinaryExpression.FirstExpression = booleanExpression;
                                booleanExpression = booleanBinaryExpression;
                            }
                            goto IL_02d6;
                        }
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_02d6;
                }
            } else {
                switch (num) {
                    case 105:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 198:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_02d6;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_02d6:
            return booleanExpression;
        }

        public BooleanExpression filterExpressionPrimary() {
            switch (this.LA(1)) {
                case 81:
                case 136:
                case 200:
                case 227:
                case 232:
                case 233: {
                        ColumnReferenceExpression vColumn = this.filterColumn();
                        switch (this.LA(1)) {
                            case 89:
                                return this.filterNullPredicate(vColumn);
                            case 188:
                            case 205:
                            case 206:
                            case 208:
                                return this.filterComparisonPredicate(vColumn);
                            case 83:
                                return this.filterInPredicate(vColumn);
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                        }
                    }
                case 191:
                    return this.filterParenthesisExpression();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public ColumnReferenceExpression filterColumn() {
            ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
            switch (this.LA(1)) {
                case 81:
                case 136:
                case 227:
                    this.specialColumn(columnReferenceExpression);
                    break;
                case 200:
                case 232:
                case 233: {
                        MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
                        if (base.inputState.guessing == 0) {
                            columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
                        }
                        switch (this.LA(1)) {
                            case 200:
                                this.match(200);
                                this.specialColumn(columnReferenceExpression);
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 83:
                            case 89:
                            case 188:
                            case 205:
                            case 206:
                            case 208:
                                break;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckSpecialColumn(columnReferenceExpression);
            }
            return columnReferenceExpression;
        }

        public BooleanIsNullExpression filterNullPredicate(ScalarExpression vColumn) {
            return this.nullPredicate(vColumn);
        }

        public BooleanComparisonExpression filterComparisonPredicate(ScalarExpression vColumn) {
            BooleanComparisonExpression booleanComparisonExpression = base.FragmentFactory.CreateFragment<BooleanComparisonExpression>();
            BooleanComparisonType comparisonType = this.comparisonOperator();
            ScalarExpression scalarExpression = this.expression();
            if (base.inputState.guessing == 0) {
                TSql100ParserBaseInternal.CheckComparisonOperandForIndexFilter(scalarExpression, true);
                booleanComparisonExpression.FirstExpression = vColumn;
                booleanComparisonExpression.SecondExpression = scalarExpression;
                booleanComparisonExpression.ComparisonType = comparisonType;
            }
            return booleanComparisonExpression;
        }

        public InPredicate filterInPredicate(ScalarExpression vColumn) {
            InPredicate inPredicate = base.FragmentFactory.CreateFragment<InPredicate>();
            IToken token = null;
            this.match(83);
            this.match(191);
            ScalarExpression scalarExpression = this.expression();
            if (base.inputState.guessing == 0) {
                inPredicate.Expression = vColumn;
                TSql100ParserBaseInternal.CheckComparisonOperandForIndexFilter(scalarExpression, true);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(inPredicate, inPredicate.Values, scalarExpression);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                scalarExpression = this.expression();
                if (base.inputState.guessing == 0) {
                    TSql100ParserBaseInternal.CheckComparisonOperandForIndexFilter(scalarExpression, true);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(inPredicate, inPredicate.Values, scalarExpression);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(inPredicate, token);
            }
            return inPredicate;
        }

        public BooleanParenthesisExpression filterParenthesisExpression() {
            BooleanParenthesisExpression booleanParenthesisExpression = base.FragmentFactory.CreateFragment<BooleanParenthesisExpression>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(191);
            BooleanExpression expression = this.filterExpression();
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(booleanParenthesisExpression, token);
                booleanParenthesisExpression.Expression = expression;
                TSql80ParserBaseInternal.UpdateTokenInfo(booleanParenthesisExpression, token2);
            }
            return booleanParenthesisExpression;
        }

        public void specialColumn(ColumnReferenceExpression vParent) {
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 81:
                    token = this.LT(1);
                    this.match(81);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                        vParent.ColumnType = ColumnType.IdentityCol;
                    }
                    break;
                case 136:
                    token2 = this.LT(1);
                    this.match(136);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                        vParent.ColumnType = ColumnType.RowGuidCol;
                    }
                    break;
                case 227:
                    this.systemColumn(vParent);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public BooleanIsNullExpression nullPredicate(ScalarExpression vExpressionFirst) {
            BooleanIsNullExpression booleanIsNullExpression = base.FragmentFactory.CreateFragment<BooleanIsNullExpression>();
            this.match(89);
            bool flag = this.nullNotNull(booleanIsNullExpression);
            if (base.inputState.guessing == 0) {
                booleanIsNullExpression.Expression = vExpressionFirst;
                booleanIsNullExpression.IsNot = !flag;
            }
            return booleanIsNullExpression;
        }

        public IndexOption indexLegacyOption() {
            IndexOption result = null;
            IToken token = null;
            switch (this.LA(1)) {
                case 66:
                    result = this.fillFactorOption();
                    break;
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        IndexStateOption indexStateOption = base.FragmentFactory.CreateFragment<IndexStateOption>();
                        result = indexStateOption;
                        indexStateOption.OptionKind = TSql80ParserBaseInternal.ParseIndexLegacyWithOption(token);
                        TSql80ParserBaseInternal.UpdateTokenInfo(indexStateOption, token);
                        indexStateOption.OptionState = OptionState.On;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public IndexExpressionOption fillFactorOption() {
            IndexExpressionOption indexExpressionOption = base.FragmentFactory.CreateFragment<IndexExpressionOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(66);
            this.match(206);
            Literal literal = this.integer();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckFillFactorRange(literal);
                indexExpressionOption.OptionKind = IndexOptionKind.FillFactor;
                indexExpressionOption.Expression = literal;
                TSql80ParserBaseInternal.UpdateTokenInfo(indexExpressionOption, token);
            }
            return indexExpressionOption;
        }

        public IndexOption indexOption() {
            IndexOption indexOption = null;
            if (this.LA(1) == 66) {
                return this.fillFactorOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXDOP")) {
                return this.maxDopOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DATA_COMPRESSION")) {
                return this.dataCompressionOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("BUCKET_COUNT")) {
                return this.bucketCountOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ONLINE")) {
                return this.onlineIndexOption();
            }
            if (this.LA(1) == 113 && base.NextTokenMatches("ORDER")) {
                return this.orderIndexOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("COMPRESSION_DELAY")) {
                return this.compressionDelayOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("IGNORE_DUP_KEY")) {
                return this.ignoreDupKeyIndexOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAX_DURATION")) {
                return this.maxDurationOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("WAIT_AT_LOW_PRIORITY")) {
                return this.waitAtLowPriorityOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                return this.indexStateOption();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void alterTableAlterIndexOptionList(IndexAffectingStatement statement, IList<IndexOption> optionsList, TSqlFragment vParent) {
            IToken token = null;
            this.match(191);
            IndexOption indexOption = this.indexOption();
            if (base.inputState.guessing == 0) {
                TSql140ParserBaseInternal.VerifyAllowedIndexOption140(statement, indexOption);
                if (indexOption.OptionKind == IndexOptionKind.BucketCount) {
                    optionsList.Add(indexOption);
                } else {
                    TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(indexOption);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public void lowPriorityLockWaitOption(IList<LowPriorityLockWaitOption> optionsList, TSqlFragment vParent) {
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            IToken token6 = null;
            LowPriorityLockWaitMaxDurationOption lowPriorityLockWaitMaxDurationOption = base.FragmentFactory.CreateFragment<LowPriorityLockWaitMaxDurationOption>();
            LowPriorityLockWaitAbortAfterWaitOption lowPriorityLockWaitAbortAfterWaitOption = base.FragmentFactory.CreateFragment<LowPriorityLockWaitAbortAfterWaitOption>();
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "WAIT_AT_LOW_PRIORITY");
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
            this.match(191);
            token2 = this.LT(1);
            this.match(232);
            this.match(206);
            IntegerLiteral maxDuration = this.integer();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "MAX_DURATION");
                TSql80ParserBaseInternal.UpdateTokenInfo(lowPriorityLockWaitMaxDurationOption, token2);
                lowPriorityLockWaitMaxDurationOption.OptionKind = LowPriorityLockWaitOptionKind.MaxDuration;
                lowPriorityLockWaitMaxDurationOption.MaxDuration = maxDuration;
                optionsList.Add(lowPriorityLockWaitMaxDurationOption);
            }
            switch (this.LA(1)) {
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token3, "MINUTES");
                        lowPriorityLockWaitMaxDurationOption.Unit = TimeUnit.Minutes;
                        TSql80ParserBaseInternal.UpdateTokenInfo(lowPriorityLockWaitMaxDurationOption, token3);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 198:
                    break;
            }
            this.match(198);
            token4 = this.LT(1);
            this.match(232);
            this.match(206);
            token5 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token4, "ABORT_AFTER_WAIT");
                TSql80ParserBaseInternal.UpdateTokenInfo(lowPriorityLockWaitAbortAfterWaitOption, token4);
                AbortAfterWaitType abortAfterWait = AbortAfterWaitTypeHelper.Instance.ParseOption(token5);
                TSql120ParserBaseInternal.CheckLowPriorityLockWaitValue(maxDuration, abortAfterWait);
                lowPriorityLockWaitAbortAfterWaitOption.OptionKind = LowPriorityLockWaitOptionKind.AbortAfterWait;
                lowPriorityLockWaitAbortAfterWaitOption.AbortAfterWait = abortAfterWait;
                optionsList.Add(lowPriorityLockWaitAbortAfterWaitOption);
                TSql80ParserBaseInternal.UpdateTokenInfo(lowPriorityLockWaitAbortAfterWaitOption, token5);
            }
            token6 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token6);
            }
        }

        public IgnoreDupKeyIndexOption ignoreDupKeyIndexOption() {
            IgnoreDupKeyIndexOption ignoreDupKeyIndexOption = base.FragmentFactory.CreateFragment<IgnoreDupKeyIndexOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            bool? nullable = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "IGNORE_DUP_KEY");
                ignoreDupKeyIndexOption.OptionKind = IndexOptionKind.IgnoreDupKey;
                TSql80ParserBaseInternal.UpdateTokenInfo(ignoreDupKeyIndexOption, token);
            }
            this.match(206);
            switch (this.LA(1)) {
                case 105:
                    token2 = this.LT(1);
                    this.match(105);
                    if (base.inputState.guessing == 0) {
                        ignoreDupKeyIndexOption.OptionState = OptionState.On;
                        TSql80ParserBaseInternal.UpdateTokenInfo(ignoreDupKeyIndexOption, token2);
                    }
                    switch (this.LA(1)) {
                        case 191:
                            this.match(191);
                            nullable = this.suppressMessagesOption();
                            if (base.inputState.guessing == 0) {
                                ignoreDupKeyIndexOption.SuppressMessagesOption = nullable;
                            }
                            token3 = this.LT(1);
                            this.match(192);
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.UpdateTokenInfo(ignoreDupKeyIndexOption, token3);
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                        case 192:
                        case 198:
                            break;
                    }
                    break;
                case 103:
                    token4 = this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        ignoreDupKeyIndexOption.OptionState = OptionState.Off;
                        TSql80ParserBaseInternal.UpdateTokenInfo(ignoreDupKeyIndexOption, token4);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return ignoreDupKeyIndexOption;
        }

        public bool? suppressMessagesOption() {
            bool? result = null;
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SUPPRESS_MESSAGES");
            }
            this.match(206);
            switch (this.LA(1)) {
                case 105:
                    this.LT(1);
                    this.match(105);
                    if (base.inputState.guessing == 0) {
                        result = true;
                    }
                    break;
                case 103:
                    this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        result = false;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public IndexStateOption indexStateOption() {
            IndexStateOption indexStateOption = base.FragmentFactory.CreateFragment<IndexStateOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                indexStateOption.OptionKind = IndexOptionHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
                TSql80ParserBaseInternal.UpdateTokenInfo(indexStateOption, token);
            }
            this.match(206);
            OptionState optionState = this.optionOnOff(indexStateOption);
            if (base.inputState.guessing == 0) {
                indexStateOption.OptionState = optionState;
            }
            return indexStateOption;
        }

        public IndexExpressionOption bucketCountOption() {
            IndexExpressionOption indexExpressionOption = base.FragmentFactory.CreateFragment<IndexExpressionOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal expression = this.integer();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "BUCKET_COUNT");
                indexExpressionOption.OptionKind = IndexOptionKind.BucketCount;
                indexExpressionOption.Expression = expression;
            }
            return indexExpressionOption;
        }

        public OrderIndexOption orderIndexOption() {
            OrderIndexOption orderIndexOption = base.FragmentFactory.CreateFragment<OrderIndexOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(113);
            if (base.inputState.guessing == 0) {
                orderIndexOption.OptionKind = IndexOptionKind.Order;
                TSql80ParserBaseInternal.UpdateTokenInfo(orderIndexOption, token);
            }
            this.identifierColumnList(orderIndexOption, orderIndexOption.Columns);
            return orderIndexOption;
        }

        public CompressionDelayIndexOption compressionDelayOption() {
            CompressionDelayIndexOption compressionDelayIndexOption = base.FragmentFactory.CreateFragment<CompressionDelayIndexOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "COMPRESSION_DELAY");
                TSql80ParserBaseInternal.UpdateTokenInfo(compressionDelayIndexOption, token);
                compressionDelayIndexOption.OptionKind = IndexOptionKind.CompressionDelay;
            }
            Literal literal = this.integer();
            if (base.inputState.guessing == 0) {
                TSql130ParserBaseInternal.ThrowIfCompressionDelayValueOutOfRange(literal);
                compressionDelayIndexOption.Expression = literal;
                compressionDelayIndexOption.TimeUnit = CompressionDelayTimeUnit.Unitless;
            }
            switch (this.LA(1)) {
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        compressionDelayIndexOption.TimeUnit = CompressionDelayTimeUnitHelper.Instance.ParseOption(token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                case 198:
                    break;
            }
            return compressionDelayIndexOption;
        }

        public MaxDurationOption maxDurationOption() {
            MaxDurationOption maxDurationOption = base.FragmentFactory.CreateFragment<MaxDurationOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            IntegerLiteral maxDuration = this.integer();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MAX_DURATION");
                maxDurationOption.OptionKind = IndexOptionKind.MaxDuration;
                maxDurationOption.MaxDuration = maxDuration;
                TSql80ParserBaseInternal.UpdateTokenInfo(maxDurationOption, token);
            }
            switch (this.LA(1)) {
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "MINUTES");
                        maxDurationOption.Unit = TimeUnit.Minutes;
                        TSql80ParserBaseInternal.UpdateTokenInfo(maxDurationOption, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                case 198:
                    break;
            }
            return maxDurationOption;
        }

        public void ctContext(WithCtesAndXmlNamespaces vParent) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.LT(1);
            this.match(191);
            ValueExpression changeTrackingContext = this.binaryOrVariable();
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CHANGE_TRACKING_CONTEXT");
                vParent.ChangeTrackingContext = changeTrackingContext;
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
            }
        }

        public CommonTableExpression commonTableExpression() {
            CommonTableExpression commonTableExpression = base.FragmentFactory.CreateFragment<CommonTableExpression>();
            IToken token = null;
            IToken token2 = null;
            Identifier expressionName = this.identifier();
            if (base.inputState.guessing == 0) {
                commonTableExpression.ExpressionName = expressionName;
            }
            switch (this.LA(1)) {
                case 191:
                    this.columnNameList(commonTableExpression, commonTableExpression.Columns);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 9:
                    break;
            }
            this.match(9);
            token = this.LT(1);
            this.match(191);
            QueryExpression queryExpression = this.subqueryExpression(SubDmlFlags.SelectNotForInsert);
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                commonTableExpression.QueryExpression = queryExpression;
                TSql80ParserBaseInternal.UpdateTokenInfo(commonTableExpression, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(commonTableExpression, token2);
            }
            return commonTableExpression;
        }

        public XmlNamespacesElement xmlNamespacesElement() {
            XmlNamespacesElement xmlNamespacesElement = null;
            switch (this.LA(1)) {
                case 47:
                    return this.xmlNamespacesDefaultElement();
                case 230:
                case 231:
                    return this.xmlNamespacesAliasElement();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public XmlNamespacesDefaultElement xmlNamespacesDefaultElement() {
            XmlNamespacesDefaultElement xmlNamespacesDefaultElement = base.FragmentFactory.CreateFragment<XmlNamespacesDefaultElement>();
            IToken token = null;
            token = this.LT(1);
            this.match(47);
            StringLiteral @string = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(xmlNamespacesDefaultElement, token);
                xmlNamespacesDefaultElement.String = @string;
            }
            return xmlNamespacesDefaultElement;
        }

        public XmlNamespacesAliasElement xmlNamespacesAliasElement() {
            XmlNamespacesAliasElement xmlNamespacesAliasElement = base.FragmentFactory.CreateFragment<XmlNamespacesAliasElement>();
            StringLiteral @string = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                xmlNamespacesAliasElement.String = @string;
            }
            this.match(9);
            Identifier identifier = this.identifier();
            if (base.inputState.guessing == 0) {
                xmlNamespacesAliasElement.Identifier = identifier;
            }
            return xmlNamespacesAliasElement;
        }

        public QueryExpression queryExpression(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement) {
            QueryExpression queryExpression = null;
            BinaryQueryExpression binaryQueryExpression = null;
            queryExpression = this.queryExpressionUnit(subDmlFlags, vSelectStatement);
            while (true) {
                if (this.LA(1) != 59 && this.LA(1) != 87 && this.LA(1) != 158) {
                    break;
                }
                if (base.inputState.guessing == 0) {
                    binaryQueryExpression = base.FragmentFactory.CreateFragment<BinaryQueryExpression>();
                    binaryQueryExpression.FirstQueryExpression = queryExpression;
                }
                switch (this.LA(1)) {
                    case 158:
                        this.match(158);
                        if (base.inputState.guessing == 0) {
                            binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Union;
                        }
                        break;
                    case 59:
                        this.match(59);
                        if (base.inputState.guessing == 0) {
                            binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Except;
                        }
                        break;
                    case 87:
                        this.match(87);
                        if (base.inputState.guessing == 0) {
                            binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Intersect;
                        }
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                switch (this.LA(1)) {
                    case 5:
                        this.match(5);
                        if (base.inputState.guessing == 0) {
                            binaryQueryExpression.All = true;
                        }
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    case 140:
                    case 191:
                        break;
                }
                queryExpression = this.queryExpressionUnit(subDmlFlags, null);
                if (base.inputState.guessing == 0) {
                    binaryQueryExpression.SecondQueryExpression = queryExpression;
                    queryExpression = binaryQueryExpression;
                }
            }
            return queryExpression;
        }

        public OrderByClause orderByClause() {
            OrderByClause orderByClause = base.FragmentFactory.CreateFragment<OrderByClause>();
            IToken token = null;
            token = this.LT(1);
            this.match(113);
            this.match(18);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(orderByClause, token);
            }
            ExpressionWithSortOrder item = this.expressionWithSortOrder();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(orderByClause, orderByClause.OrderByElements, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.expressionWithSortOrder();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(orderByClause, orderByClause.OrderByElements, item);
                }
            }
            return orderByClause;
        }

        public OffsetClause offsetClause() {
            OffsetClause offsetClause = base.FragmentFactory.CreateFragment<OffsetClause>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            IToken token6 = null;
            token = this.LT(1);
            this.match(232);
            ScalarExpression offsetExpression = this.expression();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "OFFSET");
                TSql80ParserBaseInternal.UpdateTokenInfo(offsetClause, token);
                offsetClause.OffsetExpression = offsetExpression;
            }
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "ROW", "ROWS");
                TSql80ParserBaseInternal.UpdateTokenInfo(offsetClause, token2);
            }
            if (this.LA(1) == 64 && this.LA(2) == 232) {
                token3 = this.LT(1);
                this.match(64);
                token4 = this.LT(1);
                this.match(232);
                offsetExpression = this.expression();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(offsetClause, token3);
                    TSql80ParserBaseInternal.Match(token4, "FIRST", "NEXT");
                    TSql80ParserBaseInternal.UpdateTokenInfo(offsetClause, token4);
                    offsetClause.FetchExpression = offsetExpression;
                }
                token5 = this.LT(1);
                this.match(232);
                token6 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token5, "ROW", "ROWS");
                    TSql80ParserBaseInternal.Match(token6, "ONLY");
                    TSql80ParserBaseInternal.UpdateTokenInfo(offsetClause, token6);
                }
                goto IL_01a9;
            }
            if (TSql140ParserInternal.tokenSet_103_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_1_.member(this.LA(2))) {
                goto IL_01a9;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_01a9:
            return offsetClause;
        }

        public ForClause forClause() {
            ForClause forClause = null;
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(67);
            switch (this.LA(1)) {
                case 16:
                    forClause = this.browseForClause();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(forClause, token);
                    }
                    break;
                case 124:
                    this.match(124);
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "ONLY");
                        forClause = base.FragmentFactory.CreateFragment<ReadOnlyForClause>();
                        TSql80ParserBaseInternal.UpdateTokenInfo(forClause, token2);
                    }
                    break;
                case 160:
                    forClause = this.updateForClause();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(forClause, token);
                    }
                    break;
                default:
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("XML")) {
                        forClause = this.xmlForClause();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(forClause, token);
                        }
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("JSON")) {
                        forClause = this.jsonForClause();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(forClause, token);
                        }
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return forClause;
        }

        public void optimizerHints(TSqlFragment vParent, IList<OptimizerHint> hintsCollection) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(111);
            this.match(191);
            OptimizerHint item = this.hint();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, hintsCollection, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.hint();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, hintsCollection, item);
                }
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
            }
        }

        public TableReferenceWithAliasAndColumns derivedTable(SubDmlFlags subDmlFlags) {
            TableReferenceWithAliasAndColumns tableReferenceWithAliasAndColumns;
            if (this.LA(1) == 191 && (this.LA(2) == 140 || this.LA(2) == 191)) {
                tableReferenceWithAliasAndColumns = this.queryDerivedTable(subDmlFlags);
                goto IL_006c;
            }
            if (this.LA(1) == 191 && this.LA(2) == 164) {
                tableReferenceWithAliasAndColumns = this.inlinedDerivedTable();
                goto IL_006c;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_006c:
            this.simpleTableReferenceAlias(tableReferenceWithAliasAndColumns);
            if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                this.columnNameList(tableReferenceWithAliasAndColumns, tableReferenceWithAliasAndColumns.Columns);
                goto IL_00e5;
            }
            if (TSql140ParserInternal.tokenSet_104_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_105_.member(this.LA(2))) {
                goto IL_00e5;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00e5:
            return tableReferenceWithAliasAndColumns;
        }

        public QueryDerivedTable queryDerivedTable(SubDmlFlags subDmlFlags) {
            QueryDerivedTable queryDerivedTable = base.FragmentFactory.CreateFragment<QueryDerivedTable>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(191);
            QueryExpression queryExpression = this.subqueryExpression(subDmlFlags);
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                queryDerivedTable.QueryExpression = queryExpression;
                TSql80ParserBaseInternal.UpdateTokenInfo(queryDerivedTable, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(queryDerivedTable, token2);
            }
            return queryDerivedTable;
        }

        public InlineDerivedTable inlinedDerivedTable() {
            InlineDerivedTable inlineDerivedTable = base.FragmentFactory.CreateFragment<InlineDerivedTable>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(191);
            this.match(164);
            RowValue item = this.rowValueExpression();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(inlineDerivedTable, token);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(inlineDerivedTable, inlineDerivedTable.RowValues, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.rowValueExpression();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(inlineDerivedTable, inlineDerivedTable.RowValues, item);
                }
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(inlineDerivedTable, token2);
            }
            return inlineDerivedTable;
        }

        public void simpleTableReferenceAlias(TableReferenceWithAlias vParent) {
            switch (this.LA(1)) {
                case 9:
                    this.match(9);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 232:
                case 233:
                    break;
            }
            Identifier alias = this.identifier();
            if (base.inputState.guessing == 0) {
                vParent.Alias = alias;
            }
        }

        public RowValue rowValueExpression() {
            RowValue rowValue = base.FragmentFactory.CreateFragment<RowValue>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(191);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(rowValue, token);
            }
            this.expressionList(rowValue, rowValue.ColumnValues);
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(rowValue, token2);
            }
            return rowValue;
        }

        public ScalarSubquery subquery(SubDmlFlags subDmlFlags, ExpressionFlags expressionFlags) {
            ScalarSubquery scalarSubquery = base.FragmentFactory.CreateFragment<ScalarSubquery>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(191);
            QueryExpression queryExpression = this.subqueryExpression(subDmlFlags);
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                if (ExpressionFlags.ScalarSubqueriesDisallowed == (expressionFlags & ExpressionFlags.ScalarSubqueriesDisallowed)) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46098", queryExpression, TSqlParserResource.SQL46098Message);
                }
                scalarSubquery.QueryExpression = queryExpression;
                TSql80ParserBaseInternal.UpdateTokenInfo(scalarSubquery, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(scalarSubquery, token2);
            }
            return scalarSubquery;
        }

        public QueryExpression subqueryExpressionUnit(SubDmlFlags subDmlFlags) {
            switch (this.LA(1)) {
                case 140:
                    return this.subquerySpecification(subDmlFlags);
                case 191:
                    return this.subqueryParenthesis(subDmlFlags);
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public QuerySpecification subquerySpecification(SubDmlFlags subDmlFlags) {
            QuerySpecification querySpecification = base.FragmentFactory.CreateFragment<QuerySpecification>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(140);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(querySpecification, token);
            }
            this.uniqueRowFilterOpt(querySpecification);
            switch (this.LA(1)) {
                case 152: {
                        TopRowFilter topRowFilter = this.topRowFilter();
                        if (base.inputState.guessing == 0) {
                            querySpecification.TopRowFilter = topRowFilter;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 79:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 163:
                case 187:
                case 191:
                case 193:
                case 195:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                    break;
            }
            SelectElement item = this.selectColumnOrStarExpression();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(querySpecification, querySpecification.SelectElements, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.selectColumnOrStarExpression();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(querySpecification, querySpecification.SelectElements, item);
                }
            }
            FromClause fromClause = this.fromClauseOpt(subDmlFlags);
            if (base.inputState.guessing == 0) {
                querySpecification.FromClause = fromClause;
            }
            switch (this.LA(1)) {
                case 169: {
                        WhereClause whereClause = this.whereClause();
                        if (base.inputState.guessing == 0) {
                            querySpecification.WhereClause = whereClause;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 1:
                case 35:
                case 49:
                case 59:
                case 67:
                case 75:
                case 76:
                case 77:
                case 87:
                case 113:
                case 132:
                case 158:
                case 171:
                case 192:
                case 204:
                case 219:
                    break;
            }
            switch (this.LA(1)) {
                case 76: {
                        GroupByClause groupByClause = this.groupByClause();
                        if (base.inputState.guessing == 0) {
                            querySpecification.GroupByClause = groupByClause;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 1:
                case 35:
                case 49:
                case 59:
                case 67:
                case 75:
                case 77:
                case 87:
                case 113:
                case 132:
                case 158:
                case 171:
                case 192:
                case 204:
                case 219:
                    break;
            }
            switch (this.LA(1)) {
                case 77: {
                        HavingClause havingClause = this.havingClause();
                        if (base.inputState.guessing == 0) {
                            querySpecification.HavingClause = havingClause;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 1:
                case 35:
                case 49:
                case 59:
                case 67:
                case 75:
                case 87:
                case 113:
                case 132:
                case 158:
                case 171:
                case 192:
                case 204:
                case 219:
                    break;
            }
            switch (this.LA(1)) {
                case 113: {
                        OrderByClause orderByClause = this.orderByClause();
                        if (base.inputState.guessing == 0) {
                            querySpecification.OrderByClause = orderByClause;
                        }
                        switch (this.LA(1)) {
                            case 232: {
                                    OffsetClause offsetClause = this.offsetClause();
                                    if (base.inputState.guessing == 0) {
                                        querySpecification.OffsetClause = offsetClause;
                                    }
                                    break;
                                }
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 1:
                            case 35:
                            case 49:
                            case 59:
                            case 67:
                            case 75:
                            case 87:
                            case 132:
                            case 158:
                            case 171:
                            case 192:
                            case 204:
                            case 219:
                                break;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 1:
                case 35:
                case 49:
                case 59:
                case 67:
                case 75:
                case 87:
                case 132:
                case 158:
                case 171:
                case 192:
                case 204:
                case 219:
                    break;
            }
            if (this.LA(1) == 67 && this.LA(2) == 16 && this.LA(1) == 67 && this.LA(2) == 16) {
                this.match(67);
                BrowseForClause forClause = this.browseForClause();
                if (base.inputState.guessing == 0) {
                    querySpecification.ForClause = forClause;
                }
                goto IL_082c;
            }
            if (TSql140ParserInternal.tokenSet_106_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_1_.member(this.LA(2))) {
                goto IL_082c;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_082c:
            switch (this.LA(1)) {
                case 67:
                    token2 = this.LT(1);
                    this.match(67);
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("XML")) {
                        XmlForClause forClause2 = this.xmlForClause();
                        if (base.inputState.guessing == 0) {
                            if (querySpecification.ForClause != null) {
                                TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token2);
                            }
                            querySpecification.ForClause = forClause2;
                        }
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("JSON")) {
                        JsonForClause forClause3 = this.jsonForClause();
                        if (base.inputState.guessing == 0) {
                            if (querySpecification.ForClause != null) {
                                TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token2);
                            }
                            querySpecification.ForClause = forClause3;
                        }
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 1:
                case 35:
                case 49:
                case 59:
                case 75:
                case 87:
                case 132:
                case 158:
                case 171:
                case 192:
                case 204:
                case 219:
                    break;
            }
            if (base.inputState.guessing == 0) {
                if (querySpecification.OrderByClause != null && querySpecification.TopRowFilter == null && querySpecification.ForClause == null && querySpecification.OffsetClause == null) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46047", querySpecification, TSqlParserResource.SQL46047Message);
                }
                if (querySpecification.TopRowFilter != null && querySpecification.TopRowFilter.WithTies && querySpecification.OrderByClause == null) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46048", querySpecification, TSqlParserResource.SQL46048Message);
                }
            }
            return querySpecification;
        }

        public QueryParenthesisExpression subqueryParenthesis(SubDmlFlags subDmlFlags) {
            QueryParenthesisExpression queryParenthesisExpression = base.FragmentFactory.CreateFragment<QueryParenthesisExpression>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(191);
            QueryExpression queryExpression = this.subqueryExpression(subDmlFlags);
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(queryParenthesisExpression, token);
                queryParenthesisExpression.QueryExpression = queryExpression;
                TSql80ParserBaseInternal.UpdateTokenInfo(queryParenthesisExpression, token2);
            }
            return queryParenthesisExpression;
        }

        public QueryExpression queryExpressionUnit(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement) {
            QueryExpression queryExpression = null;
            switch (this.LA(1)) {
                case 140:
                    return this.querySpecification(subDmlFlags, vSelectStatement);
                case 191:
                    return this.queryParenthesis(subDmlFlags, vSelectStatement);
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public QuerySpecification querySpecification(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement) {
            QuerySpecification querySpecification = base.FragmentFactory.CreateFragment<QuerySpecification>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(140);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(querySpecification, token);
            }
            this.uniqueRowFilterOpt(querySpecification);
            switch (this.LA(1)) {
                case 152: {
                        TopRowFilter topRowFilter = this.topRowFilter();
                        if (base.inputState.guessing == 0) {
                            querySpecification.TopRowFilter = topRowFilter;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 79:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 163:
                case 187:
                case 191:
                case 193:
                case 195:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                    break;
            }
            this.selectExpression(querySpecification);
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                this.selectExpression(querySpecification);
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 88: {
                            token2 = this.LT(1);
                            this.match(88);
                            SchemaObjectName into = this.schemaObjectThreePartName();
                            if (base.inputState.guessing == 0) {
                                if (vSelectStatement == null) {
                                    TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token2);
                                }
                                vSelectStatement.Into = into;
                            }
                            goto IL_057e;
                        }
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 59:
                    case 60:
                    case 61:
                    case 64:
                    case 67:
                    case 71:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 82:
                    case 86:
                    case 87:
                    case 92:
                    case 95:
                        goto IL_057e;
                }
            } else {
                switch (num) {
                    case 105:
                    case 106:
                    case 111:
                    case 113:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 158:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_057e;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_08a8:
            FromClause fromClause = this.fromClauseOpt(subDmlFlags);
            if (base.inputState.guessing == 0) {
                querySpecification.FromClause = fromClause;
            }
            int num2 = this.LA(1);
            if (num2 <= 92) {
                switch (num2) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 59:
                    case 60:
                    case 61:
                    case 64:
                    case 67:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 82:
                    case 86:
                    case 87:
                    case 92:
                        goto IL_0bba;
                }
            } else {
                switch (num2) {
                    case 169: {
                            WhereClause whereClause = this.whereClause();
                            if (base.inputState.guessing == 0) {
                                querySpecification.WhereClause = whereClause;
                            }
                            goto IL_0bba;
                        }
                    case 95:
                    case 106:
                    case 111:
                    case 113:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 158:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0bba;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0ea1:
            int num3 = this.LA(1);
            if (num3 <= 92) {
                switch (num3) {
                    case 77: {
                            HavingClause havingClause = this.havingClause();
                            if (base.inputState.guessing == 0) {
                                querySpecification.HavingClause = havingClause;
                            }
                            goto IL_117d;
                        }
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 59:
                    case 60:
                    case 61:
                    case 64:
                    case 67:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 87:
                    case 92:
                        goto IL_117d;
                }
            } else {
                switch (num3) {
                    case 95:
                    case 106:
                    case 111:
                    case 113:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 158:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_117d;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_057e:
            int num4 = this.LA(1);
            if (num4 <= 92) {
                switch (num4) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 59:
                    case 60:
                    case 61:
                    case 64:
                    case 67:
                    case 71:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 82:
                    case 86:
                    case 87:
                    case 92:
                        goto IL_08a8;
                }
            } else {
                switch (num4) {
                    case 105: {
                            token3 = this.LT(1);
                            this.match(105);
                            Identifier on = this.identifier();
                            if (base.inputState.guessing == 0) {
                                if (vSelectStatement == null) {
                                    TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token3);
                                }
                                if (vSelectStatement.Into == null) {
                                    TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token3);
                                }
                                vSelectStatement.On = on;
                            }
                            goto IL_08a8;
                        }
                    case 95:
                    case 106:
                    case 111:
                    case 113:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 158:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_08a8;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0bba:
            int num5 = this.LA(1);
            if (num5 <= 95) {
                switch (num5) {
                    case 76: {
                            GroupByClause groupByClause = this.groupByClause();
                            if (base.inputState.guessing == 0) {
                                querySpecification.GroupByClause = groupByClause;
                            }
                            goto IL_0ea1;
                        }
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 59:
                    case 60:
                    case 61:
                    case 64:
                    case 67:
                    case 74:
                    case 75:
                    case 77:
                    case 82:
                    case 86:
                    case 87:
                    case 92:
                    case 95:
                        goto IL_0ea1;
                }
            } else {
                switch (num5) {
                    case 106:
                    case 111:
                    case 113:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 158:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0ea1;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_117d:
            return querySpecification;
        }

        public QueryParenthesisExpression queryParenthesis(SubDmlFlags subDmlFlags, SelectStatement vSelectStatement) {
            QueryParenthesisExpression queryParenthesisExpression = base.FragmentFactory.CreateFragment<QueryParenthesisExpression>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(191);
            QueryExpression queryExpression = this.queryExpression(subDmlFlags, vSelectStatement);
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(queryParenthesisExpression, token);
                queryParenthesisExpression.QueryExpression = queryExpression;
                TSql80ParserBaseInternal.UpdateTokenInfo(queryParenthesisExpression, token2);
            }
            return queryParenthesisExpression;
        }

        public void uniqueRowFilterOpt(QuerySpecification vParent) {
            switch (this.LA(1)) {
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 79:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 152:
                case 163:
                case 187:
                case 191:
                case 193:
                case 195:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                    break;
                case 5:
                case 51: {
                        IToken token = default(IToken);
                        UniqueRowFilter uniqueRowFilter = this.uniqueRowFilter(out token);
                        if (base.inputState.guessing == 0) {
                            vParent.UniqueRowFilter = uniqueRowFilter;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public TopRowFilter topRowFilter() {
            TopRowFilter topRowFilter = base.FragmentFactory.CreateFragment<TopRowFilter>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(152);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(topRowFilter, token);
            }
            ScalarExpression scalarExpression;
            switch (this.LA(1)) {
                case 221:
                case 222:
                case 223:
                    scalarExpression = this.integerOrRealOrNumeric();
                    break;
                case 191:
                    scalarExpression = this.parenthesisDisambiguatorForExpressions(ExpressionFlags.None);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                topRowFilter.Expression = scalarExpression;
            }
            switch (this.LA(1)) {
                case 116:
                    token2 = this.LT(1);
                    this.match(116);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.ThrowIfPercentValueOutOfRange(scalarExpression);
                        TSql80ParserBaseInternal.UpdateTokenInfo(topRowFilter, token2);
                        topRowFilter.Percent = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 79:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 163:
                case 171:
                case 187:
                case 191:
                case 193:
                case 195:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                    break;
            }
            switch (this.LA(1)) {
                case 171:
                    this.match(171);
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token3, "TIES");
                        TSql80ParserBaseInternal.UpdateTokenInfo(topRowFilter, token3);
                        topRowFilter.WithTies = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 79:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 163:
                case 187:
                case 191:
                case 193:
                case 195:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                    break;
            }
            return topRowFilter;
        }

        public SelectElement selectColumnOrStarExpression() {
            bool flag = false;
            if (TSql140ParserInternal.tokenSet_107_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_108_.member(this.LA(2))) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.selectStarExpression();
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                return this.selectStarExpression();
            }
            if (TSql140ParserInternal.tokenSet_109_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_110_.member(this.LA(2))) {
                return this.selectColumn();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public FromClause fromClauseOpt(SubDmlFlags subDmlFlags) {
            FromClause result = null;
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 71:
                        result = this.fromClause(subDmlFlags);
                        goto IL_02c4;
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 59:
                    case 60:
                    case 61:
                    case 64:
                    case 67:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 82:
                    case 86:
                    case 87:
                    case 92:
                        goto IL_02c4;
                }
            } else {
                switch (num) {
                    case 95:
                    case 106:
                    case 111:
                    case 113:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 158:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_02c4;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_02c4:
            return result;
        }

        public WhereClause whereClause() {
            WhereClause whereClause = base.FragmentFactory.CreateFragment<WhereClause>();
            IToken token = null;
            token = this.LT(1);
            this.match(169);
            BooleanExpression searchCondition = this.booleanExpressionWithFlags(ExpressionFlags.MatchClauseAllowed);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(whereClause, token);
                whereClause.SearchCondition = searchCondition;
            }
            return whereClause;
        }

        public GroupByClause groupByClause() {
            GroupByClause groupByClause = base.FragmentFactory.CreateFragment<GroupByClause>();
            IToken token = null;
            IToken token2 = null;
            bool flag = false;
            token = this.LT(1);
            this.match(76);
            this.match(18);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(groupByClause, token);
            }
            switch (this.LA(1)) {
                case 5:
                    this.match(5);
                    if (base.inputState.guessing == 0) {
                        groupByClause.All = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 163:
                case 187:
                case 191:
                case 193:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                    break;
            }
            GroupingSpecification item = this.groupByItem(groupByClause.All, ref flag);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(groupByClause, groupByClause.GroupingSpecifications, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.groupByItem(groupByClause.All, ref flag);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(groupByClause, groupByClause.GroupingSpecifications, item);
                }
            }
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    if (groupByClause.All) {
                        TSql80ParserBaseInternal.ThrowParseErrorException("SQL46084", token2, TSqlParserResource.SQL46084Message);
                    }
                    if (flag) {
                        TSql80ParserBaseInternal.ThrowParseErrorException("SQL46085", token2, TSqlParserResource.SQL46085Message);
                    }
                    TSql80ParserBaseInternal.UpdateTokenInfo(groupByClause, token2);
                    groupByClause.GroupByOption = GroupByOptionHelper.Instance.ParseOption(token2);
                }
                goto IL_0360;
            }
            if (TSql140ParserInternal.tokenSet_111_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_1_.member(this.LA(2))) {
                goto IL_0360;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0360:
            return groupByClause;
        }

        public HavingClause havingClause() {
            HavingClause havingClause = base.FragmentFactory.CreateFragment<HavingClause>();
            IToken token = null;
            token = this.LT(1);
            this.match(77);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(havingClause, token);
            }
            BooleanExpression searchCondition = this.booleanExpression();
            if (base.inputState.guessing == 0) {
                havingClause.SearchCondition = searchCondition;
            }
            return havingClause;
        }

        public BrowseForClause browseForClause() {
            BrowseForClause browseForClause = base.FragmentFactory.CreateFragment<BrowseForClause>();
            IToken token = null;
            token = this.LT(1);
            this.match(16);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(browseForClause, token);
            }
            return browseForClause;
        }

        public XmlForClause xmlForClause() {
            XmlForClause xmlForClause = base.FragmentFactory.CreateFragment<XmlForClause>();
            IToken token = null;
            XmlForClauseOptions xmlForClauseOptions = XmlForClauseOptions.None;
            token = this.LT(1);
            this.match(232);
            XmlForClauseOption item = this.xmlForClauseMode();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "XML");
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(xmlForClause, xmlForClause.Options, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.xmlParam(xmlForClauseOptions);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(xmlForClause, xmlForClause.Options, item);
                    xmlForClauseOptions |= item.OptionKind;
                }
            }
            return xmlForClause;
        }

        public JsonForClause jsonForClause() {
            JsonForClause jsonForClause = base.FragmentFactory.CreateFragment<JsonForClause>();
            IToken token = null;
            JsonForClauseOptions jsonForClauseOptions = JsonForClauseOptions.None;
            token = this.LT(1);
            this.match(232);
            JsonForClauseOption item = this.jsonForClauseMode();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "JSON");
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(jsonForClause, jsonForClause.Options, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.jsonParam(jsonForClauseOptions);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(jsonForClause, jsonForClause.Options, item);
                    jsonForClauseOptions |= item.OptionKind;
                }
            }
            return jsonForClause;
        }

        public void selectExpression(QuerySpecification vParent) {
            bool flag = false;
            if (this.LA(1) == 234 && TSql140ParserInternal.tokenSet_100_.member(this.LA(2))) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(234);
                    this.assignmentWithOptOp();
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                SelectSetVariable item = this.selectSetVariable();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.SelectElements, item);
                }
                return;
            }
            bool flag2 = false;
            if (TSql140ParserInternal.tokenSet_107_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_112_.member(this.LA(2))) {
                int pos2 = this.mark();
                flag2 = true;
                base.inputState.guessing++;
                try {
                    this.selectStarExpression();
                } catch (RecognitionException) {
                    flag2 = false;
                }
                this.rewind(pos2);
                base.inputState.guessing--;
            }
            if (flag2) {
                SelectStarExpression item2 = this.selectStarExpression();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.SelectElements, item2);
                }
                return;
            }
            if (TSql140ParserInternal.tokenSet_109_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_113_.member(this.LA(2))) {
                SelectScalarExpression item3 = this.selectColumn();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.SelectElements, item3);
                }
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public UniqueRowFilter uniqueRowFilter(out IToken token) {
            UniqueRowFilter result = UniqueRowFilter.NotSpecified;
            IToken token2 = null;
            IToken token3 = null;
            token = null;
            switch (this.LA(1)) {
                case 5:
                    token2 = this.LT(1);
                    this.match(5);
                    if (base.inputState.guessing == 0) {
                        result = UniqueRowFilter.All;
                        token = token2;
                    }
                    break;
                case 51:
                    token3 = this.LT(1);
                    this.match(51);
                    if (base.inputState.guessing == 0) {
                        result = UniqueRowFilter.Distinct;
                        token = token3;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public PrimaryExpression parenthesisDisambiguatorForExpressions(ExpressionFlags expressionFlags) {
            if (this.LA(1) == 191 && (this.LA(2) == 140 || this.LA(2) == 191) && base.IsNextRuleSelectParenthesis()) {
                return this.subquery(SubDmlFlags.SelectNotForInsert, expressionFlags);
            }
            if (this.LA(1) == 191 && TSql140ParserInternal.tokenSet_42_.member(this.LA(2))) {
                return this.expressionParenthesis(expressionFlags);
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public TopRowFilter dmlTopRowFilter() {
            TopRowFilter topRowFilter = base.FragmentFactory.CreateFragment<TopRowFilter>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(152);
            ScalarExpression expression = this.parenthesisDisambiguatorForExpressions(ExpressionFlags.None);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(topRowFilter, token);
                topRowFilter.Expression = expression;
            }
            switch (this.LA(1)) {
                case 116:
                    token2 = this.LT(1);
                    this.match(116);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(topRowFilter, token2);
                        topRowFilter.Percent = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 71:
                case 88:
                case 107:
                case 108:
                case 109:
                case 115:
                case 200:
                case 232:
                case 233:
                case 234:
                    break;
            }
            return topRowFilter;
        }

        public void dmlTopRowFilterOpt(DataModificationSpecification vParent) {
            switch (this.LA(1)) {
                case 71:
                case 88:
                case 107:
                case 108:
                case 109:
                case 115:
                case 200:
                case 232:
                case 233:
                case 234:
                    break;
                case 152: {
                        TopRowFilter topRowFilter = this.dmlTopRowFilter();
                        if (base.inputState.guessing == 0) {
                            vParent.TopRowFilter = topRowFilter;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public SelectSetVariable selectSetVariable() {
            SelectSetVariable selectSetVariable = base.FragmentFactory.CreateFragment<SelectSetVariable>();
            VariableReference variable = this.variable();
            AssignmentKind assignmentKind = this.assignmentWithOptOp();
            ScalarExpression expression = this.expression();
            if (base.inputState.guessing == 0) {
                selectSetVariable.Variable = variable;
                selectSetVariable.Expression = expression;
                selectSetVariable.AssignmentKind = assignmentKind;
            }
            return selectSetVariable;
        }

        public SelectStarExpression selectStarExpression() {
            SelectStarExpression selectStarExpression = base.FragmentFactory.CreateFragment<SelectStarExpression>();
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 200:
                case 232:
                case 233: {
                        MultiPartIdentifier qualifier = this.multiPartIdentifier(-1);
                        if (base.inputState.guessing == 0) {
                            selectStarExpression.Qualifier = qualifier;
                        }
                        this.match(200);
                        token = this.LT(1);
                        this.match(195);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(selectStarExpression, token);
                        }
                        break;
                    }
                case 195:
                    token2 = this.LT(1);
                    this.match(195);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(selectStarExpression, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckStarQualifier(selectStarExpression);
            }
            return selectStarExpression;
        }

        public SelectScalarExpression selectColumn() {
            SelectScalarExpression selectScalarExpression = base.FragmentFactory.CreateFragment<SelectScalarExpression>();
            if (TSql140ParserInternal.tokenSet_109_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_114_.member(this.LA(2))) {
                ScalarExpression expression = this.selectColumnExpression();
                if (base.inputState.guessing == 0) {
                    selectScalarExpression.Expression = expression;
                }
                if (TSql140ParserInternal.tokenSet_115_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_116_.member(this.LA(2))) {
                    switch (this.LA(1)) {
                        case 9:
                            this.match(9);
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                        case 230:
                        case 231:
                        case 232:
                        case 233:
                            break;
                    }
                    IdentifierOrValueExpression columnName = this.stringOrIdentifier();
                    if (base.inputState.guessing == 0) {
                        selectScalarExpression.ColumnName = columnName;
                    }
                    goto IL_01a0;
                }
                if (TSql140ParserInternal.tokenSet_117_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_105_.member(this.LA(2))) {
                    goto IL_01a0;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (this.LA(1) >= 230 && this.LA(1) <= 233 && this.LA(2) == 206) {
                IdentifierOrValueExpression columnName = this.stringOrIdentifier();
                if (base.inputState.guessing == 0) {
                    selectScalarExpression.ColumnName = columnName;
                }
                this.match(206);
                ScalarExpression expression = this.selectColumnExpression();
                if (base.inputState.guessing == 0) {
                    selectScalarExpression.Expression = expression;
                }
                goto IL_01a0;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_01a0:
            return selectScalarExpression;
        }

        public SelectElement outputClauseSelectElement() {
            bool flag = false;
            if (TSql140ParserInternal.tokenSet_107_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_118_.member(this.LA(2))) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.selectStarExpression();
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                return this.selectStarExpression();
            }
            if (TSql140ParserInternal.tokenSet_42_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_119_.member(this.LA(2))) {
                return this.outputClauseSelectColumn();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public SelectScalarExpression outputClauseSelectColumn() {
            SelectScalarExpression selectScalarExpression = base.FragmentFactory.CreateFragment<SelectScalarExpression>();
            ScalarExpression expression = this.expression();
            if (base.inputState.guessing == 0) {
                selectScalarExpression.Expression = expression;
            }
            if (TSql140ParserInternal.tokenSet_115_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_120_.member(this.LA(2))) {
                switch (this.LA(1)) {
                    case 9:
                        this.match(9);
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    case 230:
                    case 231:
                    case 232:
                    case 233:
                        break;
                }
                IdentifierOrValueExpression columnName = this.stringOrIdentifier();
                if (base.inputState.guessing == 0) {
                    selectScalarExpression.ColumnName = columnName;
                }
                goto IL_00eb;
            }
            if (TSql140ParserInternal.tokenSet_121_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_122_.member(this.LA(2))) {
                goto IL_00eb;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00eb:
            return selectScalarExpression;
        }

        public ScalarExpression selectColumnExpression() {
            ScalarExpression scalarExpression = null;
            switch (this.LA(1)) {
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 163:
                case 187:
                case 191:
                case 193:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                    return this.expression();
                case 79:
                    return this.identityFunction();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public IdentityFunctionCall identityFunction() {
            IdentityFunctionCall identityFunctionCall = base.FragmentFactory.CreateFragment<IdentityFunctionCall>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(79);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(identityFunctionCall, token);
            }
            this.match(191);
            DataTypeReference dataType = this.scalarDataType();
            if (base.inputState.guessing == 0) {
                identityFunctionCall.DataType = dataType;
            }
            switch (this.LA(1)) {
                case 198: {
                        this.match(198);
                        ScalarExpression seed = this.seedIncrement();
                        if (base.inputState.guessing == 0) {
                            identityFunctionCall.Seed = seed;
                        }
                        this.match(198);
                        seed = this.seedIncrement();
                        if (base.inputState.guessing == 0) {
                            identityFunctionCall.Increment = seed;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(identityFunctionCall, token2);
            }
            return identityFunctionCall;
        }

        public ScalarExpression seedIncrement() {
            ScalarExpression result = null;
            IToken token = null;
            IToken token2 = null;
            UnaryExpression unaryExpression = null;
            switch (this.LA(1)) {
                case 199:
                    token = this.LT(1);
                    this.match(199);
                    if (base.inputState.guessing == 0) {
                        unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
                        TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token);
                        unaryExpression.UnaryExpressionType = UnaryExpressionType.Negative;
                    }
                    break;
                case 197:
                    token2 = this.LT(1);
                    this.match(197);
                    if (base.inputState.guessing == 0) {
                        unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
                        TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token2);
                        unaryExpression.UnaryExpressionType = UnaryExpressionType.Positive;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 221:
                case 222:
                    break;
            }
            Literal literal = this.integerOrNumeric();
            if (base.inputState.guessing == 0) {
                if (unaryExpression == null) {
                    result = literal;
                } else {
                    unaryExpression.Expression = literal;
                    result = unaryExpression;
                }
            }
            return result;
        }

        public TableSampleClause tableSampleClause() {
            TableSampleClause tableSampleClause = base.FragmentFactory.CreateFragment<TableSampleClause>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            token = this.LT(1);
            this.match(179);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tableSampleClause, token);
            }
            switch (this.LA(1)) {
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "SYSTEM");
                        tableSampleClause.System = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 191:
                    break;
            }
            this.match(191);
            ScalarExpression sampleNumber = this.expression();
            if (base.inputState.guessing == 0) {
                tableSampleClause.SampleNumber = sampleNumber;
            }
            switch (this.LA(1)) {
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token3, "ROWS");
                        tableSampleClause.TableSampleClauseOption = TableSampleClauseOption.Rows;
                    }
                    break;
                case 116:
                    this.match(116);
                    if (base.inputState.guessing == 0) {
                        tableSampleClause.TableSampleClauseOption = TableSampleClauseOption.Percent;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token4 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tableSampleClause, token4);
            }
            if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("REPEATABLE")) {
                this.LT(1);
                this.match(232);
                this.match(191);
                sampleNumber = this.expression();
                if (base.inputState.guessing == 0) {
                    tableSampleClause.RepeatSeed = sampleNumber;
                }
                token5 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(tableSampleClause, token5);
                }
                goto IL_0243;
            }
            if (TSql140ParserInternal.tokenSet_123_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_105_.member(this.LA(2))) {
                goto IL_0243;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0243:
            return tableSampleClause;
        }

        public FromClause fromClause(SubDmlFlags subDmlFlags) {
            FromClause fromClause = base.FragmentFactory.CreateFragment<FromClause>();
            IToken token = null;
            token = this.LT(1);
            this.match(71);
            TableReference item = this.selectTableReferenceWithOdbc(subDmlFlags);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(fromClause, token);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(fromClause, fromClause.TableReferences, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.selectTableReferenceWithOdbc(subDmlFlags);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(fromClause, fromClause.TableReferences, item);
                }
            }
            return fromClause;
        }

        public TableReference selectTableReferenceWithOdbc(SubDmlFlags subDmlFlags) {
            switch (this.LA(1)) {
                case 32:
                case 70:
                case 107:
                case 108:
                case 109:
                case 110:
                case 184:
                case 185:
                case 186:
                case 191:
                case 200:
                case 203:
                case 232:
                case 233:
                case 234:
                    return this.selectTableReference(subDmlFlags);
                case 193:
                case 235:
                    return this.odbcQualifiedJoin(subDmlFlags);
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public TemporalClause temporalClause() {
            TemporalClause temporalClause = null;
            IToken token = null;
            ScalarExpression startTime = null;
            ScalarExpression endTime = null;
            TemporalClauseType temporalClauseType = TemporalClauseType.AsOf;
            this.match(67);
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SYSTEM_TIME");
            }
            switch (this.LA(1)) {
                case 9:
                    this.match(9);
                    this.match(102);
                    startTime = this.stringLiteralOrVariable();
                    if (base.inputState.guessing == 0) {
                        temporalClauseType = TemporalClauseType.AsOf;
                    }
                    break;
                case 71:
                    this.match(71);
                    startTime = this.stringLiteralOrVariable();
                    this.match(151);
                    endTime = this.stringLiteralOrVariable();
                    if (base.inputState.guessing == 0) {
                        temporalClauseType = TemporalClauseType.FromTo;
                    }
                    break;
                case 14:
                    this.match(14);
                    startTime = this.stringLiteralOrVariable();
                    this.match(7);
                    endTime = this.stringLiteralOrVariable();
                    if (base.inputState.guessing == 0) {
                        temporalClauseType = TemporalClauseType.Between;
                    }
                    break;
                case 5:
                    this.match(5);
                    if (base.inputState.guessing == 0) {
                        temporalClauseType = TemporalClauseType.TemporalAll;
                    }
                    break;
                default:
                    if (this.LA(1) == 232 && base.NextTokenMatches("CONTAINED")) {
                        this.LT(1);
                        this.match(232);
                        this.match(83);
                        this.match(191);
                        startTime = this.stringLiteralOrVariable();
                        this.match(198);
                        endTime = this.stringLiteralOrVariable();
                        this.match(192);
                        if (base.inputState.guessing == 0) {
                            temporalClauseType = TemporalClauseType.ContainedIn;
                        }
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                TemporalClause temporalClause2 = new TemporalClause();
                temporalClause2.TemporalClauseType = temporalClauseType;
                temporalClause = temporalClause2;
                if (temporalClauseType != TemporalClauseType.TemporalAll) {
                    temporalClause.StartTime = startTime;
                    if (temporalClauseType != 0) {
                        temporalClause.EndTime = endTime;
                    }
                }
            }
            return temporalClause;
        }

        public ValueExpression stringLiteralOrVariable() {
            ValueExpression result = null;
            switch (this.LA(1)) {
                case 230:
                case 231: {
                        ValueExpression valueExpression2 = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            result = valueExpression2;
                        }
                        break;
                    }
                case 234: {
                        ValueExpression valueExpression = this.variable();
                        if (base.inputState.guessing == 0) {
                            result = valueExpression;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public TableReference selectTableReference(SubDmlFlags subDmlFlags) {
            TableReference result = this.selectTableReferenceElement(subDmlFlags);
            while (true) {
                if (!TSql140ParserInternal.tokenSet_124_.member(this.LA(1))) {
                    break;
                }
                this.selectTableReferenceAdditionalElement(subDmlFlags, ref result);
            }
            return result;
        }

        public OdbcQualifiedJoinTableReference odbcQualifiedJoin(SubDmlFlags subDmlFlags) {
            OdbcQualifiedJoinTableReference odbcQualifiedJoinTableReference = base.FragmentFactory.CreateFragment<OdbcQualifiedJoinTableReference>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            switch (this.LA(1)) {
                case 193:
                    token = this.LT(1);
                    this.match(193);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(odbcQualifiedJoinTableReference, token);
                    }
                    break;
                case 235:
                    this.odbcInitiator();
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "OJ");
            }
            TableReference tableReference;
            switch (this.LA(1)) {
                case 193:
                case 235:
                    tableReference = this.odbcQualifiedJoin(subDmlFlags);
                    break;
                case 32:
                case 70:
                case 107:
                case 108:
                case 109:
                case 110:
                case 184:
                case 185:
                case 186:
                case 191:
                case 200:
                case 203:
                case 232:
                case 233:
                case 234:
                    tableReference = this.selectTableReference(subDmlFlags);
                    if (base.inputState.guessing == 0 && !(tableReference is QualifiedJoin)) {
                        TSql80ParserBaseInternal.ThrowParseErrorException("SQL46035", token, TSqlParserResource.SQL46035Message);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                odbcQualifiedJoinTableReference.TableReference = tableReference;
            }
            token3 = this.LT(1);
            this.match(194);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(odbcQualifiedJoinTableReference, token3);
            }
            return odbcQualifiedJoinTableReference;
        }

        public TableReference selectTableReferenceElement(SubDmlFlags subDmlFlags) {
            TableReference tableReference = null;
            bool flag = false;
            if (this.LA(1) == 191 && TSql140ParserInternal.tokenSet_125_.member(this.LA(2))) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.joinParenthesis(subDmlFlags);
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                return this.joinParenthesis(subDmlFlags);
            }
            if (TSql140ParserInternal.tokenSet_125_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_126_.member(this.LA(2))) {
                return this.selectTableReferenceElementWithoutJoinParenthesis(subDmlFlags);
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void selectTableReferenceAdditionalElement(SubDmlFlags subDmlFlags, ref TableReference vResult) {
            switch (this.LA(1)) {
                case 36:
                case 72:
                case 85:
                case 90:
                case 93:
                case 114:
                case 133:
                    this.joinElement(subDmlFlags, ref vResult);
                    break;
                case 177:
                    this.pivotedTableReference(ref vResult);
                    break;
                case 178:
                    this.unpivotedTableReference(ref vResult);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void odbcInitiator() {
            IToken token = null;
            token = this.LT(1);
            this.match(235);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.ThrowParseErrorException("SQL46036", token, TSqlParserResource.SQL46036Message);
            }
        }

        public OdbcConvertSpecification odbcConvertSpecification() {
            OdbcConvertSpecification odbcConvertSpecification = base.FragmentFactory.CreateFragment<OdbcConvertSpecification>();
            Identifier identifier = this.nonQuotedIdentifier();
            if (base.inputState.guessing == 0) {
                odbcConvertSpecification.Identifier = identifier;
            }
            return odbcConvertSpecification;
        }

        public ExtractFromExpression extractFromExpression() {
            ExtractFromExpression extractFromExpression = base.FragmentFactory.CreateFragment<ExtractFromExpression>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(191);
            Identifier extractedElement = this.identifier();
            this.match(71);
            ScalarExpression expression = this.expression();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "EXTRACT");
                extractFromExpression.Expression = expression;
                extractFromExpression.ExtractedElement = extractedElement;
            }
            this.match(192);
            return extractFromExpression;
        }

        public OdbcFunctionCall odbcFunctionCall() {
            OdbcFunctionCall odbcFunctionCall = base.FragmentFactory.CreateFragment<OdbcFunctionCall>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
            odbcFunctionCall.ParametersUsed = true;
            token = this.LT(1);
            this.match(193);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(odbcFunctionCall, token);
            }
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "FN");
            }
            if (base.inputState.guessing == 0 && this.LA(1) != 1) {
                identifier.SetUnquotedIdentifier(this.LT(1).getText());
                odbcFunctionCall.Name = identifier;
            }
            switch (this.LA(1)) {
                case 34: {
                        this.match(34);
                        this.match(191);
                        ScalarExpression item = this.expression();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(odbcFunctionCall, odbcFunctionCall.Parameters, item);
                        }
                        this.match(198);
                        item = this.odbcConvertSpecification();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(odbcFunctionCall, odbcFunctionCall.Parameters, item);
                        }
                        this.match(192);
                        break;
                    }
                case 156: {
                        this.match(156);
                        this.match(191);
                        ScalarExpression item = this.expression();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(odbcFunctionCall, odbcFunctionCall.Parameters, item);
                        }
                        this.match(198);
                        item = this.expression();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(odbcFunctionCall, odbcFunctionCall.Parameters, item);
                        }
                        this.match(192);
                        break;
                    }
                case 38:
                case 43:
                case 163:
                    switch (this.LA(1)) {
                        case 43:
                            this.match(43);
                            break;
                        case 163:
                            this.match(163);
                            break;
                        case 38:
                            this.match(38);
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    this.match(191);
                    this.match(192);
                    break;
                case 86:
                case 93:
                case 133:
                    switch (this.LA(1)) {
                        case 86:
                            this.match(86);
                            break;
                        case 93:
                            this.match(93);
                            break;
                        case 133:
                            this.match(133);
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    this.match(191);
                    this.expressionList(odbcFunctionCall, odbcFunctionCall.Parameters);
                    this.match(192);
                    break;
                case 39:
                case 40:
                    switch (this.LA(1)) {
                        case 39:
                            this.match(39);
                            break;
                        case 40:
                            this.match(40);
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    switch (this.LA(1)) {
                        case 191:
                            this.match(191);
                            switch (this.LA(1)) {
                                case 20:
                                case 25:
                                case 34:
                                case 40:
                                case 41:
                                case 81:
                                case 93:
                                case 100:
                                case 101:
                                case 133:
                                case 136:
                                case 141:
                                case 147:
                                case 163:
                                case 187:
                                case 191:
                                case 193:
                                case 197:
                                case 199:
                                case 200:
                                case 211:
                                case 221:
                                case 222:
                                case 223:
                                case 224:
                                case 225:
                                case 227:
                                case 228:
                                case 230:
                                case 231:
                                case 232:
                                case 233:
                                case 234:
                                case 235:
                                    this.expressionList(odbcFunctionCall, odbcFunctionCall.Parameters);
                                    break;
                                default:
                                    throw new NoViableAltException(this.LT(1), this.getFilename());
                                case 192:
                                    break;
                            }
                            this.match(192);
                            break;
                        case 194:
                            if (base.inputState.guessing == 0) {
                                odbcFunctionCall.ParametersUsed = false;
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    break;
                default:
                    if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("EXTRACT")) {
                        ScalarExpression item = this.extractFromExpression();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(odbcFunctionCall, odbcFunctionCall.Parameters, item);
                        }
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 191) {
                        this.match(232);
                        this.match(191);
                        switch (this.LA(1)) {
                            case 20:
                            case 25:
                            case 34:
                            case 40:
                            case 41:
                            case 81:
                            case 93:
                            case 100:
                            case 101:
                            case 133:
                            case 136:
                            case 141:
                            case 147:
                            case 163:
                            case 187:
                            case 191:
                            case 193:
                            case 197:
                            case 199:
                            case 200:
                            case 211:
                            case 221:
                            case 222:
                            case 223:
                            case 224:
                            case 225:
                            case 227:
                            case 228:
                            case 230:
                            case 231:
                            case 232:
                            case 233:
                            case 234:
                            case 235:
                                this.expressionList(odbcFunctionCall, odbcFunctionCall.Parameters);
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 192:
                                break;
                        }
                        this.match(192);
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            token3 = this.LT(1);
            this.match(194);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(odbcFunctionCall, token3);
            }
            return odbcFunctionCall;
        }

        public TableReference joinTableReference(SubDmlFlags subDmlFlags) {
            TableReference result = null;
            IToken marker = null;
            bool flag = false;
            if (this.LA(1) == 191 && TSql140ParserInternal.tokenSet_125_.member(this.LA(2))) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    if (!base.SkipGuessing(marker)) {
                        result = this.joinParenthesis(subDmlFlags);
                    }
                    base.SaveGuessing(out marker);
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                if (!base.SkipGuessing(marker)) {
                    result = this.joinParenthesis(subDmlFlags);
                }
                while (true) {
                    if (!TSql140ParserInternal.tokenSet_127_.member(this.LA(1))) {
                        break;
                    }
                    this.joinElement(subDmlFlags, ref result);
                }
                goto IL_0135;
            }
            if (TSql140ParserInternal.tokenSet_125_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_128_.member(this.LA(2))) {
                result = this.selectTableReferenceElementWithoutJoinParenthesis(subDmlFlags);
                int num = 0;
                while (true) {
                    if (!TSql140ParserInternal.tokenSet_127_.member(this.LA(1))) {
                        break;
                    }
                    this.joinElement(subDmlFlags, ref result);
                    num++;
                }
                if (num < 1) {
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                goto IL_0135;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0135:
            return result;
        }

        public JoinParenthesisTableReference joinParenthesis(SubDmlFlags subDmlFlags) {
            JoinParenthesisTableReference joinParenthesisTableReference = base.FragmentFactory.CreateFragment<JoinParenthesisTableReference>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(191);
            TableReference join = this.joinTableReference(subDmlFlags);
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(joinParenthesisTableReference, token);
                joinParenthesisTableReference.Join = join;
                TSql80ParserBaseInternal.UpdateTokenInfo(joinParenthesisTableReference, token2);
            }
            return joinParenthesisTableReference;
        }

        public void joinElement(SubDmlFlags subDmlFlags, ref TableReference vResult) {
            switch (this.LA(1)) {
                case 36:
                case 114:
                    this.unqualifiedJoin(subDmlFlags, ref vResult);
                    break;
                case 72:
                case 85:
                case 90:
                case 93:
                case 133:
                    this.qualifiedJoin(subDmlFlags, ref vResult);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public TableReference selectTableReferenceElementWithoutJoinParenthesis(SubDmlFlags subDmlFlags) {
            TableReference tableReference = null;
            switch (this.LA(1)) {
                case 203:
                    return this.builtInFunctionTableReference();
                case 107:
                case 108:
                case 109:
                    return this.openRowset();
                case 32:
                case 70:
                    return this.fulltextTableReference();
                case 184:
                case 185:
                case 186:
                    return this.semanticTableReference();
                case 110:
                    return this.openXmlTableReference();
                default:
                    if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("CHANGETABLE")) {
                        return this.changeTableTableReference();
                    }
                    if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 191 && base.NextIdentifierMatchesOneOf("STRING_SPLIT")) {
                        return this.globalFunctionTableReference();
                    }
                    if (this.LA(1) == 234 && TSql140ParserInternal.tokenSet_129_.member(this.LA(2))) {
                        return this.variableTableReference();
                    }
                    if (this.LA(1) == 234 && this.LA(2) == 200) {
                        return this.variableMethodCallTableReference();
                    }
                    if (this.LA(1) == 191 && (this.LA(2) == 140 || this.LA(2) == 164 || this.LA(2) == 191)) {
                        return this.derivedTable(subDmlFlags);
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("OPENJSON")) {
                        return this.openJsonTableReference();
                    }
                    if (this.LA(1) == 191 && TSql140ParserInternal.tokenSet_130_.member(this.LA(2))) {
                        return this.subDmlTableReference(subDmlFlags);
                    }
                    if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_131_.member(this.LA(2))) {
                        return this.schemaObjectOrFunctionTableReference();
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void pivotedTableReference(ref TableReference vResult) {
            PivotedTableReference pivotedTableReference = base.FragmentFactory.CreateFragment<PivotedTableReference>();
            pivotedTableReference.TableReference = vResult;
            vResult = pivotedTableReference;
            this.match(177);
            this.match(191);
            MultiPartIdentifier aggregateFunctionIdentifier = this.multiPartIdentifier(4);
            if (base.inputState.guessing == 0) {
                pivotedTableReference.AggregateFunctionIdentifier = aggregateFunctionIdentifier;
            }
            this.match(191);
            ColumnReferenceExpression item = this.fixedColumn();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(pivotedTableReference, pivotedTableReference.ValueColumns, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.fixedColumn();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(pivotedTableReference, pivotedTableReference.ValueColumns, item);
                }
            }
            this.match(192);
            this.match(67);
            item = this.fixedColumn();
            if (base.inputState.guessing == 0) {
                pivotedTableReference.PivotColumn = item;
            }
            this.match(83);
            this.columnNameList(pivotedTableReference, pivotedTableReference.InColumns);
            this.match(192);
            this.simpleTableReferenceAlias(pivotedTableReference);
        }

        public void unpivotedTableReference(ref TableReference vResult) {
            UnpivotedTableReference unpivotedTableReference = base.FragmentFactory.CreateFragment<UnpivotedTableReference>();
            unpivotedTableReference.TableReference = vResult;
            vResult = unpivotedTableReference;
            this.match(178);
            this.match(191);
            Identifier valueColumn = this.identifier();
            if (base.inputState.guessing == 0) {
                unpivotedTableReference.ValueColumn = valueColumn;
            }
            this.match(67);
            valueColumn = this.identifier();
            if (base.inputState.guessing == 0) {
                unpivotedTableReference.PivotColumn = valueColumn;
            }
            this.match(83);
            this.columnListWithParenthesis(unpivotedTableReference, unpivotedTableReference.InColumns);
            this.match(192);
            this.simpleTableReferenceAlias(unpivotedTableReference);
        }

        public ColumnReferenceExpression fixedColumn() {
            ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
            columnReferenceExpression.ColumnType = ColumnType.Regular;
            MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(4);
            if (base.inputState.guessing == 0) {
                columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
                TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, false);
            }
            return columnReferenceExpression;
        }

        public void columnListWithParenthesis(TSqlFragment vParent, IList<ColumnReferenceExpression> columns) {
            IToken token = null;
            this.match(191);
            ColumnReferenceExpression item = this.fixedColumn();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, columns, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.fixedColumn();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, columns, item);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public void unqualifiedJoin(SubDmlFlags subDmlFlags, ref TableReference vResult) {
            IToken token = null;
            IToken token2 = null;
            UnqualifiedJoin unqualifiedJoin = base.FragmentFactory.CreateFragment<UnqualifiedJoin>();
            switch (this.LA(1)) {
                case 36:
                    this.match(36);
                    switch (this.LA(1)) {
                        case 90:
                            this.match(90);
                            if (base.inputState.guessing == 0) {
                                unqualifiedJoin.UnqualifiedJoinType = UnqualifiedJoinType.CrossJoin;
                            }
                            break;
                        case 232:
                            token = this.LT(1);
                            this.match(232);
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.Match(token, "APPLY");
                                unqualifiedJoin.UnqualifiedJoinType = UnqualifiedJoinType.CrossApply;
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    break;
                case 114:
                    this.match(114);
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "APPLY");
                        unqualifiedJoin.UnqualifiedJoinType = UnqualifiedJoinType.OuterApply;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            TableReference secondTableReference = this.selectTableReferenceElement(subDmlFlags);
            if (base.inputState.guessing == 0) {
                unqualifiedJoin.FirstTableReference = vResult;
                unqualifiedJoin.SecondTableReference = secondTableReference;
                vResult = unqualifiedJoin;
            }
        }

        public void qualifiedJoin(SubDmlFlags subDmlFlags, ref TableReference vResult) {
            QualifiedJoin qualifiedJoin = base.FragmentFactory.CreateFragment<QualifiedJoin>();
            switch (this.LA(1)) {
                case 90:
                    this.match(90);
                    if (base.inputState.guessing == 0) {
                        qualifiedJoin.QualifiedJoinType = QualifiedJoinType.Inner;
                    }
                    break;
                case 72:
                case 85:
                case 93:
                case 133:
                    switch (this.LA(1)) {
                        case 85:
                            this.match(85);
                            if (base.inputState.guessing == 0) {
                                qualifiedJoin.QualifiedJoinType = QualifiedJoinType.Inner;
                            }
                            break;
                        case 93:
                            this.match(93);
                            switch (this.LA(1)) {
                                case 114:
                                    this.match(114);
                                    break;
                                default:
                                    throw new NoViableAltException(this.LT(1), this.getFilename());
                                case 90:
                                case 182:
                                case 232:
                                    break;
                            }
                            if (base.inputState.guessing == 0) {
                                qualifiedJoin.QualifiedJoinType = QualifiedJoinType.LeftOuter;
                            }
                            break;
                        case 133:
                            this.match(133);
                            switch (this.LA(1)) {
                                case 114:
                                    this.match(114);
                                    break;
                                default:
                                    throw new NoViableAltException(this.LT(1), this.getFilename());
                                case 90:
                                case 182:
                                case 232:
                                    break;
                            }
                            if (base.inputState.guessing == 0) {
                                qualifiedJoin.QualifiedJoinType = QualifiedJoinType.RightOuter;
                            }
                            break;
                        case 72:
                            this.match(72);
                            switch (this.LA(1)) {
                                case 114:
                                    this.match(114);
                                    break;
                                default:
                                    throw new NoViableAltException(this.LT(1), this.getFilename());
                                case 90:
                                case 182:
                                case 232:
                                    break;
                            }
                            if (base.inputState.guessing == 0) {
                                qualifiedJoin.QualifiedJoinType = QualifiedJoinType.FullOuter;
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    switch (this.LA(1)) {
                        case 182:
                        case 232:
                            this.joinHint(qualifiedJoin);
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                        case 90:
                            break;
                    }
                    this.match(90);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            TableReference secondTableReference = this.selectTableReferenceWithOdbc(subDmlFlags);
            if (base.inputState.guessing == 0) {
                qualifiedJoin.FirstTableReference = vResult;
                qualifiedJoin.SecondTableReference = secondTableReference;
            }
            this.match(105);
            BooleanExpression searchCondition = this.booleanExpression();
            if (base.inputState.guessing == 0) {
                qualifiedJoin.SearchCondition = searchCondition;
                vResult = qualifiedJoin;
            }
        }

        public TableReferenceWithAliasAndColumns changeTableTableReference() {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(191);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CHANGETABLE");
            }
            token2 = this.LT(1);
            this.match(232);
            SchemaObjectName vTarget = this.schemaObjectFourPartName();
            this.match(198);
            TableReferenceWithAliasAndColumns tableReferenceWithAliasAndColumns;
            switch (this.LA(1)) {
                case 100:
                case 221:
                case 234:
                    tableReferenceWithAliasAndColumns = this.changesChangeTableParams(vTarget);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "CHANGES");
                    }
                    break;
                case 191:
                    tableReferenceWithAliasAndColumns = this.versionChangeTableParams(vTarget);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "VERSION");
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tableReferenceWithAliasAndColumns, token);
            }
            this.match(192);
            this.simpleTableReferenceAlias(tableReferenceWithAliasAndColumns);
            if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                this.columnNameList(tableReferenceWithAliasAndColumns, tableReferenceWithAliasAndColumns.Columns);
                goto IL_0183;
            }
            if (TSql140ParserInternal.tokenSet_104_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_105_.member(this.LA(2))) {
                goto IL_0183;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0183:
            return tableReferenceWithAliasAndColumns;
        }

        public BuiltInFunctionTableReference builtInFunctionTableReference() {
            BuiltInFunctionTableReference builtInFunctionTableReference = base.FragmentFactory.CreateFragment<BuiltInFunctionTableReference>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(203);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(builtInFunctionTableReference, token);
                builtInFunctionTableReference.Name = name;
            }
            this.match(191);
            switch (this.LA(1)) {
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 47:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 163:
                case 187:
                case 191:
                case 193:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235: {
                        ScalarExpression item = this.expressionWithDefault();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(builtInFunctionTableReference, builtInFunctionTableReference.Parameters, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.expressionWithDefault();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(builtInFunctionTableReference, builtInFunctionTableReference.Parameters, item);
                            }
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(builtInFunctionTableReference, token2);
            }
            this.simpleTableReferenceAliasOpt(builtInFunctionTableReference);
            return builtInFunctionTableReference;
        }

        public GlobalFunctionTableReference globalFunctionTableReference() {
            GlobalFunctionTableReference globalFunctionTableReference = base.FragmentFactory.CreateFragment<GlobalFunctionTableReference>();
            IToken token = null;
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                globalFunctionTableReference.Name = name;
            }
            this.match(191);
            switch (this.LA(1)) {
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 47:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 163:
                case 187:
                case 191:
                case 193:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235: {
                        ScalarExpression item = this.expressionWithDefault();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(globalFunctionTableReference, globalFunctionTableReference.Parameters, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.expressionWithDefault();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(globalFunctionTableReference, globalFunctionTableReference.Parameters, item);
                            }
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(globalFunctionTableReference, token);
            }
            this.simpleTableReferenceAliasOpt(globalFunctionTableReference);
            return globalFunctionTableReference;
        }

        public VariableTableReference variableTableReference() {
            VariableTableReference variableTableReference = base.FragmentFactory.CreateFragment<VariableTableReference>();
            VariableReference variable = this.variable();
            if (base.inputState.guessing == 0) {
                variableTableReference.Variable = variable;
            }
            this.simpleTableReferenceAliasOpt(variableTableReference);
            return variableTableReference;
        }

        public VariableMethodCallTableReference variableMethodCallTableReference() {
            VariableMethodCallTableReference variableMethodCallTableReference = base.FragmentFactory.CreateFragment<VariableMethodCallTableReference>();
            VariableReference variable = this.variable();
            if (base.inputState.guessing == 0) {
                variableMethodCallTableReference.Variable = variable;
            }
            this.match(200);
            Identifier methodName = this.identifier();
            if (base.inputState.guessing == 0) {
                variableMethodCallTableReference.MethodName = methodName;
            }
            this.parenthesizedOptExpressionWithDefaultList(variableMethodCallTableReference, variableMethodCallTableReference.Parameters);
            this.simpleTableReferenceAlias(variableMethodCallTableReference);
            this.columnNameList(variableMethodCallTableReference, variableMethodCallTableReference.Columns);
            return variableMethodCallTableReference;
        }

        public TableReferenceWithAlias openRowset() {
            TableReferenceWithAlias tableReferenceWithAlias;
            switch (this.LA(1)) {
                case 109:
                    tableReferenceWithAlias = this.openRowsetRowset();
                    break;
                case 108:
                    tableReferenceWithAlias = this.openQueryRowset();
                    this.simpleTableReferenceAliasOpt(tableReferenceWithAlias);
                    break;
                case 107:
                    tableReferenceWithAlias = this.adhocRowset();
                    this.simpleTableReferenceAliasOpt(tableReferenceWithAlias);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return tableReferenceWithAlias;
        }

        public FullTextTableReference fulltextTableReference() {
            FullTextTableReference fullTextTableReference = base.FragmentFactory.CreateFragment<FullTextTableReference>();
            IToken token = null;
            this.fullTextTable(fullTextTableReference);
            this.match(191);
            SchemaObjectName tableName = this.schemaObjectFourPartName();
            if (base.inputState.guessing == 0) {
                fullTextTableReference.TableName = tableName;
            }
            this.match(198);
            this.fulltextTableColumnList(fullTextTableReference);
            this.match(198);
            ValueExpression searchCondition = this.stringOrVariable();
            if (base.inputState.guessing == 0) {
                fullTextTableReference.SearchCondition = searchCondition;
            }
            switch (this.LA(1)) {
                case 198:
                    this.fulltextTableOptions(fullTextTableReference);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(fullTextTableReference, token);
            }
            this.simpleTableReferenceAliasOpt(fullTextTableReference);
            return fullTextTableReference;
        }

        public SemanticTableReference semanticTableReference() {
            SemanticTableReference semanticTableReference = base.FragmentFactory.CreateFragment<SemanticTableReference>();
            switch (this.LA(1)) {
                case 184:
                    this.semanticKeyPhraseTableReference(semanticTableReference);
                    break;
                case 185:
                    this.semanticSimilarityTableReference(semanticTableReference);
                    break;
                case 186:
                    this.semanticSimilarityDetailsTableReference(semanticTableReference);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return semanticTableReference;
        }

        public OpenXmlTableReference openXmlTableReference() {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(110);
            this.match(191);
            OpenXmlTableReference openXmlTableReference = this.openXmlParams();
            token2 = this.LT(1);
            this.match(192);
            this.openXmlWithClauseOpt(openXmlTableReference);
            this.simpleTableReferenceAliasOpt(openXmlTableReference);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(openXmlTableReference, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(openXmlTableReference, token2);
            }
            return openXmlTableReference;
        }

        public OpenJsonTableReference openJsonTableReference() {
            IToken token = null;
            IToken token2 = null;
            if (!base.NextTokenMatches("OPENJSON")) {
                throw new SemanticException("NextTokenMatches(CodeGenerationSupporter.OpenJson)");
            }
            token = this.LT(1);
            this.match(232);
            this.match(191);
            OpenJsonTableReference openJsonTableReference = this.openJsonParams();
            token2 = this.LT(1);
            this.match(192);
            this.openJsonWithClauseOpt(openJsonTableReference);
            this.simpleTableReferenceAliasOpt(openJsonTableReference);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(openJsonTableReference, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(openJsonTableReference, token2);
            }
            return openJsonTableReference;
        }

        public DataModificationTableReference subDmlTableReference(SubDmlFlags subDmlFlags) {
            DataModificationTableReference dataModificationTableReference = base.FragmentFactory.CreateFragment<DataModificationTableReference>();
            IToken token = null;
            token = this.LT(1);
            this.match(191);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(dataModificationTableReference, token);
                if ((subDmlFlags & SubDmlFlags.InsideSubDml) == SubDmlFlags.InsideSubDml) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46075", token, TSqlParserResource.SQL46075Message);
                }
            }
            DataModificationSpecification dataModificationSpecification = this.innerDmlStatement();
            this.match(192);
            if (base.inputState.guessing == 0) {
                if ((subDmlFlags & SubDmlFlags.SelectNotForInsert) == SubDmlFlags.SelectNotForInsert) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46076", dataModificationSpecification, TSqlParserResource.SQL46076Message);
                }
                if ((subDmlFlags & SubDmlFlags.UpdateDeleteFrom) == SubDmlFlags.UpdateDeleteFrom) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46077", dataModificationSpecification, TSqlParserResource.SQL46077Message);
                }
                if ((subDmlFlags & SubDmlFlags.MergeUsing) == SubDmlFlags.MergeUsing) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46078", dataModificationSpecification, TSqlParserResource.SQL46078Message);
                }
                dataModificationTableReference.DataModificationSpecification = dataModificationSpecification;
            }
            this.simpleTableReferenceAlias(dataModificationTableReference);
            if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                this.columnNameList(dataModificationTableReference, dataModificationTableReference.Columns);
                goto IL_0144;
            }
            if (TSql140ParserInternal.tokenSet_104_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_105_.member(this.LA(2))) {
                goto IL_0144;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0144:
            return dataModificationTableReference;
        }

        public TableReference schemaObjectOrFunctionTableReference() {
            SchemaObjectName vSchemaObjectName = this.schemaObjectFourPartName();
            if (TSql140ParserInternal.tokenSet_132_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_105_.member(this.LA(2)) && base.IsTableReference(false)) {
                return this.schemaObjectTableReference(vSchemaObjectName);
            }
            if (this.LA(1) == 191 && TSql140ParserInternal.tokenSet_133_.member(this.LA(2))) {
                return this.schemaObjectFunctionTableReference(vSchemaObjectName);
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ChangeTableChangesTableReference changesChangeTableParams(SchemaObjectName vTarget) {
            ChangeTableChangesTableReference changeTableChangesTableReference = base.FragmentFactory.CreateFragment<ChangeTableChangesTableReference>();
            changeTableChangesTableReference.Target = vTarget;
            switch (this.LA(1)) {
                case 221:
                case 234: {
                        ValueExpression sinceVersion = this.integerOrVariable();
                        if (base.inputState.guessing == 0) {
                            changeTableChangesTableReference.SinceVersion = sinceVersion;
                        }
                        break;
                    }
                case 100: {
                        ValueExpression sinceVersion = this.nullLiteral();
                        if (base.inputState.guessing == 0) {
                            changeTableChangesTableReference.SinceVersion = sinceVersion;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return changeTableChangesTableReference;
        }

        public ChangeTableVersionTableReference versionChangeTableParams(SchemaObjectName vTarget) {
            ChangeTableVersionTableReference changeTableVersionTableReference = base.FragmentFactory.CreateFragment<ChangeTableVersionTableReference>();
            IToken token = null;
            changeTableVersionTableReference.Target = vTarget;
            this.columnNameList(changeTableVersionTableReference, changeTableVersionTableReference.PrimaryKeyColumns);
            this.match(198);
            this.match(191);
            this.expressionList(changeTableVersionTableReference, changeTableVersionTableReference.PrimaryKeyValues);
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(changeTableVersionTableReference, token);
            }
            return changeTableVersionTableReference;
        }

        public DataModificationSpecification innerDmlStatement() {
            switch (this.LA(1)) {
                case 86:
                    return this.insertSpecification(SubDmlFlags.InsideSubDml);
                case 160:
                    return this.updateSpecification(SubDmlFlags.InsideSubDml);
                case 48:
                    return this.deleteSpecification(SubDmlFlags.InsideSubDml);
                case 182:
                    return this.mergeSpecification(SubDmlFlags.InsideSubDml);
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public InsertSpecification insertSpecification(SubDmlFlags subDmlFlags) {
            InsertSpecification insertSpecification = base.FragmentFactory.CreateFragment<InsertSpecification>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            InsertSource insertSource = null;
            token = this.LT(1);
            this.match(86);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(insertSpecification, token);
            }
            this.dmlTopRowFilterOpt(insertSpecification);
            switch (this.LA(1)) {
                case 88:
                    this.match(88);
                    if (base.inputState.guessing == 0) {
                        insertSpecification.InsertOption = InsertOption.Into;
                    }
                    break;
                case 115:
                    this.match(115);
                    if (base.inputState.guessing == 0) {
                        insertSpecification.InsertOption = InsertOption.Over;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 107:
                case 108:
                case 109:
                case 200:
                case 232:
                case 233:
                case 234:
                    break;
            }
            TableReference target = this.dmlTarget(false);
            if (base.inputState.guessing == 0) {
                insertSpecification.Target = target;
            }
            bool flag = false;
            if (this.LA(1) == 191 && TSql140ParserInternal.tokenSet_48_.member(this.LA(2))) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(191);
                    switch (this.LA(1)) {
                        case 200:
                            this.match(200);
                            break;
                        case 232:
                            this.match(232);
                            break;
                        case 233:
                            this.match(233);
                            break;
                        case 227:
                            this.match(227);
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                token2 = this.LT(1);
                this.match(191);
                ColumnReferenceExpression item = this.insertColumn();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(insertSpecification, token2);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(insertSpecification, insertSpecification.Columns, item);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    item = this.insertColumn();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(insertSpecification, insertSpecification.Columns, item);
                    }
                }
                token3 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(insertSpecification, token3);
                }
                goto IL_02d7;
            }
            if (TSql140ParserInternal.tokenSet_134_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_135_.member(this.LA(2))) {
                goto IL_02d7;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_02d7:
            this.outputClauseOpt(subDmlFlags, insertSpecification);
            switch (this.LA(1)) {
                case 47:
                case 164:
                    insertSource = this.valuesInsertSource();
                    break;
                case 60:
                case 61:
                    insertSource = this.executeInsertSource();
                    break;
                case 140:
                case 191:
                    insertSource = this.selectInsertSource(subDmlFlags);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                insertSpecification.InsertSource = insertSource;
            }
            return insertSpecification;
        }

        public UpdateSpecification updateSpecification(SubDmlFlags subDmlFlags) {
            UpdateSpecification updateSpecification = base.FragmentFactory.CreateFragment<UpdateSpecification>();
            IToken token = null;
            token = this.LT(1);
            this.match(160);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(updateSpecification, token);
            }
            this.dmlTopRowFilterOpt(updateSpecification);
            TableReference target = this.dmlTarget(false);
            if (base.inputState.guessing == 0) {
                updateSpecification.Target = target;
            }
            this.setClausesList(updateSpecification, updateSpecification.SetClauses);
            this.outputClauseOpt(subDmlFlags, updateSpecification);
            FromClause fromClause = this.fromClauseOpt(subDmlFlags | SubDmlFlags.UpdateDeleteFrom);
            if (base.inputState.guessing == 0) {
                updateSpecification.FromClause = fromClause;
            }
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_033e;
                }
            } else {
                switch (num) {
                    case 169: {
                            WhereClause whereClause = this.dmlWhereClause(subDmlFlags);
                            if (base.inputState.guessing == 0) {
                                updateSpecification.WhereClause = whereClause;
                            }
                            goto IL_033e;
                        }
                    case 95:
                    case 106:
                    case 111:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_033e;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_033e:
            return updateSpecification;
        }

        public DeleteSpecification deleteSpecification(SubDmlFlags subDmlFlags) {
            DeleteSpecification deleteSpecification = base.FragmentFactory.CreateFragment<DeleteSpecification>();
            IToken token = null;
            token = this.LT(1);
            this.match(48);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(deleteSpecification, token);
            }
            this.dmlTopRowFilterOpt(deleteSpecification);
            switch (this.LA(1)) {
                case 71:
                    this.match(71);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 107:
                case 108:
                case 109:
                case 200:
                case 232:
                case 233:
                case 234:
                    break;
            }
            TableReference target = this.dmlTarget(false);
            if (base.inputState.guessing == 0) {
                deleteSpecification.Target = target;
            }
            this.outputClauseOpt(subDmlFlags, deleteSpecification);
            FromClause fromClause = this.fromClauseOpt(subDmlFlags | SubDmlFlags.UpdateDeleteFrom);
            if (base.inputState.guessing == 0) {
                deleteSpecification.FromClause = fromClause;
            }
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_039c;
                }
            } else {
                switch (num) {
                    case 169: {
                            WhereClause whereClause = this.dmlWhereClause(subDmlFlags);
                            if (base.inputState.guessing == 0) {
                                deleteSpecification.WhereClause = whereClause;
                            }
                            goto IL_039c;
                        }
                    case 95:
                    case 106:
                    case 111:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_039c;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_039c:
            return deleteSpecification;
        }

        public MergeSpecification mergeSpecification(SubDmlFlags subDmlFlags) {
            MergeSpecification mergeSpecification = base.FragmentFactory.CreateFragment<MergeSpecification>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(182);
            this.dmlTopRowFilterOpt(mergeSpecification);
            switch (this.LA(1)) {
                case 88:
                    this.match(88);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 107:
                case 108:
                case 109:
                case 200:
                case 232:
                case 233:
                case 234:
                    break;
            }
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(mergeSpecification, token);
            }
            TableReference target = this.dmlTarget(true);
            if (base.inputState.guessing == 0) {
                mergeSpecification.Target = target;
            }
            if (this.LA(1) == 9) {
                this.match(9);
                Identifier tableAlias = this.identifier();
                if (base.inputState.guessing == 0) {
                    mergeSpecification.TableAlias = tableAlias;
                }
                goto IL_018a;
            }
            if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 232 && !base.NextTokenMatches("USING")) {
                Identifier tableAlias = this.identifier();
                if (base.inputState.guessing == 0) {
                    mergeSpecification.TableAlias = tableAlias;
                }
                goto IL_018a;
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_136_.member(this.LA(2))) {
                goto IL_018a;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_018a:
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "USING");
            }
            TableReference tableReference = this.selectTableReferenceWithOdbc(subDmlFlags | SubDmlFlags.MergeUsing);
            if (base.inputState.guessing == 0) {
                mergeSpecification.TableReference = tableReference;
            }
            this.match(105);
            BooleanExpression searchCondition = this.booleanExpression();
            if (base.inputState.guessing == 0) {
                mergeSpecification.SearchCondition = searchCondition;
            }
            int num = 0;
            while (true) {
                if (this.LA(1) != 168) {
                    break;
                }
                MergeActionClause item = this.mergeActionClause();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(mergeSpecification, mergeSpecification.ActionClauses, item);
                }
                num++;
            }
            if (num < 1) {
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            this.outputClauseOpt(subDmlFlags, mergeSpecification);
            return mergeSpecification;
        }

        public void joinHint(QualifiedJoin vParent) {
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    switch (this.LA(1)) {
                        case 232:
                            token2 = this.LT(1);
                            this.match(232);
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.Match(token, "LOCAL");
                                vParent.JoinHint = JoinHintHelper.Instance.ParseOption(token2);
                                if (vParent.JoinHint == JoinHint.Remote) {
                                    TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token2);
                                }
                            }
                            break;
                        case 182:
                            this.LT(1);
                            this.match(182);
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.Match(token, "LOCAL");
                                vParent.JoinHint = JoinHint.Merge;
                            }
                            break;
                        case 90:
                            if (base.inputState.guessing == 0) {
                                vParent.JoinHint = JoinHintHelper.Instance.ParseOption(token);
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    break;
                case 182:
                    this.match(182);
                    if (base.inputState.guessing == 0) {
                        vParent.JoinHint = JoinHint.Merge;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public ScalarExpression expressionWithDefault() {
            switch (this.LA(1)) {
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 163:
                case 187:
                case 191:
                case 193:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                    return this.expression();
                case 47:
                    return this.defaultLiteral();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void simpleTableReferenceAliasOpt(TableReferenceWithAlias vParent) {
            if ((this.LA(1) == 9 || this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_137_.member(this.LA(2))) {
                this.simpleTableReferenceAlias(vParent);
                return;
            }
            if (TSql140ParserInternal.tokenSet_137_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_105_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ScalarExpression signedIntegerOrStringOrVariable() {
            switch (this.LA(1)) {
                case 199:
                case 221:
                    return this.signedInteger();
                case 230:
                case 231:
                case 234:
                    return this.stringOrVariable();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public ScalarExpression possibleNegativeConstant() {
            switch (this.LA(1)) {
                case 100:
                case 193:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 230:
                case 231:
                case 234:
                    return this.literal();
                case 199:
                    return this.negativeConstant();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void outputIntoOutputClause(DataModificationSpecification vParent) {
            IToken token = null;
            List<SelectElement> list = new List<SelectElement>();
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "OUTPUT");
            }
            SelectElement item = this.outputClauseSelectElement();
            if (base.inputState.guessing == 0) {
                list.Add(item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.outputClauseSelectElement();
                if (base.inputState.guessing == 0) {
                    list.Add(item);
                }
            }
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 88:
                        break;
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 71:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_03df;
                    default:
                        goto IL_0419;
                }
                OutputIntoClause outputIntoClause = this.outputIntoClause(token, list);
                if (base.inputState.guessing == 0) {
                    vParent.OutputIntoClause = outputIntoClause;
                }
                if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_138_.member(this.LA(2)) && base.NextTokenMatches("OUTPUT")) {
                    OutputClause outputClause = this.outputClause();
                    if (base.inputState.guessing == 0) {
                        vParent.OutputClause = outputClause;
                    }
                    return;
                }
                if (TSql140ParserInternal.tokenSet_139_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_122_.member(this.LA(2))) {
                    return;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            switch (num) {
                case 95:
                case 106:
                case 111:
                case 119:
                case 123:
                case 125:
                case 126:
                case 129:
                case 131:
                case 132:
                case 134:
                case 138:
                case 140:
                case 142:
                case 143:
                case 144:
                case 156:
                case 160:
                case 161:
                case 162:
                case 164:
                case 167:
                case 169:
                case 170:
                case 171:
                case 172:
                case 176:
                case 182:
                case 191:
                case 192:
                case 204:
                case 219:
                case 220:
                case 232:
                    break;
                default:
                    goto IL_0419;
            }
            goto IL_03df;
            IL_0419:
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_03df:
            if (base.inputState.guessing == 0) {
                OutputClause outputClause = base.FragmentFactory.CreateFragment<OutputClause>();
                TSql80ParserBaseInternal.UpdateTokenInfo(outputClause, token);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(outputClause, outputClause.SelectColumns, list);
                vParent.OutputClause = outputClause;
            }
        }

        public OutputIntoClause outputIntoClause(IToken tOutput, IList<SelectElement> vSelectElements) {
            OutputIntoClause outputIntoClause = base.FragmentFactory.CreateFragment<OutputIntoClause>();
            TSql80ParserBaseInternal.UpdateTokenInfo(outputIntoClause, tOutput);
            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(outputIntoClause, outputIntoClause.SelectColumns, vSelectElements);
            this.match(88);
            TableReference intoTable;
            switch (this.LA(1)) {
                case 234:
                    intoTable = this.variableDmlTarget();
                    break;
                case 200:
                case 232:
                case 233:
                    intoTable = this.intoSchemaObjectTable();
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                outputIntoClause.IntoTable = intoTable;
            }
            if (this.LA(1) == 191 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233)) {
                this.identifierColumnList(outputIntoClause, outputIntoClause.IntoTableColumns);
                goto IL_010b;
            }
            if (TSql140ParserInternal.tokenSet_139_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_122_.member(this.LA(2))) {
                goto IL_010b;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_010b:
            return outputIntoClause;
        }

        public OutputClause outputClause() {
            OutputClause outputClause = base.FragmentFactory.CreateFragment<OutputClause>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "OUTPUT");
                TSql80ParserBaseInternal.UpdateTokenInfo(outputClause, token);
            }
            SelectElement item = this.outputClauseSelectElement();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(outputClause, outputClause.SelectColumns, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.outputClauseSelectElement();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(outputClause, outputClause.SelectColumns, item);
                }
            }
            return outputClause;
        }

        public VariableTableReference variableDmlTarget() {
            VariableTableReference variableTableReference = base.FragmentFactory.CreateFragment<VariableTableReference>();
            VariableReference variable = this.variable();
            if (base.inputState.guessing == 0) {
                variableTableReference.Variable = variable;
            }
            return variableTableReference;
        }

        public NamedTableReference intoSchemaObjectTable() {
            NamedTableReference namedTableReference = base.FragmentFactory.CreateFragment<NamedTableReference>();
            SchemaObjectName schemaObject = this.schemaObjectFourPartName();
            if (base.inputState.guessing == 0) {
                namedTableReference.SchemaObject = schemaObject;
            }
            return namedTableReference;
        }

        public void outputClauseOpt(SubDmlFlags subDmlFlags, DataModificationSpecification vParent) {
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_138_.member(this.LA(2)) && base.NextTokenMatches("OUTPUT")) {
                this.outputIntoOutputClause(vParent);
                return;
            }
            if (TSql140ParserInternal.tokenSet_139_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_122_.member(this.LA(2))) {
                if (base.inputState.guessing == 0 && (subDmlFlags & SubDmlFlags.InsideSubDml) == SubDmlFlags.InsideSubDml) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46079", vParent, TSqlParserResource.SQL46079Message);
                }
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public TableReference dmlTarget(bool indexHintAllowed) {
            switch (this.LA(1)) {
                case 200:
                case 232:
                case 233:
                    return this.schemaObjectDmlTarget(indexHintAllowed);
                case 107:
                case 108:
                case 109:
                    return this.openRowset();
                case 234:
                    return this.variableDmlTarget();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public WhereClause dmlWhereClause(SubDmlFlags subDmlFlags) {
            if (this.LA(1) == 169 && TSql140ParserInternal.tokenSet_140_.member(this.LA(2))) {
                return this.whereClause();
            }
            if (this.LA(1) == 169 && this.LA(2) == 37) {
                return this.whereCurrentOfCursorClause(subDmlFlags);
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ColumnReferenceExpression insertColumn() {
            ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
            switch (this.LA(1)) {
                case 200:
                case 232:
                case 233: {
                        MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
                        if (base.inputState.guessing == 0) {
                            columnReferenceExpression.ColumnType = ColumnType.Regular;
                            columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
                        }
                        break;
                    }
                case 227:
                    this.systemColumn(columnReferenceExpression);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return columnReferenceExpression;
        }

        public ValuesInsertSource valuesInsertSource() {
            ValuesInsertSource valuesInsertSource = base.FragmentFactory.CreateFragment<ValuesInsertSource>();
            IToken token = null;
            switch (this.LA(1)) {
                case 47:
                    this.defaultValuesInsertSource(valuesInsertSource);
                    break;
                case 164: {
                        token = this.LT(1);
                        this.match(164);
                        RowValue item = this.rowValueExpressionWithDefault();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(valuesInsertSource, token);
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(valuesInsertSource, valuesInsertSource.RowValues, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.rowValueExpressionWithDefault();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(valuesInsertSource, valuesInsertSource.RowValues, item);
                            }
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return valuesInsertSource;
        }

        public ExecuteInsertSource executeInsertSource() {
            ExecuteInsertSource executeInsertSource = base.FragmentFactory.CreateFragment<ExecuteInsertSource>();
            ExecuteSpecification execute = this.executeSpecification();
            if (base.inputState.guessing == 0) {
                executeInsertSource.Execute = execute;
            }
            return executeInsertSource;
        }

        public SelectInsertSource selectInsertSource(SubDmlFlags subDmlFlags) {
            SelectInsertSource selectInsertSource = base.FragmentFactory.CreateFragment<SelectInsertSource>();
            QueryExpression queryExpression = this.queryExpression(subDmlFlags, null);
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_035a;
                }
                goto IL_0347;
            }
            switch (num) {
                case 113:
                    break;
                default:
                    goto IL_0347;
                case 106:
                case 111:
                case 119:
                case 123:
                case 125:
                case 126:
                case 129:
                case 131:
                case 132:
                case 134:
                case 138:
                case 140:
                case 142:
                case 143:
                case 144:
                case 156:
                case 160:
                case 161:
                case 162:
                case 167:
                case 170:
                case 171:
                case 172:
                case 176:
                case 182:
                case 191:
                case 192:
                case 204:
                case 219:
                case 220:
                case 232:
                    goto IL_035a;
            }
            OrderByClause orderByClause = this.orderByClause();
            if (base.inputState.guessing == 0) {
                queryExpression.OrderByClause = orderByClause;
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_42_.member(this.LA(2))) {
                OffsetClause offsetClause = this.offsetClause();
                if (base.inputState.guessing == 0) {
                    queryExpression.OffsetClause = offsetClause;
                }
                goto IL_035a;
            }
            if (TSql140ParserInternal.tokenSet_22_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_035a;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_035a:
            if (base.inputState.guessing == 0) {
                selectInsertSource.Select = queryExpression;
            }
            return selectInsertSource;
            IL_0347:
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void setClausesList(TSqlFragment vParent, IList<SetClause> setClauses) {
            IToken token = null;
            token = this.LT(1);
            this.match(142);
            SetClause item = this.setClause();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, setClauses, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.setClause();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, setClauses, item);
                }
            }
        }

        public SetClause setClause() {
            switch (this.LA(1)) {
                case 234:
                    return this.setClauseStartingWithVariable();
                case 200:
                case 232:
                case 233: {
                        MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
                        switch (this.LA(1)) {
                            case 196:
                            case 206:
                            case 212:
                            case 213:
                            case 214:
                            case 215:
                            case 216:
                            case 217:
                            case 218:
                                return this.setClauseColumnAssignment(multiPartIdentifier);
                            case 191:
                                return this.setClauseFunctionCall(multiPartIdentifier);
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                        }
                    }
                case 227:
                    return this.setClauseSubItemSystemColumn();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public AssignmentSetClause setClauseStartingWithVariable() {
            AssignmentSetClause assignmentSetClause = base.FragmentFactory.CreateFragment<AssignmentSetClause>();
            VariableReference variable = this.variable();
            if (base.inputState.guessing == 0) {
                assignmentSetClause.Variable = variable;
            }
            switch (this.LA(1)) {
                case 206: {
                        this.match(206);
                        bool flag = false;
                        if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_141_.member(this.LA(2))) {
                            int pos = this.mark();
                            flag = true;
                            base.inputState.guessing++;
                            try {
                                this.multiPartIdentifier(-1);
                                this.assignmentWithOptOp();
                            } catch (RecognitionException) {
                                flag = false;
                            }
                            this.rewind(pos);
                            base.inputState.guessing--;
                        }
                        if (flag) {
                            MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
                            AssignmentKind assignmentKind = this.assignmentWithOptOp();
                            if (base.inputState.guessing == 0) {
                                base.CreateSetClauseColumn(assignmentSetClause, multiPartIdentifier);
                                assignmentSetClause.AssignmentKind = assignmentKind;
                            }
                            ScalarExpression newValue = this.expressionWithDefault();
                            if (base.inputState.guessing == 0) {
                                assignmentSetClause.NewValue = newValue;
                            }
                            break;
                        }
                        if (TSql140ParserInternal.tokenSet_42_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_142_.member(this.LA(2))) {
                            ScalarExpression newValue = this.expression();
                            if (base.inputState.guessing == 0) {
                                assignmentSetClause.NewValue = newValue;
                            }
                            break;
                        }
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                case 196:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218: {
                        AssignmentKind assignmentKind = this.assignmentWithOp();
                        ScalarExpression newValue = this.expression();
                        if (base.inputState.guessing == 0) {
                            assignmentSetClause.NewValue = newValue;
                            assignmentSetClause.AssignmentKind = assignmentKind;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return assignmentSetClause;
        }

        public AssignmentSetClause setClauseColumnAssignment(MultiPartIdentifier vMultiPartIdentifier) {
            AssignmentSetClause assignmentSetClause = base.FragmentFactory.CreateFragment<AssignmentSetClause>();
            AssignmentKind assignmentKind = this.assignmentWithOptOp();
            ScalarExpression newValue = this.expressionWithDefault();
            if (base.inputState.guessing == 0) {
                base.CreateSetClauseColumn(assignmentSetClause, vMultiPartIdentifier);
                assignmentSetClause.AssignmentKind = assignmentKind;
                assignmentSetClause.NewValue = newValue;
            }
            return assignmentSetClause;
        }

        public FunctionCallSetClause setClauseFunctionCall(MultiPartIdentifier vMultiPartIdentifier) {
            FunctionCallSetClause functionCallSetClause = base.FragmentFactory.CreateFragment<FunctionCallSetClause>();
            FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
            base.PutIdentifiersIntoFunctionCall(functionCall, vMultiPartIdentifier);
            this.parenthesizedOptExpressionWithDefaultList(functionCall, functionCall.Parameters);
            if (base.inputState.guessing == 0) {
                functionCallSetClause.MutatorFunction = functionCall;
            }
            return functionCallSetClause;
        }

        public AssignmentSetClause setClauseSubItemSystemColumn() {
            AssignmentSetClause assignmentSetClause = base.FragmentFactory.CreateFragment<AssignmentSetClause>();
            ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
            this.systemColumn(columnReferenceExpression);
            AssignmentKind assignmentKind = this.assignmentWithOptOp();
            ScalarExpression newValue = this.expressionWithDefault();
            if (base.inputState.guessing == 0) {
                assignmentSetClause.Column = columnReferenceExpression;
                assignmentSetClause.AssignmentKind = assignmentKind;
                assignmentSetClause.NewValue = newValue;
            }
            return assignmentSetClause;
        }

        public AssignmentKind assignmentWithOp() {
            AssignmentKind result = AssignmentKind.Equals;
            switch (this.LA(1)) {
                case 212:
                    this.match(212);
                    if (base.inputState.guessing == 0) {
                        result = AssignmentKind.AddEquals;
                    }
                    break;
                case 213:
                    this.match(213);
                    if (base.inputState.guessing == 0) {
                        result = AssignmentKind.SubtractEquals;
                    }
                    break;
                case 196:
                    this.match(196);
                    if (base.inputState.guessing == 0) {
                        result = AssignmentKind.MultiplyEquals;
                    }
                    break;
                case 214:
                    this.match(214);
                    if (base.inputState.guessing == 0) {
                        result = AssignmentKind.DivideEquals;
                    }
                    break;
                case 215:
                    this.match(215);
                    if (base.inputState.guessing == 0) {
                        result = AssignmentKind.ModEquals;
                    }
                    break;
                case 216:
                    this.match(216);
                    if (base.inputState.guessing == 0) {
                        result = AssignmentKind.BitwiseAndEquals;
                    }
                    break;
                case 217:
                    this.match(217);
                    if (base.inputState.guessing == 0) {
                        result = AssignmentKind.BitwiseOrEquals;
                    }
                    break;
                case 218:
                    this.match(218);
                    if (base.inputState.guessing == 0) {
                        result = AssignmentKind.BitwiseXorEquals;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public ExecuteSpecification executeSpecification() {
            ExecuteSpecification executeSpecification = base.FragmentFactory.CreateFragment<ExecuteSpecification>();
            this.execStart(executeSpecification);
            this.execTypes(executeSpecification);
            return executeSpecification;
        }

        public void defaultValuesInsertSource(ValuesInsertSource vParent) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(47);
            token2 = this.LT(1);
            this.match(164);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                vParent.IsDefaultValues = true;
            }
        }

        public RowValue rowValueExpressionWithDefault() {
            RowValue rowValue = base.FragmentFactory.CreateFragment<RowValue>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(191);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(rowValue, token);
            }
            this.expressionWithDefaultList(rowValue, rowValue.ColumnValues);
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(rowValue, token2);
            }
            return rowValue;
        }

        public void expressionWithDefaultList(TSqlFragment vParent, IList<ScalarExpression> expressions) {
            ScalarExpression item = this.expressionWithDefault();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, expressions, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.expressionWithDefault();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, expressions, item);
                }
            }
        }

        public TableReferenceWithAlias schemaObjectDmlTarget(bool indexHintAllowed) {
            TableReferenceWithAlias tableReferenceWithAlias = null;
            bool flag = false;
            if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_143_.member(this.LA(2))) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.schemaObjectFourPartName();
                    this.match(191);
                    switch (this.LA(1)) {
                        case 47:
                        case 100:
                        case 193:
                        case 199:
                        case 221:
                        case 222:
                        case 223:
                        case 224:
                        case 225:
                        case 230:
                        case 231:
                        case 234:
                            this.possibleNegativeConstantWithDefault();
                            break;
                        case 192:
                            this.match(192);
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                return this.schemaObjectFunctionDmlTarget();
            }
            if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_144_.member(this.LA(2))) {
                return this.schemaObjectTableDmlTarget(indexHintAllowed);
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void mergeInsertDmlColumnListOpt(InsertMergeAction vParent) {
            IToken token = null;
            switch (this.LA(1)) {
                case 47:
                case 164:
                    break;
                case 191: {
                        this.match(191);
                        ColumnReferenceExpression item = this.mergeInsertDmlColumn();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Columns, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.mergeInsertDmlColumn();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Columns, item);
                            }
                        }
                        token = this.LT(1);
                        this.match(192);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public ColumnReferenceExpression mergeInsertDmlColumn() {
            ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
            switch (this.LA(1)) {
                case 200:
                case 232:
                case 233: {
                        MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(1);
                        if (base.inputState.guessing == 0) {
                            columnReferenceExpression.ColumnType = ColumnType.Regular;
                            columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
                        }
                        break;
                    }
                case 227:
                    this.systemColumn(columnReferenceExpression);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return columnReferenceExpression;
        }

        public ScalarExpression possibleNegativeConstantWithDefault() {
            ScalarExpression scalarExpression = null;
            switch (this.LA(1)) {
                case 100:
                case 193:
                case 199:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 230:
                case 231:
                case 234:
                    return this.possibleNegativeConstant();
                case 47:
                    return this.defaultLiteral();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public SchemaObjectFunctionTableReference schemaObjectFunctionDmlTarget() {
            SchemaObjectFunctionTableReference schemaObjectFunctionTableReference = base.FragmentFactory.CreateFragment<SchemaObjectFunctionTableReference>();
            SchemaObjectName schemaObject = this.schemaObjectFourPartName();
            if (base.inputState.guessing == 0) {
                schemaObjectFunctionTableReference.SchemaObject = schemaObject;
            }
            this.parenthesizedOptExpressionWithDefaultList(schemaObjectFunctionTableReference, schemaObjectFunctionTableReference.Parameters);
            return schemaObjectFunctionTableReference;
        }

        public NamedTableReference schemaObjectTableDmlTarget(bool indexHintAllowed) {
            NamedTableReference namedTableReference = base.FragmentFactory.CreateFragment<NamedTableReference>();
            SchemaObjectName schemaObject = this.schemaObjectFourPartName();
            if (base.inputState.guessing == 0) {
                namedTableReference.SchemaObject = schemaObject;
            }
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.match(171);
                this.tableHints(namedTableReference, namedTableReference.TableHints, indexHintAllowed);
                goto IL_0097;
            }
            if (TSql140ParserInternal.tokenSet_145_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_122_.member(this.LA(2))) {
                goto IL_0097;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0097:
            return namedTableReference;
        }

        public void tableHints(TSqlFragment vParent, IList<TableHint> hints, bool tableHintAllowed) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(191);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
            this.tableHintsBody(vParent, hints, tableHintAllowed);
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
            }
        }

        public NamedTableReference schemaObjectTableReference(SchemaObjectName vSchemaObjectName) {
            NamedTableReference namedTableReference = base.FragmentFactory.CreateFragment<NamedTableReference>();
            namedTableReference.SchemaObject = vSchemaObjectName;
            if (this.LA(1) == 67 && this.LA(2) == 232 && base.NextTokenMatches("FOR") && this.LT(2).getText().Equals("SYSTEM_TIME", StringComparison.OrdinalIgnoreCase)) {
                TemporalClause temporalClause = this.temporalClause();
                if (base.inputState.guessing == 0) {
                    namedTableReference.TemporalClause = temporalClause;
                }
                goto IL_00a8;
            }
            if (TSql140ParserInternal.tokenSet_132_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_105_.member(this.LA(2))) {
                goto IL_00a8;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_04f8:
            if ((this.LA(1) == 78 || this.LA(1) == 171) && TSql140ParserInternal.tokenSet_104_.member(this.LA(2))) {
                this.nonParameterTableHints(namedTableReference, namedTableReference.TableHints);
                goto IL_0b68;
            }
            if ((this.LA(1) == 9 || this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_147_.member(this.LA(2))) {
                if (base.inputState.guessing == 0 && namedTableReference.TableSampleClause != null) {
                    throw base.GetUnexpectedTokenErrorException();
                }
                this.simpleTableReferenceAlias(namedTableReference);
                int num = this.LA(1);
                if (num <= 106) {
                    switch (num) {
                        case 1:
                        case 4:
                        case 6:
                        case 12:
                        case 13:
                        case 15:
                        case 17:
                        case 22:
                        case 23:
                        case 28:
                        case 33:
                        case 35:
                        case 36:
                        case 44:
                        case 45:
                        case 46:
                        case 48:
                        case 49:
                        case 54:
                        case 55:
                        case 56:
                        case 59:
                        case 60:
                        case 61:
                        case 64:
                        case 67:
                        case 72:
                        case 74:
                        case 75:
                        case 76:
                        case 77:
                        case 78:
                        case 82:
                        case 85:
                        case 86:
                        case 87:
                        case 90:
                        case 92:
                        case 93:
                        case 95:
                        case 105:
                        case 106:
                            goto IL_08de;
                    }
                } else {
                    switch (num) {
                        case 179: {
                                TableSampleClause tableSampleClause = this.tableSampleClause();
                                if (base.inputState.guessing == 0) {
                                    namedTableReference.TableSampleClause = tableSampleClause;
                                }
                                goto IL_08de;
                            }
                        case 111:
                        case 113:
                        case 114:
                        case 119:
                        case 123:
                        case 125:
                        case 126:
                        case 129:
                        case 131:
                        case 132:
                        case 133:
                        case 134:
                        case 138:
                        case 140:
                        case 142:
                        case 143:
                        case 144:
                        case 156:
                        case 158:
                        case 160:
                        case 161:
                        case 162:
                        case 167:
                        case 169:
                        case 170:
                        case 171:
                        case 172:
                        case 176:
                        case 177:
                        case 178:
                        case 182:
                        case 191:
                        case 192:
                        case 194:
                        case 198:
                        case 204:
                        case 219:
                        case 220:
                        case 232:
                            goto IL_08de;
                    }
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (TSql140ParserInternal.tokenSet_104_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_105_.member(this.LA(2))) {
                goto IL_0b68;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_08de:
            bool flag = false;
            if (this.LA(1) == 191 && this.LA(2) == 221) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(191);
                    this.integer();
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                IndexTableHint item = this.oldForceIndex();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(namedTableReference, namedTableReference.TableHints, item);
                }
                goto IL_0b68;
            }
            bool flag2 = false;
            if ((this.LA(1) == 78 || this.LA(1) == 171) && TSql140ParserInternal.tokenSet_104_.member(this.LA(2))) {
                int pos2 = this.mark();
                flag2 = true;
                base.inputState.guessing++;
                try {
                    switch (this.LA(1)) {
                        case 171:
                            this.match(171);
                            break;
                        case 78:
                            this.match(78);
                            break;
                        case 191:
                            this.match(191);
                            switch (this.LA(1)) {
                                case 78:
                                    this.match(78);
                                    break;
                                case 84:
                                    this.match(84);
                                    break;
                                default:
                                    throw new NoViableAltException(this.LT(1), this.getFilename());
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                } catch (RecognitionException) {
                    flag2 = false;
                }
                this.rewind(pos2);
                base.inputState.guessing--;
            }
            if (flag2) {
                this.nonParameterTableHints(namedTableReference, namedTableReference.TableHints);
                goto IL_0b68;
            }
            if (this.LA(1) == 191 && (this.LA(2) == 78 || this.LA(2) == 84 || this.LA(2) == 232)) {
                this.singleOldStyleTableHint(namedTableReference, namedTableReference.TableHints);
                goto IL_0b68;
            }
            if (TSql140ParserInternal.tokenSet_104_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_105_.member(this.LA(2))) {
                goto IL_0b68;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00a8:
            if (this.LA(1) == 191 && (this.LA(2) == 78 || this.LA(2) == 84 || this.LA(2) == 232)) {
                this.singleOldStyleTableHint(namedTableReference, namedTableReference.TableHints);
                if ((this.LA(1) == 9 || this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_146_.member(this.LA(2))) {
                    this.simpleTableReferenceAlias(namedTableReference);
                    goto IL_0b68;
                }
                if (TSql140ParserInternal.tokenSet_104_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_105_.member(this.LA(2))) {
                    goto IL_0b68;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (TSql140ParserInternal.tokenSet_132_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_105_.member(this.LA(2))) {
                int num2 = this.LA(1);
                if (num2 <= 106) {
                    switch (num2) {
                        case 1:
                        case 4:
                        case 6:
                        case 9:
                        case 12:
                        case 13:
                        case 15:
                        case 17:
                        case 22:
                        case 23:
                        case 28:
                        case 33:
                        case 35:
                        case 36:
                        case 44:
                        case 45:
                        case 46:
                        case 48:
                        case 49:
                        case 54:
                        case 55:
                        case 56:
                        case 59:
                        case 60:
                        case 61:
                        case 64:
                        case 67:
                        case 72:
                        case 74:
                        case 75:
                        case 76:
                        case 77:
                        case 78:
                        case 82:
                        case 85:
                        case 86:
                        case 87:
                        case 90:
                        case 92:
                        case 93:
                        case 95:
                        case 105:
                        case 106:
                            goto IL_04f8;
                    }
                } else {
                    switch (num2) {
                        case 179: {
                                TableSampleClause tableSampleClause = this.tableSampleClause();
                                if (base.inputState.guessing == 0) {
                                    namedTableReference.TableSampleClause = tableSampleClause;
                                }
                                goto IL_04f8;
                            }
                        case 111:
                        case 113:
                        case 114:
                        case 119:
                        case 123:
                        case 125:
                        case 126:
                        case 129:
                        case 131:
                        case 132:
                        case 133:
                        case 134:
                        case 138:
                        case 140:
                        case 142:
                        case 143:
                        case 144:
                        case 156:
                        case 158:
                        case 160:
                        case 161:
                        case 162:
                        case 167:
                        case 169:
                        case 170:
                        case 171:
                        case 172:
                        case 176:
                        case 177:
                        case 178:
                        case 182:
                        case 191:
                        case 192:
                        case 194:
                        case 198:
                        case 204:
                        case 219:
                        case 220:
                        case 232:
                        case 233:
                            goto IL_04f8;
                    }
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0b68:
            return namedTableReference;
        }

        public SchemaObjectFunctionTableReference schemaObjectFunctionTableReference(SchemaObjectName vSchemaObjectName) {
            SchemaObjectFunctionTableReference schemaObjectFunctionTableReference = base.FragmentFactory.CreateFragment<SchemaObjectFunctionTableReference>();
            schemaObjectFunctionTableReference.SchemaObject = vSchemaObjectName;
            this.parenthesizedOptExpressionWithDefaultList(schemaObjectFunctionTableReference, schemaObjectFunctionTableReference.Parameters);
            this.simpleTableReferenceAliasOpt(schemaObjectFunctionTableReference);
            if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                this.columnNameList(schemaObjectFunctionTableReference, schemaObjectFunctionTableReference.Columns);
                goto IL_0099;
            }
            if (TSql140ParserInternal.tokenSet_104_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_105_.member(this.LA(2))) {
                goto IL_0099;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0099:
            return schemaObjectFunctionTableReference;
        }

        public void singleOldStyleTableHint(TSqlFragment vParent, IList<TableHint> hints) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(191);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
            TableHint item = this.tableHint(true);
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, hints, item);
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
            }
        }

        public void nonParameterTableHints(TSqlFragment vParent, IList<TableHint> hints) {
            IToken token = null;
            switch (this.LA(1)) {
                case 78: {
                        token = this.LT(1);
                        this.match(78);
                        if (base.inputState.guessing == 0) {
                            TableHint tableHint = base.FragmentFactory.CreateFragment<TableHint>();
                            TSql80ParserBaseInternal.UpdateTokenInfo(tableHint, token);
                            tableHint.HintKind = TableHintKind.HoldLock;
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, hints, tableHint);
                        }
                        bool flag = false;
                        if (this.LA(1) == 191 && this.LA(2) == 221) {
                            int pos = this.mark();
                            flag = true;
                            base.inputState.guessing++;
                            try {
                                this.match(191);
                                this.integer();
                            } catch (RecognitionException) {
                                flag = false;
                            }
                            this.rewind(pos);
                            base.inputState.guessing--;
                        }
                        if (flag) {
                            IndexTableHint item = this.oldForceIndex();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, hints, item);
                            }
                            break;
                        }
                        bool flag2 = false;
                        if (this.LA(1) == 171 && this.LA(2) == 191) {
                            int pos2 = this.mark();
                            flag2 = true;
                            base.inputState.guessing++;
                            try {
                                this.match(191);
                                switch (this.LA(1)) {
                                    case 232:
                                    case 233:
                                        this.identifier();
                                        break;
                                    case 84:
                                        this.match(84);
                                        break;
                                    default:
                                        throw new NoViableAltException(this.LT(1), this.getFilename());
                                }
                            } catch (RecognitionException) {
                                flag2 = false;
                            }
                            this.rewind(pos2);
                            base.inputState.guessing--;
                        }
                        if (flag2) {
                            this.simpleTableHints(vParent, hints);
                            break;
                        }
                        if (TSql140ParserInternal.tokenSet_104_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_105_.member(this.LA(2))) {
                            break;
                        }
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                case 171:
                    this.simpleTableHints(vParent, hints);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public IndexTableHint oldForceIndex() {
            IndexTableHint indexTableHint = base.FragmentFactory.CreateFragment<IndexTableHint>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(191);
            Literal valueExpression = this.integer();
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(indexTableHint, token);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(indexTableHint, indexTableHint.IndexValues, base.IdentifierOrValueExpression(valueExpression));
                TSql80ParserBaseInternal.UpdateTokenInfo(indexTableHint, token2);
                indexTableHint.HintKind = TableHintKind.Index;
            }
            return indexTableHint;
        }

        public void fullTextTable(FullTextTableReference vParent) {
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 32:
                    token = this.LT(1);
                    this.match(32);
                    if (base.inputState.guessing == 0) {
                        vParent.FullTextFunctionType = FullTextFunctionType.Contains;
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                    }
                    break;
                case 70:
                    token2 = this.LT(1);
                    this.match(70);
                    if (base.inputState.guessing == 0) {
                        vParent.FullTextFunctionType = FullTextFunctionType.FreeText;
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void fulltextTableColumnList(FullTextTableReference vParent) {
            IToken token = null;
            if (TSql140ParserInternal.tokenSet_148_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_149_.member(this.LA(2))) {
                this.fulltextSemanticTableColumnList(vParent, vParent.Columns);
                return;
            }
            if (this.LA(1) == 232 && this.LA(2) == 191) {
                token = this.LT(1);
                this.match(232);
                this.match(191);
                ColumnReferenceExpression item = this.identifierColumnReferenceExpression();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "PROPERTY");
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Columns, item);
                }
                this.match(198);
                StringLiteral propertyName = this.stringLiteral();
                this.match(192);
                if (base.inputState.guessing == 0) {
                    vParent.PropertyName = propertyName;
                }
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void fulltextTableOptions(FullTextTableReference vParent) {
            if (this.LA(1) == 198 && this.LA(2) == 232) {
                this.match(198);
                ValueExpression language = this.languageExpression();
                if (base.inputState.guessing == 0) {
                    vParent.Language = language;
                }
                switch (this.LA(1)) {
                    case 192:
                        break;
                    case 198: {
                            this.match(198);
                            ValueExpression topN = this.integerOrVariable();
                            if (base.inputState.guessing == 0) {
                                vParent.TopN = topN;
                            }
                            break;
                        }
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                return;
            }
            if (this.LA(1) == 198 && (this.LA(2) == 221 || this.LA(2) == 234)) {
                this.match(198);
                ValueExpression topN = this.integerOrVariable();
                if (base.inputState.guessing == 0) {
                    vParent.TopN = topN;
                }
                switch (this.LA(1)) {
                    case 192:
                        break;
                    case 198: {
                            this.match(198);
                            ValueExpression language = this.languageExpression();
                            if (base.inputState.guessing == 0) {
                                vParent.Language = language;
                            }
                            break;
                        }
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void fulltextSemanticTableColumnList(TSqlFragment vParent, IList<ColumnReferenceExpression> vColumns) {
            switch (this.LA(1)) {
                case 200:
                case 232:
                case 233: {
                        ColumnReferenceExpression item = this.identifierColumnReferenceExpression();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vColumns, item);
                        }
                        break;
                    }
                case 195: {
                        ColumnReferenceExpression item = this.starColumnReferenceExpression();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vColumns, item);
                        }
                        break;
                    }
                default:
                    if (this.LA(1) == 191 && this.LA(2) == 195) {
                        this.match(191);
                        ColumnReferenceExpression item = this.starColumnReferenceExpression();
                        this.match(192);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vColumns, item);
                        }
                        break;
                    }
                    if (this.LA(1) == 191 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233)) {
                        this.match(191);
                        ColumnReferenceExpression item = this.identifierColumnReferenceExpression();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vColumns, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.identifierColumnReferenceExpression();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vColumns, item);
                            }
                        }
                        this.match(192);
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public ColumnReferenceExpression starColumnReferenceExpression() {
            ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
            IToken token = null;
            token = this.LT(1);
            this.match(195);
            if (base.inputState.guessing == 0) {
                columnReferenceExpression.ColumnType = ColumnType.Wildcard;
                TSql80ParserBaseInternal.UpdateTokenInfo(columnReferenceExpression, token);
            }
            return columnReferenceExpression;
        }

        public ValueExpression languageExpression() {
            ValueExpression valueExpression = null;
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "LANGUAGE");
            }
            return this.binaryOrIntegerOrStringOrVariable();
        }

        public ValueExpression binaryOrIntegerOrStringOrVariable() {
            switch (this.LA(1)) {
                case 224:
                    return this.binary();
                case 230:
                case 231:
                    return this.stringLiteral();
                case 221:
                    return this.integer();
                case 234:
                    return this.variable();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void semanticKeyPhraseTableReference(SemanticTableReference vParent) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(184);
            this.match(191);
            SchemaObjectName tableName = this.schemaObjectFourPartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                vParent.SemanticFunctionType = SemanticFunctionType.SemanticKeyPhraseTable;
                vParent.TableName = tableName;
            }
            this.match(198);
            this.fulltextSemanticTableColumnList(vParent, vParent.Columns);
            switch (this.LA(1)) {
                case 198: {
                        this.match(198);
                        ScalarExpression sourceKey = this.possibleNegativeConstant();
                        if (base.inputState.guessing == 0) {
                            vParent.SourceKey = sourceKey;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
            }
            this.simpleTableReferenceAliasOpt(vParent);
        }

        public void semanticSimilarityTableReference(SemanticTableReference vParent) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(185);
            this.match(191);
            SchemaObjectName tableName = this.schemaObjectFourPartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                vParent.SemanticFunctionType = SemanticFunctionType.SemanticSimilarityTable;
                vParent.TableName = tableName;
            }
            this.match(198);
            this.fulltextSemanticTableColumnList(vParent, vParent.Columns);
            this.match(198);
            ScalarExpression sourceKey = this.possibleNegativeConstant();
            if (base.inputState.guessing == 0) {
                vParent.SourceKey = sourceKey;
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
            }
            this.simpleTableReferenceAliasOpt(vParent);
        }

        public void semanticSimilarityDetailsTableReference(SemanticTableReference vParent) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(186);
            this.match(191);
            SchemaObjectName tableName = this.schemaObjectFourPartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                vParent.SemanticFunctionType = SemanticFunctionType.SemanticSimilarityDetailsTable;
                vParent.TableName = tableName;
            }
            this.match(198);
            ColumnReferenceExpression item = this.identifierColumnReferenceExpression();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Columns, item);
            }
            this.match(198);
            ScalarExpression sourceKey = this.possibleNegativeConstant();
            if (base.inputState.guessing == 0) {
                vParent.SourceKey = sourceKey;
            }
            this.match(198);
            ColumnReferenceExpression matchedColumn = this.identifierColumnReferenceExpression();
            if (base.inputState.guessing == 0) {
                vParent.MatchedColumn = matchedColumn;
            }
            this.match(198);
            ScalarExpression matchedKey = this.possibleNegativeConstant();
            if (base.inputState.guessing == 0) {
                vParent.MatchedKey = matchedKey;
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
            }
            this.simpleTableReferenceAliasOpt(vParent);
        }

        public OpenXmlTableReference openXmlParams() {
            OpenXmlTableReference openXmlTableReference = base.FragmentFactory.CreateFragment<OpenXmlTableReference>();
            VariableReference variable = this.variable();
            this.match(198);
            ValueExpression rowPattern = this.stringOrVariable();
            if (base.inputState.guessing == 0) {
                openXmlTableReference.Variable = variable;
                openXmlTableReference.RowPattern = rowPattern;
            }
            switch (this.LA(1)) {
                case 198: {
                        this.match(198);
                        ValueExpression flags = this.integerOrVariable();
                        if (base.inputState.guessing == 0) {
                            openXmlTableReference.Flags = flags;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            return openXmlTableReference;
        }

        public void openXmlWithClauseOpt(OpenXmlTableReference vParent) {
            IToken token = null;
            bool flag = false;
            if (this.LA(1) == 171 && TSql140ParserInternal.tokenSet_143_.member(this.LA(2))) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(171);
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                if (this.LA(1) == 171 && this.LA(2) == 191) {
                    this.match(171);
                    this.match(191);
                    this.openXmlSchemaItemList(vParent);
                    token = this.LT(1);
                    this.match(192);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                    }
                    return;
                }
                if (this.LA(1) == 171 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233)) {
                    this.match(171);
                    SchemaObjectName tableName = this.schemaObjectThreePartName();
                    if (base.inputState.guessing == 0) {
                        vParent.TableName = tableName;
                    }
                    return;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (TSql140ParserInternal.tokenSet_129_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_105_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void openXmlSchemaItemList(OpenXmlTableReference vParent) {
            SchemaDeclarationItem item = this.openXmlSchemaItem();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.SchemaDeclarationItems, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.openXmlSchemaItem();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.SchemaDeclarationItems, item);
                }
            }
        }

        public SchemaDeclarationItem openXmlSchemaItem() {
            SchemaDeclarationItem schemaDeclarationItem = base.FragmentFactory.CreateFragment<SchemaDeclarationItem>();
            ColumnDefinitionBase columnDefinition = this.columnDefinitionBasic();
            if (base.inputState.guessing == 0) {
                schemaDeclarationItem.ColumnDefinition = columnDefinition;
            }
            switch (this.LA(1)) {
                case 230:
                case 231:
                case 234: {
                        ValueExpression mapping = this.stringOrVariable();
                        if (base.inputState.guessing == 0) {
                            schemaDeclarationItem.Mapping = mapping;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                case 198:
                    break;
            }
            return schemaDeclarationItem;
        }

        public ColumnDefinitionBase columnDefinitionBasic() {
            ColumnDefinitionBase columnDefinitionBase = base.FragmentFactory.CreateFragment<ColumnDefinitionBase>();
            Identifier columnIdentifier = this.identifier();
            DataTypeReference dataType = this.scalarDataType();
            if (base.inputState.guessing == 0) {
                columnDefinitionBase.ColumnIdentifier = columnIdentifier;
                columnDefinitionBase.DataType = dataType;
            }
            this.collationOpt(columnDefinitionBase);
            return columnDefinitionBase;
        }

        public OpenJsonTableReference openJsonParams() {
            OpenJsonTableReference openJsonTableReference = base.FragmentFactory.CreateFragment<OpenJsonTableReference>();
            ScalarExpression variable = this.expression();
            if (base.inputState.guessing == 0) {
                openJsonTableReference.Variable = variable;
            }
            switch (this.LA(1)) {
                case 198: {
                        this.match(198);
                        StringLiteral rowPattern = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            openJsonTableReference.RowPattern = rowPattern;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            return openJsonTableReference;
        }

        public void openJsonWithClauseOpt(OpenJsonTableReference vParent) {
            IToken token = null;
            bool flag = false;
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(171);
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                this.match(171);
                this.match(191);
                this.openJsonSchemaItemList(vParent);
                token = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                }
                return;
            }
            if (TSql140ParserInternal.tokenSet_129_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_105_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void openJsonSchemaItemList(OpenJsonTableReference vParent) {
            SchemaDeclarationItemOpenjson item = this.openJsonSchemaItem();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.SchemaDeclarationItems, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.openJsonSchemaItem();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.SchemaDeclarationItems, item);
                }
            }
        }

        public SchemaDeclarationItemOpenjson openJsonSchemaItem() {
            SchemaDeclarationItemOpenjson schemaDeclarationItemOpenjson = base.FragmentFactory.CreateFragment<SchemaDeclarationItemOpenjson>();
            IToken token = null;
            ColumnDefinitionBase columnDefinition = this.columnDefinitionBasic();
            if (base.inputState.guessing == 0) {
                schemaDeclarationItemOpenjson.ColumnDefinition = columnDefinition;
                schemaDeclarationItemOpenjson.AsJson = false;
            }
            switch (this.LA(1)) {
                case 230:
                case 231: {
                        ValueExpression mapping = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            schemaDeclarationItemOpenjson.Mapping = mapping;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 9:
                case 192:
                case 198:
                    break;
            }
            switch (this.LA(1)) {
                case 9:
                    this.match(9);
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token, "JSON");
                        schemaDeclarationItemOpenjson.AsJson = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                case 198:
                    break;
            }
            return schemaDeclarationItemOpenjson;
        }

        public TableReferenceWithAlias openRowsetRowset() {
            IToken token = null;
            token = this.LT(1);
            this.match(109);
            this.match(191);
            TableReferenceWithAlias tableReferenceWithAlias;
            switch (this.LA(1)) {
                case 230:
                case 231:
                    tableReferenceWithAlias = this.openRowsetParams();
                    break;
                case 232:
                case 233:
                    tableReferenceWithAlias = this.internalOpenRowsetArgs();
                    break;
                case 17:
                    tableReferenceWithAlias = this.openRowsetBulk();
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tableReferenceWithAlias, token);
            }
            return tableReferenceWithAlias;
        }

        public OpenQueryTableReference openQueryRowset() {
            OpenQueryTableReference openQueryTableReference = base.FragmentFactory.CreateFragment<OpenQueryTableReference>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(108);
            this.match(191);
            Identifier linkedServer = this.identifier();
            this.match(198);
            StringLiteral query = this.stringLiteral();
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(openQueryTableReference, token);
                openQueryTableReference.LinkedServer = linkedServer;
                openQueryTableReference.Query = query;
                TSql80ParserBaseInternal.UpdateTokenInfo(openQueryTableReference, token2);
            }
            return openQueryTableReference;
        }

        public AdHocTableReference adhocRowset() {
            AdHocTableReference adHocTableReference = base.FragmentFactory.CreateFragment<AdHocTableReference>();
            AdHocDataSource dataSource = this.adhocDataSource();
            this.match(200);
            if (base.inputState.guessing == 0) {
                adHocTableReference.DataSource = dataSource;
            }
            SchemaObjectNameOrValueExpression @object = this.objectOrString();
            if (base.inputState.guessing == 0) {
                adHocTableReference.Object = @object;
            }
            return adHocTableReference;
        }

        public OpenRowsetTableReference openRowsetParams() {
            OpenRowsetTableReference openRowsetTableReference = base.FragmentFactory.CreateFragment<OpenRowsetTableReference>();
            IToken token = null;
            StringLiteral providerName = this.stringLiteral();
            this.match(198);
            if (base.inputState.guessing == 0) {
                openRowsetTableReference.ProviderName = providerName;
            }
            if ((this.LA(1) == 230 || this.LA(1) == 231) && this.LA(2) == 204) {
                StringLiteral dataSource = this.stringLiteral();
                if (base.inputState.guessing == 0) {
                    openRowsetTableReference.DataSource = dataSource;
                }
                this.match(204);
                switch (this.LA(1)) {
                    case 230:
                    case 231: {
                            StringLiteral userId = this.stringLiteral();
                            if (base.inputState.guessing == 0) {
                                openRowsetTableReference.UserId = userId;
                            }
                            break;
                        }
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    case 204:
                        break;
                }
                this.match(204);
                switch (this.LA(1)) {
                    case 230:
                    case 231: {
                            StringLiteral password = this.stringLiteral();
                            if (base.inputState.guessing == 0) {
                                openRowsetTableReference.Password = password;
                            }
                            break;
                        }
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    case 198:
                        break;
                }
                goto IL_01ac;
            }
            if ((this.LA(1) == 230 || this.LA(1) == 231) && this.LA(2) == 198) {
                StringLiteral providerString = this.stringLiteral();
                if (base.inputState.guessing == 0) {
                    openRowsetTableReference.ProviderString = providerString;
                }
                goto IL_01ac;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_01ac:
            this.match(198);
            switch (this.LA(1)) {
                case 200:
                case 232:
                case 233: {
                        SchemaObjectName @object = this.schemaObjectThreePartName();
                        if (base.inputState.guessing == 0) {
                            openRowsetTableReference.Object = @object;
                        }
                        break;
                    }
                case 230:
                case 231: {
                        StringLiteral query = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            openRowsetTableReference.Query = query;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(openRowsetTableReference, token);
            }
            this.simpleTableReferenceAliasOpt(openRowsetTableReference);
            return openRowsetTableReference;
        }

        public InternalOpenRowset internalOpenRowsetArgs() {
            InternalOpenRowset internalOpenRowset = base.FragmentFactory.CreateFragment<InternalOpenRowset>();
            IToken token = null;
            Identifier identifier = this.identifier();
            if (base.inputState.guessing == 0) {
                internalOpenRowset.Identifier = identifier;
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                ScalarExpression item = this.possibleNegativeConstant();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(internalOpenRowset, internalOpenRowset.VarArgs, item);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(internalOpenRowset, token);
            }
            this.simpleTableReferenceAliasOpt(internalOpenRowset);
            return internalOpenRowset;
        }

        public BulkOpenRowset openRowsetBulk() {
            BulkOpenRowset bulkOpenRowset = base.FragmentFactory.CreateFragment<BulkOpenRowset>();
            IToken token = null;
            int encounteredOptions = 34866;
            this.match(17);
            StringLiteral stringLiteral = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                bulkOpenRowset.DataFile = stringLiteral;
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                BulkInsertOption bulkInsertOption = this.openRowsetBulkHint();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, (int)bulkInsertOption.OptionKind, bulkInsertOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(bulkOpenRowset, bulkOpenRowset.Options, bulkInsertOption);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql90ParserBaseInternal.CheckForFormatFileOptionInOpenRowsetBulk(encounteredOptions, stringLiteral);
                TSql140ParserBaseInternal.CheckForDataFileFormatProhibitedOptionsInOpenRowsetBulk(encounteredOptions, stringLiteral);
                TSql80ParserBaseInternal.UpdateTokenInfo(bulkOpenRowset, token);
            }
            this.simpleTableReferenceAliasOpt(bulkOpenRowset);
            if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                this.columnNameList(bulkOpenRowset, bulkOpenRowset.Columns);
                goto IL_0133;
            }
            if (TSql140ParserInternal.tokenSet_137_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_105_.member(this.LA(2))) {
                goto IL_0133;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0133:
            return bulkOpenRowset;
        }

        public BulkInsertOption openRowsetBulkHint() {
            if (this.LA(1) == 232 && (this.LA(2) == 192 || this.LA(2) == 198)) {
                return this.openRowsetBulkHintNoValue();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                return this.simpleBulkInsertOptionWithValue();
            }
            if (this.LA(1) == 113) {
                return this.openRowsetBulkOrderHint();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public BulkInsertOption openRowsetBulkHintNoValue() {
            BulkInsertOption bulkInsertOption = base.FragmentFactory.CreateFragment<BulkInsertOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                bulkInsertOption.OptionKind = OpenRowsetBulkHintOptionsHelper.Instance.ParseOption(token);
                TSql80ParserBaseInternal.UpdateTokenInfo(bulkInsertOption, token);
            }
            return bulkInsertOption;
        }

        public AdHocDataSource adhocDataSource() {
            AdHocDataSource adHocDataSource = base.FragmentFactory.CreateFragment<AdHocDataSource>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(107);
            this.match(191);
            StringLiteral providerName = this.stringLiteral();
            this.match(198);
            StringLiteral initString = this.stringLiteral();
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(adHocDataSource, token);
                adHocDataSource.ProviderName = providerName;
                adHocDataSource.InitString = initString;
                TSql80ParserBaseInternal.UpdateTokenInfo(adHocDataSource, token2);
            }
            return adHocDataSource;
        }

        public SchemaObjectNameOrValueExpression objectOrString() {
            SchemaObjectNameOrValueExpression schemaObjectNameOrValueExpression = base.FragmentFactory.CreateFragment<SchemaObjectNameOrValueExpression>();
            switch (this.LA(1)) {
                case 200:
                case 232:
                case 233: {
                        SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
                        if (base.inputState.guessing == 0) {
                            schemaObjectNameOrValueExpression.SchemaObjectName = schemaObjectName;
                        }
                        break;
                    }
                case 230:
                case 231: {
                        Literal valueExpression = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            schemaObjectNameOrValueExpression.ValueExpression = valueExpression;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return schemaObjectNameOrValueExpression;
        }

        public void simpleTableHints(TSqlFragment vParent, IList<TableHint> hints) {
            IToken token = null;
            token = this.LT(1);
            this.match(171);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
            if (this.LA(1) == 191 && this.LA(2) == 221) {
                IndexTableHint item = this.oldForceIndex();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, hints, item);
                }
                return;
            }
            if (this.LA(1) == 191 && (this.LA(2) == 78 || this.LA(2) == 84 || this.LA(2) == 232)) {
                this.tableHints(vParent, hints, true);
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void tableHintsBody(TSqlFragment vParent, IList<TableHint> hints, bool tableHintAllowed) {
            TableHint item = this.tableHint(tableHintAllowed);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, hints, item);
            }
            while (true) {
                if (!TSql140ParserInternal.tokenSet_150_.member(this.LA(1))) {
                    break;
                }
                switch (this.LA(1)) {
                    case 198:
                        this.match(198);
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    case 78:
                    case 84:
                    case 232:
                        break;
                }
                item = this.tableHint(tableHintAllowed);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, hints, item);
                }
            }
        }

        public TableHint tableHint(bool indexHintAllowed) {
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_151_.member(this.LA(2)) && base.NextTokenMatches("FORCESEEK")) {
                return this.forceSeekTableHint(indexHintAllowed);
            }
            if ((this.LA(1) == 78 || this.LA(1) == 232) && TSql140ParserInternal.tokenSet_152_.member(this.LA(2))) {
                return this.simpleTableHint();
            }
            if (this.LA(1) == 84) {
                return this.indexTableHint(indexHintAllowed);
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                return this.literalTableHint();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ForceSeekTableHint forceSeekTableHint(bool indexHintAllowed) {
            ForceSeekTableHint forceSeekTableHint = base.FragmentFactory.CreateFragment<ForceSeekTableHint>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FORCESEEK");
                TSql80ParserBaseInternal.UpdateTokenInfo(forceSeekTableHint, token);
                forceSeekTableHint.HintKind = TableHintKind.ForceSeek;
            }
            switch (this.LA(1)) {
                case 191: {
                        this.match(191);
                        IdentifierOrValueExpression indexValue = this.identifierOrInteger();
                        if (base.inputState.guessing == 0) {
                            if (!indexHintAllowed) {
                                TSql80ParserBaseInternal.ThrowParseErrorException("SQL46074", token, TSqlParserResource.SQL46074Message);
                            }
                            forceSeekTableHint.IndexValue = indexValue;
                        }
                        this.match(191);
                        ColumnReferenceExpression item = this.identifierColumnReferenceExpression();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(forceSeekTableHint, forceSeekTableHint.ColumnValues, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.identifierColumnReferenceExpression();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(forceSeekTableHint, forceSeekTableHint.ColumnValues, item);
                            }
                        }
                        this.match(192);
                        token2 = this.LT(1);
                        this.match(192);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(forceSeekTableHint, token2);
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 78:
                case 84:
                case 192:
                case 198:
                case 232:
                    break;
            }
            return forceSeekTableHint;
        }

        public TableHint simpleTableHint() {
            TableHint tableHint = base.FragmentFactory.CreateFragment<TableHint>();
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 78:
                    token = this.LT(1);
                    this.match(78);
                    if (base.inputState.guessing == 0) {
                        tableHint.HintKind = TableHintKind.HoldLock;
                        TSql80ParserBaseInternal.UpdateTokenInfo(tableHint, token);
                    }
                    break;
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        tableHint.HintKind = TableHintOptionsHelper.Instance.ParseOption(token2, SqlVersionFlags.TSql140);
                        TSql80ParserBaseInternal.UpdateTokenInfo(tableHint, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return tableHint;
        }

        public IndexTableHint indexTableHint(bool indexHintAllowed) {
            IndexTableHint indexTableHint = base.FragmentFactory.CreateFragment<IndexTableHint>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(84);
            if (base.inputState.guessing == 0) {
                if (!indexHintAllowed) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46074", token, TSqlParserResource.SQL46074Message);
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(indexTableHint, token);
                indexTableHint.HintKind = TableHintKind.Index;
            }
            switch (this.LA(1)) {
                case 206: {
                        this.match(206);
                        IdentifierOrValueExpression item = this.identifierOrInteger();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(indexTableHint, indexTableHint.IndexValues, item);
                        }
                        break;
                    }
                case 191: {
                        this.match(191);
                        IdentifierOrValueExpression item = this.identifierOrInteger();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(indexTableHint, indexTableHint.IndexValues, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.identifierOrInteger();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(indexTableHint, indexTableHint.IndexValues, item);
                            }
                        }
                        token2 = this.LT(1);
                        this.match(192);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(indexTableHint, token2);
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return indexTableHint;
        }

        public LiteralTableHint literalTableHint() {
            LiteralTableHint literalTableHint = base.FragmentFactory.CreateFragment<LiteralTableHint>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal value = this.integer();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SPATIAL_WINDOW_MAX_CELLS");
                literalTableHint.HintKind = TableHintKind.SpatialWindowMaxCells;
                TSql80ParserBaseInternal.UpdateTokenInfo(literalTableHint, token);
                literalTableHint.Value = value;
            }
            return literalTableHint;
        }

        public IdentifierOrValueExpression identifierOrInteger() {
            IdentifierOrValueExpression identifierOrValueExpression = base.FragmentFactory.CreateFragment<IdentifierOrValueExpression>();
            switch (this.LA(1)) {
                case 232:
                case 233: {
                        Identifier identifier = this.identifier();
                        if (base.inputState.guessing == 0) {
                            identifierOrValueExpression.Identifier = identifier;
                        }
                        break;
                    }
                case 221: {
                        Literal valueExpression = this.integer();
                        if (base.inputState.guessing == 0) {
                            identifierOrValueExpression.ValueExpression = valueExpression;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return identifierOrValueExpression;
        }

        public BooleanExpression booleanExpressionWithFlags(ExpressionFlags expressionFlags) {
            BooleanExpression booleanExpression = null;
            return this.booleanExpressionOr(expressionFlags);
        }

        public WhereClause whereCurrentOfCursorClause(SubDmlFlags subDmlFlags) {
            WhereClause whereClause = base.FragmentFactory.CreateFragment<WhereClause>();
            IToken token = null;
            token = this.LT(1);
            this.match(169);
            this.match(37);
            this.match(102);
            CursorId cursor = this.cursorId();
            if (base.inputState.guessing == 0) {
                if ((subDmlFlags & SubDmlFlags.InsideSubDml) == SubDmlFlags.InsideSubDml) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46083", token, TSqlParserResource.SQL46083Message);
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(whereClause, token);
                whereClause.Cursor = cursor;
            }
            return whereClause;
        }

        public GroupingSpecification groupByItem(bool isAll, ref bool encounteredCubeRollupGroupingSets) {
            GroupingSpecification result;
            if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("CUBE")) {
                result = this.cubeSpec(isAll);
                if (base.inputState.guessing == 0) {
                    encounteredCubeRollupGroupingSets = true;
                }
                goto IL_019a;
            }
            if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("ROLLUP")) {
                result = this.rollupSpec(isAll);
                if (base.inputState.guessing == 0) {
                    encounteredCubeRollupGroupingSets = true;
                }
                goto IL_019a;
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("GROUPING")) {
                result = this.groupingSetsSpec(isAll);
                if (base.inputState.guessing == 0) {
                    encounteredCubeRollupGroupingSets = true;
                }
                goto IL_019a;
            }
            bool flag = false;
            if (this.LA(1) == 191 && this.LA(2) == 192) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(191);
                    this.match(192);
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                result = this.grandTotal();
                goto IL_019a;
            }
            if (TSql140ParserInternal.tokenSet_42_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_153_.member(this.LA(2))) {
                result = this.simpleGroupByItem();
                goto IL_019a;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_019a:
            return result;
        }

        public CubeGroupingSpecification cubeSpec(bool isAll) {
            CubeGroupingSpecification cubeGroupingSpecification = base.FragmentFactory.CreateFragment<CubeGroupingSpecification>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(191);
            this.cubeOrRollupArgumentList(cubeGroupingSpecification, cubeGroupingSpecification.Arguments);
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CUBE");
                if (isAll) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46084", token, TSqlParserResource.SQL46084Message);
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(cubeGroupingSpecification, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(cubeGroupingSpecification, token2);
            }
            return cubeGroupingSpecification;
        }

        public RollupGroupingSpecification rollupSpec(bool isAll) {
            RollupGroupingSpecification rollupGroupingSpecification = base.FragmentFactory.CreateFragment<RollupGroupingSpecification>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(191);
            this.cubeOrRollupArgumentList(rollupGroupingSpecification, rollupGroupingSpecification.Arguments);
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ROLLUP");
                if (isAll) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46084", token, TSqlParserResource.SQL46084Message);
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(rollupGroupingSpecification, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(rollupGroupingSpecification, token2);
            }
            return rollupGroupingSpecification;
        }

        public GroupingSetsGroupingSpecification groupingSetsSpec(bool isAll) {
            GroupingSetsGroupingSpecification groupingSetsGroupingSpecification = base.FragmentFactory.CreateFragment<GroupingSetsGroupingSpecification>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            this.match(191);
            GroupingSpecification item = this.groupingSet();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "GROUPING");
                TSql80ParserBaseInternal.Match(token2, "SETS");
                if (isAll) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46084", token, TSqlParserResource.SQL46084Message);
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(groupingSetsGroupingSpecification, token);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(groupingSetsGroupingSpecification, groupingSetsGroupingSpecification.Sets, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.groupingSet();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(groupingSetsGroupingSpecification, groupingSetsGroupingSpecification.Sets, item);
                }
            }
            token3 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(groupingSetsGroupingSpecification, token3);
            }
            return groupingSetsGroupingSpecification;
        }

        public GrandTotalGroupingSpecification grandTotal() {
            GrandTotalGroupingSpecification grandTotalGroupingSpecification = base.FragmentFactory.CreateFragment<GrandTotalGroupingSpecification>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(191);
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(grandTotalGroupingSpecification, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(grandTotalGroupingSpecification, token2);
            }
            return grandTotalGroupingSpecification;
        }

        public ExpressionGroupingSpecification simpleGroupByItem() {
            ExpressionGroupingSpecification expressionGroupingSpecification = base.FragmentFactory.CreateFragment<ExpressionGroupingSpecification>();
            ScalarExpression expression = this.expression();
            if (base.inputState.guessing == 0) {
                expressionGroupingSpecification.Expression = expression;
            }
            return expressionGroupingSpecification;
        }

        public GroupingSpecification groupingSet() {
            bool flag = false;
            if (this.LA(1) == 191 && this.LA(2) == 192) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(191);
                    this.match(192);
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                return this.grandTotal();
            }
            bool flag2 = false;
            if (this.LA(1) == 191 && TSql140ParserInternal.tokenSet_42_.member(this.LA(2))) {
                int pos2 = this.mark();
                flag2 = true;
                base.inputState.guessing++;
                try {
                    this.match(191);
                } catch (RecognitionException) {
                    flag2 = false;
                }
                this.rewind(pos2);
                base.inputState.guessing--;
            }
            if (flag2) {
                return this.composingGroupingSet();
            }
            if (TSql140ParserInternal.tokenSet_42_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_154_.member(this.LA(2))) {
                return this.groupingSetItem();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public CompositeGroupingSpecification composingGroupingSet() {
            CompositeGroupingSpecification compositeGroupingSpecification = base.FragmentFactory.CreateFragment<CompositeGroupingSpecification>();
            this.match(191);
            GroupingSpecification item = this.groupingSetItem();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(compositeGroupingSpecification, compositeGroupingSpecification.Items, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.groupingSetItem();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(compositeGroupingSpecification, compositeGroupingSpecification.Items, item);
                }
            }
            this.match(192);
            return compositeGroupingSpecification;
        }

        public GroupingSpecification groupingSetItem() {
            if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("CUBE")) {
                return this.cubeSpec(false);
            }
            if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("ROLLUP")) {
                return this.rollupSpec(false);
            }
            if (TSql140ParserInternal.tokenSet_42_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_154_.member(this.LA(2))) {
                return this.simpleGroupByItem();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void cubeOrRollupArgumentList(TSqlFragment vParent, IList<GroupingSpecification> specs) {
            GroupingSpecification item = this.cubeOrRollupArgument();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, specs, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.cubeOrRollupArgument();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, specs, item);
                }
            }
        }

        public GroupingSpecification cubeOrRollupArgument() {
            bool flag = false;
            if (this.LA(1) == 191 && TSql140ParserInternal.tokenSet_42_.member(this.LA(2))) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(191);
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                return this.compositeGroupByItem();
            }
            if (TSql140ParserInternal.tokenSet_42_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_154_.member(this.LA(2))) {
                return this.simpleGroupByItem();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public CompositeGroupingSpecification compositeGroupByItem() {
            CompositeGroupingSpecification compositeGroupingSpecification = base.FragmentFactory.CreateFragment<CompositeGroupingSpecification>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(191);
            ExpressionGroupingSpecification item = this.simpleGroupByItem();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(compositeGroupingSpecification, token);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(compositeGroupingSpecification, compositeGroupingSpecification.Items, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.simpleGroupByItem();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(compositeGroupingSpecification, compositeGroupingSpecification.Items, item);
                }
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(compositeGroupingSpecification, token2);
            }
            return compositeGroupingSpecification;
        }

        public ExpressionWithSortOrder expressionWithSortOrder() {
            ExpressionWithSortOrder expressionWithSortOrder = base.FragmentFactory.CreateFragment<ExpressionWithSortOrder>();
            ScalarExpression expression = this.expression();
            if (base.inputState.guessing == 0) {
                expressionWithSortOrder.Expression = expression;
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 10:
                    case 50: {
                            SortOrder sortOrder = this.orderByOption(expressionWithSortOrder);
                            if (base.inputState.guessing == 0) {
                                expressionWithSortOrder.SortOrder = sortOrder;
                            }
                            goto IL_02e5;
                        }
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 59:
                    case 60:
                    case 61:
                    case 64:
                    case 67:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 87:
                    case 92:
                    case 95:
                        goto IL_02e5;
                }
            } else {
                switch (num) {
                    case 106:
                    case 111:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 158:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 198:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_02e5;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_02e5:
            return expressionWithSortOrder;
        }

        public UpdateForClause updateForClause() {
            UpdateForClause updateForClause = base.FragmentFactory.CreateFragment<UpdateForClause>();
            IToken token = null;
            token = this.LT(1);
            this.match(160);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(updateForClause, token);
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0323;
                }
            } else {
                switch (num) {
                    case 102: {
                            this.match(102);
                            ColumnReferenceExpression item = this.column();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(updateForClause, updateForClause.Columns, item);
                            }
                            while (true) {
                                if (this.LA(1) != 198) {
                                    break;
                                }
                                this.match(198);
                                item = this.column();
                                if (base.inputState.guessing == 0) {
                                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(updateForClause, updateForClause.Columns, item);
                                }
                            }
                            goto IL_0323;
                        }
                    case 106:
                    case 111:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0323;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0323:
            return updateForClause;
        }

        public XmlForClauseOption xmlForClauseMode() {
            XmlForClauseOption xmlForClauseOption = base.FragmentFactory.CreateFragment<XmlForClauseOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                xmlForClauseOption.OptionKind = XmlForClauseModeHelper.Instance.ParseOption(token);
                TSql80ParserBaseInternal.UpdateTokenInfo(xmlForClauseOption, token);
            }
            if (this.LA(1) == 191 && (this.LA(2) == 230 || this.LA(2) == 231)) {
                token2 = this.LT(1);
                this.match(191);
                Literal value = this.stringLiteral();
                token3 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    if (xmlForClauseOption.OptionKind == XmlForClauseOptions.Explicit || xmlForClauseOption.OptionKind == XmlForClauseOptions.Auto) {
                        throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
                    }
                    xmlForClauseOption.Value = value;
                    TSql80ParserBaseInternal.UpdateTokenInfo(xmlForClauseOption, token3);
                }
                goto IL_0115;
            }
            if (TSql140ParserInternal.tokenSet_155_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_1_.member(this.LA(2))) {
                goto IL_0115;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0115:
            return xmlForClauseOption;
        }

        public XmlForClauseOption xmlParam(XmlForClauseOptions encountered) {
            XmlForClauseOption xmlForClauseOption = base.FragmentFactory.CreateFragment<XmlForClauseOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            if (this.LA(1) == 191 && (this.LA(2) == 230 || this.LA(2) == 231)) {
                token2 = this.LT(1);
                this.match(191);
                Literal value = this.stringLiteral();
                token3 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    if (!TSql80ParserBaseInternal.TryMatch(token, "XMLSCHEMA") && !TSql80ParserBaseInternal.TryMatch(token, "ROOT")) {
                        throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
                    }
                    xmlForClauseOption.Value = value;
                    TSql80ParserBaseInternal.UpdateTokenInfo(xmlForClauseOption, token3);
                }
                goto IL_01b9;
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_155_.member(this.LA(2))) {
                token4 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    if (TSql80ParserBaseInternal.TryMatch(token, "BINARY")) {
                        TSql80ParserBaseInternal.Match(token4, "BASE64");
                        xmlForClauseOption.OptionKind = XmlForClauseOptions.BinaryBase64;
                    } else {
                        TSql80ParserBaseInternal.Match(token, "ELEMENTS");
                        if (TSql80ParserBaseInternal.TryMatch(token4, "XSINIL")) {
                            xmlForClauseOption.OptionKind = XmlForClauseOptions.ElementsXsiNil;
                        } else {
                            TSql80ParserBaseInternal.Match(token4, "ABSENT");
                            xmlForClauseOption.OptionKind = XmlForClauseOptions.ElementsAbsent;
                        }
                    }
                    TSql80ParserBaseInternal.UpdateTokenInfo(xmlForClauseOption, token4);
                }
                goto IL_01b9;
            }
            if (TSql140ParserInternal.tokenSet_155_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_1_.member(this.LA(2))) {
                goto IL_01b9;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_01b9:
            if (base.inputState.guessing == 0) {
                if (xmlForClauseOption.OptionKind == XmlForClauseOptions.None) {
                    xmlForClauseOption.OptionKind = XmlForClauseOptionsHelper.Instance.ParseOption(token);
                    TSql80ParserBaseInternal.UpdateTokenInfo(xmlForClauseOption, token);
                }
                TSql80ParserBaseInternal.CheckXmlForClauseOptionDuplication(encountered, xmlForClauseOption.OptionKind, token);
            }
            return xmlForClauseOption;
        }

        public JsonForClauseOption jsonForClauseMode() {
            JsonForClauseOption jsonForClauseOption = base.FragmentFactory.CreateFragment<JsonForClauseOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                jsonForClauseOption.OptionKind = JsonForClauseModeHelper.Instance.ParseOption(token);
                TSql80ParserBaseInternal.UpdateTokenInfo(jsonForClauseOption, token);
            }
            return jsonForClauseOption;
        }

        public JsonForClauseOption jsonParam(JsonForClauseOptions encountered) {
            JsonForClauseOption jsonForClauseOption = base.FragmentFactory.CreateFragment<JsonForClauseOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            if (this.LA(1) == 191 && (this.LA(2) == 230 || this.LA(2) == 231)) {
                token2 = this.LT(1);
                this.match(191);
                Literal value = this.stringLiteral();
                token3 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    if (!TSql80ParserBaseInternal.TryMatch(token, "ROOT")) {
                        throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
                    }
                    jsonForClauseOption.Value = value;
                    TSql80ParserBaseInternal.UpdateTokenInfo(jsonForClauseOption, token3);
                }
                goto IL_00e8;
            }
            if (TSql140ParserInternal.tokenSet_155_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_1_.member(this.LA(2))) {
                goto IL_00e8;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00e8:
            if (base.inputState.guessing == 0) {
                jsonForClauseOption.OptionKind = JsonForClauseOptionsHelper.Instance.ParseOption(token);
                TSql80ParserBaseInternal.UpdateTokenInfo(jsonForClauseOption, token);
                if ((encountered & jsonForClauseOption.OptionKind) == JsonForClauseOptions.None && ((encountered & JsonForClauseOptions.WithoutArrayWrapper) == JsonForClauseOptions.None || jsonForClauseOption.OptionKind != JsonForClauseOptions.Root) && ((encountered & JsonForClauseOptions.Root) == JsonForClauseOptions.None || jsonForClauseOption.OptionKind != JsonForClauseOptions.WithoutArrayWrapper)) {
                    goto IL_013c;
                }
                throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
            }
            goto IL_013c;
            IL_013c:
            return jsonForClauseOption;
        }

        public OptimizerHint hint() {
            if (this.LA(1) == 232 && (this.LA(2) == 206 || this.LA(2) == 221)) {
                return this.literalOptimizerHint();
            }
            if ((this.LA(1) == 113 || this.LA(1) == 182 || this.LA(1) == 232) && TSql140ParserInternal.tokenSet_156_.member(this.LA(2))) {
                return this.simpleOptimizerHint();
            }
            if (this.LA(1) == 162 && this.LA(2) == 117) {
                return this.usePlanOptimizerHint();
            }
            if (this.LA(1) == 232 && this.LA(2) == 67) {
                return this.optimizeForOptimizerHint();
            }
            if (this.LA(1) == 148) {
                return this.tableHintsOptimizerHint();
            }
            if (this.LA(1) == 162 && this.LA(2) == 232) {
                return this.useHintClause();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public LiteralOptimizerHint literalOptimizerHint() {
            LiteralOptimizerHint literalOptimizerHint = base.FragmentFactory.CreateFragment<LiteralOptimizerHint>();
            IToken token = null;
            IToken token2 = null;
            if (this.LA(1) == 232 && this.LA(2) == 221) {
                token = this.LT(1);
                this.match(232);
                Literal value = this.integer();
                if (base.inputState.guessing == 0) {
                    literalOptimizerHint.HintKind = IntegerOptimizerHintHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
                    literalOptimizerHint.Value = value;
                }
                goto IL_00ef;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                token2 = this.LT(1);
                this.match(232);
                this.match(206);
                Literal value = this.integerOrRealOrNumeric();
                if (base.inputState.guessing == 0) {
                    literalOptimizerHint.HintKind = DoubleOptimizerHintHelper.Instance.ParseOption(token2, SqlVersionFlags.TSql140);
                    literalOptimizerHint.Value = value;
                }
                goto IL_00ef;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00ef:
            return literalOptimizerHint;
        }

        public OptimizerHint simpleOptimizerHint() {
            OptimizerHint optimizerHint = base.FragmentFactory.CreateFragment<OptimizerHint>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            IToken token6 = null;
            IToken token7 = null;
            IToken token8 = null;
            if (this.LA(1) == 232 && this.LA(2) == 90) {
                token = this.LT(1);
                this.match(232);
                this.match(90);
                if (base.inputState.guessing == 0) {
                    optimizerHint.HintKind = TSql80ParserBaseInternal.ParseJoinOptimizerHint(token);
                }
                goto IL_04a5;
            }
            if (this.LA(1) == 182 && this.LA(2) == 90) {
                this.match(182);
                this.match(90);
                if (base.inputState.guessing == 0) {
                    optimizerHint.HintKind = OptimizerHintKind.MergeJoin;
                }
                goto IL_04a5;
            }
            if (this.LA(1) == 232 && this.LA(2) == 158) {
                token2 = this.LT(1);
                this.match(232);
                this.match(158);
                if (base.inputState.guessing == 0) {
                    optimizerHint.HintKind = TSql80ParserBaseInternal.ParseUnionOptimizerHint(token2);
                }
                goto IL_04a5;
            }
            if (this.LA(1) == 182 && this.LA(2) == 158) {
                this.match(182);
                this.match(158);
                if (base.inputState.guessing == 0) {
                    optimizerHint.HintKind = OptimizerHintKind.MergeUnion;
                }
                goto IL_04a5;
            }
            if (this.LA(1) == 232 && this.LA(2) == 113) {
                token3 = this.LT(1);
                this.match(232);
                this.match(113);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token3, "FORCE");
                    optimizerHint.HintKind = OptimizerHintKind.ForceOrder;
                }
                goto IL_04a5;
            }
            if (this.LA(1) == 232 && this.LA(2) == 76) {
                token4 = this.LT(1);
                this.match(232);
                this.match(76);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token4, "HASH");
                    optimizerHint.HintKind = OptimizerHintKind.HashGroup;
                }
                goto IL_04a5;
            }
            if (this.LA(1) == 113) {
                this.LT(1);
                this.match(113);
                this.match(76);
                if (base.inputState.guessing == 0) {
                    optimizerHint.HintKind = OptimizerHintKind.OrderGroup;
                }
                goto IL_04a5;
            }
            if (this.LA(1) == 232 && this.LA(2) == 117) {
                token5 = this.LT(1);
                this.match(232);
                this.match(117);
                if (base.inputState.guessing == 0) {
                    optimizerHint.HintKind = PlanOptimizerHintHelper.Instance.ParseOption(token5, SqlVersionFlags.TSql140);
                }
                goto IL_04a5;
            }
            if (this.LA(1) == 232 && this.LA(2) == 232) {
                token6 = this.LT(1);
                this.match(232);
                token7 = this.LT(1);
                this.match(232);
                switch (this.LA(1)) {
                    case 192:
                    case 198:
                        if (base.inputState.guessing == 0) {
                            if (TSql80ParserBaseInternal.TryMatch(token6, "EXPAND")) {
                                TSql80ParserBaseInternal.Match(token7, "VIEWS");
                                optimizerHint.HintKind = OptimizerHintKind.ExpandViews;
                            } else if (TSql80ParserBaseInternal.TryMatch(token6, "PARAMETERIZATION")) {
                                if (TSql80ParserBaseInternal.TryMatch(token7, "SIMPLE")) {
                                    optimizerHint.HintKind = OptimizerHintKind.ParameterizationSimple;
                                } else {
                                    TSql80ParserBaseInternal.Match(token7, "FORCED");
                                    optimizerHint.HintKind = OptimizerHintKind.ParameterizationForced;
                                }
                            } else {
                                TSql80ParserBaseInternal.Match(token6, "BYPASS");
                                TSql80ParserBaseInternal.Match(token7, "OPTIMIZER_QUEUE");
                                optimizerHint.HintKind = OptimizerHintKind.BypassOptimizerQueue;
                            }
                        }
                        break;
                    case 158:
                        this.LT(1);
                        this.match(158);
                        this.match(5);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token6, "OPTIMIZE");
                            TSql80ParserBaseInternal.Match(token7, "CORRELATED");
                            optimizerHint.HintKind = OptimizerHintKind.OptimizeCorrelatedUnionAll;
                        }
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                goto IL_04a5;
            }
            if (this.LA(1) == 232 && (this.LA(2) == 192 || this.LA(2) == 198)) {
                token8 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    optimizerHint.HintKind = MonoOptimizerHintHelper.Instance.ParseOption(token8, SqlVersionFlags.TSql140);
                }
                goto IL_04a5;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_04a5:
            return optimizerHint;
        }

        public LiteralOptimizerHint usePlanOptimizerHint() {
            LiteralOptimizerHint literalOptimizerHint = base.FragmentFactory.CreateFragment<LiteralOptimizerHint>();
            this.LT(1);
            this.match(162);
            this.match(117);
            Literal value = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                literalOptimizerHint.HintKind = OptimizerHintKind.UsePlan;
                literalOptimizerHint.Value = value;
            }
            return literalOptimizerHint;
        }

        public OptimizeForOptimizerHint optimizeForOptimizerHint() {
            OptimizeForOptimizerHint optimizeForOptimizerHint = base.FragmentFactory.CreateFragment<OptimizeForOptimizerHint>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            this.match(67);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "OPTIMIZE");
                optimizeForOptimizerHint.HintKind = OptimizerHintKind.OptimizeFor;
            }
            switch (this.LA(1)) {
                case 191: {
                        this.match(191);
                        VariableValuePair item = this.variableValuePair();
                        if (base.inputState.guessing == 0) {
                            optimizeForOptimizerHint.IsForUnknown = false;
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(optimizeForOptimizerHint, optimizeForOptimizerHint.Pairs, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.variableValuePair();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(optimizeForOptimizerHint, optimizeForOptimizerHint.Pairs, item);
                            }
                        }
                        token2 = this.LT(1);
                        this.match(192);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(optimizeForOptimizerHint, token2);
                        }
                        break;
                    }
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token3, "UNKNOWN");
                        optimizeForOptimizerHint.IsForUnknown = true;
                        TSql80ParserBaseInternal.UpdateTokenInfo(optimizeForOptimizerHint, token3);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return optimizeForOptimizerHint;
        }

        public TableHintsOptimizerHint tableHintsOptimizerHint() {
            TableHintsOptimizerHint tableHintsOptimizerHint = base.FragmentFactory.CreateFragment<TableHintsOptimizerHint>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(148);
            token2 = this.LT(1);
            this.match(232);
            this.match(191);
            SchemaObjectName objectName = this.schemaObjectFourPartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tableHintsOptimizerHint, token);
                TSql80ParserBaseInternal.Match(token2, "HINT");
                tableHintsOptimizerHint.HintKind = OptimizerHintKind.TableHints;
                tableHintsOptimizerHint.ObjectName = objectName;
            }
            switch (this.LA(1)) {
                case 198:
                    this.match(198);
                    this.tableHintsBody(tableHintsOptimizerHint, tableHintsOptimizerHint.TableHints, true);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token3 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tableHintsOptimizerHint, token3);
            }
            return tableHintsOptimizerHint;
        }

        public UseHintList useHintClause() {
            UseHintList useHintList = base.FragmentFactory.CreateFragment<UseHintList>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            this.LT(1);
            this.match(162);
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(191);
            StringLiteral item = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "HINT");
                TSql80ParserBaseInternal.UpdateTokenInfo(useHintList, token2);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(useHintList, useHintList.Hints, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.stringLiteral();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(useHintList, useHintList.Hints, item);
                }
            }
            token3 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(useHintList, token3);
            }
            return useHintList;
        }

        public VariableValuePair variableValuePair() {
            VariableValuePair variableValuePair = base.FragmentFactory.CreateFragment<VariableValuePair>();
            IToken token = null;
            VariableReference variable = this.variable();
            switch (this.LA(1)) {
                case 206: {
                        this.match(206);
                        ScalarExpression value = this.possibleNegativeConstant();
                        if (base.inputState.guessing == 0) {
                            variableValuePair.Variable = variable;
                            variableValuePair.Value = value;
                            variableValuePair.IsForUnknown = false;
                        }
                        break;
                    }
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token, "UNKNOWN");
                        variableValuePair.Variable = variable;
                        variableValuePair.IsForUnknown = true;
                        TSql80ParserBaseInternal.UpdateTokenInfo(variableValuePair, token);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return variableValuePair;
        }

        public Literal cryptographicProviderFile() {
            Literal result = null;
            this.match(71);
            this.match(65);
            this.match(206);
            Literal literal = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                result = literal;
            }
            return result;
        }

        public AlterResourcePoolStatement alterResourcePoolStatement() {
            AlterResourcePoolStatement alterResourcePoolStatement = base.FragmentFactory.CreateFragment<AlterResourcePoolStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "POOL");
                alterResourcePoolStatement.Name = name;
                base.ThrowPartialAstIfPhaseOne(alterResourcePoolStatement);
            }
            this.resourcePoolStatementBody(alterResourcePoolStatement);
            return alterResourcePoolStatement;
        }

        public AlterResourceGovernorStatement alterResourceGovernorStatement() {
            AlterResourceGovernorStatement alterResourceGovernorStatement = base.FragmentFactory.CreateFragment<AlterResourceGovernorStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            IToken token6 = null;
            IToken token7 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "GOVERNOR");
            }
            switch (this.LA(1)) {
                case 126:
                    token3 = this.LT(1);
                    this.match(126);
                    if (base.inputState.guessing == 0) {
                        alterResourceGovernorStatement.Command = AlterResourceGovernorCommandType.Reconfigure;
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterResourceGovernorStatement, token3);
                    }
                    break;
                case 171:
                    this.LT(1);
                    this.match(171);
                    this.match(191);
                    token4 = this.LT(1);
                    this.match(232);
                    this.match(206);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token4, "CLASSIFIER_FUNCTION");
                        alterResourceGovernorStatement.Command = AlterResourceGovernorCommandType.ClassifierFunction;
                    }
                    switch (this.LA(1)) {
                        case 232:
                        case 233: {
                                SchemaObjectName classifierFunction = this.schemaObjectNonEmptyTwoPartName();
                                if (base.inputState.guessing == 0) {
                                    alterResourceGovernorStatement.ClassifierFunction = classifierFunction;
                                }
                                break;
                            }
                        case 100:
                            this.LT(1);
                            this.match(100);
                            if (base.inputState.guessing == 0) {
                                alterResourceGovernorStatement.ClassifierFunction = null;
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    token5 = this.LT(1);
                    this.match(192);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterResourceGovernorStatement, token5);
                    }
                    break;
                default:
                    if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2))) {
                        token2 = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token2, "DISABLE");
                            alterResourceGovernorStatement.Command = AlterResourceGovernorCommandType.Disable;
                            TSql80ParserBaseInternal.UpdateTokenInfo(alterResourceGovernorStatement, token2);
                        }
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 146) {
                        token6 = this.LT(1);
                        this.match(232);
                        token7 = this.LT(1);
                        this.match(146);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token6, "RESET");
                            alterResourceGovernorStatement.Command = AlterResourceGovernorCommandType.ResetStatistics;
                            TSql80ParserBaseInternal.UpdateTokenInfo(alterResourceGovernorStatement, token7);
                        }
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return alterResourceGovernorStatement;
        }

        public void resourcePoolStatementBody(ResourcePoolStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                token = this.LT(1);
                this.match(171);
                this.match(191);
                ResourcePoolParameter item = this.resourcePoolParameter();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.ResourcePoolParameters, item);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    item = this.resourcePoolParameter();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.ResourcePoolParameters, item);
                    }
                }
                token2 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                }
                return;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ResourcePoolParameter resourcePoolParameter() {
            ResourcePoolParameter resourcePoolParameter = base.FragmentFactory.CreateFragment<ResourcePoolParameter>();
            IToken token = null;
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("AFFINITY")) {
                ResourcePoolAffinitySpecification affinitySpecification = this.resourcePoolAffinitySpecification();
                if (base.inputState.guessing == 0) {
                    resourcePoolParameter.ParameterType = ResourcePoolParameterType.Affinity;
                    resourcePoolParameter.AffinitySpecification = affinitySpecification;
                }
                goto IL_020c;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                token = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    resourcePoolParameter.ParameterType = ResourcePoolParameterHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
                }
                this.match(206);
                Literal literal = this.integer();
                if (base.inputState.guessing == 0) {
                    int num = default(int);
                    if (int.TryParse(literal.Value, NumberStyles.Integer, (IFormatProvider)CultureInfo.InvariantCulture, out num)) {
                        if (resourcePoolParameter.ParameterType == ResourcePoolParameterType.MinCpuPercent || resourcePoolParameter.ParameterType == ResourcePoolParameterType.MinMemoryPercent || resourcePoolParameter.ParameterType == ResourcePoolParameterType.MinIoPercent) {
                            if (num < 0 || num > 100) {
                                TSql80ParserBaseInternal.ThrowParseErrorException("SQL46045", token, TSqlParserResource.SQL46045Message, token.getText());
                            }
                        } else if (resourcePoolParameter.ParameterType == ResourcePoolParameterType.MaxCpuPercent || resourcePoolParameter.ParameterType == ResourcePoolParameterType.MaxMemoryPercent || resourcePoolParameter.ParameterType == ResourcePoolParameterType.CapCpuPercent || resourcePoolParameter.ParameterType == ResourcePoolParameterType.TargetMemoryPercent || resourcePoolParameter.ParameterType == ResourcePoolParameterType.MaxIoPercent || resourcePoolParameter.ParameterType == ResourcePoolParameterType.CapIoPercent) {
                            if (num < 1 || num > 100) {
                                TSql80ParserBaseInternal.ThrowParseErrorException("SQL46045", token, TSqlParserResource.SQL46045Message, token.getText());
                            }
                        } else if ((resourcePoolParameter.ParameterType == ResourcePoolParameterType.MinIopsPerVolume || resourcePoolParameter.ParameterType == ResourcePoolParameterType.MaxIopsPerVolume) && num < 0) {
                            TSql80ParserBaseInternal.ThrowParseErrorException("SQL46045", token, TSqlParserResource.SQL46045Message, token.getText());
                        }
                        resourcePoolParameter.ParameterValue = literal;
                    } else {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(literal);
                    }
                }
                goto IL_020c;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_020c:
            return resourcePoolParameter;
        }

        public ResourcePoolAffinitySpecification resourcePoolAffinitySpecification() {
            ResourcePoolAffinitySpecification resourcePoolAffinitySpecification = base.FragmentFactory.CreateFragment<ResourcePoolAffinitySpecification>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "AFFINITY");
            }
            token2 = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                resourcePoolAffinitySpecification.AffinityType = ResourcePoolAffinityHelper.Instance.ParseOption(token2);
            }
            switch (this.LA(1)) {
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        if (resourcePoolAffinitySpecification.AffinityType != ResourcePoolAffinityType.Scheduler) {
                            TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token3);
                        }
                        TSql80ParserBaseInternal.Match(token3, "AUTO");
                        resourcePoolAffinitySpecification.IsAuto = true;
                        TSql80ParserBaseInternal.UpdateTokenInfo(resourcePoolAffinitySpecification, token3);
                    }
                    break;
                case 191: {
                        token4 = this.LT(1);
                        this.match(191);
                        LiteralRange item = this.poolAffinityRange();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(resourcePoolAffinitySpecification, token4);
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(resourcePoolAffinitySpecification, resourcePoolAffinitySpecification.PoolAffinityRanges, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.poolAffinityRange();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(resourcePoolAffinitySpecification, resourcePoolAffinitySpecification.PoolAffinityRanges, item);
                            }
                        }
                        token5 = this.LT(1);
                        this.match(192);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(resourcePoolAffinitySpecification, token5);
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return resourcePoolAffinitySpecification;
        }

        public LiteralRange poolAffinityRange() {
            LiteralRange literalRange = base.FragmentFactory.CreateFragment<LiteralRange>();
            IntegerLiteral from = this.integer();
            if (base.inputState.guessing == 0) {
                literalRange.From = from;
            }
            switch (this.LA(1)) {
                case 151: {
                        this.match(151);
                        IntegerLiteral to = this.integer();
                        if (base.inputState.guessing == 0) {
                            literalRange.To = to;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                case 198:
                    break;
            }
            return literalRange;
        }

        public void externalResourcePoolStatementBody(ExternalResourcePoolStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            int num = 0;
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                token = this.LT(1);
                this.match(171);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                }
                this.match(191);
                ExternalResourcePoolParameter externalResourcePoolParameter = this.externalResourcePoolParameter();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)externalResourcePoolParameter.ParameterType, externalResourcePoolParameter);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.ExternalResourcePoolParameters, externalResourcePoolParameter);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    externalResourcePoolParameter = this.externalResourcePoolParameter();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)externalResourcePoolParameter.ParameterType, externalResourcePoolParameter);
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.ExternalResourcePoolParameters, externalResourcePoolParameter);
                    }
                }
                token2 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                }
                return;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ExternalResourcePoolParameter externalResourcePoolParameter() {
            ExternalResourcePoolParameter externalResourcePoolParameter = base.FragmentFactory.CreateFragment<ExternalResourcePoolParameter>();
            IToken token = null;
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("AFFINITY")) {
                ExternalResourcePoolAffinitySpecification affinitySpecification = this.externalResourcePoolAffinitySpecification();
                if (base.inputState.guessing == 0) {
                    externalResourcePoolParameter.ParameterType = ExternalResourcePoolParameterType.Affinity;
                    externalResourcePoolParameter.AffinitySpecification = affinitySpecification;
                }
                goto IL_014c;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                token = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    externalResourcePoolParameter.ParameterType = ExternalResourcePoolParameterHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
                    TSql80ParserBaseInternal.UpdateTokenInfo(externalResourcePoolParameter, token);
                }
                this.match(206);
                Literal literal = this.integer();
                if (base.inputState.guessing == 0) {
                    if (externalResourcePoolParameter.ParameterType == ExternalResourcePoolParameterType.MaxCpuPercent || externalResourcePoolParameter.ParameterType == ExternalResourcePoolParameterType.MaxMemoryPercent) {
                        int num = int.Parse(literal.Value, NumberStyles.Integer, CultureInfo.InvariantCulture);
                        if (num < 1 || num > 100) {
                            TSql80ParserBaseInternal.ThrowParseErrorException("SQL46045", token, TSqlParserResource.SQL46045Message, token.getText());
                        }
                    }
                    externalResourcePoolParameter.ParameterValue = literal;
                }
                goto IL_014c;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_014c:
            return externalResourcePoolParameter;
        }

        public ExternalResourcePoolAffinitySpecification externalResourcePoolAffinitySpecification() {
            ExternalResourcePoolAffinitySpecification externalResourcePoolAffinitySpecification = base.FragmentFactory.CreateFragment<ExternalResourcePoolAffinitySpecification>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "AFFINITY");
                TSql80ParserBaseInternal.UpdateTokenInfo(externalResourcePoolAffinitySpecification, token);
            }
            token2 = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                externalResourcePoolAffinitySpecification.AffinityType = ExternalResourcePoolAffinityHelper.Instance.ParseOption(token2);
                TSql80ParserBaseInternal.UpdateTokenInfo(externalResourcePoolAffinitySpecification, token2);
            }
            switch (this.LA(1)) {
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        if (externalResourcePoolAffinitySpecification.AffinityType != ExternalResourcePoolAffinityType.Cpu) {
                            TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token3);
                        }
                        TSql80ParserBaseInternal.Match(token3, "AUTO");
                        externalResourcePoolAffinitySpecification.IsAuto = true;
                        TSql80ParserBaseInternal.UpdateTokenInfo(externalResourcePoolAffinitySpecification, token3);
                    }
                    break;
                case 191: {
                        token4 = this.LT(1);
                        this.match(191);
                        LiteralRange item = this.externalPoolAffinityRange();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(externalResourcePoolAffinitySpecification, token4);
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(externalResourcePoolAffinitySpecification, externalResourcePoolAffinitySpecification.PoolAffinityRanges, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.externalPoolAffinityRange();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(externalResourcePoolAffinitySpecification, externalResourcePoolAffinitySpecification.PoolAffinityRanges, item);
                            }
                        }
                        token5 = this.LT(1);
                        this.match(192);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(externalResourcePoolAffinitySpecification, token5);
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return externalResourcePoolAffinitySpecification;
        }

        public LiteralRange externalPoolAffinityRange() {
            LiteralRange literalRange = base.FragmentFactory.CreateFragment<LiteralRange>();
            IntegerLiteral from = this.integer();
            if (base.inputState.guessing == 0) {
                literalRange.From = from;
            }
            switch (this.LA(1)) {
                case 151: {
                        this.match(151);
                        IntegerLiteral to = this.integer();
                        if (base.inputState.guessing == 0) {
                            literalRange.To = to;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                case 198:
                    break;
            }
            return literalRange;
        }

        public void workloadGroupStatementBody(WorkloadGroupStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            int num = 0;
            token = this.LT(1);
            this.match(232);
            this.LT(1);
            this.match(76);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "WORKLOAD");
                vParent.Name = name;
                base.ThrowPartialAstIfPhaseOne(vParent);
            }
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                token2 = this.LT(1);
                this.match(171);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                }
                this.match(191);
                WorkloadGroupParameter workloadGroupParameter = this.workloadGroupParameter();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)workloadGroupParameter.ParameterType, workloadGroupParameter);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.WorkloadGroupParameters, workloadGroupParameter);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.LT(1);
                    this.match(198);
                    workloadGroupParameter = this.workloadGroupParameter();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)workloadGroupParameter.ParameterType, workloadGroupParameter);
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.WorkloadGroupParameters, workloadGroupParameter);
                    }
                }
                token3 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token3);
                }
                goto IL_019c;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_019c;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_019c:
            if (this.LA(1) == 232 && (this.LA(2) == 175 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("USING")) {
                token4 = this.LT(1);
                this.match(232);
                this.workloadGroupUsingOption(vParent);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token4, "USING");
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token4);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    this.workloadGroupUsingOption(vParent);
                }
                return;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public WorkloadGroupParameter workloadGroupParameter() {
            WorkloadGroupParameter result = null;
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            switch (this.LA(1)) {
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token, "IMPORTANCE");
                        WorkloadGroupImportanceParameter workloadGroupImportanceParameter = base.FragmentFactory.CreateFragment<WorkloadGroupImportanceParameter>();
                        workloadGroupImportanceParameter.ParameterType = WorkloadGroupParameterType.Importance;
                        workloadGroupImportanceParameter.ParameterValue = ImportanceParameterHelper.Instance.ParseOption(token2);
                        TSql80ParserBaseInternal.UpdateTokenInfo(workloadGroupImportanceParameter, token);
                        TSql80ParserBaseInternal.UpdateTokenInfo(workloadGroupImportanceParameter, token2);
                        result = workloadGroupImportanceParameter;
                    }
                    break;
                case 221: {
                        Literal literal = this.integer();
                        if (base.inputState.guessing == 0) {
                            WorkloadGroupResourceParameter workloadGroupResourceParameter = base.FragmentFactory.CreateFragment<WorkloadGroupResourceParameter>();
                            workloadGroupResourceParameter.ParameterType = WorkloadGroupResourceParameterHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
                            int num = default(int);
                            if (int.TryParse(literal.Value, NumberStyles.Integer, (IFormatProvider)CultureInfo.InvariantCulture, out num)) {
                                if (workloadGroupResourceParameter.ParameterType == WorkloadGroupParameterType.RequestMaxMemoryGrantPercent || workloadGroupResourceParameter.ParameterType == WorkloadGroupParameterType.GroupMinMemoryPercent) {
                                    if (num < 0 || num > 100) {
                                        TSql80ParserBaseInternal.ThrowParseErrorException("SQL46045", token, TSqlParserResource.SQL46045Message, token.getText());
                                    }
                                } else if (workloadGroupResourceParameter.ParameterType == WorkloadGroupParameterType.RequestMaxCpuTimeSec || workloadGroupResourceParameter.ParameterType == WorkloadGroupParameterType.RequestMemoryGrantTimeoutSec || workloadGroupResourceParameter.ParameterType == WorkloadGroupParameterType.GroupMaxRequests) {
                                    if (num < 0) {
                                        TSql80ParserBaseInternal.ThrowParseErrorException("SQL46045", token, TSqlParserResource.SQL46045Message, token.getText());
                                    }
                                } else if (workloadGroupResourceParameter.ParameterType == WorkloadGroupParameterType.MaxDop && (num < 0 || num > 64)) {
                                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46045", token, TSqlParserResource.SQL46045Message, token.getText());
                                }
                                workloadGroupResourceParameter.ParameterValue = literal;
                                TSql80ParserBaseInternal.UpdateTokenInfo(workloadGroupResourceParameter, token);
                                result = workloadGroupResourceParameter;
                            } else {
                                TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(literal);
                            }
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public void workloadGroupUsingOption(WorkloadGroupStatement vParent) {
            IToken token = null;
            if (this.LA(1) == 175 && base.NextTokenMatches("EXTERNAL")) {
                token = this.LT(1);
                this.match(175);
                Identifier externalPoolName = this.identifier();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "EXTERNAL");
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                    if (vParent.ExternalPoolName != null) {
                        TSql80ParserBaseInternal.ThrowParseErrorException("SQL46049", token, TSqlParserResource.SQL46049Message, token.getText());
                    }
                    vParent.ExternalPoolName = externalPoolName;
                }
            } else {
                if (this.LA(1) != 232 && this.LA(1) != 233) {
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                Identifier externalPoolName = this.identifier();
                if (base.inputState.guessing == 0) {
                    if (vParent.PoolName != null) {
                        TSql80ParserBaseInternal.ThrowParseErrorException("SQL46049", externalPoolName, TSqlParserResource.SQL46049Message, "pool_name");
                    }
                    vParent.PoolName = externalPoolName;
                }
            }
        }

        public void brokerPriorityStatementBody(BrokerPriorityStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            int encountered = 0;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "BROKER");
                TSql80ParserBaseInternal.Match(token2, "PRIORITY");
                vParent.Name = name;
                base.ThrowPartialAstIfPhaseOne(vParent);
            }
            this.LT(1);
            this.match(67);
            token3 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token3, "CONVERSATION");
            }
            if (this.LA(1) == 142 && this.LA(2) == 191) {
                token4 = this.LT(1);
                this.match(142);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token4);
                }
                this.match(191);
                BrokerPriorityParameter brokerPriorityParameter = this.brokerPriorityParameter(encountered);
                if (base.inputState.guessing == 0) {
                    TSql100ParserBaseInternal.UpdateBrokerPriorityEncounteredOptions(ref encountered, brokerPriorityParameter);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.BrokerPriorityParameters, brokerPriorityParameter);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.LT(1);
                    this.match(198);
                    brokerPriorityParameter = this.brokerPriorityParameter(encountered);
                    if (base.inputState.guessing == 0) {
                        TSql100ParserBaseInternal.UpdateBrokerPriorityEncounteredOptions(ref encountered, brokerPriorityParameter);
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.BrokerPriorityParameters, brokerPriorityParameter);
                    }
                }
                token5 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token5);
                }
                return;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public BrokerPriorityParameter brokerPriorityParameter(int encountered) {
            BrokerPriorityParameter brokerPriorityParameter = base.FragmentFactory.CreateFragment<BrokerPriorityParameter>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                brokerPriorityParameter.ParameterType = BrokerPriorityParameterHelper.Instance.ParseOption(token);
                TSql100ParserBaseInternal.CheckBrokerPriorityParameterDuplication(encountered, brokerPriorityParameter.ParameterType, token);
            }
            this.match(206);
            switch (this.LA(1)) {
                case 232:
                case 233: {
                        Identifier identifier = this.identifier();
                        if (base.inputState.guessing == 0) {
                            if (brokerPriorityParameter.ParameterType == BrokerPriorityParameterType.ContractName || brokerPriorityParameter.ParameterType == BrokerPriorityParameterType.LocalServiceName) {
                                brokerPriorityParameter.ParameterValue = base.IdentifierOrValueExpression(identifier);
                                brokerPriorityParameter.IsDefaultOrAny = BrokerPriorityParameterSpecialType.None;
                            } else {
                                TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                            }
                        }
                        break;
                    }
                case 230:
                case 231: {
                        Literal valueExpression2 = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            if (brokerPriorityParameter.ParameterType == BrokerPriorityParameterType.RemoteServiceName) {
                                brokerPriorityParameter.ParameterValue = base.IdentifierOrValueExpression(valueExpression2);
                                brokerPriorityParameter.IsDefaultOrAny = BrokerPriorityParameterSpecialType.None;
                            } else {
                                TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                            }
                        }
                        break;
                    }
                case 221: {
                        Literal valueExpression = this.integer();
                        if (base.inputState.guessing == 0) {
                            if (brokerPriorityParameter.ParameterType == BrokerPriorityParameterType.PriorityLevel) {
                                brokerPriorityParameter.ParameterValue = base.IdentifierOrValueExpression(valueExpression);
                                brokerPriorityParameter.IsDefaultOrAny = BrokerPriorityParameterSpecialType.None;
                            } else {
                                TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                            }
                        }
                        break;
                    }
                case 47:
                    this.LT(1);
                    this.match(47);
                    if (base.inputState.guessing == 0) {
                        if (brokerPriorityParameter.ParameterType == BrokerPriorityParameterType.PriorityLevel) {
                            brokerPriorityParameter.IsDefaultOrAny = BrokerPriorityParameterSpecialType.Default;
                        } else {
                            TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                        }
                    }
                    break;
                case 8:
                    this.LT(1);
                    this.match(8);
                    if (base.inputState.guessing == 0) {
                        if (brokerPriorityParameter.ParameterType != BrokerPriorityParameterType.PriorityLevel) {
                            brokerPriorityParameter.IsDefaultOrAny = BrokerPriorityParameterSpecialType.Any;
                        } else {
                            TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return brokerPriorityParameter;
        }

        public void createSequenceOptionList(CreateSequenceStatement vParent) {
            int num = 0;
            int num2 = 0;
            while (true) {
                if (this.LA(1) != 9 && this.LA(1) != 232) {
                    break;
                }
                if (!TSql140ParserInternal.tokenSet_51_.member(this.LA(2))) {
                    break;
                }
                SequenceOption sequenceOption = this.createSequenceOptionListElement();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)sequenceOption.OptionKind, sequenceOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.SequenceOptions, sequenceOption);
                }
                num2++;
            }
            if (num2 < 1) {
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public SequenceOption createSequenceOptionListElement() {
            if (this.LA(1) == 9) {
                return this.sequenceDatatypeOptionListElement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 171 && base.NextTokenMatches("START")) {
                return this.sequenceStartOptionListElement();
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_157_.member(this.LA(2))) {
                return this.commonSequenceOptionListElement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ScalarExpressionSequenceOption sequenceRestartOptionListElement() {
            ScalarExpressionSequenceOption scalarExpressionSequenceOption = base.FragmentFactory.CreateFragment<ScalarExpressionSequenceOption>();
            IToken token = null;
            ScalarExpression scalarExpression = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(scalarExpressionSequenceOption, token);
                scalarExpressionSequenceOption.OptionKind = SequenceOptionKind.Restart;
            }
            if (this.LA(1) == 171 && TSql140ParserInternal.tokenSet_158_.member(this.LA(2))) {
                this.LT(1);
                this.match(171);
                scalarExpression = this.seedIncrement();
                if (base.inputState.guessing == 0) {
                    scalarExpressionSequenceOption.OptionValue = scalarExpression;
                }
                goto IL_00c8;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00c8;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00c8:
            return scalarExpressionSequenceOption;
        }

        public SequenceOption commonSequenceOptionListElement() {
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_159_.member(this.LA(2)) && base.NextTokenMatches("CACHE")) {
                return this.sequenceCacheOptionListElement();
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_40_.member(this.LA(2)) && base.NextTokenMatches("Cycle")) {
                return this.sequenceCycleOptionListElement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 18 && base.NextTokenMatches("INCREMENT")) {
                return this.sequenceIncrementOptionListElement();
            }
            if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("NO")) {
                return this.sequenceNoOptionListElement();
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_158_.member(this.LA(2))) {
                return this.sequenceMinMaxOptionListElement();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public DataTypeSequenceOption sequenceDatatypeOptionListElement() {
            DataTypeSequenceOption dataTypeSequenceOption = base.FragmentFactory.CreateFragment<DataTypeSequenceOption>();
            IToken token = null;
            DataTypeReference dataTypeReference = null;
            token = this.LT(1);
            this.match(9);
            dataTypeReference = this.scalarDataType();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(dataTypeSequenceOption, token);
                dataTypeSequenceOption.OptionKind = SequenceOptionKind.As;
                dataTypeSequenceOption.DataType = dataTypeReference;
            }
            return dataTypeSequenceOption;
        }

        public ScalarExpressionSequenceOption sequenceStartOptionListElement() {
            ScalarExpressionSequenceOption scalarExpressionSequenceOption = base.FragmentFactory.CreateFragment<ScalarExpressionSequenceOption>();
            IToken token = null;
            ScalarExpression scalarExpression = null;
            token = this.LT(1);
            this.match(232);
            this.LT(1);
            this.match(171);
            scalarExpression = this.seedIncrement();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(scalarExpressionSequenceOption, token);
                scalarExpressionSequenceOption.OptionKind = SequenceOptionKind.Start;
                scalarExpressionSequenceOption.OptionValue = scalarExpression;
            }
            return scalarExpressionSequenceOption;
        }

        public ScalarExpressionSequenceOption sequenceCacheOptionListElement() {
            ScalarExpressionSequenceOption scalarExpressionSequenceOption = base.FragmentFactory.CreateFragment<ScalarExpressionSequenceOption>();
            IToken token = null;
            ScalarExpression optionValue = null;
            token = this.LT(1);
            this.match(232);
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 9:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_02b8;
                }
            } else {
                switch (num) {
                    case 197:
                    case 199:
                    case 221:
                    case 222:
                        optionValue = this.seedIncrement();
                        goto IL_02b8;
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_02b8;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_02b8:
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(scalarExpressionSequenceOption, token);
                scalarExpressionSequenceOption.OptionValue = optionValue;
                scalarExpressionSequenceOption.OptionKind = SequenceOptionKind.Cache;
            }
            return scalarExpressionSequenceOption;
        }

        public SequenceOption sequenceCycleOptionListElement() {
            SequenceOption sequenceOption = base.FragmentFactory.CreateFragment<SequenceOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(sequenceOption, token);
                sequenceOption.OptionKind = SequenceOptionKind.Cycle;
            }
            return sequenceOption;
        }

        public ScalarExpressionSequenceOption sequenceIncrementOptionListElement() {
            ScalarExpressionSequenceOption scalarExpressionSequenceOption = base.FragmentFactory.CreateFragment<ScalarExpressionSequenceOption>();
            IToken token = null;
            ScalarExpression scalarExpression = null;
            token = this.LT(1);
            this.match(232);
            this.LT(1);
            this.match(18);
            scalarExpression = this.seedIncrement();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(scalarExpressionSequenceOption, token);
                scalarExpressionSequenceOption.OptionValue = scalarExpression;
                scalarExpressionSequenceOption.OptionKind = SequenceOptionKind.Increment;
            }
            return scalarExpressionSequenceOption;
        }

        public SequenceOption sequenceNoOptionListElement() {
            SequenceOption sequenceOption = base.FragmentFactory.CreateFragment<SequenceOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(token2, "MINVALUE")) {
                    sequenceOption.OptionKind = SequenceOptionKind.MinValue;
                } else if (TSql80ParserBaseInternal.TryMatch(token2, "MAXVALUE")) {
                    sequenceOption.OptionKind = SequenceOptionKind.MaxValue;
                } else if (TSql80ParserBaseInternal.TryMatch(token2, "CACHE")) {
                    sequenceOption.OptionKind = SequenceOptionKind.Cache;
                } else {
                    TSql80ParserBaseInternal.Match(token2, "Cycle");
                    sequenceOption.OptionKind = SequenceOptionKind.Cycle;
                }
                sequenceOption.NoValue = true;
                TSql80ParserBaseInternal.UpdateTokenInfo(sequenceOption, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(sequenceOption, token2);
            }
            return sequenceOption;
        }

        public ScalarExpressionSequenceOption sequenceMinMaxOptionListElement() {
            ScalarExpressionSequenceOption scalarExpressionSequenceOption = base.FragmentFactory.CreateFragment<ScalarExpressionSequenceOption>();
            IToken token = null;
            ScalarExpression scalarExpression = null;
            token = this.LT(1);
            this.match(232);
            scalarExpression = this.seedIncrement();
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(token, "MINVALUE")) {
                    scalarExpressionSequenceOption.OptionKind = SequenceOptionKind.MinValue;
                } else {
                    TSql80ParserBaseInternal.Match(token, "MAXVALUE");
                    scalarExpressionSequenceOption.OptionKind = SequenceOptionKind.MaxValue;
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(scalarExpressionSequenceOption, token);
                scalarExpressionSequenceOption.OptionValue = scalarExpression;
            }
            return scalarExpressionSequenceOption;
        }

        public CreateColumnMasterKeyStatement createColumnMasterKeyStatement() {
            CreateColumnMasterKeyStatement createColumnMasterKeyStatement = base.FragmentFactory.CreateFragment<CreateColumnMasterKeyStatement>();
            IToken token = null;
            int num = 0;
            token = this.LT(1);
            this.match(232);
            this.LT(1);
            this.match(91);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MASTER");
                createColumnMasterKeyStatement.Name = name;
            }
            this.LT(1);
            this.match(171);
            this.LT(1);
            this.match(191);
            ColumnMasterKeyParameter columnMasterKeyParameter = this.columnMasterkeyParameter();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)columnMasterKeyParameter.ParameterKind, columnMasterKeyParameter);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createColumnMasterKeyStatement, createColumnMasterKeyStatement.Parameters, columnMasterKeyParameter);
            }
            this.match(198);
            columnMasterKeyParameter = this.columnMasterkeyParameter();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)columnMasterKeyParameter.ParameterKind, columnMasterKeyParameter);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createColumnMasterKeyStatement, createColumnMasterKeyStatement.Parameters, columnMasterKeyParameter);
            }
            this.LT(1);
            this.match(192);
            return createColumnMasterKeyStatement;
        }

        public CreateColumnEncryptionKeyStatement createColumnEncryptionKeyStatement() {
            CreateColumnEncryptionKeyStatement createColumnEncryptionKeyStatement = base.FragmentFactory.CreateFragment<CreateColumnEncryptionKeyStatement>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.LT(1);
            this.match(91);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
                createColumnEncryptionKeyStatement.Name = name;
            }
            this.LT(1);
            this.match(171);
            this.LT(1);
            this.match(164);
            ColumnEncryptionKeyValue item = this.createColumnEncryptionKeyValue();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createColumnEncryptionKeyStatement, createColumnEncryptionKeyStatement.ColumnEncryptionKeyValues, item);
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0357;
                }
            } else {
                switch (num) {
                    case 198:
                        this.match(198);
                        item = this.createColumnEncryptionKeyValue();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(createColumnEncryptionKeyStatement, createColumnEncryptionKeyStatement.ColumnEncryptionKeyValues, item);
                        }
                        goto IL_0357;
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0357;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0357:
            return createColumnEncryptionKeyStatement;
        }

        public ColumnMasterKeyParameter columnMasterkeyParameter() {
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("KEY_STORE_PROVIDER_NAME")) {
                return this.columnMasterKeyStoreProviderNameParameter();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("KEY_PATH")) {
                return this.columnMasterKeyPathParameter();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ColumnMasterKeyStoreProviderNameParameter columnMasterKeyStoreProviderNameParameter() {
            ColumnMasterKeyStoreProviderNameParameter columnMasterKeyStoreProviderNameParameter = base.FragmentFactory.CreateFragment<ColumnMasterKeyStoreProviderNameParameter>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.LT(1);
            this.match(206);
            StringLiteral name = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "KEY_STORE_PROVIDER_NAME");
                columnMasterKeyStoreProviderNameParameter.ParameterKind = ColumnMasterKeyParameterKind.KeyStoreProviderName;
                columnMasterKeyStoreProviderNameParameter.Name = name;
            }
            return columnMasterKeyStoreProviderNameParameter;
        }

        public ColumnMasterKeyPathParameter columnMasterKeyPathParameter() {
            ColumnMasterKeyPathParameter columnMasterKeyPathParameter = base.FragmentFactory.CreateFragment<ColumnMasterKeyPathParameter>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.LT(1);
            this.match(206);
            StringLiteral path = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "KEY_PATH");
                columnMasterKeyPathParameter.ParameterKind = ColumnMasterKeyParameterKind.KeyPath;
                columnMasterKeyPathParameter.Path = path;
            }
            return columnMasterKeyPathParameter;
        }

        public ColumnEncryptionKeyValue createColumnEncryptionKeyValue() {
            ColumnEncryptionKeyValue columnEncryptionKeyValue = base.FragmentFactory.CreateFragment<ColumnEncryptionKeyValue>();
            int num = 0;
            this.LT(1);
            this.match(191);
            ColumnEncryptionKeyValueParameter columnEncryptionKeyValueParameter = this.columnEncryptionKeyValueParameter();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)columnEncryptionKeyValueParameter.ParameterKind, columnEncryptionKeyValueParameter);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(columnEncryptionKeyValue, columnEncryptionKeyValue.Parameters, columnEncryptionKeyValueParameter);
            }
            this.match(198);
            columnEncryptionKeyValueParameter = this.columnEncryptionKeyValueParameter();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)columnEncryptionKeyValueParameter.ParameterKind, columnEncryptionKeyValueParameter);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(columnEncryptionKeyValue, columnEncryptionKeyValue.Parameters, columnEncryptionKeyValueParameter);
            }
            this.match(198);
            columnEncryptionKeyValueParameter = this.columnEncryptionKeyValueParameter();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)columnEncryptionKeyValueParameter.ParameterKind, columnEncryptionKeyValueParameter);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(columnEncryptionKeyValue, columnEncryptionKeyValue.Parameters, columnEncryptionKeyValueParameter);
            }
            this.LT(1);
            this.match(192);
            return columnEncryptionKeyValue;
        }

        public ColumnEncryptionKeyValueParameter columnEncryptionKeyValueParameter() {
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("COLUMN_MASTER_KEY")) {
                return this.columnMasterKeyNameParameter();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ALGORITHM")) {
                return this.columnEncryptionAlgorithmNameParameter();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ENCRYPTED_VALUE")) {
                return this.encryptedValueParameter();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ColumnMasterKeyNameParameter columnMasterKeyNameParameter() {
            ColumnMasterKeyNameParameter columnMasterKeyNameParameter = base.FragmentFactory.CreateFragment<ColumnMasterKeyNameParameter>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "COLUMN_MASTER_KEY");
                columnMasterKeyNameParameter.ParameterKind = ColumnEncryptionKeyValueParameterKind.ColumnMasterKeyName;
                columnMasterKeyNameParameter.Name = name;
                TSql80ParserBaseInternal.UpdateTokenInfo(columnMasterKeyNameParameter, token);
            }
            return columnMasterKeyNameParameter;
        }

        public ColumnEncryptionAlgorithmNameParameter columnEncryptionAlgorithmNameParameter() {
            ColumnEncryptionAlgorithmNameParameter columnEncryptionAlgorithmNameParameter = base.FragmentFactory.CreateFragment<ColumnEncryptionAlgorithmNameParameter>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            StringLiteral algorithm = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ALGORITHM");
                columnEncryptionAlgorithmNameParameter.ParameterKind = ColumnEncryptionKeyValueParameterKind.EncryptionAlgorithmName;
                columnEncryptionAlgorithmNameParameter.Algorithm = algorithm;
                TSql80ParserBaseInternal.UpdateTokenInfo(columnEncryptionAlgorithmNameParameter, token);
            }
            return columnEncryptionAlgorithmNameParameter;
        }

        public EncryptedValueParameter encryptedValueParameter() {
            EncryptedValueParameter encryptedValueParameter = base.FragmentFactory.CreateFragment<EncryptedValueParameter>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            BinaryLiteral value = this.binary();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ENCRYPTED_VALUE");
                encryptedValueParameter.ParameterKind = ColumnEncryptionKeyValueParameterKind.EncryptedValue;
                encryptedValueParameter.Value = value;
                TSql80ParserBaseInternal.UpdateTokenInfo(encryptedValueParameter, token);
            }
            return encryptedValueParameter;
        }

        public void alterColumnEncryptionKeyAddStatement(AlterColumnEncryptionKeyStatement vResult) {
            IToken token = null;
            this.LT(1);
            this.match(4);
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "VALUE");
                vResult.AlterType = ColumnEncryptionKeyAlterType.Add;
            }
            ColumnEncryptionKeyValue item = this.createColumnEncryptionKeyValue();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.ColumnEncryptionKeyValues, item);
            }
        }

        public void alterColumnEncryptionKeyDropStatement(AlterColumnEncryptionKeyStatement vResult) {
            IToken token = null;
            this.LT(1);
            this.match(54);
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "VALUE");
                vResult.AlterType = ColumnEncryptionKeyAlterType.Drop;
            }
            this.LT(1);
            this.match(191);
            ColumnMasterKeyNameParameter item = this.columnMasterKeyNameParameter();
            if (base.inputState.guessing == 0) {
                ColumnEncryptionKeyValue columnEncryptionKeyValue = base.FragmentFactory.CreateFragment<ColumnEncryptionKeyValue>();
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(columnEncryptionKeyValue, columnEncryptionKeyValue.Parameters, item);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.ColumnEncryptionKeyValues, columnEncryptionKeyValue);
            }
            this.LT(1);
            this.match(192);
        }

        public void createSecurityPredicateListElement(CreateSecurityPolicyStatement vParent) {
            this.match(4);
            SecurityPredicateAction securityPredicateAction = this.createOrAltersecurityPredicateListElement();
            if (base.inputState.guessing == 0) {
                securityPredicateAction.ActionType = SecurityPredicateActionType.Create;
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.SecurityPredicateActions, securityPredicateAction);
            }
        }

        public void securityPolicyOptionsList(SecurityPolicyStatement vParent) {
            int num = 0;
            SecurityPolicyOption securityPolicyOption = this.securityPolicyOptionListElement(vParent);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)securityPolicyOption.OptionKind, securityPolicyOption);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.SecurityPolicyOptions, securityPolicyOption);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                securityPolicyOption = this.securityPolicyOptionListElement(vParent);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)securityPolicyOption.OptionKind, securityPolicyOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.SecurityPolicyOptions, securityPolicyOption);
                }
            }
        }

        public SecurityPredicateAction createOrAltersecurityPredicateListElement() {
            SecurityPredicateAction securityPredicateAction = base.FragmentFactory.CreateFragment<SecurityPredicateAction>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                securityPredicateAction.SecurityPredicateType = SecurityPredicateTypeHelper.Instance.ParseOption(token);
                TSql80ParserBaseInternal.Match(token2, "PREDICATE");
            }
            SchemaObjectName vIdentifiers = this.schemaObjectThreePartName();
            FunctionCall functionCall = this.userFunctionCall(vIdentifiers);
            if (base.inputState.guessing == 0) {
                securityPredicateAction.FunctionCall = functionCall;
            }
            this.match(105);
            SchemaObjectName targetObjectName = this.schemaObjectTwoPartName();
            if (base.inputState.guessing == 0) {
                securityPredicateAction.TargetObjectName = targetObjectName;
                securityPredicateAction.SecurityPredicateOperation = SecurityPredicateOperation.All;
            }
            if (this.LA(1) == 232 && (this.LA(2) == 48 || this.LA(2) == 86 || this.LA(2) == 160)) {
                this.securityPredicateOperation(securityPredicateAction);
                goto IL_0124;
            }
            if (TSql140ParserInternal.tokenSet_160_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0124;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0124:
            return securityPredicateAction;
        }

        public void alterSecurityPredicateListElement(AlterSecurityPolicyStatement vParent) {
            switch (this.LA(1)) {
                case 4: {
                        this.match(4);
                        SecurityPredicateAction securityPredicateAction = this.createOrAltersecurityPredicateListElement();
                        if (base.inputState.guessing == 0) {
                            securityPredicateAction.ActionType = SecurityPredicateActionType.Create;
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.SecurityPredicateActions, securityPredicateAction);
                        }
                        break;
                    }
                case 6: {
                        this.match(6);
                        SecurityPredicateAction securityPredicateAction = this.createOrAltersecurityPredicateListElement();
                        if (base.inputState.guessing == 0) {
                            securityPredicateAction.ActionType = SecurityPredicateActionType.Alter;
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.SecurityPredicateActions, securityPredicateAction);
                        }
                        break;
                    }
                case 54: {
                        this.match(54);
                        SecurityPredicateAction securityPredicateAction = this.dropSecurityPredicateListElement();
                        if (base.inputState.guessing == 0) {
                            securityPredicateAction.ActionType = SecurityPredicateActionType.Drop;
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.SecurityPredicateActions, securityPredicateAction);
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public SecurityPredicateAction dropSecurityPredicateListElement() {
            SecurityPredicateAction securityPredicateAction = base.FragmentFactory.CreateFragment<SecurityPredicateAction>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                securityPredicateAction.SecurityPredicateType = SecurityPredicateTypeHelper.Instance.ParseOption(token);
                TSql80ParserBaseInternal.Match(token2, "PREDICATE");
            }
            this.match(105);
            SchemaObjectName targetObjectName = this.schemaObjectTwoPartName();
            if (base.inputState.guessing == 0) {
                securityPredicateAction.TargetObjectName = targetObjectName;
                securityPredicateAction.SecurityPredicateOperation = SecurityPredicateOperation.All;
            }
            if (this.LA(1) == 232 && (this.LA(2) == 48 || this.LA(2) == 86 || this.LA(2) == 160)) {
                this.securityPredicateOperation(securityPredicateAction);
                goto IL_00fd;
            }
            if (TSql140ParserInternal.tokenSet_56_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00fd;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00fd:
            return securityPredicateAction;
        }

        public SecurityPolicyOption securityPolicyOptionListElement(SecurityPolicyStatement vParent) {
            SecurityPolicyOption securityPolicyOption = base.FragmentFactory.CreateFragment<SecurityPolicyOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            OptionState optionState = this.optionOnOff(vParent);
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(token, "STATE")) {
                    securityPolicyOption.OptionKind = SecurityPolicyOptionKind.State;
                } else if (TSql80ParserBaseInternal.TryMatch(token, "SCHEMABINDING") && vParent.ActionType == SecurityPolicyActionType.Create) {
                    securityPolicyOption.OptionKind = SecurityPolicyOptionKind.SchemaBinding;
                } else {
                    TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                }
                securityPolicyOption.OptionState = optionState;
                TSql80ParserBaseInternal.UpdateTokenInfo(securityPolicyOption, token);
            }
            return securityPolicyOption;
        }

        public FunctionCall userFunctionCall(MultiPartIdentifier vIdentifiers) {
            FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
            IToken token = null;
            IToken distinctToken = null;
            this.match(191);
            if (base.inputState.guessing == 0) {
                base.PutIdentifiersIntoFunctionCall(functionCall, vIdentifiers);
            }
            switch (this.LA(1)) {
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 47:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 163:
                case 187:
                case 191:
                case 192:
                case 193:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                    switch (this.LA(1)) {
                        case 20:
                        case 25:
                        case 34:
                        case 40:
                        case 41:
                        case 47:
                        case 81:
                        case 93:
                        case 100:
                        case 101:
                        case 133:
                        case 136:
                        case 141:
                        case 147:
                        case 163:
                        case 187:
                        case 191:
                        case 193:
                        case 197:
                        case 199:
                        case 200:
                        case 211:
                        case 221:
                        case 222:
                        case 223:
                        case 224:
                        case 225:
                        case 227:
                        case 228:
                        case 230:
                        case 231:
                        case 232:
                        case 233:
                        case 234:
                        case 235:
                            this.expressionWithDefaultList(functionCall, functionCall.Parameters);
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                        case 192:
                            break;
                    }
                    break;
                case 5:
                case 51: {
                        UniqueRowFilter uniqueRowFilter = this.uniqueRowFilter(out distinctToken);
                        if (base.inputState.guessing == 0) {
                            functionCall.UniqueRowFilter = uniqueRowFilter;
                        }
                        this.expressionList(functionCall, functionCall.Parameters);
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(functionCall, token);
            }
            switch (this.LA(1)) {
                case 115: {
                        OverClause overClause = this.overClauseNoOrderBy();
                        if (base.inputState.guessing == 0) {
                            functionCall.OverClause = overClause;
                            TSql90ParserBaseInternal.CheckForDistinctInWindowedAggregate(functionCall, distinctToken);
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 1:
                case 4:
                case 6:
                case 7:
                case 9:
                case 10:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 21:
                case 22:
                case 23:
                case 26:
                case 28:
                case 30:
                case 33:
                case 35:
                case 36:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 54:
                case 55:
                case 56:
                case 58:
                case 59:
                case 60:
                case 61:
                case 64:
                case 67:
                case 68:
                case 71:
                case 72:
                case 74:
                case 75:
                case 76:
                case 77:
                case 79:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 92:
                case 93:
                case 94:
                case 95:
                case 99:
                case 100:
                case 105:
                case 106:
                case 111:
                case 112:
                case 113:
                case 114:
                case 116:
                case 118:
                case 119:
                case 123:
                case 125:
                case 126:
                case 127:
                case 129:
                case 131:
                case 132:
                case 133:
                case 134:
                case 136:
                case 138:
                case 140:
                case 142:
                case 143:
                case 144:
                case 150:
                case 151:
                case 156:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 164:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 176:
                case 177:
                case 178:
                case 182:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 195:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 204:
                case 205:
                case 206:
                case 208:
                case 209:
                case 210:
                case 219:
                case 220:
                case 230:
                case 231:
                case 232:
                case 233:
                    break;
            }
            return functionCall;
        }

        public void securityPredicateOperation(SecurityPredicateAction vResult) {
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            IToken token6 = null;
            if (this.LA(1) == 232 && this.LA(2) == 160) {
                token = this.LT(1);
                this.match(232);
                token2 = this.LT(1);
                this.match(160);
                if (base.inputState.guessing == 0) {
                    if (vResult.SecurityPredicateType == SecurityPredicateType.Filter) {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                    } else if (TSql80ParserBaseInternal.TryMatch(token, "BEFORE")) {
                        vResult.SecurityPredicateOperation = SecurityPredicateOperation.BeforeUpdate;
                    } else if (TSql80ParserBaseInternal.TryMatch(token, "AFTER")) {
                        vResult.SecurityPredicateOperation = SecurityPredicateOperation.AfterUpdate;
                    } else {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                    }
                    TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token2);
                }
                return;
            }
            if (this.LA(1) == 232 && this.LA(2) == 86) {
                token3 = this.LT(1);
                this.match(232);
                token4 = this.LT(1);
                this.match(86);
                if (base.inputState.guessing == 0) {
                    if (vResult.SecurityPredicateType == SecurityPredicateType.Filter) {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token3);
                    }
                    TSql80ParserBaseInternal.Match(token3, "AFTER");
                    vResult.SecurityPredicateOperation = SecurityPredicateOperation.AfterInsert;
                    TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token4);
                }
                return;
            }
            if (this.LA(1) == 232 && this.LA(2) == 48) {
                token5 = this.LT(1);
                this.match(232);
                token6 = this.LT(1);
                this.match(48);
                if (base.inputState.guessing == 0) {
                    if (vResult.SecurityPredicateType == SecurityPredicateType.Filter) {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token5);
                    }
                    TSql80ParserBaseInternal.Match(token5, "BEFORE");
                    vResult.SecurityPredicateOperation = SecurityPredicateOperation.BeforeDelete;
                    TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token6);
                }
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void externalDataSourceType(CreateExternalDataSourceStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "TYPE");
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing != 0) {
                return;
            }
            if (TSql80ParserBaseInternal.TryMatch(token2, "HADOOP")) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                vParent.DataSourceType = ExternalDataSourceType.HADOOP;
                return;
            }
            if (TSql80ParserBaseInternal.TryMatch(token2, "RDBMS")) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                vParent.DataSourceType = ExternalDataSourceType.RDBMS;
                return;
            }
            if (TSql80ParserBaseInternal.TryMatch(token2, "SHARD_MAP_MANAGER")) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                vParent.DataSourceType = ExternalDataSourceType.SHARD_MAP_MANAGER;
                return;
            }
            if (TSql80ParserBaseInternal.TryMatch(token2, "BLOB_STORAGE")) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                vParent.DataSourceType = ExternalDataSourceType.BLOB_STORAGE;
                return;
            }
            throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
        }

        public void externalDataSourceLocation(ExternalDataSourceStatement vParent) {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal location = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "LOCATION");
                vParent.Location = location;
            }
        }

        public ExternalDataSourceLiteralOrIdentifierOption externalDataSourceLiteralOrIdentifierOption() {
            ExternalDataSourceLiteralOrIdentifierOption externalDataSourceLiteralOrIdentifierOption = base.FragmentFactory.CreateFragment<ExternalDataSourceLiteralOrIdentifierOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                externalDataSourceLiteralOrIdentifierOption.OptionKind = ExternalDataSourceOptionHelper.Instance.ParseOption(token);
            }
            this.match(206);
            switch (this.LA(1)) {
                case 232:
                case 233: {
                        Identifier identifier = this.identifier();
                        if (base.inputState.guessing == 0) {
                            if (externalDataSourceLiteralOrIdentifierOption.OptionKind != ExternalDataSourceOptionKind.Credential) {
                                throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                            }
                            externalDataSourceLiteralOrIdentifierOption.Value = base.IdentifierOrValueExpression(identifier);
                        }
                        break;
                    }
                case 230:
                case 231: {
                        Literal valueExpression = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            if (externalDataSourceLiteralOrIdentifierOption.OptionKind != 0 && externalDataSourceLiteralOrIdentifierOption.OptionKind != ExternalDataSourceOptionKind.DatabaseName && externalDataSourceLiteralOrIdentifierOption.OptionKind != ExternalDataSourceOptionKind.ShardMapName) {
                                throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                            }
                            externalDataSourceLiteralOrIdentifierOption.Value = base.IdentifierOrValueExpression(valueExpression);
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return externalDataSourceLiteralOrIdentifierOption;
        }

        public void externalFileFormatOptions(CreateExternalFileFormatStatement vResult) {
            if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("FORMAT_OPTIONS")) {
                this.externalFormatingOption(vResult, vResult.ExternalFileFormatOptions);
                goto IL_0090;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && (base.NextTokenMatches("SERDE_METHOD") || base.NextTokenMatches("DATA_COMPRESSION"))) {
                this.externalFileFormatLiteralOptions(vResult, vResult.ExternalFileFormatOptions);
                goto IL_0090;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0090:
            while (true) {
                if (this.LA(1) != 198) {
                    return;
                }
                this.match(198);
                if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("FORMAT_OPTIONS")) {
                    this.externalFormatingOption(vResult, vResult.ExternalFileFormatOptions);
                } else {
                    if (this.LA(1) != 232) {
                        break;
                    }
                    if (this.LA(2) != 206) {
                        break;
                    }
                    if (!base.NextTokenMatches("SERDE_METHOD") && !base.NextTokenMatches("DATA_COMPRESSION")) {
                        break;
                    }
                    this.externalFileFormatLiteralOptions(vResult, vResult.ExternalFileFormatOptions);
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void externalFormatingOption(TSqlFragment vParent, IList<ExternalFileFormatOption> vOptions) {
            ExternalFileFormatContainerOption item = this.externalFormatingContainerOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vOptions, item);
            }
        }

        public void externalFileFormatLiteralOptions(TSqlFragment vParent, IList<ExternalFileFormatOption> vOptions) {
            int num = 0;
            ExternalFileFormatOption externalFileFormatOption = this.externalFileFormatLiteralOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)externalFileFormatOption.OptionKind, externalFileFormatOption);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vOptions, externalFileFormatOption);
            }
        }

        public ExternalFileFormatLiteralOption externalFileFormatLiteralOption() {
            ExternalFileFormatLiteralOption externalFileFormatLiteralOption = base.FragmentFactory.CreateFragment<ExternalFileFormatLiteralOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                externalFileFormatLiteralOption.OptionKind = ExternalFileFormatOptionHelper.Instance.ParseOption(token);
            }
            this.match(206);
            Literal value = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                if (externalFileFormatLiteralOption.OptionKind != 0 && externalFileFormatLiteralOption.OptionKind != ExternalFileFormatOptionKind.DataCompression) {
                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                }
                externalFileFormatLiteralOption.Value = value;
            }
            return externalFileFormatLiteralOption;
        }

        public ExternalFileFormatContainerOption externalFormatingContainerOption() {
            ExternalFileFormatContainerOption externalFileFormatContainerOption = base.FragmentFactory.CreateFragment<ExternalFileFormatContainerOption>();
            IToken token = null;
            IToken token2 = null;
            int num = 0;
            token = this.LT(1);
            this.match(232);
            this.match(191);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FORMAT_OPTIONS");
                TSql80ParserBaseInternal.UpdateTokenInfo(externalFileFormatContainerOption, token);
                externalFileFormatContainerOption.OptionKind = ExternalFileFormatOptionKind.FormatOptions;
            }
            ExternalFileFormatOption externalFileFormatOption = this.externalDataFormatOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)externalFileFormatOption.OptionKind, externalFileFormatOption);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(externalFileFormatContainerOption, externalFileFormatContainerOption.Suboptions, externalFileFormatOption);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                externalFileFormatOption = this.externalDataFormatOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)externalFileFormatOption.OptionKind, externalFileFormatOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(externalFileFormatContainerOption, externalFileFormatContainerOption.Suboptions, externalFileFormatOption);
                }
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(externalFileFormatContainerOption, token2);
            }
            return externalFileFormatContainerOption;
        }

        public ExternalFileFormatOption externalDataFormatOption() {
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("USE_TYPE_DEFAULT")) {
                return this.externalDataFormatUseTypeDefaultOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                return this.externalDataFormatLiteralOption();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ExternalFileFormatUseDefaultTypeOption externalDataFormatUseTypeDefaultOption() {
            ExternalFileFormatUseDefaultTypeOption externalFileFormatUseDefaultTypeOption = base.FragmentFactory.CreateFragment<ExternalFileFormatUseDefaultTypeOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "USE_TYPE_DEFAULT");
                externalFileFormatUseDefaultTypeOption.OptionKind = ExternalFileFormatOptionKind.UseTypeDefault;
                TSql80ParserBaseInternal.UpdateTokenInfo(externalFileFormatUseDefaultTypeOption, token);
            }
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                if (!TSql80ParserBaseInternal.TryMatch(token2, "TRUE")) {
                    if (TSql80ParserBaseInternal.TryMatch(token2, "FALSE")) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(externalFileFormatUseDefaultTypeOption, token2);
                        externalFileFormatUseDefaultTypeOption.ExternalFileFormatUseDefaultType = ExternalFileFormatUseDefaultType.False;
                        goto IL_00b5;
                    }
                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(externalFileFormatUseDefaultTypeOption, token2);
                externalFileFormatUseDefaultTypeOption.ExternalFileFormatUseDefaultType = ExternalFileFormatUseDefaultType.True;
            }
            goto IL_00b5;
            IL_00b5:
            return externalFileFormatUseDefaultTypeOption;
        }

        public ExternalFileFormatLiteralOption externalDataFormatLiteralOption() {
            ExternalFileFormatLiteralOption externalFileFormatLiteralOption = base.FragmentFactory.CreateFragment<ExternalFileFormatLiteralOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                externalFileFormatLiteralOption.OptionKind = ExternalFileFormatOptionHelper.Instance.ParseOption(token);
            }
            this.match(206);
            Literal value = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                if (externalFileFormatLiteralOption.OptionKind != ExternalFileFormatOptionKind.FieldTerminator && externalFileFormatLiteralOption.OptionKind != ExternalFileFormatOptionKind.StringDelimiter && externalFileFormatLiteralOption.OptionKind != ExternalFileFormatOptionKind.DateFormat) {
                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                }
                externalFileFormatLiteralOption.Value = value;
            }
            return externalFileFormatLiteralOption;
        }

        public void spatialIndexingScheme(CreateSpatialIndexStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "USING");
            }
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                vParent.SpatialIndexingScheme = SpatialIndexingSchemeTypeHelper.Instance.ParseOption(token2, SqlVersionFlags.TSql140);
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
            }
        }

        public void spatialIndexOptionsList(CreateSpatialIndexStatement vParent) {
            IToken token = null;
            bool flag = false;
            this.match(191);
            SpatialIndexOption item = this.spatialIndexOption(vParent.SpatialIndexingScheme, ref flag);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.SpatialIndexOptions, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.spatialIndexOption(vParent.SpatialIndexingScheme, ref flag);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.SpatialIndexOptions, item);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public SpatialIndexOption spatialIndexOption(SpatialIndexingSchemeType indexingScheme, ref bool isRegularIndexOption) {
            SpatialIndexOption spatialIndexOption = null;
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("BOUNDING_BOX")) {
                spatialIndexOption = this.boundingBoxSpatialIndexOption(isRegularIndexOption, indexingScheme);
            } else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("GRIDS")) {
                spatialIndexOption = this.gridsSpatialIndexOption(isRegularIndexOption);
            } else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("CELLS_PER_OBJECT")) {
                spatialIndexOption = this.cellsPerObjectSpatialIndexOption(isRegularIndexOption);
            } else {
                if (this.LA(1) != 66 && this.LA(1) != 113 && this.LA(1) != 232) {
                    goto IL_0100;
                }
                if (this.LA(2) != 191 && this.LA(2) != 206) {
                    goto IL_0100;
                }
                spatialIndexOption = this.spatialIndexRegularOption(IndexAffectingStatement.CreateSpatialIndex);
                if (base.inputState.guessing == 0) {
                    isRegularIndexOption = true;
                }
            }
            return spatialIndexOption;
            IL_0100:
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public BoundingBoxSpatialIndexOption boundingBoxSpatialIndexOption(bool isRegularIndexOption, SpatialIndexingSchemeType indexingScheme) {
            BoundingBoxSpatialIndexOption boundingBoxSpatialIndexOption = base.FragmentFactory.CreateFragment<BoundingBoxSpatialIndexOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "BOUNDING_BOX");
                if (isRegularIndexOption) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46081", token, TSqlParserResource.SQL46081Message, token.getText());
                }
                if (indexingScheme == SpatialIndexingSchemeType.GeographyGrid) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46067", token, TSqlParserResource.SQL46067Message, token.getText());
                }
            }
            this.boundingBoxParameter(boundingBoxSpatialIndexOption);
            if (base.inputState.guessing == 0 && boundingBoxSpatialIndexOption.BoundingBoxParameters.Count != 4) {
                TSql80ParserBaseInternal.ThrowParseErrorException("SQL46066", token, TSqlParserResource.SQL46066Message, token.getText());
            }
            return boundingBoxSpatialIndexOption;
        }

        public GridsSpatialIndexOption gridsSpatialIndexOption(bool isRegularIndexOption) {
            GridsSpatialIndexOption gridsSpatialIndexOption = base.FragmentFactory.CreateFragment<GridsSpatialIndexOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "GRIDS");
                if (isRegularIndexOption) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46081", token, TSqlParserResource.SQL46081Message, token.getText());
                }
            }
            this.gridParameter(gridsSpatialIndexOption);
            return gridsSpatialIndexOption;
        }

        public CellsPerObjectSpatialIndexOption cellsPerObjectSpatialIndexOption(bool isRegularIndexOption) {
            CellsPerObjectSpatialIndexOption cellsPerObjectSpatialIndexOption = base.FragmentFactory.CreateFragment<CellsPerObjectSpatialIndexOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal value = this.integer();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CELLS_PER_OBJECT");
                if (isRegularIndexOption) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46081", token, TSqlParserResource.SQL46081Message, token.getText());
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(cellsPerObjectSpatialIndexOption, token);
                TSql100ParserBaseInternal.CheckForCellsPerObjectValueRange(value);
                cellsPerObjectSpatialIndexOption.Value = value;
            }
            return cellsPerObjectSpatialIndexOption;
        }

        public SpatialIndexRegularOption spatialIndexRegularOption(IndexAffectingStatement statement) {
            SpatialIndexRegularOption spatialIndexRegularOption = base.FragmentFactory.CreateFragment<SpatialIndexRegularOption>();
            IndexOption option = this.indexOption();
            if (base.inputState.guessing == 0) {
                TSql140ParserBaseInternal.VerifyAllowedIndexOption140(statement, option);
                TSql100ParserBaseInternal.CheckIfValidSpatialIndexOptionValue(statement, option);
                spatialIndexRegularOption.Option = option;
            }
            return spatialIndexRegularOption;
        }

        public void boundingBoxParameter(BoundingBoxSpatialIndexOption vParent) {
            IToken token = null;
            this.LT(1);
            this.match(191);
            switch (this.LA(1)) {
                case 232:
                    this.boundingBoxParameterListByname(vParent);
                    break;
                case 199:
                case 221:
                case 222:
                case 223:
                    this.boundingBoxParameterListByord(vParent);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public void boundingBoxParameterListByname(BoundingBoxSpatialIndexOption vParent) {
            int encountered = 0;
            BoundingBoxParameter boundingBoxParameter = this.boundingBoxParameterByName(encountered);
            if (base.inputState.guessing == 0) {
                TSql100ParserBaseInternal.UpdateBoundingBoxParameterEncounteredOptions(ref encountered, boundingBoxParameter);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.BoundingBoxParameters, boundingBoxParameter);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                boundingBoxParameter = this.boundingBoxParameterByName(encountered);
                if (base.inputState.guessing == 0) {
                    TSql100ParserBaseInternal.UpdateBoundingBoxParameterEncounteredOptions(ref encountered, boundingBoxParameter);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.BoundingBoxParameters, boundingBoxParameter);
                }
            }
        }

        public void boundingBoxParameterListByord(BoundingBoxSpatialIndexOption vParent) {
            BoundingBoxParameter item = this.boundingBoxParameterByOrd();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.BoundingBoxParameters, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.boundingBoxParameterByOrd();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.BoundingBoxParameters, item);
                }
            }
        }

        public BoundingBoxParameter boundingBoxParameterByName(int encountered) {
            BoundingBoxParameter boundingBoxParameter = base.FragmentFactory.CreateFragment<BoundingBoxParameter>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            ScalarExpression value = this.signedIntegerOrReal();
            if (base.inputState.guessing == 0) {
                boundingBoxParameter.Parameter = BoundingBoxParameterTypeHelper.Instance.ParseOption(token);
                TSql100ParserBaseInternal.CheckBoundingBoxParameterDuplication(encountered, boundingBoxParameter.Parameter, token);
                boundingBoxParameter.Value = value;
            }
            return boundingBoxParameter;
        }

        public ScalarExpression signedIntegerOrReal() {
            ScalarExpression result = null;
            IToken token = null;
            UnaryExpression unaryExpression = null;
            switch (this.LA(1)) {
                case 199:
                    token = this.LT(1);
                    this.match(199);
                    if (base.inputState.guessing == 0) {
                        unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
                        TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token);
                        unaryExpression.UnaryExpressionType = UnaryExpressionType.Negative;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 221:
                case 222:
                case 223:
                    break;
            }
            Literal literal = this.integerOrRealOrNumeric();
            if (base.inputState.guessing == 0) {
                if (unaryExpression == null) {
                    result = literal;
                } else {
                    unaryExpression.Expression = literal;
                    result = unaryExpression;
                }
            }
            return result;
        }

        public BoundingBoxParameter boundingBoxParameterByOrd() {
            BoundingBoxParameter boundingBoxParameter = base.FragmentFactory.CreateFragment<BoundingBoxParameter>();
            ScalarExpression value = this.signedIntegerOrReal();
            if (base.inputState.guessing == 0) {
                boundingBoxParameter.Parameter = BoundingBoxParameterType.None;
                boundingBoxParameter.Value = value;
            }
            return boundingBoxParameter;
        }

        public void gridParameter(GridsSpatialIndexOption vParent) {
            IToken token = null;
            this.LT(1);
            this.match(191);
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                this.gridParameterListByName(vParent);
                goto IL_0080;
            }
            if (this.LA(1) == 232 && (this.LA(2) == 192 || this.LA(2) == 198)) {
                this.gridParameterListByOrd(vParent);
                goto IL_0080;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0080:
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public void gridParameterListByName(GridsSpatialIndexOption vParent) {
            GridParameter item = this.gridParameterByName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.GridParameters, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.gridParameterByName();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.GridParameters, item);
                }
            }
        }

        public void gridParameterListByOrd(GridsSpatialIndexOption vParent) {
            GridParameter item = this.gridParameterByOrd();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.GridParameters, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.gridParameterByOrd();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.GridParameters, item);
                }
            }
        }

        public GridParameter gridParameterByName() {
            GridParameter gridParameter = base.FragmentFactory.CreateFragment<GridParameter>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                gridParameter.Parameter = GridParameterTypeHelper.Instance.ParseOption(token);
                gridParameter.Value = ImportanceParameterHelper.Instance.ParseOption(token2);
            }
            return gridParameter;
        }

        public GridParameter gridParameterByOrd() {
            GridParameter gridParameter = base.FragmentFactory.CreateFragment<GridParameter>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                gridParameter.Parameter = GridParameterType.None;
                gridParameter.Value = ImportanceParameterHelper.Instance.ParseOption(token);
            }
            return gridParameter;
        }

        public void viewStatementBody(ViewStatementBody vResult) {
            IToken token = null;
            IToken token2 = null;
            int num = 0;
            this.match(166);
            SchemaObjectName schemaObjectName = this.schemaObjectTwoPartName();
            if (base.inputState.guessing == 0) {
                vResult.SchemaObjectName = schemaObjectName;
                TSql80ParserBaseInternal.CheckForTemporaryView(schemaObjectName);
                base.ThrowPartialAstIfPhaseOne(vResult);
            }
            switch (this.LA(1)) {
                case 191:
                    this.columnNameList(vResult, vResult.Columns);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 9:
                case 171:
                    break;
            }
            switch (this.LA(1)) {
                case 171: {
                        this.match(171);
                        ViewOption viewOption = this.viewOption();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)viewOption.OptionKind, viewOption);
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.ViewOptions, viewOption);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            viewOption = this.viewOption();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)viewOption.OptionKind, viewOption);
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.ViewOptions, viewOption);
                            }
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 9:
                    break;
            }
            token = this.LT(1);
            this.match(9);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token);
            }
            SelectStatement selectStatement = this.subqueryExpressionWithOptionalCTE();
            if (base.inputState.guessing == 0) {
                vResult.SelectStatement = selectStatement;
            }
            switch (this.LA(1)) {
                case 1:
                case 35:
                case 49:
                case 75:
                case 132:
                case 204:
                case 219:
                    break;
                case 171:
                    this.match(171);
                    this.match(21);
                    token2 = this.LT(1);
                    this.match(111);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token2);
                        vResult.WithCheckOption = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public ViewOption viewOption() {
            ViewOption viewOption = base.FragmentFactory.CreateFragment<ViewOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                viewOption.OptionKind = ViewOptionHelper.Instance.ParseOption(token);
                TSql80ParserBaseInternal.UpdateTokenInfo(viewOption, token);
            }
            return viewOption;
        }

        public TriggerOption triggerOption(bool vOwnerProhibited) {
            TriggerOption triggerOption = null;
            IToken token = null;
            switch (this.LA(1)) {
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        triggerOption = base.FragmentFactory.CreateFragment<TriggerOption>();
                        triggerOption.OptionKind = TriggerOptionHelper.Instance.ParseOption(token);
                        TSql80ParserBaseInternal.UpdateTokenInfo(triggerOption, token);
                    }
                    break;
                case 60:
                case 61: {
                        ExecuteAsClause executeAsClause = this.executeAsClause(false, vOwnerProhibited);
                        if (base.inputState.guessing == 0) {
                            ExecuteAsTriggerOption executeAsTriggerOption = base.FragmentFactory.CreateFragment<ExecuteAsTriggerOption>();
                            executeAsTriggerOption.OptionKind = TriggerOptionKind.ExecuteAsClause;
                            executeAsTriggerOption.ExecuteAsClause = executeAsClause;
                            triggerOption = executeAsTriggerOption;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return triggerOption;
        }

        public void procedureOptions(ProcedureStatementBody vParent) {
            int num = 0;
            this.match(171);
            ProcedureOption procedureOption = this.procedureOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)procedureOption.OptionKind, procedureOption);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, procedureOption);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                procedureOption = this.procedureOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)procedureOption.OptionKind, procedureOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, procedureOption);
                }
            }
        }

        public ProcedureOption procedureOption() {
            ProcedureOption procedureOption = null;
            IToken token = null;
            switch (this.LA(1)) {
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        procedureOption = base.FragmentFactory.CreateFragment<ProcedureOption>();
                        procedureOption.OptionKind = ProcedureOptionHelper.Instance.ParseOption(token);
                        TSql80ParserBaseInternal.UpdateTokenInfo(procedureOption, token);
                    }
                    break;
                case 60:
                case 61: {
                        ExecuteAsClause executeAs = this.executeAsClause(false, false);
                        if (base.inputState.guessing == 0) {
                            ExecuteAsProcedureOption executeAsProcedureOption = base.FragmentFactory.CreateFragment<ExecuteAsProcedureOption>();
                            executeAsProcedureOption.ExecuteAs = executeAs;
                            executeAsProcedureOption.OptionKind = ProcedureOptionKind.ExecuteAs;
                            procedureOption = executeAsProcedureOption;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return procedureOption;
        }

        public void procedureStatementBody(ProcedureStatementBody vResult, out bool vParseErrorOccurred) {
            IToken token = null;
            IToken token2 = null;
            vParseErrorOccurred = false;
            try {
                switch (this.LA(1)) {
                    case 120:
                        this.match(120);
                        break;
                    case 121:
                        this.match(121);
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                ProcedureReference procedureReference = this.procedureReference();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(procedureReference.Name, "PROCEDURE");
                    vResult.ProcedureReference = procedureReference;
                }
                if (base.inputState.guessing == 0) {
                    base.ThrowPartialAstIfPhaseOne(vResult);
                }
                switch (this.LA(1)) {
                    case 191:
                        this.match(191);
                        this.procedureParameterList(vResult);
                        token = this.LT(1);
                        this.match(192);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token);
                        }
                        break;
                    case 9:
                    case 67:
                    case 171:
                    case 234:
                        switch (this.LA(1)) {
                            case 234:
                                this.procedureParameterList(vResult);
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 9:
                            case 67:
                            case 171:
                                break;
                        }
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                switch (this.LA(1)) {
                    case 171:
                        this.procedureOptions(vResult);
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    case 9:
                    case 67:
                        break;
                }
                switch (this.LA(1)) {
                    case 67:
                        this.match(67);
                        this.match(128);
                        if (base.inputState.guessing == 0) {
                            vResult.IsForReplication = true;
                        }
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    case 9:
                        break;
                }
                token2 = this.LT(1);
                this.match(9);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token2);
                }
                int num = this.LA(1);
                if (num <= 86) {
                    switch (num) {
                        case 1:
                        case 4:
                        case 6:
                        case 12:
                        case 13:
                        case 15:
                        case 17:
                        case 22:
                        case 23:
                        case 28:
                        case 33:
                        case 35:
                        case 44:
                        case 45:
                        case 46:
                        case 48:
                        case 49:
                        case 54:
                        case 56:
                        case 60:
                        case 61:
                        case 64:
                        case 74:
                        case 75:
                        case 82:
                        case 86:
                            break;
                        default:
                            goto IL_0749;
                    }
                } else {
                    switch (num) {
                        case 92:
                        case 95:
                        case 106:
                        case 119:
                        case 123:
                        case 125:
                        case 126:
                        case 129:
                        case 131:
                        case 132:
                        case 134:
                        case 138:
                        case 140:
                        case 142:
                        case 143:
                        case 144:
                        case 156:
                        case 160:
                        case 161:
                        case 162:
                        case 167:
                        case 170:
                        case 171:
                        case 172:
                        case 176:
                        case 182:
                        case 191:
                        case 204:
                        case 219:
                        case 220:
                        case 232:
                            break;
                        case 175: {
                                MethodSpecifier methodSpecifier = this.methodSpecifier();
                                this.optSemicolons(vResult);
                                if (base.inputState.guessing == 0) {
                                    vResult.MethodSpecifier = methodSpecifier;
                                }
                                return;
                            }
                        default:
                            goto IL_0749;
                    }
                }
                this.optSemicolons(vResult);
                int num2 = this.LA(1);
                if (num2 <= 92) {
                    switch (num2) {
                        case 1:
                            return;
                        case 4:
                        case 6:
                        case 12:
                        case 13:
                        case 15:
                        case 17:
                        case 22:
                        case 23:
                        case 28:
                        case 33:
                        case 35:
                        case 44:
                        case 45:
                        case 46:
                        case 48:
                        case 49:
                        case 54:
                        case 56:
                        case 60:
                        case 61:
                        case 64:
                        case 74:
                        case 75:
                        case 82:
                        case 86:
                        case 92:
                            break;
                        default:
                            goto IL_0710;
                    }
                } else {
                    switch (num2) {
                        case 204:
                        case 219:
                            return;
                        case 95:
                        case 106:
                        case 119:
                        case 123:
                        case 125:
                        case 126:
                        case 129:
                        case 131:
                        case 132:
                        case 134:
                        case 138:
                        case 140:
                        case 142:
                        case 143:
                        case 144:
                        case 156:
                        case 160:
                        case 161:
                        case 162:
                        case 167:
                        case 170:
                        case 171:
                        case 172:
                        case 176:
                        case 182:
                        case 191:
                        case 220:
                        case 232:
                            break;
                        default:
                            goto IL_0710;
                    }
                }
                StatementList statementList = this.statementList(ref vParseErrorOccurred);
                if (base.inputState.guessing == 0) {
                    vResult.StatementList = statementList;
                }
                goto end_IL_0007;
                IL_0749:
                throw new NoViableAltException(this.LT(1), this.getFilename());
                IL_0710:
                throw new NoViableAltException(this.LT(1), this.getFilename());
                end_IL_0007:;
            } catch (NoViableAltException) {
                if (base.inputState.guessing == 0) {
                    if (base.PhaseOne && vResult != null && vResult.ProcedureReference != null && vResult.ProcedureReference.Name != null) {
                        base.ThrowPartialAstIfPhaseOne(vResult);
                        goto end_IL_075e;
                    }
                    throw;
                }
                throw;
                end_IL_075e:;
            }
        }

        public ProcedureReference procedureReference() {
            ProcedureReference procedureReference = base.FragmentFactory.CreateFragment<ProcedureReference>();
            SchemaObjectName name = this.schemaObjectFourPartName();
            Literal number = this.procNumOpt();
            if (base.inputState.guessing == 0) {
                procedureReference.Name = name;
                procedureReference.Number = number;
            }
            return procedureReference;
        }

        public void procedureParameterList(ProcedureStatementBodyBase vResult) {
            ProcedureParameter item = this.procedureParameter();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.Parameters, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.procedureParameter();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.Parameters, item);
                }
            }
        }

        public ProcedureParameter procedureParameter() {
            ProcedureParameter procedureParameter = base.FragmentFactory.CreateFragment<ProcedureParameter>();
            Identifier variableName = this.identifierVariable();
            switch (this.LA(1)) {
                case 9:
                    this.match(9);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 42:
                case 53:
                case 96:
                case 232:
                case 233:
                    break;
            }
            if (base.inputState.guessing == 0) {
                procedureParameter.VariableName = variableName;
            }
            switch (this.LA(1)) {
                case 42:
                    this.cursorProcedureParameter(procedureParameter);
                    break;
                case 53:
                case 96:
                case 232:
                case 233:
                    this.scalarProcedureParameter(procedureParameter, true, true);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return procedureParameter;
        }

        public void cursorProcedureParameter(ProcedureParameter vParent) {
            IToken token = null;
            IToken token2 = null;
            DataTypeReference dataType = this.cursorDataType();
            if (base.inputState.guessing == 0) {
                vParent.DataType = dataType;
            }
            token = this.LT(1);
            this.match(165);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                vParent.IsVarying = true;
            }
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "OUTPUT", "OUT");
                vParent.Modifier = ParameterModifier.Output;
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
            }
        }

        public IdentifierLiteral identifierLiteral() {
            IdentifierLiteral identifierLiteral = base.FragmentFactory.CreateFragment<IdentifierLiteral>();
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(identifierLiteral, token);
                        identifierLiteral.SetUnquotedIdentifier(token.getText());
                        TSql80ParserBaseInternal.CheckIdentifierLiteralLength(identifierLiteral);
                    }
                    break;
                case 233:
                    token2 = this.LT(1);
                    this.match(233);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(identifierLiteral, token2);
                        identifierLiteral.SetIdentifier(token2.getText());
                        TSql80ParserBaseInternal.CheckIdentifierLiteralLength(identifierLiteral);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return identifierLiteral;
        }

        public ValueExpression literal() {
            switch (this.LA(1)) {
                case 221:
                    return this.integer();
                case 222:
                    return this.numeric();
                case 223:
                    return this.real();
                case 225:
                    return this.moneyLiteral();
                case 224:
                    return this.binary();
                case 230:
                case 231:
                    return this.stringLiteral();
                case 100:
                    return this.nullLiteral();
                case 234:
                    return this.globalVariableOrVariableReference();
                case 193:
                    return this.odbcLiteral();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public UnaryExpression negativeConstant() {
            UnaryExpression unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
            IToken token = null;
            token = this.LT(1);
            this.match(199);
            Literal expression = this.subroutineParameterLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token);
                unaryExpression.UnaryExpressionType = UnaryExpressionType.Negative;
                unaryExpression.Expression = expression;
            }
            return unaryExpression;
        }

        public Literal subroutineParameterLiteral() {
            switch (this.LA(1)) {
                case 221:
                    return this.integer();
                case 222:
                    return this.numeric();
                case 223:
                    return this.real();
                case 225:
                    return this.moneyLiteral();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void triggerStatementBody(TriggerStatementBody vResult, out bool vParseErrorOccurred) {
            IToken token = null;
            bool flag = false;
            vParseErrorOccurred = false;
            this.match(155);
            SchemaObjectName name = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(name, "TRIGGER");
                vResult.Name = name;
            }
            this.match(105);
            TriggerObject triggerObject = this.triggerObject();
            if (base.inputState.guessing == 0) {
                vResult.TriggerObject = triggerObject;
                base.ThrowPartialAstIfPhaseOne(vResult);
                if (vResult.TriggerObject.TriggerScope != 0) {
                    flag = true;
                }
            }
            switch (this.LA(1)) {
                case 171: {
                        this.match(171);
                        TriggerOption item = this.triggerOption(flag);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.Options, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.triggerOption(flag);
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.Options, item);
                            }
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 67:
                case 232:
                    break;
            }
            if ((this.LA(1) == 67 || this.LA(1) == 232) && this.LA(2) == 232 && flag) {
                this.ddlTriggerMidSection(vResult);
                goto IL_019b;
            }
            if ((this.LA(1) == 67 || this.LA(1) == 232) && TSql140ParserInternal.tokenSet_161_.member(this.LA(2))) {
                this.dmlTriggerMidSection(vResult);
                goto IL_019b;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_019b:
            token = this.LT(1);
            this.match(9);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token);
            }
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        break;
                    default:
                        goto IL_047f;
                }
            } else {
                switch (num) {
                    case 95:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 220:
                    case 232:
                        break;
                    case 175: {
                            MethodSpecifier methodSpecifier = this.methodSpecifier();
                            this.optSemicolons(vResult);
                            if (base.inputState.guessing == 0) {
                                vResult.MethodSpecifier = methodSpecifier;
                            }
                            return;
                        }
                    default:
                        goto IL_047f;
                }
            }
            while (true) {
                if (this.LA(1) != 204) {
                    break;
                }
                this.LT(1);
                this.match(204);
            }
            StatementList statementList = this.statementList(ref vParseErrorOccurred);
            if (base.inputState.guessing == 0) {
                vResult.StatementList = statementList;
            }
            return;
            IL_047f:
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void ddlTriggerMidSection(TriggerStatementBody vParent) {
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 67:
                    this.match(67);
                    if (base.inputState.guessing == 0) {
                        vParent.TriggerType = TriggerType.For;
                    }
                    break;
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token, "AFTER");
                        vParent.TriggerType = TriggerType.After;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (this.LA(1) == 232 && (this.LA(2) == 9 || this.LA(2) == 198) && !base.NextTokenMatches("LOGON")) {
                TriggerAction item = this.ddlTriggerAction();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.TriggerActions, item);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    item = this.ddlTriggerAction();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.TriggerActions, item);
                    }
                }
                return;
            }
            if (this.LA(1) == 232 && this.LA(2) == 9) {
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "LOGON");
                    if (vParent.TriggerObject.TriggerScope == TriggerScope.AllServer) {
                        TriggerAction item = base.FragmentFactory.CreateFragment<TriggerAction>();
                        item.TriggerActionType = TriggerActionType.LogOn;
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.TriggerActions, item);
                    } else {
                        TSql80ParserBaseInternal.ThrowParseErrorException("SQL46044", token2, TSqlParserResource.SQL46044Message);
                    }
                }
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void dmlTriggerMidSection(TriggerStatementBody vParent) {
            IToken token = null;
            bool flag = false;
            int current = 0;
            switch (this.LA(1)) {
                case 67:
                    this.match(67);
                    if (base.inputState.guessing == 0) {
                        vParent.TriggerType = TriggerType.For;
                    }
                    break;
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    switch (this.LA(1)) {
                        case 102:
                            this.LT(1);
                            this.match(102);
                            if (base.inputState.guessing == 0) {
                                flag = true;
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                        case 48:
                        case 86:
                        case 160:
                            break;
                    }
                    if (base.inputState.guessing == 0) {
                        if (flag) {
                            TSql80ParserBaseInternal.Match(token, "INSTEAD");
                            vParent.TriggerType = TriggerType.InsteadOf;
                        } else {
                            TSql80ParserBaseInternal.Match(token, "AFTER");
                            vParent.TriggerType = TriggerType.After;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            TriggerAction triggerAction = this.dmlTriggerAction();
            if (base.inputState.guessing == 0) {
                TSql90ParserBaseInternal.CheckDmlTriggerActionDuplication(current, triggerAction);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.TriggerActions, triggerAction);
                TSql90ParserBaseInternal.UpdateDmlTriggerActionEncounteredOptions(ref current, triggerAction);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                triggerAction = this.dmlTriggerAction();
                if (base.inputState.guessing == 0) {
                    TSql90ParserBaseInternal.CheckDmlTriggerActionDuplication(current, triggerAction);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.TriggerActions, triggerAction);
                    TSql90ParserBaseInternal.UpdateDmlTriggerActionEncounteredOptions(ref current, triggerAction);
                }
            }
            switch (this.LA(1)) {
                case 9:
                    break;
                case 99:
                    this.match(99);
                    this.match(67);
                    this.match(128);
                    if (base.inputState.guessing == 0) {
                        vParent.IsNotForReplication = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public TriggerAction dmlTriggerAction() {
            TriggerAction triggerAction = base.FragmentFactory.CreateFragment<TriggerAction>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            switch (this.LA(1)) {
                case 86:
                    token = this.LT(1);
                    this.match(86);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(triggerAction, token);
                        triggerAction.TriggerActionType = TriggerActionType.Insert;
                    }
                    break;
                case 160:
                    token2 = this.LT(1);
                    this.match(160);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(triggerAction, token2);
                        triggerAction.TriggerActionType = TriggerActionType.Update;
                    }
                    break;
                case 48:
                    token3 = this.LT(1);
                    this.match(48);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(triggerAction, token3);
                        triggerAction.TriggerActionType = TriggerActionType.Delete;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return triggerAction;
        }

        public TriggerAction ddlTriggerAction() {
            TriggerAction triggerAction = base.FragmentFactory.CreateFragment<TriggerAction>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                triggerAction.TriggerActionType = TriggerActionType.Event;
                EventNotificationEventType eventTypeValue = default(EventNotificationEventType);
                if (((OptionsHelper<EventNotificationEventType>)TriggerEventTypeHelper.Instance).TryParseOption(token, SqlVersionFlags.TSql140, out eventTypeValue)) {
                    triggerAction.EventTypeGroup = base.CreateEventTypeContainer(eventTypeValue, token);
                } else {
                    EventNotificationEventGroup eventGroupValue = TriggerEventGroupHelper.Instance.ParseOption(token, SqlVersionFlags.TSql140);
                    triggerAction.EventTypeGroup = base.CreateEventGroupContainer(eventGroupValue, token);
                }
            }
            return triggerAction;
        }

        public void endConversationArgumentsOpt(EndConversationStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                token = this.LT(1);
                this.match(232);
                int num = this.LA(1);
                if (num <= 92) {
                    switch (num) {
                        case 1:
                        case 4:
                        case 6:
                        case 12:
                        case 13:
                        case 15:
                        case 17:
                        case 22:
                        case 23:
                        case 28:
                        case 33:
                        case 35:
                        case 44:
                        case 45:
                        case 46:
                        case 48:
                        case 49:
                        case 54:
                        case 55:
                        case 56:
                        case 60:
                        case 61:
                        case 64:
                        case 74:
                        case 75:
                        case 82:
                        case 86:
                        case 92:
                            break;
                        default:
                            goto IL_034b;
                    }
                } else {
                    switch (num) {
                        case 95:
                        case 106:
                        case 119:
                        case 123:
                        case 125:
                        case 126:
                        case 129:
                        case 131:
                        case 132:
                        case 134:
                        case 138:
                        case 140:
                        case 142:
                        case 143:
                        case 144:
                        case 156:
                        case 160:
                        case 161:
                        case 162:
                        case 167:
                        case 170:
                        case 171:
                        case 172:
                        case 176:
                        case 182:
                        case 191:
                        case 204:
                        case 219:
                        case 220:
                        case 232:
                            break;
                        case 206: {
                                this.match(206);
                                ValueExpression errorCode = this.integerOrVariable();
                                token2 = this.LT(1);
                                this.match(232);
                                this.match(206);
                                ValueExpression errorDescription = this.stringOrVariable();
                                if (base.inputState.guessing == 0) {
                                    TSql80ParserBaseInternal.Match(token2, "DESCRIPTION");
                                    vParent.ErrorCode = errorCode;
                                    vParent.ErrorDescription = errorDescription;
                                }
                                return;
                            }
                        default:
                            goto IL_034b;
                    }
                }
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "CLEANUP");
                    vParent.WithCleanup = true;
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                }
                return;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_034b:
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public SelectElement receiveSelectExpression() {
            if (this.LA(1) == 234 && TSql140ParserInternal.tokenSet_100_.member(this.LA(2))) {
                return this.selectSetVariable();
            }
            bool flag = false;
            if (TSql140ParserInternal.tokenSet_107_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_162_.member(this.LA(2))) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.selectStarExpression();
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                return this.selectStarExpression();
            }
            if (TSql140ParserInternal.tokenSet_42_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_163_.member(this.LA(2))) {
                return this.receiveColumnSelectExpression();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public SelectScalarExpression receiveColumnSelectExpression() {
            SelectScalarExpression selectScalarExpression = base.FragmentFactory.CreateFragment<SelectScalarExpression>();
            ScalarExpression expression = this.expression();
            if (base.inputState.guessing == 0) {
                selectScalarExpression.Expression = expression;
            }
            switch (this.LA(1)) {
                case 9:
                case 230:
                case 231:
                case 232:
                case 233: {
                        switch (this.LA(1)) {
                            case 9:
                                this.match(9);
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 230:
                            case 231:
                            case 232:
                            case 233:
                                break;
                        }
                        IdentifierOrValueExpression columnName = this.stringOrIdentifier();
                        if (base.inputState.guessing == 0) {
                            selectScalarExpression.ColumnName = columnName;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 71:
                case 198:
                    break;
            }
            return selectScalarExpression;
        }

        public DialogOption beginConversationArgument(ref int encounteredOptions) {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            switch (this.LA(1)) {
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 163:
                case 187:
                case 191:
                case 193:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                    return this.scalarExpressionBeginDialogConversationArgument(token, ref encounteredOptions);
                case 103:
                case 105:
                    return this.onOffBeginDialogConversationArgument(token, ref encounteredOptions);
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public ScalarExpressionDialogOption scalarExpressionBeginDialogConversationArgument(IToken tOption, ref int encounteredOptions) {
            ScalarExpressionDialogOption scalarExpressionDialogOption = base.FragmentFactory.CreateFragment<ScalarExpressionDialogOption>();
            ScalarExpression value = this.expression();
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(tOption, "RELATED_CONVERSATION")) {
                    scalarExpressionDialogOption.OptionKind = DialogOptionKind.RelatedConversation;
                    scalarExpressionDialogOption.Value = value;
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, 1, tOption);
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, 0, tOption);
                } else if (TSql80ParserBaseInternal.TryMatch(tOption, "RELATED_CONVERSATION_GROUP")) {
                    scalarExpressionDialogOption.OptionKind = DialogOptionKind.RelatedConversationGroup;
                    scalarExpressionDialogOption.Value = value;
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, 1, tOption);
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, 0, tOption);
                } else {
                    TSql80ParserBaseInternal.Match(tOption, "LIFETIME");
                    scalarExpressionDialogOption.OptionKind = DialogOptionKind.Lifetime;
                    scalarExpressionDialogOption.Value = value;
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, (int)scalarExpressionDialogOption.OptionKind, tOption);
                }
            }
            return scalarExpressionDialogOption;
        }

        public OnOffDialogOption onOffBeginDialogConversationArgument(IToken tOption, ref int encounteredOptions) {
            OnOffDialogOption onOffDialogOption = base.FragmentFactory.CreateFragment<OnOffDialogOption>();
            OptionState optionState = this.optionOnOff(onOffDialogOption);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(tOption, "ENCRYPTION");
                onOffDialogOption.OptionKind = DialogOptionKind.Encryption;
                TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, (int)onOffDialogOption.OptionKind, tOption);
                onOffDialogOption.OptionState = optionState;
            }
            return onOffDialogOption;
        }

        public MergeStatement mergeStatementWithoutSemicolon(SubDmlFlags subDmlFlags) {
            MergeStatement mergeStatement = base.FragmentFactory.CreateFragment<MergeStatement>();
            MergeSpecification mergeSpecification = this.mergeSpecification(subDmlFlags);
            if (base.inputState.guessing == 0) {
                mergeStatement.MergeSpecification = mergeSpecification;
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0299;
                }
            } else {
                switch (num) {
                    case 111:
                        this.optimizerHints(mergeStatement, mergeStatement.OptimizerHints);
                        goto IL_0299;
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0299;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0299:
            return mergeStatement;
        }

        public MergeActionClause mergeActionClause() {
            MergeActionClause mergeActionClause = base.FragmentFactory.CreateFragment<MergeActionClause>();
            this.match(168);
            MergeCondition condition = this.mergeCondition();
            if (base.inputState.guessing == 0) {
                mergeActionClause.Condition = condition;
            }
            switch (this.LA(1)) {
                case 7: {
                        this.match(7);
                        BooleanExpression searchCondition = this.booleanExpression();
                        if (base.inputState.guessing == 0) {
                            mergeActionClause.SearchCondition = searchCondition;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 150:
                    break;
            }
            this.match(150);
            MergeAction action = this.mergeAction(condition);
            if (base.inputState.guessing == 0) {
                mergeActionClause.Action = action;
            }
            return mergeActionClause;
        }

        public MergeCondition mergeCondition() {
            MergeCondition result = MergeCondition.NotSpecified;
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            switch (this.LA(1)) {
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token, "MATCHED");
                        result = MergeCondition.Matched;
                    }
                    break;
                case 99:
                    this.match(99);
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "MATCHED");
                    }
                    switch (this.LA(1)) {
                        case 18:
                            this.match(18);
                            token3 = this.LT(1);
                            this.match(232);
                            if (base.inputState.guessing == 0) {
                                if (TSql80ParserBaseInternal.TryMatch(token3, "TARGET")) {
                                    result = MergeCondition.NotMatchedByTarget;
                                } else {
                                    TSql80ParserBaseInternal.Match(token3, "SOURCE");
                                    result = MergeCondition.NotMatchedBySource;
                                }
                            }
                            break;
                        case 7:
                        case 150:
                            if (base.inputState.guessing == 0) {
                                result = MergeCondition.NotMatched;
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public MergeAction mergeAction(MergeCondition condition) {
            switch (this.LA(1)) {
                case 160:
                    return this.updateMergeAction(condition);
                case 86:
                    return this.insertMergeAction(condition);
                case 48:
                    return this.deleteMergeAction(condition);
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public UpdateMergeAction updateMergeAction(MergeCondition condition) {
            UpdateMergeAction updateMergeAction = base.FragmentFactory.CreateFragment<UpdateMergeAction>();
            IToken token = null;
            token = this.LT(1);
            this.match(160);
            this.setClausesList(updateMergeAction, updateMergeAction.SetClauses);
            if (base.inputState.guessing == 0) {
                if (condition == MergeCondition.NotMatched || condition == MergeCondition.NotMatchedByTarget) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46041", token, TSqlParserResource.SQL46041Message, "Update");
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(updateMergeAction, token);
            }
            return updateMergeAction;
        }

        public InsertMergeAction insertMergeAction(MergeCondition condition) {
            InsertMergeAction insertMergeAction = base.FragmentFactory.CreateFragment<InsertMergeAction>();
            IToken token = null;
            token = this.LT(1);
            this.match(86);
            this.mergeInsertDmlColumnListOpt(insertMergeAction);
            ValuesInsertSource source = this.mergeInsertSource();
            if (base.inputState.guessing == 0) {
                if (condition == MergeCondition.Matched || condition == MergeCondition.NotMatchedBySource) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46040", token, TSqlParserResource.SQL46040Message);
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(insertMergeAction, token);
                insertMergeAction.Source = source;
            }
            return insertMergeAction;
        }

        public DeleteMergeAction deleteMergeAction(MergeCondition condition) {
            DeleteMergeAction deleteMergeAction = base.FragmentFactory.CreateFragment<DeleteMergeAction>();
            IToken token = null;
            token = this.LT(1);
            this.match(48);
            if (base.inputState.guessing == 0) {
                if (condition == MergeCondition.NotMatched || condition == MergeCondition.NotMatchedByTarget) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46041", token, TSqlParserResource.SQL46041Message, "Delete");
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(deleteMergeAction, token);
            }
            return deleteMergeAction;
        }

        public ValuesInsertSource mergeInsertSource() {
            ValuesInsertSource valuesInsertSource = base.FragmentFactory.CreateFragment<ValuesInsertSource>();
            IToken token = null;
            switch (this.LA(1)) {
                case 47:
                    this.defaultValuesInsertSource(valuesInsertSource);
                    break;
                case 164: {
                        token = this.LT(1);
                        this.match(164);
                        RowValue item = this.rowValueExpressionWithDefault();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(valuesInsertSource, token);
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(valuesInsertSource, valuesInsertSource.RowValues, item);
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return valuesInsertSource;
        }

        public void execStart(TSqlFragment vParent) {
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 61:
                    token = this.LT(1);
                    this.match(61);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                    }
                    break;
                case 60:
                    token2 = this.LT(1);
                    this.match(60);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public ExecuteContext executeAsStatementContext() {
            ExecuteContext executeContext = base.FragmentFactory.CreateFragment<ExecuteContext>();
            IToken token = null;
            ScalarExpression principal;
            switch (this.LA(1)) {
                case 163:
                    this.match(163);
                    this.match(206);
                    principal = this.expression();
                    if (base.inputState.guessing == 0) {
                        executeContext.Kind = ExecuteAsOption.User;
                        executeContext.Principal = principal;
                    }
                    break;
                case 232: {
                        token = this.LT(1);
                        this.match(232);
                        int num = this.LA(1);
                        if (num <= 92) {
                            switch (num) {
                                case 1:
                                case 4:
                                case 6:
                                case 12:
                                case 13:
                                case 15:
                                case 17:
                                case 22:
                                case 23:
                                case 28:
                                case 33:
                                case 35:
                                case 44:
                                case 45:
                                case 46:
                                case 48:
                                case 49:
                                case 54:
                                case 55:
                                case 56:
                                case 60:
                                case 61:
                                case 64:
                                case 74:
                                case 75:
                                case 82:
                                case 86:
                                case 92:
                                    break;
                                default:
                                    goto IL_035c;
                            }
                        } else {
                            switch (num) {
                                case 95:
                                case 106:
                                case 119:
                                case 123:
                                case 125:
                                case 126:
                                case 129:
                                case 131:
                                case 132:
                                case 134:
                                case 138:
                                case 140:
                                case 142:
                                case 143:
                                case 144:
                                case 156:
                                case 160:
                                case 161:
                                case 162:
                                case 167:
                                case 170:
                                case 171:
                                case 172:
                                case 176:
                                case 182:
                                case 191:
                                case 204:
                                case 219:
                                case 220:
                                case 232:
                                    break;
                                case 206:
                                    goto IL_0322;
                                default:
                                    goto IL_035c;
                            }
                        }
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token, "CALLER");
                            executeContext.Kind = ExecuteAsOption.Caller;
                            TSql80ParserBaseInternal.UpdateTokenInfo(executeContext, token);
                        }
                        break;
                    }
                default: {
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    IL_0322:
                    this.match(206);
                    principal = this.expression();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token, "LOGIN");
                        executeContext.Kind = ExecuteAsOption.Login;
                        executeContext.Principal = principal;
                    }
                    break;
                    IL_035c:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return executeContext;
        }

        public void executeContextStatementOptionsOpt(ExecuteAsStatement vParent) {
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            if (this.LA(1) == 171 && this.LA(2) == 232) {
                this.match(171);
                if (this.LA(1) == 232 && this.LA(2) == 176) {
                    token = this.LT(1);
                    this.match(232);
                    token2 = this.LT(1);
                    this.match(176);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token, "NO");
                        vParent.WithNoRevert = true;
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                    }
                    return;
                }
                if (this.LA(1) == 232 && this.LA(2) == 88) {
                    token3 = this.LT(1);
                    this.match(232);
                    this.match(88);
                    VariableReference cookie = this.variable();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token3, "COOKIE");
                        vParent.Cookie = cookie;
                    }
                    return;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ExecuteOption executeOption() {
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_56_.member(this.LA(2)) && base.NextTokenMatches("RECOMPILE")) {
                return this.executeOptionRecompile();
            }
            if (this.LA(1) == 232 && this.LA(2) == 232) {
                return this.executeOptionResultSets();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ExecuteOption executeOptionRecompile() {
            ExecuteOption executeOption = base.FragmentFactory.CreateFragment<ExecuteOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "RECOMPILE");
                executeOption.OptionKind = ExecuteOptionKind.Recompile;
                TSql80ParserBaseInternal.UpdateTokenInfo(executeOption, token);
            }
            return executeOption;
        }

        public ResultSetsExecuteOption executeOptionResultSets() {
            ResultSetsExecuteOption resultSetsExecuteOption = base.FragmentFactory.CreateFragment<ResultSetsExecuteOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "RESULT");
                TSql80ParserBaseInternal.Match(token2, "SETS");
                resultSetsExecuteOption.OptionKind = ExecuteOptionKind.ResultSets;
            }
            switch (this.LA(1)) {
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        if (TSql80ParserBaseInternal.TryMatch(token3, "UNDEFINED")) {
                            resultSetsExecuteOption.ResultSetsOptionKind = ResultSetsOptionKind.Undefined;
                        } else {
                            TSql80ParserBaseInternal.Match(token3, "NONE");
                            resultSetsExecuteOption.ResultSetsOptionKind = ResultSetsOptionKind.None;
                        }
                        TSql80ParserBaseInternal.UpdateTokenInfo(resultSetsExecuteOption, token3);
                    }
                    break;
                case 191: {
                        this.match(191);
                        ResultSetDefinition item = this.resultSetDefinition();
                        if (base.inputState.guessing == 0) {
                            resultSetsExecuteOption.ResultSetsOptionKind = ResultSetsOptionKind.ResultSetsDefined;
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(resultSetsExecuteOption, resultSetsExecuteOption.Definitions, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.resultSetDefinition();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(resultSetsExecuteOption, resultSetsExecuteOption.Definitions, item);
                            }
                        }
                        token4 = this.LT(1);
                        this.match(192);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(resultSetsExecuteOption, token4);
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return resultSetsExecuteOption;
        }

        public ResultSetDefinition resultSetDefinition() {
            if (this.LA(1) == 191) {
                return this.inlineResultSetDefinition();
            }
            if (this.LA(1) == 9 && this.LA(2) == 67) {
                return this.asForXmlResultSetDefinition();
            }
            if (this.LA(1) == 9 && this.LA(2) == 232) {
                return this.asSchemaObjectResultSetDefinition();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public InlineResultSetDefinition inlineResultSetDefinition() {
            InlineResultSetDefinition inlineResultSetDefinition = base.FragmentFactory.CreateFragment<InlineResultSetDefinition>();
            IToken token = null;
            this.match(191);
            ResultColumnDefinition item = this.resultColumnDefinition();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(inlineResultSetDefinition, inlineResultSetDefinition.ResultColumnDefinitions, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.resultColumnDefinition();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(inlineResultSetDefinition, inlineResultSetDefinition.ResultColumnDefinitions, item);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(inlineResultSetDefinition, token);
            }
            return inlineResultSetDefinition;
        }

        public ResultSetDefinition asForXmlResultSetDefinition() {
            ResultSetDefinition resultSetDefinition = base.FragmentFactory.CreateFragment<ResultSetDefinition>();
            IToken token = null;
            this.match(9);
            this.match(67);
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "XML");
                resultSetDefinition.ResultSetType = ResultSetType.ForXml;
                TSql80ParserBaseInternal.UpdateTokenInfo(resultSetDefinition, token);
            }
            return resultSetDefinition;
        }

        public SchemaObjectResultSetDefinition asSchemaObjectResultSetDefinition() {
            SchemaObjectResultSetDefinition schemaObjectResultSetDefinition = base.FragmentFactory.CreateFragment<SchemaObjectResultSetDefinition>();
            IToken token = null;
            this.match(9);
            token = this.LT(1);
            this.match(232);
            SchemaObjectName name = this.schemaObjectFourPartName();
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(token, "OBJECT")) {
                    schemaObjectResultSetDefinition.ResultSetType = ResultSetType.Object;
                } else {
                    TSql80ParserBaseInternal.Match(token, "TYPE");
                    schemaObjectResultSetDefinition.ResultSetType = ResultSetType.Type;
                }
                schemaObjectResultSetDefinition.Name = name;
            }
            return schemaObjectResultSetDefinition;
        }

        public ResultColumnDefinition resultColumnDefinition() {
            ResultColumnDefinition resultColumnDefinition = base.FragmentFactory.CreateFragment<ResultColumnDefinition>();
            ColumnDefinitionBase columnDefinition = this.columnDefinitionBasic();
            if (base.inputState.guessing == 0) {
                resultColumnDefinition.ColumnDefinition = columnDefinition;
            }
            switch (this.LA(1)) {
                case 99:
                case 100: {
                        NullableConstraintDefinition nullable = this.nullableConstraint();
                        if (base.inputState.guessing == 0) {
                            resultColumnDefinition.Nullable = nullable;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                case 198:
                    break;
            }
            return resultColumnDefinition;
        }

        public void execTypes(ExecuteSpecification vParent) {
            IToken token = null;
            if (this.LA(1) == 191) {
                this.match(191);
                ExecutableEntity executableEntity = this.execStrTypes();
                token = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                    vParent.ExecutableEntity = executableEntity;
                }
                int num = this.LA(1);
                if (num <= 95) {
                    switch (num) {
                        case 9: {
                                ExecuteContext executeContext = this.execStrExecCtxt();
                                if (base.inputState.guessing == 0) {
                                    vParent.ExecuteContext = executeContext;
                                }
                                goto IL_030f;
                            }
                        case 1:
                        case 4:
                        case 6:
                        case 12:
                        case 13:
                        case 15:
                        case 17:
                        case 22:
                        case 23:
                        case 28:
                        case 33:
                        case 35:
                        case 44:
                        case 45:
                        case 46:
                        case 48:
                        case 49:
                        case 54:
                        case 55:
                        case 56:
                        case 60:
                        case 61:
                        case 64:
                        case 74:
                        case 75:
                        case 82:
                        case 86:
                        case 92:
                        case 95:
                            goto IL_030f;
                    }
                } else {
                    switch (num) {
                        case 106:
                        case 111:
                        case 119:
                        case 123:
                        case 125:
                        case 126:
                        case 129:
                        case 131:
                        case 132:
                        case 134:
                        case 138:
                        case 140:
                        case 142:
                        case 143:
                        case 144:
                        case 156:
                        case 160:
                        case 161:
                        case 162:
                        case 167:
                        case 170:
                        case 171:
                        case 172:
                        case 176:
                        case 182:
                        case 191:
                        case 192:
                        case 204:
                        case 219:
                        case 220:
                        case 232:
                            goto IL_030f;
                    }
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (TSql140ParserInternal.tokenSet_164_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_165_.member(this.LA(2))) {
                ExecutableEntity executableEntity = this.execProcEx();
                if (base.inputState.guessing == 0) {
                    vParent.ExecutableEntity = executableEntity;
                }
                return;
            }
            if (this.LA(1) == 234 && this.LA(2) == 206) {
                VariableReference variable = this.variable();
                this.match(206);
                ExecutableEntity executableEntity = this.execProcEx();
                if (base.inputState.guessing == 0) {
                    vParent.Variable = variable;
                    vParent.ExecutableEntity = executableEntity;
                }
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_030f:
            if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("AT")) {
                Identifier linkedServer = this.linkedServer();
                if (base.inputState.guessing == 0) {
                    vParent.LinkedServer = linkedServer;
                }
                return;
            }
            if (TSql140ParserInternal.tokenSet_22_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ExecutableEntity execStrTypes() {
            ExecutableEntity executableEntity = this.execSqlList();
            switch (this.LA(1)) {
                case 198:
                    this.match(198);
                    this.setParamList(executableEntity);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            return executableEntity;
        }

        public ExecuteContext execStrExecCtxt() {
            this.match(9);
            return this.execCtxtStmt();
        }

        public Identifier linkedServer() {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            Identifier result = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "AT");
            }
            return result;
        }

        public ExecutableProcedureReference execProcEx() {
            switch (this.LA(1)) {
                case 200:
                case 232:
                case 233:
                case 234:
                    return this.execProc();
                case 107:
                    return this.adhocDataSourceExecproc();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public ExecuteContext execCtxtStmt() {
            ExecuteContext executeContext = base.FragmentFactory.CreateFragment<ExecuteContext>();
            this.execCtxtStmtType(executeContext);
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_02b4;
                }
            } else {
                switch (num) {
                    case 206: {
                            Literal principal = this.execCtxtStmtPrincipal();
                            if (base.inputState.guessing == 0) {
                                executeContext.Principal = principal;
                            }
                            goto IL_02b4;
                        }
                    case 106:
                    case 111:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_02b4;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_02b4:
            return executeContext;
        }

        public void execCtxtStmtType(ExecuteContext vParent) {
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 163:
                    token = this.LT(1);
                    this.match(163);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                        vParent.Kind = ExecuteAsOption.User;
                    }
                    break;
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "LOGIN");
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                        vParent.Kind = ExecuteAsOption.Login;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public Literal execCtxtStmtPrincipal() {
            Literal literal = null;
            this.match(206);
            return this.stringLiteral();
        }

        public ExecutableStringList execSqlList() {
            ExecutableStringList executableStringList = base.FragmentFactory.CreateFragment<ExecutableStringList>();
            ValueExpression item = this.stringOrGlobalVariableOrVariable();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(executableStringList, executableStringList.Strings, item);
            }
            while (true) {
                if (this.LA(1) != 197) {
                    break;
                }
                this.match(197);
                item = this.stringOrGlobalVariableOrVariable();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(executableStringList, executableStringList.Strings, item);
                }
            }
            return executableStringList;
        }

        public void setParamList(ExecutableEntity vParent) {
            bool flag = false;
            int num = 0;
            ExecuteParameter item = this.setParam(ref flag, ref num);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Parameters, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.setParam(ref flag, ref num);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Parameters, item);
                }
            }
        }

        public ExecutableProcedureReference adhocDataSourceExecproc() {
            ExecutableProcedureReference executableProcedureReference = base.FragmentFactory.CreateFragment<ExecutableProcedureReference>();
            AdHocDataSource adHocDataSource = this.adhocDataSource();
            this.match(200);
            ProcedureReferenceName procedureReference = this.procObjectReference();
            if (base.inputState.guessing == 0) {
                executableProcedureReference.AdHocDataSource = adHocDataSource;
                executableProcedureReference.ProcedureReference = procedureReference;
            }
            if (TSql140ParserInternal.tokenSet_20_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_21_.member(this.LA(2))) {
                this.setParamList(executableProcedureReference);
                goto IL_00a8;
            }
            if (TSql140ParserInternal.tokenSet_22_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00a8;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00a8:
            return executableProcedureReference;
        }

        public ProcedureReferenceName procObjectReference() {
            ProcedureReferenceName procedureReferenceName = base.FragmentFactory.CreateFragment<ProcedureReferenceName>();
            ProcedureReference procedureReference = this.procedureReference();
            if (base.inputState.guessing == 0) {
                procedureReferenceName.ProcedureReference = procedureReference;
            }
            return procedureReferenceName;
        }

        public ProcedureReferenceName varObjectReference() {
            ProcedureReferenceName procedureReferenceName = base.FragmentFactory.CreateFragment<ProcedureReferenceName>();
            VariableReference procedureVariable = this.variable();
            if (base.inputState.guessing == 0) {
                procedureReferenceName.ProcedureVariable = procedureVariable;
            }
            return procedureReferenceName;
        }

        public Literal procNumOpt() {
            Literal result = null;
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 9:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 67:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0307;
                }
            } else {
                switch (num) {
                    case 236:
                        this.match(236);
                        result = this.integer();
                        goto IL_0307;
                    case 100:
                    case 106:
                    case 111:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 193:
                    case 199:
                    case 204:
                    case 219:
                    case 220:
                    case 221:
                    case 222:
                    case 223:
                    case 224:
                    case 225:
                    case 230:
                    case 231:
                    case 232:
                    case 233:
                    case 234:
                        goto IL_0307;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0307:
            return result;
        }

        public ValueExpression stringOrGlobalVariableOrVariable() {
            ValueExpression valueExpression = null;
            switch (this.LA(1)) {
                case 230:
                case 231:
                    return this.stringLiteral();
                case 234:
                    return this.globalVariableOrVariableReference();
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public ExecuteParameter setParam(ref bool nameEqualsValueWasUsed, ref int parameterNumber) {
            ExecuteParameter executeParameter = base.FragmentFactory.CreateFragment<ExecuteParameter>();
            IToken token = null;
            executeParameter.IsOutput = false;
            parameterNumber++;
            if (this.LA(1) == 234 && this.LA(2) == 206) {
                VariableReference variable = this.variable();
                this.match(206);
                if (base.inputState.guessing == 0) {
                    executeParameter.Variable = variable;
                }
                goto IL_0098;
            }
            if (TSql140ParserInternal.tokenSet_20_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_166_.member(this.LA(2))) {
                goto IL_0098;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0098:
            switch (this.LA(1)) {
                case 100:
                case 193:
                case 199:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234: {
                        ScalarExpression scalarExpression = this.possibleNegativeConstantOrIdentifier();
                        if (base.inputState.guessing == 0) {
                            executeParameter.ParameterValue = scalarExpression;
                            if (executeParameter.Variable != null) {
                                nameEqualsValueWasUsed = true;
                            } else if (nameEqualsValueWasUsed) {
                                TSql80ParserBaseInternal.ThrowParseErrorException("SQL46089", scalarExpression, TSqlParserResource.SQL46089Message, parameterNumber.ToString(CultureInfo.CurrentCulture));
                            }
                        }
                        if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_167_.member(this.LA(2)) && (base.NextTokenMatches("OUTPUT") || base.NextTokenMatches("OUT"))) {
                            token = this.LT(1);
                            this.match(232);
                            if (base.inputState.guessing == 0) {
                                VariableReference variableReference = scalarExpression as VariableReference;
                                GlobalVariableExpression globalVariableExpression = scalarExpression as GlobalVariableExpression;
                                if (variableReference == null && globalVariableExpression == null) {
                                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46088", token, TSqlParserResource.SQL46088Message);
                                }
                                TSql80ParserBaseInternal.Match(token, "OUTPUT", "OUT");
                                executeParameter.IsOutput = true;
                                TSql80ParserBaseInternal.UpdateTokenInfo(executeParameter, token);
                            }
                            break;
                        }
                        if (TSql140ParserInternal.tokenSet_167_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_168_.member(this.LA(2))) {
                            break;
                        }
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                case 47: {
                        Literal parameterValue = this.defaultLiteral();
                        if (base.inputState.guessing == 0) {
                            executeParameter.ParameterValue = parameterValue;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return executeParameter;
        }

        public TableDefinition tableDefinitionCreateTable() {
            TableDefinition tableDefinition = base.FragmentFactory.CreateFragment<TableDefinition>();
            this.tableElement(IndexAffectingStatement.CreateTable, tableDefinition, null);
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                if (!TSql140ParserInternal.tokenSet_169_.member(this.LA(2))) {
                    break;
                }
                this.LT(1);
                this.match(198);
                this.tableElement(IndexAffectingStatement.CreateTable, tableDefinition, null);
            }
            switch (this.LA(1)) {
                case 198:
                    this.match(198);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            if (base.inputState.guessing == 0) {
                TSql130ParserBaseInternal.CheckTemporalPeriodInTableDefinition(tableDefinition, false);
            }
            return tableDefinition;
        }

        public void graphAsNodeOrEdge(CreateTableStatement vParent) {
            IToken token = null;
            this.match(9);
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(token, "EDGE")) {
                    vParent.AsEdge = true;
                } else {
                    TSql80ParserBaseInternal.Match(token, "NODE");
                    vParent.AsNode = true;
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public FederationScheme federatedOn(CreateTableStatement vParent) {
            FederationScheme federationScheme = base.FragmentFactory.CreateFragment<FederationScheme>();
            IToken token = null;
            this.identifier();
            this.match(105);
            this.match(191);
            Identifier distributionName = this.identifier();
            if (base.inputState.guessing == 0) {
                federationScheme.DistributionName = distributionName;
            }
            this.match(206);
            Identifier columnName = this.identifier();
            if (base.inputState.guessing == 0) {
                federationScheme.ColumnName = columnName;
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
            return federationScheme;
        }

        public void largeDataOnOpt(CreateTableStatement vParent) {
            if (this.LA(1) == 232 && this.LA(2) >= 230 && this.LA(2) <= 233) {
                this.largeDataOn(vParent);
                if (this.LA(1) == 232 && this.LA(2) >= 230 && this.LA(2) <= 233) {
                    this.largeDataOn(vParent);
                    return;
                }
                if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                    return;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void withTableOptions(CreateTableStatement vParent) {
            IToken token = null;
            this.match(171);
            this.match(191);
            TableOption item = this.createTableOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.createTableOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Options, item);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public void largeDataOn(CreateTableStatement vParent) {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            IdentifierOrValueExpression identifierOrValueExpression = this.stringOrIdentifier();
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(token, "TEXTIMAGE_ON")) {
                    if (vParent.TextImageOn != null) {
                        TSql80ParserBaseInternal.ThrowParseErrorException("SQL46058", token, TSqlParserResource.SQL46058Message, token.getText());
                    }
                    vParent.TextImageOn = identifierOrValueExpression;
                } else {
                    TSql80ParserBaseInternal.Match(token, "FILESTREAM_ON");
                    if (vParent.FileStreamOn != null) {
                        TSql80ParserBaseInternal.ThrowParseErrorException("SQL46058", token, TSqlParserResource.SQL46058Message, token.getText());
                    }
                    vParent.FileStreamOn = identifierOrValueExpression;
                }
            }
        }

        public TableOption createTableOption() {
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DATA_COMPRESSION")) {
                return this.tableDataCompressionOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("FILETABLE_DIRECTORY")) {
                return this.fileTableDirectoryTableOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("FILETABLE_COLLATE_FILENAME")) {
                return this.fileTableCollateFileNameTableOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatchesOneOf("FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME", "FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME", "FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME")) {
                return this.fileTableConstraintNameTableOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MEMORY_OPTIMIZED")) {
                return this.memoryOptimizedTableOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DURABILITY")) {
                return this.durabilityTableOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("REMOTE_DATA_ARCHIVE")) {
                return this.remoteDataArchiveTableOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SYSTEM_VERSIONING")) {
                return this.systemVersioningTableOnOffOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DISTRIBUTION")) {
                return this.tableDistributionOption();
            }
            if ((this.LA(1) == 24 || this.LA(1) == 232) && TSql140ParserInternal.tokenSet_170_.member(this.LA(2))) {
                return this.tableIndexOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("PARTITION")) {
                return this.tablePartitionOption();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public TableDataCompressionOption tableDataCompressionOption() {
            TableDataCompressionOption tableDataCompressionOption = base.FragmentFactory.CreateFragment<TableDataCompressionOption>();
            DataCompressionOption dataCompressionOption = this.dataCompressionOption();
            if (base.inputState.guessing == 0) {
                tableDataCompressionOption.DataCompressionOption = dataCompressionOption;
                tableDataCompressionOption.OptionKind = TableOptionKind.DataCompression;
            }
            return tableDataCompressionOption;
        }

        public FileTableDirectoryTableOption fileTableDirectoryTableOption() {
            FileTableDirectoryTableOption fileTableDirectoryTableOption = base.FragmentFactory.CreateFragment<FileTableDirectoryTableOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Literal value = this.stringLiteralOrNull();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FILETABLE_DIRECTORY");
                fileTableDirectoryTableOption.OptionKind = TableOptionKind.FileTableDirectory;
                fileTableDirectoryTableOption.Value = value;
            }
            return fileTableDirectoryTableOption;
        }

        public FileTableCollateFileNameTableOption fileTableCollateFileNameTableOption() {
            FileTableCollateFileNameTableOption fileTableCollateFileNameTableOption = base.FragmentFactory.CreateFragment<FileTableCollateFileNameTableOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Identifier value = this.nonQuotedIdentifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FILETABLE_COLLATE_FILENAME");
                fileTableCollateFileNameTableOption.OptionKind = TableOptionKind.FileTableCollateFileName;
                fileTableCollateFileNameTableOption.Value = value;
            }
            return fileTableCollateFileNameTableOption;
        }

        public FileTableConstraintNameTableOption fileTableConstraintNameTableOption() {
            FileTableConstraintNameTableOption fileTableConstraintNameTableOption = base.FragmentFactory.CreateFragment<FileTableConstraintNameTableOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Identifier value = this.identifier();
            if (base.inputState.guessing == 0) {
                fileTableConstraintNameTableOption.Value = value;
                if (TSql80ParserBaseInternal.TryMatch(token, "FILETABLE_PRIMARY_KEY_CONSTRAINT_NAME")) {
                    fileTableConstraintNameTableOption.OptionKind = TableOptionKind.FileTablePrimaryKeyConstraintName;
                } else if (TSql80ParserBaseInternal.TryMatch(token, "FILETABLE_STREAMID_UNIQUE_CONSTRAINT_NAME")) {
                    fileTableConstraintNameTableOption.OptionKind = TableOptionKind.FileTableStreamIdUniqueConstraintName;
                } else if (TSql80ParserBaseInternal.TryMatch(token, "FILETABLE_FULLPATH_UNIQUE_CONSTRAINT_NAME")) {
                    fileTableConstraintNameTableOption.OptionKind = TableOptionKind.FileTableFullPathUniqueConstraintName;
                } else {
                    TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                }
            }
            return fileTableConstraintNameTableOption;
        }

        public DurabilityTableOption durabilityTableOption() {
            DurabilityTableOption durabilityTableOption = base.FragmentFactory.CreateFragment<DurabilityTableOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "DURABILITY");
                durabilityTableOption.OptionKind = TableOptionKind.Durability;
                durabilityTableOption.DurabilityTableOptionKind = DurabilityTableOptionHelper.Instance.ParseOption(token2);
            }
            return durabilityTableOption;
        }

        public RemoteDataArchiveTableOption remoteDataArchiveTableOption() {
            RemoteDataArchiveTableOption remoteDataArchiveTableOption = base.FragmentFactory.CreateFragment<RemoteDataArchiveTableOption>();
            IToken token = null;
            IToken token2 = null;
            MigrationState migrationState = MigrationState.Paused;
            bool flag = false;
            bool flag2 = false;
            FunctionCall functionCall = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            this.match(105);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "REMOTE_DATA_ARCHIVE");
                remoteDataArchiveTableOption.OptionKind = TableOptionKind.RemoteDataArchive;
                remoteDataArchiveTableOption.RdaTableOption = RdaTableOption.Enable;
            }
            this.match(191);
            this.remoteDataArchiveTableSettings(remoteDataArchiveTableOption, ref migrationState, ref flag2, ref flag, ref functionCall);
            if (base.inputState.guessing == 0) {
                remoteDataArchiveTableOption.MigrationState = migrationState;
                if (flag) {
                    TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                }
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(remoteDataArchiveTableOption, token2);
            }
            return remoteDataArchiveTableOption;
        }

        public SystemVersioningTableOption systemVersioningTableOnOffOption() {
            SystemVersioningTableOption systemVersioningTableOption = base.FragmentFactory.CreateFragment<SystemVersioningTableOption>();
            IToken token = null;
            bool flag = false;
            bool flag2 = false;
            bool flag3 = false;
            systemVersioningTableOption.HistoryTable = null;
            systemVersioningTableOption.RetentionPeriod = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SYSTEM_VERSIONING");
                TSql80ParserBaseInternal.UpdateTokenInfo(systemVersioningTableOption, token);
            }
            this.match(206);
            switch (this.LA(1)) {
                case 103:
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        systemVersioningTableOption.OptionState = OptionState.Off;
                    }
                    break;
                case 105:
                    this.match(105);
                    switch (this.LA(1)) {
                        case 191:
                            this.match(191);
                            this.systemVersioningTableSuboption(systemVersioningTableOption, ref flag, ref flag2, ref flag3);
                            while (true) {
                                if (this.LA(1) != 198) {
                                    break;
                                }
                                this.match(198);
                                this.systemVersioningTableSuboption(systemVersioningTableOption, ref flag, ref flag2, ref flag3);
                            }
                            this.match(192);
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                        case 192:
                        case 198:
                            break;
                    }
                    if (base.inputState.guessing == 0) {
                        systemVersioningTableOption.OptionState = OptionState.On;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return systemVersioningTableOption;
        }

        public TableDistributionOption tableDistributionOption() {
            TableDistributionOption tableDistributionOption = base.FragmentFactory.CreateFragment<TableDistributionOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "DISTRIBUTION");
                tableDistributionOption.OptionKind = TableOptionKind.Distribution;
                TSql80ParserBaseInternal.UpdateTokenInfo(tableDistributionOption, token);
            }
            TableDistributionPolicy value = this.tableDistributionPolicy();
            if (base.inputState.guessing == 0) {
                tableDistributionOption.Value = value;
            }
            return tableDistributionOption;
        }

        public TableIndexOption tableIndexOption() {
            TableIndexOption tableIndexOption = base.FragmentFactory.CreateFragment<TableIndexOption>();
            TableIndexType value = this.tableIndexType();
            if (base.inputState.guessing == 0) {
                tableIndexOption.Value = value;
            }
            return tableIndexOption;
        }

        public TablePartitionOption tablePartitionOption() {
            TablePartitionOption tablePartitionOption = base.FragmentFactory.CreateFragment<TablePartitionOption>();
            IToken token = null;
            IToken token2 = null;
            TablePartitionOptionSpecifications tablePartitionOptionSpecifications = base.FragmentFactory.CreateFragment<TablePartitionOptionSpecifications>();
            token = this.LT(1);
            this.match(232);
            this.match(191);
            Identifier partitionColumn = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "PARTITION");
                tablePartitionOption.PartitionColumn = partitionColumn;
                tablePartitionOption.OptionKind = TableOptionKind.Partition;
                TSql80ParserBaseInternal.UpdateTokenInfo(tablePartitionOption, token);
            }
            this.partitionOptionTypes(tablePartitionOptionSpecifications);
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                tablePartitionOption.PartitionOptionSpecs = tablePartitionOptionSpecifications;
                TSql80ParserBaseInternal.UpdateTokenInfo(tablePartitionOption, token2);
            }
            return tablePartitionOption;
        }

        public void remoteDataArchiveTableSettings(TSqlFragment vParent, ref MigrationState vMigrationState, ref bool vIsMigrationStateSpecified, ref bool vIsFilterPredicateSpecified, ref FunctionCall vFilterPredicate) {
            IToken token = null;
            IToken token2 = null;
            MigrationState migrationState = MigrationState.Paused;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (this.LA(1) == 232 && (this.LA(2) == 192 || this.LA(2) == 198)) {
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "MIGRATION_STATE");
                    if (vIsMigrationStateSpecified) {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                    }
                    migrationState = MigrationStateHelper.Instance.ParseOption(token2);
                    vIsMigrationStateSpecified = true;
                    vMigrationState = migrationState;
                }
                goto IL_0183;
            }
            if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_143_.member(this.LA(2))) {
                SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "FILTER_PREDICATE");
                    TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "FILTER_PREDICATE");
                    if (vIsFilterPredicateSpecified) {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                    }
                }
                FunctionCall functionCall = this.userFunctionCall(schemaObjectName);
                if (base.inputState.guessing == 0) {
                    vIsFilterPredicateSpecified = true;
                    vFilterPredicate = functionCall;
                }
                goto IL_0183;
            }
            if (this.LA(1) == 100) {
                this.match(100);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "FILTER_PREDICATE");
                    if (vIsFilterPredicateSpecified) {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                    }
                    vFilterPredicate = null;
                    vIsFilterPredicateSpecified = true;
                }
                goto IL_0183;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0183:
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                if (this.LA(2) != 232) {
                    break;
                }
                this.match(198);
                this.remoteDataArchiveTableSettings(vParent, ref vMigrationState, ref vIsMigrationStateSpecified, ref vIsFilterPredicateSpecified, ref vFilterPredicate);
            }
        }

        public TableDistributionPolicy tableDistributionPolicy() {
            if (this.LA(1) == 232 && (this.LA(2) == 192 || this.LA(2) == 198) && base.NextTokenMatches("REPLICATE")) {
                return this.tableReplicateDistributionPolicy();
            }
            if (this.LA(1) == 232 && (this.LA(2) == 192 || this.LA(2) == 198) && base.NextTokenMatches("ROUND_ROBIN")) {
                return this.tableRoundRobinDistributionPolicy();
            }
            if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("HASH")) {
                return this.tableHashDistributionPolicy();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public TableReplicateDistributionPolicy tableReplicateDistributionPolicy() {
            TableReplicateDistributionPolicy tableReplicateDistributionPolicy = base.FragmentFactory.CreateFragment<TableReplicateDistributionPolicy>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "REPLICATE");
                TSql80ParserBaseInternal.UpdateTokenInfo(tableReplicateDistributionPolicy, token);
            }
            return tableReplicateDistributionPolicy;
        }

        public TableRoundRobinDistributionPolicy tableRoundRobinDistributionPolicy() {
            TableRoundRobinDistributionPolicy tableRoundRobinDistributionPolicy = base.FragmentFactory.CreateFragment<TableRoundRobinDistributionPolicy>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ROUND_ROBIN");
                TSql80ParserBaseInternal.UpdateTokenInfo(tableRoundRobinDistributionPolicy, token);
            }
            return tableRoundRobinDistributionPolicy;
        }

        public TableHashDistributionPolicy tableHashDistributionPolicy() {
            TableHashDistributionPolicy tableHashDistributionPolicy = base.FragmentFactory.CreateFragment<TableHashDistributionPolicy>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(191);
            Identifier distributionColumn = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "HASH");
                tableHashDistributionPolicy.DistributionColumn = distributionColumn;
                TSql80ParserBaseInternal.UpdateTokenInfo(tableHashDistributionPolicy, token);
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tableHashDistributionPolicy, token2);
            }
            return tableHashDistributionPolicy;
        }

        public TableIndexType tableIndexType() {
            if (this.LA(1) == 232 && base.NextTokenMatches("HEAP")) {
                return this.tableNonClusteredIndexType();
            }
            if (this.LA(1) == 24 && base.NextTokenMatches("CLUSTERED")) {
                return this.tableClusteredIndexType();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public TableNonClusteredIndexType tableNonClusteredIndexType() {
            TableNonClusteredIndexType tableNonClusteredIndexType = base.FragmentFactory.CreateFragment<TableNonClusteredIndexType>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tableNonClusteredIndexType, token);
            }
            return tableNonClusteredIndexType;
        }

        public TableClusteredIndexType tableClusteredIndexType() {
            TableClusteredIndexType tableClusteredIndexType = base.FragmentFactory.CreateFragment<TableClusteredIndexType>();
            IToken token = null;
            IToken token2 = null;
            this.match(24);
            switch (this.LA(1)) {
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    this.match(84);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token, "COLUMNSTORE");
                        tableClusteredIndexType.ColumnStore = true;
                    }
                    break;
                case 84: {
                        this.match(84);
                        if (base.inputState.guessing == 0) {
                            tableClusteredIndexType.ColumnStore = false;
                        }
                        this.match(191);
                        ColumnWithSortOrder item = this.columnWithSortOrder();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(tableClusteredIndexType, tableClusteredIndexType.Columns, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.columnWithSortOrder();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(tableClusteredIndexType, tableClusteredIndexType.Columns, item);
                            }
                        }
                        token2 = this.LT(1);
                        this.match(192);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(tableClusteredIndexType, token2);
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return tableClusteredIndexType;
        }

        public void systemVersioningTableSuboption(SystemVersioningTableOption vParent, ref bool historyTableSpecified, ref bool dataConsistencyCheckSpecified, ref bool retentionPeriodSpecified) {
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("HISTORY_TABLE")) {
                token = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "HISTORY_TABLE");
                    if (historyTableSpecified) {
                        TSql80ParserBaseInternal.ThrowParseErrorException("SQL46010", vParent, TSqlParserResource.SQL46010Message, "HISTORY_TABLE");
                    }
                    historyTableSpecified = true;
                }
                this.match(206);
                SchemaObjectName historyTable = this.schemaObjectNonEmptyTwoPartName();
                if (base.inputState.guessing == 0) {
                    vParent.HistoryTable = historyTable;
                }
                return;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DATA_CONSISTENCY_CHECK")) {
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "DATA_CONSISTENCY_CHECK");
                    if (dataConsistencyCheckSpecified) {
                        TSql80ParserBaseInternal.ThrowParseErrorException("SQL46010", vParent, TSqlParserResource.SQL46010Message, "DATA_CONSISTENCY_CHECK");
                    }
                    dataConsistencyCheckSpecified = true;
                }
                this.match(206);
                switch (this.LA(1)) {
                    case 105:
                        this.match(105);
                        if (base.inputState.guessing == 0) {
                            vParent.ConsistencyCheckEnabled = OptionState.On;
                        }
                        break;
                    case 103:
                        this.match(103);
                        if (base.inputState.guessing == 0) {
                            vParent.ConsistencyCheckEnabled = OptionState.Off;
                        }
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                return;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("HISTORY_RETENTION_PERIOD")) {
                token3 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token3, "HISTORY_RETENTION_PERIOD");
                    if (retentionPeriodSpecified) {
                        TSql80ParserBaseInternal.ThrowParseErrorException("SQL46010", vParent, TSqlParserResource.SQL46010Message, "HISTORY_RETENTION_PERIOD");
                    }
                    retentionPeriodSpecified = true;
                    vParent.RetentionPeriod = new RetentionPeriodDefinition();
                }
                this.match(206);
                switch (this.LA(1)) {
                    case 199:
                    case 221: {
                            ScalarExpression scalarExpression = this.signedInteger();
                            token4 = this.LT(1);
                            this.match(232);
                            if (base.inputState.guessing == 0) {
                                TSql130ParserBaseInternal.CheckRetentionPeriodDuration(scalarExpression);
                                vParent.RetentionPeriod.IsInfinity = false;
                                vParent.RetentionPeriod.Duration = (scalarExpression as IntegerLiteral);
                                vParent.RetentionPeriod.Units = TemporalRetentionPeriodUnitHelper.Instance.ParseOption(token4);
                            }
                            break;
                        }
                    case 232:
                        token5 = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token5, "INFINITE");
                            vParent.RetentionPeriod.IsInfinity = true;
                        }
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void externalTableColumnElement(CreateExternalTableStatement vResult) {
            ExternalTableColumnDefinition item = this.columnDefinitionCreateExternalTable();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vResult, vResult.ColumnDefinitions, item);
            }
        }

        public void withExternalTableOptions(CreateExternalTableStatement vParent) {
            IToken token = null;
            int num = 0;
            this.LT(1);
            this.match(171);
            this.match(191);
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DATA_SOURCE")) {
                this.externalTableDataSource(vParent);
                goto IL_00b4;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                ExternalTableOption externalTableOption = this.createExternalTableOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)externalTableOption.OptionKind, externalTableOption);
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.ExternalTableOptions, externalTableOption);
                }
                goto IL_00b4;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00b4:
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.LT(1);
                this.match(198);
                if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DATA_SOURCE")) {
                    this.externalTableDataSource(vParent);
                    continue;
                }
                if (this.LA(1) == 232 && this.LA(2) == 206) {
                    ExternalTableOption externalTableOption = this.createExternalTableOption();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)externalTableOption.OptionKind, externalTableOption);
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.ExternalTableOptions, externalTableOption);
                    }
                    continue;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public ExternalTableColumnDefinition columnDefinitionCreateExternalTable() {
            ExternalTableColumnDefinition externalTableColumnDefinition = base.FragmentFactory.CreateFragment<ExternalTableColumnDefinition>();
            ColumnDefinitionBase columnDefinition = this.columnDefinitionBasic();
            if (base.inputState.guessing == 0) {
                externalTableColumnDefinition.ColumnDefinition = columnDefinition;
            }
            switch (this.LA(1)) {
                case 99:
                case 100: {
                        NullableConstraintDefinition nullableConstraint = this.nullableConstraint();
                        if (base.inputState.guessing == 0) {
                            externalTableColumnDefinition.NullableConstraint = nullableConstraint;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                case 198:
                    break;
            }
            return externalTableColumnDefinition;
        }

        public void externalTableDataSource(CreateExternalTableStatement vParent) {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Identifier dataSource = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "DATA_SOURCE");
                vParent.DataSource = dataSource;
            }
        }

        public ExternalTableOption createExternalTableOption() {
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("REJECT_TYPE")) {
                return this.externalTableRejectTypeOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DISTRIBUTION")) {
                return this.externalTableDistributionOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && (base.NextTokenMatches("REJECT_SAMPLE_VALUE") || base.NextTokenMatches("REJECT_VALUE"))) {
                return this.externalTableNumericLiteralOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                return this.externalTableLiteralOrIdentifierOption();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ExternalTableRejectTypeOption externalTableRejectTypeOption() {
            ExternalTableRejectTypeOption externalTableRejectTypeOption = base.FragmentFactory.CreateFragment<ExternalTableRejectTypeOption>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "REJECT_TYPE");
                externalTableRejectTypeOption.OptionKind = ExternalTableOptionKind.RejectType;
                TSql80ParserBaseInternal.UpdateTokenInfo(externalTableRejectTypeOption, token);
            }
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                if (!TSql80ParserBaseInternal.TryMatch(token2, "VALUE")) {
                    if (TSql80ParserBaseInternal.TryMatch(token2, "PERCENTAGE")) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(externalTableRejectTypeOption, token2);
                        externalTableRejectTypeOption.Value = ExternalTableRejectType.Percentage;
                        goto IL_00b5;
                    }
                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(externalTableRejectTypeOption, token2);
                externalTableRejectTypeOption.Value = ExternalTableRejectType.Value;
            }
            goto IL_00b5;
            IL_00b5:
            return externalTableRejectTypeOption;
        }

        public ExternalTableDistributionOption externalTableDistributionOption() {
            ExternalTableDistributionOption externalTableDistributionOption = base.FragmentFactory.CreateFragment<ExternalTableDistributionOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "DISTRIBUTION");
                externalTableDistributionOption.OptionKind = ExternalTableOptionKind.Distribution;
                TSql80ParserBaseInternal.UpdateTokenInfo(externalTableDistributionOption, token);
            }
            ExternalTableDistributionPolicy value = this.externalTableDistributionPolicy();
            if (base.inputState.guessing == 0) {
                externalTableDistributionOption.Value = value;
            }
            return externalTableDistributionOption;
        }

        public ExternalTableLiteralOrIdentifierOption externalTableNumericLiteralOption() {
            ExternalTableLiteralOrIdentifierOption externalTableLiteralOrIdentifierOption = base.FragmentFactory.CreateFragment<ExternalTableLiteralOrIdentifierOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                externalTableLiteralOrIdentifierOption.OptionKind = ExternalTableOptionHelper.Instance.ParseOption(token);
            }
            this.match(206);
            Literal valueExpression = this.integerOrNumeric();
            if (base.inputState.guessing == 0) {
                if (externalTableLiteralOrIdentifierOption.OptionKind != ExternalTableOptionKind.RejectSampleValue && externalTableLiteralOrIdentifierOption.OptionKind != ExternalTableOptionKind.RejectValue) {
                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                }
                externalTableLiteralOrIdentifierOption.Value = base.IdentifierOrValueExpression(valueExpression);
            }
            return externalTableLiteralOrIdentifierOption;
        }

        public ExternalTableLiteralOrIdentifierOption externalTableLiteralOrIdentifierOption() {
            ExternalTableLiteralOrIdentifierOption externalTableLiteralOrIdentifierOption = base.FragmentFactory.CreateFragment<ExternalTableLiteralOrIdentifierOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                externalTableLiteralOrIdentifierOption.OptionKind = ExternalTableOptionHelper.Instance.ParseOption(token);
                TSql80ParserBaseInternal.UpdateTokenInfo(externalTableLiteralOrIdentifierOption, token);
            }
            this.match(206);
            switch (this.LA(1)) {
                case 232:
                case 233: {
                        Identifier identifier = this.identifier();
                        if (base.inputState.guessing == 0) {
                            if (externalTableLiteralOrIdentifierOption.OptionKind != ExternalTableOptionKind.FileFormat) {
                                throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                            }
                            externalTableLiteralOrIdentifierOption.Value = base.IdentifierOrValueExpression(identifier);
                        }
                        break;
                    }
                case 230:
                case 231: {
                        Literal valueExpression = this.stringLiteral();
                        if (base.inputState.guessing == 0) {
                            if (externalTableLiteralOrIdentifierOption.OptionKind != ExternalTableOptionKind.Location && externalTableLiteralOrIdentifierOption.OptionKind != ExternalTableOptionKind.SchemaName && externalTableLiteralOrIdentifierOption.OptionKind != ExternalTableOptionKind.ObjectName) {
                                throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
                            }
                            externalTableLiteralOrIdentifierOption.Value = base.IdentifierOrValueExpression(valueExpression);
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return externalTableLiteralOrIdentifierOption;
        }

        public ExternalTableDistributionPolicy externalTableDistributionPolicy() {
            if (this.LA(1) == 232 && (this.LA(2) == 192 || this.LA(2) == 198) && base.NextTokenMatches("REPLICATED")) {
                return this.externalTableReplicatedDistributionPolicy();
            }
            if (this.LA(1) == 232 && (this.LA(2) == 192 || this.LA(2) == 198) && base.NextTokenMatches("ROUND_ROBIN")) {
                return this.externalTableRoundRobinDistributionPolicy();
            }
            if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("SHARDED")) {
                return this.externalTableShardedDistributionPolicy();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ExternalTableReplicatedDistributionPolicy externalTableReplicatedDistributionPolicy() {
            ExternalTableReplicatedDistributionPolicy externalTableReplicatedDistributionPolicy = base.FragmentFactory.CreateFragment<ExternalTableReplicatedDistributionPolicy>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "REPLICATED");
                TSql80ParserBaseInternal.UpdateTokenInfo(externalTableReplicatedDistributionPolicy, token);
            }
            return externalTableReplicatedDistributionPolicy;
        }

        public ExternalTableRoundRobinDistributionPolicy externalTableRoundRobinDistributionPolicy() {
            ExternalTableRoundRobinDistributionPolicy externalTableRoundRobinDistributionPolicy = base.FragmentFactory.CreateFragment<ExternalTableRoundRobinDistributionPolicy>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ROUND_ROBIN");
                TSql80ParserBaseInternal.UpdateTokenInfo(externalTableRoundRobinDistributionPolicy, token);
            }
            return externalTableRoundRobinDistributionPolicy;
        }

        public ExternalTableShardedDistributionPolicy externalTableShardedDistributionPolicy() {
            ExternalTableShardedDistributionPolicy externalTableShardedDistributionPolicy = base.FragmentFactory.CreateFragment<ExternalTableShardedDistributionPolicy>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(191);
            Identifier shardingColumn = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SHARDED");
                externalTableShardedDistributionPolicy.ShardingColumn = shardingColumn;
                TSql80ParserBaseInternal.UpdateTokenInfo(externalTableShardedDistributionPolicy, token);
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(externalTableShardedDistributionPolicy, token2);
            }
            return externalTableShardedDistributionPolicy;
        }

        public AlterTableAlterColumnStatement alterTableAlterColumnStatement() {
            AlterTableAlterColumnStatement alterTableAlterColumnStatement = base.FragmentFactory.CreateFragment<AlterTableAlterColumnStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            IToken token6 = null;
            bool flag = false;
            this.match(6);
            this.match(27);
            Identifier columnIdentifier = this.identifier();
            if (base.inputState.guessing == 0) {
                alterTableAlterColumnStatement.ColumnIdentifier = columnIdentifier;
                base.ThrowPartialAstIfPhaseOne(alterTableAlterColumnStatement);
            }
            DataTypeReference dataTypeReference;
            int num;
            switch (this.LA(1)) {
                case 53:
                case 96:
                case 232:
                case 233:
                    dataTypeReference = this.scalarDataType();
                    if (base.inputState.guessing == 0) {
                        alterTableAlterColumnStatement.DataType = dataTypeReference;
                    }
                    this.collationOpt(alterTableAlterColumnStatement);
                    if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("GENERATED")) {
                        this.generatedAlwaysClauseInAlter(alterTableAlterColumnStatement);
                        goto IL_012e;
                    }
                    if (TSql140ParserInternal.tokenSet_171_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                        goto IL_012e;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 4:
                case 54:
                    switch (this.LA(1)) {
                        case 4:
                            this.match(4);
                            if (base.inputState.guessing == 0) {
                                flag = true;
                            }
                            break;
                        case 54:
                            this.match(54);
                            if (base.inputState.guessing == 0) {
                                flag = false;
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    switch (this.LA(1)) {
                        case 136:
                            token = this.LT(1);
                            this.match(136);
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.UpdateTokenInfo(alterTableAlterColumnStatement, token);
                                if (flag) {
                                    alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.AddRowGuidCol;
                                } else {
                                    alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.DropRowGuidCol;
                                }
                            }
                            break;
                        case 99:
                            this.match(99);
                            this.match(67);
                            token2 = this.LT(1);
                            this.match(128);
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.UpdateTokenInfo(alterTableAlterColumnStatement, token2);
                                if (flag) {
                                    alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.AddNotForReplication;
                                } else {
                                    alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.DropNotForReplication;
                                }
                            }
                            break;
                        default:
                            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2)) && base.NextTokenMatches("PERSISTED")) {
                                token3 = this.LT(1);
                                this.match(232);
                                if (base.inputState.guessing == 0) {
                                    TSql80ParserBaseInternal.Match(token3, "PERSISTED");
                                    alterTableAlterColumnStatement.AlterTableAlterColumnOption = (AlterTableAlterColumnOption)(flag ? 5 : 6);
                                    TSql80ParserBaseInternal.UpdateTokenInfo(alterTableAlterColumnStatement, token3);
                                }
                                break;
                            }
                            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2)) && base.NextTokenMatches("SPARSE")) {
                                token4 = this.LT(1);
                                this.match(232);
                                if (base.inputState.guessing == 0) {
                                    TSql80ParserBaseInternal.Match(token4, "SPARSE");
                                    alterTableAlterColumnStatement.AlterTableAlterColumnOption = (AlterTableAlterColumnOption)(flag ? 9 : 10);
                                    TSql80ParserBaseInternal.UpdateTokenInfo(alterTableAlterColumnStatement, token4);
                                }
                                break;
                            }
                            if (this.LA(1) == 232 && this.LA(2) == 171 && base.NextTokenMatches("MASKED") && flag) {
                                if (base.inputState.guessing == 0) {
                                    alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.AddMaskingFunction;
                                }
                                this.maskedClause(alterTableAlterColumnStatement);
                                break;
                            }
                            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2)) && base.NextTokenMatches("MASKED") && !flag) {
                                token5 = this.LT(1);
                                this.match(232);
                                if (base.inputState.guessing == 0) {
                                    TSql80ParserBaseInternal.Match(token5, "MASKED");
                                    alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.DropMaskingFunction;
                                }
                                break;
                            }
                            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_19_.member(this.LA(2)) && base.NextTokenMatches("HIDDEN")) {
                                token6 = this.LT(1);
                                this.match(232);
                                if (base.inputState.guessing == 0) {
                                    TSql80ParserBaseInternal.Match(token6, "HIDDEN");
                                    if (flag) {
                                        alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.AddHidden;
                                    } else {
                                        alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.DropHidden;
                                    }
                                    TSql80ParserBaseInternal.UpdateTokenInfo(alterTableAlterColumnStatement, token6);
                                }
                                break;
                            }
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    break;
                default: {
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    IL_0199:
                    if (this.LA(1) == 232 && this.LA(2) == 171 && base.NextTokenMatches("ENCRYPTED")) {
                        ColumnEncryptionDefinition encryption = this.columnEncryptionClause();
                        if (base.inputState.guessing == 0) {
                            alterTableAlterColumnStatement.Encryption = encryption;
                        }
                        goto IL_021a;
                    }
                    if (TSql140ParserInternal.tokenSet_171_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                        goto IL_021a;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                    IL_02bd:
                    if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_171_.member(this.LA(2)) && base.NextTokenMatches("HIDDEN")) {
                        this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            alterTableAlterColumnStatement.IsHidden = true;
                        }
                        goto IL_034d;
                    }
                    if (TSql140ParserInternal.tokenSet_171_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                        goto IL_034d;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                    IL_012e:
                    if (this.LA(1) == 232 && this.LA(2) == 171 && base.NextTokenMatches("MASKED")) {
                        this.maskedClause(alterTableAlterColumnStatement);
                        goto IL_0199;
                    }
                    if (TSql140ParserInternal.tokenSet_171_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                        goto IL_0199;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                    IL_021a:
                    if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_172_.member(this.LA(2)) && (base.NextTokenMatches("SPARSE") || base.NextTokenMatches("FILESTREAM") || base.NextTokenMatches("COLUMN_SET"))) {
                        ColumnStorageOptions storageOptions = this.columnStorage(IndexAffectingStatement.AlterTableAddElement, dataTypeReference);
                        if (base.inputState.guessing == 0) {
                            alterTableAlterColumnStatement.StorageOptions = storageOptions;
                        }
                        goto IL_02bd;
                    }
                    if (TSql140ParserInternal.tokenSet_171_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                        goto IL_02bd;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                    IL_034d:
                    num = this.LA(1);
                    if (num <= 95) {
                        switch (num) {
                            case 1:
                            case 4:
                            case 6:
                            case 12:
                            case 13:
                            case 15:
                            case 17:
                            case 22:
                            case 23:
                            case 28:
                            case 33:
                            case 35:
                            case 44:
                            case 45:
                            case 46:
                            case 48:
                            case 49:
                            case 54:
                            case 55:
                            case 56:
                            case 60:
                            case 61:
                            case 64:
                            case 74:
                            case 75:
                            case 82:
                            case 86:
                            case 92:
                            case 95:
                                goto end_IL_0000;
                        }
                    } else {
                        switch (num) {
                            case 99:
                            case 100: {
                                    bool flag2 = this.nullNotNull(alterTableAlterColumnStatement);
                                    if (base.inputState.guessing == 0) {
                                        alterTableAlterColumnStatement.AlterTableAlterColumnOption = (AlterTableAlterColumnOption)(flag2 ? 3 : 4);
                                    }
                                    goto end_IL_0000;
                                }
                            case 106:
                            case 119:
                            case 123:
                            case 125:
                            case 126:
                            case 129:
                            case 131:
                            case 132:
                            case 134:
                            case 138:
                            case 140:
                            case 142:
                            case 143:
                            case 144:
                            case 156:
                            case 160:
                            case 161:
                            case 162:
                            case 167:
                            case 170:
                            case 171:
                            case 172:
                            case 176:
                            case 182:
                            case 191:
                            case 204:
                            case 219:
                            case 220:
                            case 232:
                                goto end_IL_0000;
                        }
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                    end_IL_0000:
                    break;
            }
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.match(171);
                this.indexOptionList(IndexAffectingStatement.AlterTableAlterColumn, alterTableAlterColumnStatement.Options, alterTableAlterColumnStatement);
                goto IL_09ec;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_09ec;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_09ec:
            return alterTableAlterColumnStatement;
        }

        public AlterTableAlterIndexStatement alterTableAlterIndexStatement() {
            AlterTableAlterIndexStatement alterTableAlterIndexStatement = base.FragmentFactory.CreateFragment<AlterTableAlterIndexStatement>();
            IToken token = null;
            this.match(6);
            this.match(84);
            Identifier indexIdentifier = this.identifier();
            if (base.inputState.guessing == 0) {
                alterTableAlterIndexStatement.IndexIdentifier = indexIdentifier;
            }
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                alterTableAlterIndexStatement.AlterIndexType = AlterIndexTypeHelper.Instance.ParseOption(token);
            }
            this.match(171);
            this.alterTableAlterIndexOptionList(IndexAffectingStatement.AlterTableAlterIndexRebuild, alterTableAlterIndexStatement.IndexOptions, alterTableAlterIndexStatement);
            return alterTableAlterIndexStatement;
        }

        public AlterTableTriggerModificationStatement alterTableTriggerModificationStatement() {
            AlterTableTriggerModificationStatement alterTableTriggerModificationStatement = base.FragmentFactory.CreateFragment<AlterTableTriggerModificationStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                alterTableTriggerModificationStatement.TriggerEnforcement = TSql80ParserBaseInternal.ParseTriggerEnforcement(token);
            }
            this.match(155);
            switch (this.LA(1)) {
                case 5:
                    token2 = this.LT(1);
                    this.match(5);
                    if (base.inputState.guessing == 0) {
                        alterTableTriggerModificationStatement.All = true;
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterTableTriggerModificationStatement, token2);
                    }
                    break;
                case 232:
                case 233: {
                        Identifier item = this.identifier();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterTableTriggerModificationStatement, alterTableTriggerModificationStatement.TriggerNames, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.identifier();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterTableTriggerModificationStatement, alterTableTriggerModificationStatement.TriggerNames, item);
                            }
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                base.ThrowPartialAstIfPhaseOne(alterTableTriggerModificationStatement);
            }
            return alterTableTriggerModificationStatement;
        }

        public AlterTableDropTableElementStatement alterTableDropTableElementStatement() {
            AlterTableDropTableElementStatement alterTableDropTableElementStatement = base.FragmentFactory.CreateFragment<AlterTableDropTableElementStatement>();
            this.match(54);
            AlterTableDropTableElement item = this.alterTableDropTableElement();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterTableDropTableElementStatement, alterTableDropTableElementStatement.AlterTableDropTableElements, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.alterTableDropTableElement();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterTableDropTableElementStatement, alterTableDropTableElementStatement.AlterTableDropTableElements, item);
                }
            }
            if (base.inputState.guessing == 0) {
                base.ThrowPartialAstIfPhaseOne(alterTableDropTableElementStatement);
            }
            return alterTableDropTableElementStatement;
        }

        public AlterTableSwitchStatement alterTableSwitchStatement() {
            AlterTableSwitchStatement alterTableSwitchStatement = base.FragmentFactory.CreateFragment<AlterTableSwitchStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SWITCH");
            }
            switch (this.LA(1)) {
                case 232: {
                        token2 = this.LT(1);
                        this.match(232);
                        ScalarExpression sourcePartitionNumber = this.expression();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token2, "PARTITION");
                            alterTableSwitchStatement.SourcePartitionNumber = sourcePartitionNumber;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 151:
                    break;
            }
            this.match(151);
            SchemaObjectName targetTable = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                alterTableSwitchStatement.TargetTable = targetTable;
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_42_.member(this.LA(2)) && base.NextTokenMatches("PARTITION")) {
                this.match(232);
                ScalarExpression sourcePartitionNumber = this.expression();
                if (base.inputState.guessing == 0) {
                    alterTableSwitchStatement.TargetPartitionNumber = sourcePartitionNumber;
                }
                goto IL_0161;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0161;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0202:
            return alterTableSwitchStatement;
            IL_0161:
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.match(171);
                this.match(191);
                this.tableSwitchOptionList(alterTableSwitchStatement.Options, alterTableSwitchStatement);
                token3 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(alterTableSwitchStatement, token3);
                }
                goto IL_0202;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_0202;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ConstraintEnforcement constraintEnforcement() {
            ConstraintEnforcement result = ConstraintEnforcement.NotSpecified;
            switch (this.LA(1)) {
                case 21:
                    this.match(21);
                    if (base.inputState.guessing == 0) {
                        result = ConstraintEnforcement.Check;
                    }
                    break;
                case 97:
                    this.match(97);
                    if (base.inputState.guessing == 0) {
                        result = ConstraintEnforcement.NoCheck;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public AlterTableAddTableElementStatement alterTableAddTableElementStatement(ConstraintEnforcement vExistingRowsCheck) {
            AlterTableAddTableElementStatement alterTableAddTableElementStatement = base.FragmentFactory.CreateFragment<AlterTableAddTableElementStatement>();
            alterTableAddTableElementStatement.ExistingRowsCheckEnforcement = vExistingRowsCheck;
            this.match(4);
            TableDefinition definition = this.tableDefinition(IndexAffectingStatement.AlterTableAddElement, alterTableAddTableElementStatement);
            if (base.inputState.guessing == 0) {
                alterTableAddTableElementStatement.Definition = definition;
            }
            return alterTableAddTableElementStatement;
        }

        public AlterTableConstraintModificationStatement alterTableConstraintModificationStatement(ConstraintEnforcement vExistingRowsCheck) {
            AlterTableConstraintModificationStatement alterTableConstraintModificationStatement = base.FragmentFactory.CreateFragment<AlterTableConstraintModificationStatement>();
            IToken token = null;
            alterTableConstraintModificationStatement.ExistingRowsCheckEnforcement = vExistingRowsCheck;
            ConstraintEnforcement constraintEnforcement = this.constraintEnforcement();
            this.match(30);
            if (base.inputState.guessing == 0) {
                alterTableConstraintModificationStatement.ConstraintEnforcement = constraintEnforcement;
            }
            switch (this.LA(1)) {
                case 5:
                    token = this.LT(1);
                    this.match(5);
                    if (base.inputState.guessing == 0) {
                        alterTableConstraintModificationStatement.All = true;
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterTableConstraintModificationStatement, token);
                    }
                    break;
                case 232:
                case 233: {
                        Identifier item = this.identifier();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterTableConstraintModificationStatement, alterTableConstraintModificationStatement.ConstraintNames, item);
                        }
                        while (true) {
                            if (this.LA(1) != 198) {
                                break;
                            }
                            this.match(198);
                            item = this.identifier();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterTableConstraintModificationStatement, alterTableConstraintModificationStatement.ConstraintNames, item);
                            }
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                base.ThrowPartialAstIfPhaseOne(alterTableConstraintModificationStatement);
            }
            return alterTableConstraintModificationStatement;
        }

        public AlterTableRebuildStatement alterTableRebuildStatement() {
            AlterTableRebuildStatement alterTableRebuildStatement = base.FragmentFactory.CreateFragment<AlterTableRebuildStatement>();
            IToken token = null;
            PartitionSpecifier partitionSpecifier = null;
            IndexAffectingStatement statementType = IndexAffectingStatement.AlterTableRebuildAllPartitions;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "REBUILD");
                TSql80ParserBaseInternal.UpdateTokenInfo(alterTableRebuildStatement, token);
            }
            if (this.LA(1) == 232 && this.LA(2) == 206) {
                partitionSpecifier = this.partitionSpecifier();
                if (base.inputState.guessing == 0) {
                    alterTableRebuildStatement.Partition = partitionSpecifier;
                    if (!partitionSpecifier.All) {
                        statementType = IndexAffectingStatement.AlterTableRebuildOnePartition;
                    }
                }
                goto IL_00c0;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_00c0;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_014e:
            return alterTableRebuildStatement;
            IL_00c0:
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.match(171);
                this.indexOptionList(statementType, alterTableRebuildStatement.IndexOptions, alterTableRebuildStatement);
                if (base.inputState.guessing == 0) {
                    TSql100ParserBaseInternal.CheckPartitionAllSpecifiedForIndexRebuild(alterTableRebuildStatement.Partition, alterTableRebuildStatement.IndexOptions);
                }
                goto IL_014e;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_014e;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public AlterTableAlterPartitionStatement alterTableAlterPartitionStatement() {
            AlterTableAlterPartitionStatement alterTableAlterPartitionStatement = base.FragmentFactory.CreateFragment<AlterTableAlterPartitionStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            switch (this.LA(1)) {
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token, "SPLIT");
                        alterTableAlterPartitionStatement.IsSplit = true;
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterTableAlterPartitionStatement, token);
                    }
                    break;
                case 182:
                    token2 = this.LT(1);
                    this.match(182);
                    if (base.inputState.guessing == 0) {
                        alterTableAlterPartitionStatement.IsSplit = false;
                        TSql80ParserBaseInternal.UpdateTokenInfo(alterTableAlterPartitionStatement, token2);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            token3 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token3, "RANGE");
                TSql80ParserBaseInternal.UpdateTokenInfo(alterTableAlterPartitionStatement, token3);
            }
            this.match(191);
            ScalarExpression boundaryValue = this.expression();
            token4 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                alterTableAlterPartitionStatement.BoundaryValue = boundaryValue;
                TSql80ParserBaseInternal.UpdateTokenInfo(alterTableAlterPartitionStatement, token4);
            }
            return alterTableAlterPartitionStatement;
        }

        public AlterTableChangeTrackingModificationStatement alterTableChangeTrackingModificationStatement() {
            AlterTableChangeTrackingModificationStatement alterTableChangeTrackingModificationStatement = base.FragmentFactory.CreateFragment<AlterTableChangeTrackingModificationStatement>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "CHANGE_TRACKING");
                alterTableChangeTrackingModificationStatement.IsEnable = TSql90ParserBaseInternal.EnableDisableMatcher(token, true, false);
                TSql80ParserBaseInternal.UpdateTokenInfo(alterTableChangeTrackingModificationStatement, token2);
            }
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.match(171);
                this.match(191);
                token3 = this.LT(1);
                this.match(232);
                this.match(206);
                OptionState trackColumnsUpdated = this.optionOnOff(alterTableChangeTrackingModificationStatement);
                token4 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token3, "TRACK_COLUMNS_UPDATED");
                    if (!alterTableChangeTrackingModificationStatement.IsEnable) {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                    }
                    alterTableChangeTrackingModificationStatement.TrackColumnsUpdated = trackColumnsUpdated;
                    TSql80ParserBaseInternal.UpdateTokenInfo(alterTableChangeTrackingModificationStatement, token4);
                }
                goto IL_014c;
            }
            if (TSql140ParserInternal.tokenSet_19_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                goto IL_014c;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_014c:
            return alterTableChangeTrackingModificationStatement;
        }

        public AlterTableFileTableNamespaceStatement alterTableFileTableNamespaceStatement() {
            AlterTableFileTableNamespaceStatement alterTableFileTableNamespaceStatement = base.FragmentFactory.CreateFragment<AlterTableFileTableNamespaceStatement>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "FILETABLE_NAMESPACE");
                alterTableFileTableNamespaceStatement.IsEnable = TSql90ParserBaseInternal.EnableDisableMatcher(token, true, false);
                TSql80ParserBaseInternal.UpdateTokenInfo(alterTableFileTableNamespaceStatement, token2);
            }
            return alterTableFileTableNamespaceStatement;
        }

        public AlterTableSetStatement alterTableSetStatement() {
            AlterTableSetStatement alterTableSetStatement = base.FragmentFactory.CreateFragment<AlterTableSetStatement>();
            IToken token = null;
            this.match(142);
            this.match(191);
            TableOption item = this.tableOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterTableSetStatement, alterTableSetStatement.Options, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.tableOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(alterTableSetStatement, alterTableSetStatement.Options, item);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(alterTableSetStatement, token);
            }
            return alterTableSetStatement;
        }

        public TableOption tableOption() {
            TableOption tableOption = null;
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LOCK_ESCALATION")) {
                return this.lockEscalationTableOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("FILESTREAM_ON")) {
                return this.fileStreamOnTableOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("FILETABLE_DIRECTORY")) {
                return this.fileTableDirectoryTableOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SYSTEM_VERSIONING")) {
                return this.systemVersioningTableOnOffOption();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("REMOTE_DATA_ARCHIVE")) {
                return this.remoteDataArchiveAlterTableOption();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public LockEscalationTableOption lockEscalationTableOption() {
            LockEscalationTableOption lockEscalationTableOption = base.FragmentFactory.CreateFragment<LockEscalationTableOption>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "LOCK_ESCALATION");
                lockEscalationTableOption.OptionKind = TableOptionKind.LockEscalation;
            }
            switch (this.LA(1)) {
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        lockEscalationTableOption.Value = LockEscalationMethodHelper.Instance.ParseOption(token2);
                        TSql80ParserBaseInternal.UpdateTokenInfo(lockEscalationTableOption, token2);
                    }
                    break;
                case 148:
                    token3 = this.LT(1);
                    this.match(148);
                    if (base.inputState.guessing == 0) {
                        lockEscalationTableOption.Value = LockEscalationMethod.Table;
                        TSql80ParserBaseInternal.UpdateTokenInfo(lockEscalationTableOption, token3);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return lockEscalationTableOption;
        }

        public FileStreamOnTableOption fileStreamOnTableOption() {
            FileStreamOnTableOption fileStreamOnTableOption = base.FragmentFactory.CreateFragment<FileStreamOnTableOption>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            IdentifierOrValueExpression value = this.stringOrIdentifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FILESTREAM_ON");
                fileStreamOnTableOption.OptionKind = TableOptionKind.FileStreamOn;
                fileStreamOnTableOption.Value = value;
            }
            return fileStreamOnTableOption;
        }

        public RemoteDataArchiveAlterTableOption remoteDataArchiveAlterTableOption() {
            RemoteDataArchiveAlterTableOption remoteDataArchiveAlterTableOption = base.FragmentFactory.CreateFragment<RemoteDataArchiveAlterTableOption>();
            IToken token = null;
            IToken token2 = null;
            bool isFilterPredicateSpecified = false;
            bool isMigrationStateSpecified = false;
            FunctionCall filterPredicate = null;
            MigrationState migrationState = MigrationState.Paused;
            RdaTableOption rdaTableOption = RdaTableOption.Disable;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            rdaTableOption = this.remoteDtatArchiveTableOnOffOption(remoteDataArchiveAlterTableOption);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "REMOTE_DATA_ARCHIVE");
                remoteDataArchiveAlterTableOption.OptionKind = TableOptionKind.RemoteDataArchive;
                remoteDataArchiveAlterTableOption.RdaTableOption = rdaTableOption;
            }
            this.match(191);
            this.remoteDataArchiveTableSettings(remoteDataArchiveAlterTableOption, ref migrationState, ref isMigrationStateSpecified, ref isFilterPredicateSpecified, ref filterPredicate);
            if (base.inputState.guessing == 0) {
                remoteDataArchiveAlterTableOption.IsMigrationStateSpecified = isMigrationStateSpecified;
                remoteDataArchiveAlterTableOption.MigrationState = migrationState;
                remoteDataArchiveAlterTableOption.IsFilterPredicateSpecified = isFilterPredicateSpecified;
                remoteDataArchiveAlterTableOption.FilterPredicate = filterPredicate;
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(remoteDataArchiveAlterTableOption, token2);
            }
            return remoteDataArchiveAlterTableOption;
        }

        public RdaTableOption remoteDtatArchiveTableOnOffOption(TSqlFragment vParent) {
            RdaTableOption result = RdaTableOption.Disable;
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            switch (this.LA(1)) {
                case 103:
                    token = this.LT(1);
                    this.match(103);
                    if (base.inputState.guessing == 0) {
                        result = RdaTableOption.Disable;
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                    }
                    break;
                case 105:
                    token2 = this.LT(1);
                    this.match(105);
                    if (base.inputState.guessing == 0) {
                        result = RdaTableOption.Enable;
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                    }
                    break;
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token3, "OFF_WITHOUT_DATA_RECOVERY");
                        result = RdaTableOption.OffWithoutDataRecovery;
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token3);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public void generatedAlwaysClauseInAlter(AlterTableAlterColumnStatement vResult) {
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "GENERATED");
            }
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "ALWAYS");
            }
            this.match(9);
            token3 = this.LT(1);
            this.match(232);
            if (this.LA(1) == 232 && base.NextTokenMatches("START")) {
                token4 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    if (TSql80ParserBaseInternal.TryMatch(token3, "SUSER_SID")) {
                        vResult.GeneratedAlways = GeneratedAlwaysType.UserIdStart;
                    } else if (TSql80ParserBaseInternal.TryMatch(token3, "SUSER_SNAME")) {
                        vResult.GeneratedAlways = GeneratedAlwaysType.UserNameStart;
                    } else {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token3);
                    }
                    TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token4);
                }
                return;
            }
            if (this.LA(1) == 56 && base.NextTokenMatches("END")) {
                token5 = this.LT(1);
                this.match(56);
                if (base.inputState.guessing == 0) {
                    if (TSql80ParserBaseInternal.TryMatch(token3, "SUSER_SID")) {
                        vResult.GeneratedAlways = GeneratedAlwaysType.UserIdEnd;
                    } else if (TSql80ParserBaseInternal.TryMatch(token3, "SUSER_SNAME")) {
                        vResult.GeneratedAlways = GeneratedAlwaysType.UserNameEnd;
                    } else {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token3);
                    }
                    TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token5);
                }
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void maskedClause(IDataMaskingSetter vResult) {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MASKED");
            }
            this.match(171);
            this.match(191);
            this.match(73);
            this.match(206);
            StringLiteral maskingFunction = this.stringLiteral();
            this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                vResult.IsMasked = true;
                vResult.MaskingFunction = maskingFunction;
            }
        }

        public ColumnEncryptionDefinition columnEncryptionClause() {
            ColumnEncryptionDefinition columnEncryptionDefinition = base.FragmentFactory.CreateFragment<ColumnEncryptionDefinition>();
            IToken token = null;
            int num = 0;
            token = this.LT(1);
            this.match(232);
            this.LT(1);
            this.match(171);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ENCRYPTED");
            }
            this.LT(1);
            this.match(191);
            ColumnEncryptionDefinitionParameter columnEncryptionDefinitionParameter = this.columnEncryptionDefinitionParameter();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)columnEncryptionDefinitionParameter.ParameterKind, columnEncryptionDefinitionParameter);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(columnEncryptionDefinition, columnEncryptionDefinition.Parameters, columnEncryptionDefinitionParameter);
            }
            this.match(198);
            columnEncryptionDefinitionParameter = this.columnEncryptionDefinitionParameter();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)columnEncryptionDefinitionParameter.ParameterKind, columnEncryptionDefinitionParameter);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(columnEncryptionDefinition, columnEncryptionDefinition.Parameters, columnEncryptionDefinitionParameter);
            }
            this.match(198);
            columnEncryptionDefinitionParameter = this.columnEncryptionDefinitionParameter();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)columnEncryptionDefinitionParameter.ParameterKind, columnEncryptionDefinitionParameter);
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(columnEncryptionDefinition, columnEncryptionDefinition.Parameters, columnEncryptionDefinitionParameter);
            }
            this.LT(1);
            this.match(192);
            return columnEncryptionDefinition;
        }

        public ColumnStorageOptions columnStorage(IndexAffectingStatement statementType, DataTypeReference columnType) {
            ColumnStorageOptions columnStorageOptions = base.FragmentFactory.CreateFragment<ColumnStorageOptions>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            bool flag = false;
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_171_.member(this.LA(2)) && (base.NextTokenMatches("SPARSE") || base.NextTokenMatches("FILESTREAM"))) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(232);
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    if (TSql80ParserBaseInternal.TryMatch(token, "SPARSE")) {
                        TSql100ParserBaseInternal.SetSparseStorageOption(columnStorageOptions, SparseColumnOption.Sparse, token, statementType);
                        TSql80ParserBaseInternal.Match(token2, "FILESTREAM");
                        TSql100ParserBaseInternal.SetFileStreamStorageOption(columnStorageOptions, token2, columnType, statementType);
                    } else {
                        TSql80ParserBaseInternal.Match(token, "FILESTREAM");
                        TSql100ParserBaseInternal.SetFileStreamStorageOption(columnStorageOptions, token, columnType, statementType);
                        TSql80ParserBaseInternal.Match(token2, "SPARSE");
                        TSql100ParserBaseInternal.SetSparseStorageOption(columnStorageOptions, SparseColumnOption.Sparse, token2, statementType);
                    }
                    TSql80ParserBaseInternal.UpdateTokenInfo(columnStorageOptions, token2);
                }
                goto IL_0238;
            }
            if (this.LA(1) == 67) {
                this.match(67);
                token3 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token, "COLUMN_SET");
                    TSql80ParserBaseInternal.Match(token3, "ALL_SPARSE_COLUMNS");
                    XmlDataTypeReference xmlDataTypeReference = columnType as XmlDataTypeReference;
                    if (xmlDataTypeReference != null && xmlDataTypeReference.XmlDataTypeOption == XmlDataTypeOption.None && xmlDataTypeReference.XmlSchemaCollection == null) {
                        TSql100ParserBaseInternal.SetSparseStorageOption(columnStorageOptions, SparseColumnOption.ColumnSetForAllSparseColumns, token, statementType);
                    } else {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                    }
                    TSql80ParserBaseInternal.UpdateTokenInfo(columnStorageOptions, token3);
                }
                goto IL_0238;
            }
            if (TSql140ParserInternal.tokenSet_171_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                if (base.inputState.guessing == 0) {
                    if (TSql80ParserBaseInternal.TryMatch(token, "SPARSE")) {
                        TSql100ParserBaseInternal.SetSparseStorageOption(columnStorageOptions, SparseColumnOption.Sparse, token, statementType);
                    } else {
                        TSql80ParserBaseInternal.Match(token, "FILESTREAM");
                        TSql100ParserBaseInternal.SetFileStreamStorageOption(columnStorageOptions, token, columnType, statementType);
                    }
                    TSql80ParserBaseInternal.UpdateTokenInfo(columnStorageOptions, token);
                }
                goto IL_0238;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0238:
            return columnStorageOptions;
        }

        public AlterTableDropTableElement alterTableDropTableElement() {
            AlterTableDropTableElement alterTableDropTableElement = base.FragmentFactory.CreateFragment<AlterTableDropTableElement>();
            IToken token = null;
            IToken token2 = null;
            switch (this.LA(1)) {
                case 27: {
                        this.match(27);
                        if (base.inputState.guessing == 0) {
                            alterTableDropTableElement.TableElementType = TableElementType.Column;
                        }
                        switch (this.LA(1)) {
                            case 82:
                                this.match(82);
                                this.match(62);
                                if (base.inputState.guessing == 0) {
                                    alterTableDropTableElement.IsIfExists = true;
                                }
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 232:
                            case 233:
                                break;
                        }
                        Identifier name = this.identifier();
                        if (base.inputState.guessing == 0) {
                            alterTableDropTableElement.Name = name;
                        }
                        break;
                    }
                case 84: {
                        this.match(84);
                        if (base.inputState.guessing == 0) {
                            alterTableDropTableElement.TableElementType = TableElementType.Index;
                        }
                        Identifier name = this.identifier();
                        if (base.inputState.guessing == 0) {
                            alterTableDropTableElement.Name = name;
                        }
                        break;
                    }
                default:
                    if (this.LA(1) == 232 && this.LA(2) == 67) {
                        token = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token, "PERIOD");
                        }
                        this.match(67);
                        token2 = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token2, "SYSTEM_TIME");
                        }
                        if (base.inputState.guessing == 0) {
                            alterTableDropTableElement.TableElementType = TableElementType.Period;
                        }
                        break;
                    }
                    if ((this.LA(1) == 30 || this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_173_.member(this.LA(2))) {
                        switch (this.LA(1)) {
                            case 30:
                                this.match(30);
                                if (base.inputState.guessing == 0) {
                                    alterTableDropTableElement.TableElementType = TableElementType.Constraint;
                                }
                                switch (this.LA(1)) {
                                    case 82:
                                        this.match(82);
                                        this.match(62);
                                        if (base.inputState.guessing == 0) {
                                            alterTableDropTableElement.IsIfExists = true;
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this.LT(1), this.getFilename());
                                    case 232:
                                    case 233:
                                        break;
                                }
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 232:
                            case 233:
                                break;
                        }
                        Identifier name = this.identifier();
                        if (base.inputState.guessing == 0) {
                            alterTableDropTableElement.Name = name;
                        }
                        if (this.LA(1) == 171 && this.LA(2) == 191) {
                            this.alterTableDropTableElementWithOptions(alterTableDropTableElement);
                            break;
                        }
                        if (TSql140ParserInternal.tokenSet_56_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_12_.member(this.LA(2))) {
                            break;
                        }
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return alterTableDropTableElement;
        }

        public void alterTableDropTableElementWithOptions(AlterTableDropTableElement vParent) {
            IToken token = null;
            this.match(171);
            this.match(191);
            DropClusteredConstraintOption item = this.dropClusteredConstraintOption();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.DropClusteredConstraintOptions, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.dropClusteredConstraintOption();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.DropClusteredConstraintOptions, item);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public DropClusteredConstraintOption dropClusteredConstraintOption() {
            DropClusteredConstraintOption dropClusteredConstraintOption = null;
            DropClusteredConstraintStateOption dropClusteredConstraintStateOption = null;
            DropClusteredConstraintWaitAtLowPriorityLockOption dropClusteredConstraintWaitAtLowPriorityLockOption = base.FragmentFactory.CreateFragment<DropClusteredConstraintWaitAtLowPriorityLockOption>();
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXDOP")) {
                this.match(232);
                this.match(206);
                Literal optionValue = this.integer();
                if (base.inputState.guessing == 0) {
                    DropClusteredConstraintValueOption dropClusteredConstraintValueOption = base.FragmentFactory.CreateFragment<DropClusteredConstraintValueOption>();
                    dropClusteredConstraintValueOption.OptionValue = optionValue;
                    dropClusteredConstraintOption = dropClusteredConstraintValueOption;
                    dropClusteredConstraintOption.OptionKind = DropClusteredConstraintOptionKind.MaxDop;
                }
                goto IL_01d8;
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ONLINE")) {
                this.match(232);
                this.match(206);
                if (base.inputState.guessing == 0) {
                    dropClusteredConstraintStateOption = base.FragmentFactory.CreateFragment<DropClusteredConstraintStateOption>();
                    dropClusteredConstraintOption = dropClusteredConstraintStateOption;
                    dropClusteredConstraintOption.OptionKind = DropClusteredConstraintOptionKind.Online;
                }
                OptionState optionState = this.optionOnOff(dropClusteredConstraintOption);
                if (base.inputState.guessing == 0) {
                    dropClusteredConstraintStateOption.OptionState = optionState;
                }
                goto IL_01d8;
            }
            if (this.LA(1) == 232 && this.LA(2) == 151 && base.NextTokenMatches("MOVE")) {
                this.match(232);
                this.match(151);
                FileGroupOrPartitionScheme optionValue2 = this.filegroupOrPartitionScheme();
                if (base.inputState.guessing == 0) {
                    DropClusteredConstraintMoveOption dropClusteredConstraintMoveOption = base.FragmentFactory.CreateFragment<DropClusteredConstraintMoveOption>();
                    dropClusteredConstraintMoveOption.OptionValue = optionValue2;
                    dropClusteredConstraintOption = dropClusteredConstraintMoveOption;
                    dropClusteredConstraintOption.OptionKind = DropClusteredConstraintOptionKind.MoveTo;
                }
                goto IL_01d8;
            }
            if (this.LA(1) == 232 && this.LA(2) == 191) {
                this.lowPriorityLockWaitOption(dropClusteredConstraintWaitAtLowPriorityLockOption.Options, dropClusteredConstraintWaitAtLowPriorityLockOption);
                if (base.inputState.guessing == 0) {
                    dropClusteredConstraintOption = dropClusteredConstraintWaitAtLowPriorityLockOption;
                }
                goto IL_01d8;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_01d8:
            return dropClusteredConstraintOption;
        }

        public void tableSwitchOptionList(IList<TableSwitchOption> optionList, TSqlFragment vParent) {
            LowPriorityLockWaitTableSwitchOption lowPriorityLockWaitTableSwitchOption = base.FragmentFactory.CreateFragment<LowPriorityLockWaitTableSwitchOption>();
            this.lowPriorityLockWaitOption(lowPriorityLockWaitTableSwitchOption.Options, lowPriorityLockWaitTableSwitchOption);
            if (base.inputState.guessing == 0) {
                lowPriorityLockWaitTableSwitchOption.OptionKind = TableSwitchOptionKind.LowPriorityLockWait;
                optionList.Add(lowPriorityLockWaitTableSwitchOption);
            }
        }

        public IndexType inlineIndexType() {
            IndexType indexType = base.FragmentFactory.CreateFragment<IndexType>();
            IToken token = null;
            bool? nullable = null;
            bool flag = false;
            bool flag2 = false;
            IndexTypeKind? indexTypeKind = null;
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 24:
                        this.match(24);
                        if (base.inputState.guessing == 0) {
                            nullable = true;
                        }
                        goto IL_0319;
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0319;
                }
            } else {
                switch (num) {
                    case 98:
                        this.match(98);
                        if (base.inputState.guessing == 0) {
                            nullable = false;
                        }
                        goto IL_0319;
                    case 105:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 198:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0319;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0319:
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_174_.member(this.LA(2))) {
                token = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(indexType, token);
                    if (TSql80ParserBaseInternal.TryMatch(token, "HASH")) {
                        flag = true;
                    } else {
                        TSql80ParserBaseInternal.Match(token, "COLUMNSTORE");
                        flag2 = true;
                    }
                }
                goto IL_03bb;
            }
            if (TSql140ParserInternal.tokenSet_174_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_168_.member(this.LA(2))) {
                goto IL_03bb;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_03bb:
            if (base.inputState.guessing == 0) {
                if (flag) {
                    if (nullable.HasValue && nullable.Value) {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                    }
                    indexTypeKind = IndexTypeKind.NonClusteredHash;
                } else if (nullable.HasValue) {
                    indexTypeKind = ((!nullable.Value) ? new IndexTypeKind?((IndexTypeKind)((!flag2) ? 1 : 4)) : new IndexTypeKind?((IndexTypeKind)(flag2 ? 3 : 0)));
                } else if (flag2) {
                    indexTypeKind = IndexTypeKind.NonClusteredColumnStore;
                }
                indexType.IndexTypeKind = indexTypeKind;
            }
            return indexType;
        }

        public IndexDefinition inlineIndexTableDefinition() {
            IndexDefinition indexDefinition = base.FragmentFactory.CreateFragment<IndexDefinition>();
            IToken token = null;
            IToken token2 = null;
            IndexType indexType = null;
            bool flag = false;
            token = this.LT(1);
            this.match(84);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(indexDefinition, token);
            }
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                indexDefinition.Name = name;
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 24:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_032e;
                }
            } else {
                switch (num) {
                    case 159:
                        this.match(159);
                        if (base.inputState.guessing == 0) {
                            indexDefinition.Unique = true;
                        }
                        goto IL_032e;
                    case 98:
                    case 105:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 198:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_032e;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0840:
            int num2 = this.LA(1);
            if (num2 <= 95) {
                switch (num2) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0b10;
                }
            } else {
                switch (num2) {
                    case 105: {
                            this.match(105);
                            FileGroupOrPartitionScheme onFileGroupOrPartitionScheme = this.filegroupOrPartitionScheme();
                            if (base.inputState.guessing == 0) {
                                indexDefinition.OnFileGroupOrPartitionScheme = onFileGroupOrPartitionScheme;
                            }
                            goto IL_0b10;
                        }
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 198:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0b10;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_04bc:
            int num3 = this.LA(1);
            if (num3 <= 92) {
                switch (num3) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_07cf;
                }
            } else {
                switch (num3) {
                    case 169: {
                            BooleanExpression filterPredicate = this.filterClause((byte)((indexType != null) ? (indexType.IndexTypeKind.HasValue ? ((indexType.IndexTypeKind.Value != IndexTypeKind.NonClustered && indexType.IndexTypeKind.Value != IndexTypeKind.NonClusteredColumnStore) ? 1 : 0) : 0) : 0) != 0);
                            if (base.inputState.guessing == 0) {
                                indexDefinition.FilterPredicate = filterPredicate;
                            }
                            goto IL_07cf;
                        }
                    case 95:
                    case 105:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 198:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_07cf;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_043f:
            if (base.inputState.guessing == 0 && indexType != null && indexType.IndexTypeKind.HasValue) {
                if (indexType.IndexTypeKind != IndexTypeKind.ClusteredColumnStore && !flag) {
                    goto IL_04ab;
                }
                if (indexType.IndexTypeKind == IndexTypeKind.ClusteredColumnStore && flag) {
                    goto IL_04ab;
                }
            }
            goto IL_04bc;
            IL_032e:
            indexType = this.inlineIndexType();
            if (base.inputState.guessing == 0) {
                indexDefinition.IndexType = indexType;
            }
            if (this.LA(1) == 191 && TSql140ParserInternal.tokenSet_48_.member(this.LA(2))) {
                this.match(191);
                ColumnWithSortOrder item = this.indexKeyColumn();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(indexDefinition, indexDefinition.Columns, item);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    item = this.indexKeyColumn();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(indexDefinition, indexDefinition.Columns, item);
                    }
                }
                token2 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(indexDefinition, token2);
                    flag = true;
                }
                goto IL_043f;
            }
            if (TSql140ParserInternal.tokenSet_174_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_168_.member(this.LA(2))) {
                goto IL_043f;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_04ab:
            TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(TSql80ParserBaseInternal.GetFirstToken(indexType) ?? token);
            goto IL_04bc;
            IL_07cf:
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.match(171);
                this.indexOptionList(IndexAffectingStatement.CreateTableInlineIndex, indexDefinition.IndexOptions, indexDefinition);
                goto IL_0840;
            }
            if (TSql140ParserInternal.tokenSet_175_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_168_.member(this.LA(2))) {
                goto IL_0840;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0b10:
            this.fileStreamOnOpt(indexDefinition);
            return indexDefinition;
        }

        public SystemTimePeriodDefinition tablePeriodDefinition() {
            SystemTimePeriodDefinition systemTimePeriodDefinition = base.FragmentFactory.CreateFragment<SystemTimePeriodDefinition>();
            Identifier id = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(id, "PERIOD");
            }
            this.match(67);
            Identifier id2 = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(id2, "SYSTEM_TIME");
            }
            this.match(191);
            Identifier startTimeColumn = this.identifier();
            this.match(198);
            Identifier endTimeColumn = this.identifier();
            this.match(192);
            if (base.inputState.guessing == 0) {
                systemTimePeriodDefinition.StartTimeColumn = startTimeColumn;
                systemTimePeriodDefinition.EndTimeColumn = endTimeColumn;
            }
            return systemTimePeriodDefinition;
        }

        public IndexDefinition inlineIndexColumnDefinition() {
            IndexDefinition indexDefinition = base.FragmentFactory.CreateFragment<IndexDefinition>();
            IToken token = null;
            IToken token2 = null;
            IndexType indexType = null;
            token = this.LT(1);
            this.match(84);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(indexDefinition, token);
            }
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                indexDefinition.Name = name;
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 24:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_032b;
                }
            } else {
                switch (num) {
                    case 159:
                        this.match(159);
                        if (base.inputState.guessing == 0) {
                            indexDefinition.Unique = true;
                        }
                        goto IL_032b;
                    case 98:
                    case 105:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 198:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_032b;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_032b:
            indexType = this.inlineIndexType();
            if (base.inputState.guessing == 0) {
                if (indexType != null && indexType.IndexTypeKind.HasValue) {
                    switch (indexType.IndexTypeKind) {
                        case IndexTypeKind.ClusteredColumnStore:
                        case IndexTypeKind.NonClusteredColumnStore:
                            TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(indexType);
                            break;
                    }
                }
                indexDefinition.IndexType = indexType;
            }
            bool flag = false;
            if (this.LA(1) == 191 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233)) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(191);
                    this.columnWithSortOrder();
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                this.match(191);
                ColumnWithSortOrder item = this.columnWithSortOrder();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(indexDefinition, indexDefinition.Columns, item);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    item = this.columnWithSortOrder();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(indexDefinition, indexDefinition.Columns, item);
                    }
                }
                token2 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(indexDefinition, token2);
                }
                goto IL_04f1;
            }
            if (TSql140ParserInternal.tokenSet_174_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_168_.member(this.LA(2))) {
                goto IL_04f1;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_07ee:
            if (this.LA(1) == 171 && this.LA(2) == 191) {
                this.match(171);
                this.indexOptionList(IndexAffectingStatement.CreateTableInlineIndex, indexDefinition.IndexOptions, indexDefinition);
                goto IL_085f;
            }
            if (TSql140ParserInternal.tokenSet_175_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_168_.member(this.LA(2))) {
                goto IL_085f;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_085f:
            int num2 = this.LA(1);
            if (num2 <= 95) {
                switch (num2) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0b2f;
                }
            } else {
                switch (num2) {
                    case 105: {
                            this.match(105);
                            FileGroupOrPartitionScheme onFileGroupOrPartitionScheme = this.filegroupOrPartitionScheme();
                            if (base.inputState.guessing == 0) {
                                indexDefinition.OnFileGroupOrPartitionScheme = onFileGroupOrPartitionScheme;
                            }
                            goto IL_0b2f;
                        }
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 198:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0b2f;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_04f1:
            int num3 = this.LA(1);
            if (num3 <= 92) {
                switch (num3) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                        goto IL_07ee;
                }
            } else {
                switch (num3) {
                    case 169: {
                            BooleanExpression filterPredicate = this.filterClause((byte)((indexType != null) ? (indexType.IndexTypeKind.HasValue ? ((indexType.IndexTypeKind.Value != IndexTypeKind.NonClustered) ? 1 : 0) : 0) : 0) != 0);
                            if (base.inputState.guessing == 0) {
                                indexDefinition.FilterPredicate = filterPredicate;
                            }
                            goto IL_07ee;
                        }
                    case 95:
                    case 105:
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 198:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_07ee;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0b2f:
            this.fileStreamOnOpt(indexDefinition);
            return indexDefinition;
        }

        public ColumnDefinition columnDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement) {
            ColumnDefinition columnDefinition = base.FragmentFactory.CreateFragment<ColumnDefinition>();
            Identifier columnIdentifier = this.identifier();
            if (base.inputState.guessing == 0) {
                columnDefinition.ColumnIdentifier = columnIdentifier;
                if (base.PhaseOne && vStatement != null) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vStatement, vStatement.Definition.ColumnDefinitions, columnDefinition);
                    base.ThrowPartialAstIfPhaseOne(vStatement);
                }
            }
            int num = this.LA(1);
            if (num <= 100) {
                switch (num) {
                    case 9:
                        break;
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 21:
                    case 22:
                    case 23:
                    case 28:
                    case 30:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 68:
                    case 74:
                    case 75:
                    case 79:
                    case 82:
                    case 84:
                    case 86:
                    case 92:
                    case 95:
                    case 96:
                    case 99:
                    case 100:
                        goto IL_034c;
                    default:
                        goto IL_061e;
                }
                this.computedColumnBody(columnDefinition);
                this.computedColumnConstraintListOpt(statementType, columnDefinition);
                goto IL_0631;
            }
            switch (num) {
                case 106:
                case 118:
                case 119:
                case 123:
                case 125:
                case 126:
                case 127:
                case 129:
                case 131:
                case 132:
                case 134:
                case 136:
                case 138:
                case 140:
                case 142:
                case 143:
                case 144:
                case 156:
                case 159:
                case 160:
                case 161:
                case 162:
                case 167:
                case 170:
                case 171:
                case 172:
                case 176:
                case 182:
                case 191:
                case 192:
                case 198:
                case 204:
                case 219:
                case 220:
                case 232:
                case 233:
                    break;
                default:
                    goto IL_061e;
            }
            goto IL_034c;
            IL_034c:
            this.regularColumnBody(statementType, columnDefinition);
            this.columnConstraintListOpt(statementType, columnDefinition);
            int num2 = this.LA(1);
            if (num2 <= 95) {
                switch (num2) {
                    case 84: {
                            IndexDefinition index = this.inlineIndexColumnDefinition();
                            if (base.inputState.guessing == 0) {
                                columnDefinition.Index = index;
                            }
                            goto IL_0631;
                        }
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0631;
                }
            } else {
                switch (num2) {
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 198:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0631;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0631:
            return columnDefinition;
            IL_061e:
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ConstraintDefinition tableConstraint(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement) {
            ConstraintDefinition constraintDefinition = null;
            IToken token = null;
            Identifier identifier = null;
            try {
                switch (this.LA(1)) {
                    case 30:
                        token = this.LT(1);
                        this.match(30);
                        identifier = this.identifier();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    case 21:
                    case 47:
                    case 68:
                    case 118:
                    case 159:
                        break;
                }
                switch (this.LA(1)) {
                    case 118:
                    case 159:
                        constraintDefinition = this.uniqueTableConstraint(statementType);
                        break;
                    case 47:
                        constraintDefinition = this.defaultTableConstraint(statementType);
                        break;
                    case 68:
                        constraintDefinition = this.foreignKeyTableConstraint(statementType);
                        break;
                    case 21:
                        constraintDefinition = this.checkConstraint(statementType);
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                if (base.inputState.guessing == 0) {
                    if (identifier != null) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(constraintDefinition, token);
                        constraintDefinition.ConstraintIdentifier = identifier;
                        return constraintDefinition;
                    }
                    return constraintDefinition;
                }
                return constraintDefinition;
            } catch (PhaseOneConstraintException ex) {
                if (base.inputState.guessing == 0) {
                    if (identifier != null) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(ex.Constraint, token);
                        ex.Constraint.ConstraintIdentifier = identifier;
                    }
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vStatement, vStatement.Definition.TableConstraints, ex.Constraint);
                    base.ThrowPartialAstIfPhaseOne(vStatement);
                    return constraintDefinition;
                }
                throw;
            }
        }

        public void computedColumnBody(ColumnDefinition vParent) {
            IToken token = null;
            this.match(9);
            ScalarExpression computedColumnExpression = this.expressionWithFlags(ExpressionFlags.ScalarSubqueriesDisallowed);
            if (base.inputState.guessing == 0) {
                vParent.ComputedColumnExpression = computedColumnExpression;
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_176_.member(this.LA(2)) && base.NextTokenMatches("PERSISTED")) {
                token = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    vParent.IsPersisted = true;
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                }
                return;
            }
            if (TSql140ParserInternal.tokenSet_176_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_98_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void computedColumnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult) {
            while (true) {
                if (!TSql140ParserInternal.tokenSet_177_.member(this.LA(1))) {
                    break;
                }
                ConstraintDefinition constraint = this.columnConstraint(statementType);
                if (base.inputState.guessing == 0) {
                    TSql90ParserBaseInternal.AddConstraintToComputedColumn(constraint, vResult);
                }
            }
        }

        public void regularColumnBody(IndexAffectingStatement statementType, ColumnDefinition vParent) {
            DataTypeReference dataTypeReference = null;
            if (TSql140ParserInternal.tokenSet_65_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_178_.member(this.LA(2))) {
                dataTypeReference = this.scalarDataType();
                if (base.inputState.guessing == 0) {
                    vParent.DataType = dataTypeReference;
                }
                this.collationOpt(vParent);
                if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("GENERATED")) {
                    this.generatedAlwaysClause(vParent);
                    goto IL_00bb;
                }
                if (TSql140ParserInternal.tokenSet_102_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_98_.member(this.LA(2))) {
                    goto IL_00bb;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (TSql140ParserInternal.tokenSet_102_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_98_.member(this.LA(2))) {
                goto IL_0402;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_01f7:
            ColumnStorageOptions storageOptions = this.sparseAndFilestreamStorage(statementType, dataTypeReference);
            if (base.inputState.guessing == 0) {
                vParent.StorageOptions = storageOptions;
            }
            goto IL_0402;
            IL_0402:
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_102_.member(this.LA(2)) && base.NextTokenMatches("HIDDEN")) {
                this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    vParent.IsHidden = true;
                }
                goto IL_0492;
            }
            if (TSql140ParserInternal.tokenSet_102_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_98_.member(this.LA(2))) {
                goto IL_0492;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_01a5:
            if (this.LA(1) == 232 && this.LA(2) == 232) {
                if (base.NextTokenMatches("SPARSE") && base.NextTokenMatches("FILESTREAM", 2)) {
                    goto IL_01f7;
                }
                if (base.NextTokenMatches("FILESTREAM") && base.NextTokenMatches("SPARSE", 2)) {
                    goto IL_01f7;
                }
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_102_.member(this.LA(2)) && base.NextTokenMatches("SPARSE")) {
                storageOptions = this.sparseStorage(statementType, dataTypeReference);
                if (base.inputState.guessing == 0) {
                    vParent.StorageOptions = storageOptions;
                }
                if (this.LA(1) == 232 && this.LA(2) == 171 && base.NextTokenMatches("ENCRYPTED")) {
                    ColumnEncryptionDefinition encryption = this.columnEncryptionClause();
                    if (base.inputState.guessing == 0) {
                        vParent.Encryption = encryption;
                    }
                    goto IL_0402;
                }
                if (TSql140ParserInternal.tokenSet_102_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_98_.member(this.LA(2))) {
                    goto IL_0402;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (this.LA(1) == 232 && this.LA(2) == 67 && base.NextTokenMatches("COLUMN_SET")) {
                storageOptions = this.allSparseStorage(statementType, dataTypeReference);
                if (base.inputState.guessing == 0) {
                    vParent.StorageOptions = storageOptions;
                }
                goto IL_0402;
            }
            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_102_.member(this.LA(2)) && base.NextTokenMatches("FILESTREAM")) {
                storageOptions = this.filestreamStorage(statementType, dataTypeReference);
                if (base.inputState.guessing == 0) {
                    vParent.StorageOptions = storageOptions;
                }
                goto IL_0402;
            }
            if (TSql140ParserInternal.tokenSet_102_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_98_.member(this.LA(2))) {
                goto IL_0402;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00bb:
            if (this.LA(1) == 232 && this.LA(2) == 171 && base.NextTokenMatches("MASKED")) {
                this.maskedClause(vParent);
                goto IL_0126;
            }
            if (TSql140ParserInternal.tokenSet_102_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_98_.member(this.LA(2))) {
                goto IL_0126;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0492:
            if (base.inputState.guessing == 0) {
                base.VerifyColumnDataType(vParent);
            }
            return;
            IL_0126:
            if (this.LA(1) == 232 && this.LA(2) == 171 && base.NextTokenMatches("ENCRYPTED")) {
                ColumnEncryptionDefinition encryption = this.columnEncryptionClause();
                if (base.inputState.guessing == 0) {
                    vParent.Encryption = encryption;
                }
                goto IL_01a5;
            }
            if (TSql140ParserInternal.tokenSet_102_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_98_.member(this.LA(2))) {
                goto IL_01a5;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void columnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult) {
            while (true) {
                switch (this.LA(1)) {
                    default:
                        return;
                    case 136:
                        this.rowguidcolConstraint(vResult);
                        break;
                    case 79: {
                            IdentityOptions identityOptions = this.identityConstraint(statementType);
                            if (base.inputState.guessing == 0) {
                                if (vResult.IdentityOptions != null) {
                                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46043", identityOptions, TSqlParserResource.SQL46043Message);
                                }
                                vResult.IdentityOptions = identityOptions;
                            }
                            break;
                        }
                    case 21:
                    case 30:
                    case 47:
                    case 68:
                    case 99:
                    case 100:
                    case 118:
                    case 127:
                    case 159: {
                            ConstraintDefinition constraint = this.columnConstraint(statementType);
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddConstraintToColumn(constraint, vResult);
                            }
                            break;
                        }
                }
            }
        }

        public ScalarExpression expressionWithFlags(ExpressionFlags expressionFlags) {
            ScalarExpression scalarExpression = null;
            return this.expressionBinaryPri2(expressionFlags);
        }

        public void generatedAlwaysClause(ColumnDefinition vResult) {
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "GENERATED");
            }
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "ALWAYS");
            }
            this.match(9);
            token3 = this.LT(1);
            this.match(232);
            if (this.LA(1) == 232 && base.NextTokenMatches("START")) {
                token4 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    if (TSql80ParserBaseInternal.TryMatch(token3, "ROW")) {
                        vResult.GeneratedAlways = GeneratedAlwaysType.RowStart;
                    } else if (TSql80ParserBaseInternal.TryMatch(token3, "SUSER_SID")) {
                        vResult.GeneratedAlways = GeneratedAlwaysType.UserIdStart;
                    } else if (TSql80ParserBaseInternal.TryMatch(token3, "SUSER_SNAME")) {
                        vResult.GeneratedAlways = GeneratedAlwaysType.UserNameStart;
                    } else {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token3);
                    }
                    TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token4);
                }
                return;
            }
            if (this.LA(1) == 56 && base.NextTokenMatches("END")) {
                token5 = this.LT(1);
                this.match(56);
                if (base.inputState.guessing == 0) {
                    if (TSql80ParserBaseInternal.TryMatch(token3, "ROW")) {
                        vResult.GeneratedAlways = GeneratedAlwaysType.RowEnd;
                    } else if (TSql80ParserBaseInternal.TryMatch(token3, "SUSER_SID")) {
                        vResult.GeneratedAlways = GeneratedAlwaysType.UserIdEnd;
                    } else if (TSql80ParserBaseInternal.TryMatch(token3, "SUSER_SNAME")) {
                        vResult.GeneratedAlways = GeneratedAlwaysType.UserNameEnd;
                    } else {
                        TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token3);
                    }
                    TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token5);
                }
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ColumnStorageOptions sparseAndFilestreamStorage(IndexAffectingStatement statementType, DataTypeReference columnType) {
            ColumnStorageOptions columnStorageOptions = base.FragmentFactory.CreateFragment<ColumnStorageOptions>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                if (TSql80ParserBaseInternal.TryMatch(token, "SPARSE")) {
                    TSql100ParserBaseInternal.SetSparseStorageOption(columnStorageOptions, SparseColumnOption.Sparse, token, statementType);
                    TSql80ParserBaseInternal.Match(token2, "FILESTREAM");
                    TSql100ParserBaseInternal.SetFileStreamStorageOption(columnStorageOptions, token2, columnType, statementType);
                } else {
                    TSql80ParserBaseInternal.Match(token, "FILESTREAM");
                    TSql100ParserBaseInternal.SetFileStreamStorageOption(columnStorageOptions, token, columnType, statementType);
                    TSql80ParserBaseInternal.Match(token2, "SPARSE");
                    TSql100ParserBaseInternal.SetSparseStorageOption(columnStorageOptions, SparseColumnOption.Sparse, token2, statementType);
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(columnStorageOptions, token2);
            }
            return columnStorageOptions;
        }

        public ColumnStorageOptions sparseStorage(IndexAffectingStatement statementType, DataTypeReference columnType) {
            ColumnStorageOptions columnStorageOptions = base.FragmentFactory.CreateFragment<ColumnStorageOptions>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SPARSE");
                TSql100ParserBaseInternal.SetSparseStorageOption(columnStorageOptions, SparseColumnOption.Sparse, token, statementType);
                TSql80ParserBaseInternal.UpdateTokenInfo(columnStorageOptions, token);
            }
            return columnStorageOptions;
        }

        public ColumnStorageOptions allSparseStorage(IndexAffectingStatement statementType, DataTypeReference columnType) {
            ColumnStorageOptions columnStorageOptions = base.FragmentFactory.CreateFragment<ColumnStorageOptions>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(67);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "COLUMN_SET");
                TSql80ParserBaseInternal.Match(token2, "ALL_SPARSE_COLUMNS");
                XmlDataTypeReference xmlDataTypeReference = columnType as XmlDataTypeReference;
                if (xmlDataTypeReference != null && xmlDataTypeReference.XmlDataTypeOption == XmlDataTypeOption.None && xmlDataTypeReference.XmlSchemaCollection == null) {
                    TSql100ParserBaseInternal.SetSparseStorageOption(columnStorageOptions, SparseColumnOption.ColumnSetForAllSparseColumns, token, statementType);
                } else {
                    TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(columnStorageOptions, token2);
            }
            return columnStorageOptions;
        }

        public ColumnStorageOptions filestreamStorage(IndexAffectingStatement statementType, DataTypeReference columnType) {
            ColumnStorageOptions columnStorageOptions = base.FragmentFactory.CreateFragment<ColumnStorageOptions>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "FILESTREAM");
                TSql100ParserBaseInternal.SetFileStreamStorageOption(columnStorageOptions, token, columnType, statementType);
                TSql80ParserBaseInternal.UpdateTokenInfo(columnStorageOptions, token);
            }
            return columnStorageOptions;
        }

        public ConstraintDefinition columnConstraint(IndexAffectingStatement statementType) {
            ConstraintDefinition constraintDefinition = null;
            IToken token = null;
            Identifier identifier = null;
            try {
                switch (this.LA(1)) {
                    case 30:
                        token = this.LT(1);
                        this.match(30);
                        identifier = this.identifier();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    case 21:
                    case 47:
                    case 68:
                    case 99:
                    case 100:
                    case 118:
                    case 127:
                    case 159:
                        break;
                }
                switch (this.LA(1)) {
                    case 99:
                    case 100:
                        constraintDefinition = this.nullableConstraint();
                        break;
                    case 47:
                        constraintDefinition = this.defaultColumnConstraint(statementType);
                        break;
                    case 118:
                    case 159:
                        constraintDefinition = this.uniqueColumnConstraint(statementType);
                        break;
                    case 68:
                    case 127:
                        constraintDefinition = this.foreignKeyColumnConstraint(statementType);
                        break;
                    case 21:
                        constraintDefinition = this.checkConstraint(statementType);
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                if (base.inputState.guessing == 0) {
                    if (identifier != null) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(constraintDefinition, token);
                        constraintDefinition.ConstraintIdentifier = identifier;
                        return constraintDefinition;
                    }
                    return constraintDefinition;
                }
                return constraintDefinition;
            } catch (PhaseOneConstraintException) {
                if (base.inputState.guessing != 0) {
                    throw;
                }
                return constraintDefinition;
            }
        }

        public void rowguidcolConstraint(ColumnDefinition vParent) {
            IToken token = null;
            token = this.LT(1);
            this.match(136);
            if (base.inputState.guessing == 0) {
                if (vParent.IsRowGuidCol) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46042", token, TSqlParserResource.SQL46042Message);
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                vParent.IsRowGuidCol = true;
            }
        }

        public IdentityOptions identityConstraint(IndexAffectingStatement statementType) {
            IdentityOptions identityOptions = base.FragmentFactory.CreateFragment<IdentityOptions>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(79);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(identityOptions, token);
            }
            bool flag = false;
            if (this.LA(1) == 191 && TSql140ParserInternal.tokenSet_158_.member(this.LA(2))) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(191);
                    this.seedIncrement();
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                this.match(191);
                ScalarExpression identitySeed = this.seedIncrement();
                if (base.inputState.guessing == 0) {
                    identityOptions.IdentitySeed = identitySeed;
                }
                this.match(198);
                identitySeed = this.seedIncrement();
                if (base.inputState.guessing == 0) {
                    identityOptions.IdentityIncrement = identitySeed;
                }
                token2 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(identityOptions, token2);
                }
                goto IL_015d;
            }
            if (TSql140ParserInternal.tokenSet_102_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_98_.member(this.LA(2))) {
                goto IL_015d;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_015d:
            bool isIdentityNotForReplication = this.replicationClauseOpt(statementType, identityOptions);
            if (base.inputState.guessing == 0) {
                identityOptions.IsIdentityNotForReplication = isIdentityNotForReplication;
            }
            return identityOptions;
        }

        public ColumnEncryptionDefinitionParameter columnEncryptionDefinitionParameter() {
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("COLUMN_ENCRYPTION_KEY")) {
                return this.columnEncryptionKeyNameParameter();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ENCRYPTION_TYPE")) {
                return this.columnEncryptionTypeParameter();
            }
            if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ALGORITHM")) {
                return this.columnEncryptionAlgorithmParameter();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ColumnEncryptionKeyNameParameter columnEncryptionKeyNameParameter() {
            ColumnEncryptionKeyNameParameter columnEncryptionKeyNameParameter = base.FragmentFactory.CreateFragment<ColumnEncryptionKeyNameParameter>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            Identifier name = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "COLUMN_ENCRYPTION_KEY");
                TSql80ParserBaseInternal.UpdateTokenInfo(columnEncryptionKeyNameParameter, token);
                columnEncryptionKeyNameParameter.ParameterKind = ColumnEncryptionDefinitionParameterKind.ColumnEncryptionKey;
                columnEncryptionKeyNameParameter.Name = name;
            }
            return columnEncryptionKeyNameParameter;
        }

        public ColumnEncryptionTypeParameter columnEncryptionTypeParameter() {
            ColumnEncryptionTypeParameter columnEncryptionTypeParameter = base.FragmentFactory.CreateFragment<ColumnEncryptionTypeParameter>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ENCRYPTION_TYPE");
                TSql80ParserBaseInternal.UpdateTokenInfo(columnEncryptionTypeParameter, token);
                columnEncryptionTypeParameter.ParameterKind = ColumnEncryptionDefinitionParameterKind.EncryptionType;
            }
            if (this.LA(1) == 232 && (this.LA(2) == 192 || this.LA(2) == 198) && base.NextTokenMatches("DETERMINISTIC")) {
                token2 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token2, "DETERMINISTIC");
                    columnEncryptionTypeParameter.EncryptionType = ColumnEncryptionType.Deterministic;
                }
                goto IL_0142;
            }
            if (this.LA(1) == 232 && (this.LA(2) == 192 || this.LA(2) == 198) && base.NextTokenMatches("RANDOMIZED")) {
                token3 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token3, "RANDOMIZED");
                    columnEncryptionTypeParameter.EncryptionType = ColumnEncryptionType.Randomized;
                }
                goto IL_0142;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0142:
            return columnEncryptionTypeParameter;
        }

        public ColumnEncryptionAlgorithmParameter columnEncryptionAlgorithmParameter() {
            ColumnEncryptionAlgorithmParameter columnEncryptionAlgorithmParameter = base.FragmentFactory.CreateFragment<ColumnEncryptionAlgorithmParameter>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            this.match(206);
            StringLiteral encryptionAlgorithm = this.stringLiteral();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ALGORITHM");
                TSql80ParserBaseInternal.UpdateTokenInfo(columnEncryptionAlgorithmParameter, token);
                columnEncryptionAlgorithmParameter.ParameterKind = ColumnEncryptionDefinitionParameterKind.Algorithm;
                columnEncryptionAlgorithmParameter.EncryptionAlgorithm = encryptionAlgorithm;
            }
            return columnEncryptionAlgorithmParameter;
        }

        public bool replicationClauseOpt(IndexAffectingStatement statementType, TSqlFragment vParent) {
            bool result = false;
            IToken token = null;
            IToken token2 = null;
            bool flag = false;
            if (this.LA(1) == 99 && this.LA(2) == 67) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(99);
                    this.match(67);
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                token = this.LT(1);
                this.match(99);
                this.match(67);
                token2 = this.LT(1);
                this.match(128);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                    result = true;
                }
                goto IL_00f3;
            }
            if (TSql140ParserInternal.tokenSet_102_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_98_.member(this.LA(2))) {
                goto IL_00f3;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00f3:
            return result;
        }

        public DefaultConstraintDefinition defaultColumnConstraint(IndexAffectingStatement statementType) {
            DefaultConstraintDefinition defaultConstraintDefinition = base.FragmentFactory.CreateFragment<DefaultConstraintDefinition>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(47);
            ScalarExpression expression = this.expressionWithFlags(ExpressionFlags.ScalarSubqueriesDisallowed);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(defaultConstraintDefinition, token);
                defaultConstraintDefinition.Expression = expression;
            }
            if (this.LA(1) == 171 && this.LA(2) == 164) {
                this.match(171);
                token2 = this.LT(1);
                this.match(164);
                if (base.inputState.guessing == 0) {
                    if (statementType != 0) {
                        TSql80ParserBaseInternal.ThrowParseErrorException("SQL46013", token, TSqlParserResource.SQL46013Message);
                    }
                    TSql80ParserBaseInternal.UpdateTokenInfo(defaultConstraintDefinition, token2);
                    defaultConstraintDefinition.WithValues = true;
                }
                goto IL_00ec;
            }
            if (TSql140ParserInternal.tokenSet_102_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_98_.member(this.LA(2))) {
                goto IL_00ec;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00ec:
            return defaultConstraintDefinition;
        }

        public UniqueConstraintDefinition uniqueColumnConstraint(IndexAffectingStatement statementType) {
            UniqueConstraintDefinition uniqueConstraintDefinition = base.FragmentFactory.CreateFragment<UniqueConstraintDefinition>();
            IToken token = null;
            this.uniqueConstraintHeader(uniqueConstraintDefinition, false);
            bool flag = false;
            if (this.LA(1) == 191 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233)) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(191);
                    this.columnWithSortOrder();
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                this.match(191);
                ColumnWithSortOrder item = this.columnWithSortOrder();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(uniqueConstraintDefinition, uniqueConstraintDefinition.Columns, item);
                }
                while (true) {
                    if (this.LA(1) != 198) {
                        break;
                    }
                    this.match(198);
                    item = this.columnWithSortOrder();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(uniqueConstraintDefinition, uniqueConstraintDefinition.Columns, item);
                    }
                }
                token = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(uniqueConstraintDefinition, token);
                }
                goto IL_0171;
            }
            if (TSql140ParserInternal.tokenSet_179_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_98_.member(this.LA(2))) {
                goto IL_0171;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0171:
            this.uniqueConstraintTailOpt(statementType, uniqueConstraintDefinition);
            return uniqueConstraintDefinition;
        }

        public ForeignKeyConstraintDefinition foreignKeyColumnConstraint(IndexAffectingStatement statementType) {
            ForeignKeyConstraintDefinition foreignKeyConstraintDefinition = base.FragmentFactory.CreateFragment<ForeignKeyConstraintDefinition>();
            IToken token = null;
            switch (this.LA(1)) {
                case 68:
                    token = this.LT(1);
                    this.match(68);
                    this.match(91);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
                        TSql80ParserBaseInternal.UpdateTokenInfo(foreignKeyConstraintDefinition, token);
                    }
                    this.foreignConstraintColumnsOpt(foreignKeyConstraintDefinition);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 127:
                    break;
            }
            this.foreignKeyConstraintCommonEnd(statementType, foreignKeyConstraintDefinition);
            return foreignKeyConstraintDefinition;
        }

        public CheckConstraintDefinition checkConstraint(IndexAffectingStatement statementType) {
            CheckConstraintDefinition checkConstraintDefinition = base.FragmentFactory.CreateFragment<CheckConstraintDefinition>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(21);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(checkConstraintDefinition, token);
                base.ThrowConstraintIfPhaseOne(checkConstraintDefinition);
            }
            bool notForReplication = this.replicationClauseOpt(statementType, checkConstraintDefinition);
            if (base.inputState.guessing == 0) {
                checkConstraintDefinition.NotForReplication = notForReplication;
            }
            this.match(191);
            BooleanExpression checkCondition = this.booleanExpressionWithFlags(ExpressionFlags.ScalarSubqueriesDisallowed);
            if (base.inputState.guessing == 0) {
                checkConstraintDefinition.CheckCondition = checkCondition;
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(checkConstraintDefinition, token2);
            }
            return checkConstraintDefinition;
        }

        public UniqueConstraintDefinition uniqueTableConstraint(IndexAffectingStatement statementType) {
            UniqueConstraintDefinition uniqueConstraintDefinition = base.FragmentFactory.CreateFragment<UniqueConstraintDefinition>();
            IToken token = null;
            this.uniqueConstraintHeader(uniqueConstraintDefinition, true);
            this.match(191);
            ColumnWithSortOrder item = this.columnWithSortOrder();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(uniqueConstraintDefinition, uniqueConstraintDefinition.Columns, item);
            }
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.columnWithSortOrder();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(uniqueConstraintDefinition, uniqueConstraintDefinition.Columns, item);
                }
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(uniqueConstraintDefinition, token);
            }
            this.uniqueConstraintTailOpt(statementType, uniqueConstraintDefinition);
            return uniqueConstraintDefinition;
        }

        public DefaultConstraintDefinition defaultTableConstraint(IndexAffectingStatement statementType) {
            DefaultConstraintDefinition defaultConstraintDefinition = base.FragmentFactory.CreateFragment<DefaultConstraintDefinition>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(47);
            if (base.inputState.guessing == 0) {
                if (statementType != 0) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46014", token, TSqlParserResource.SQL46014Message);
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(defaultConstraintDefinition, token);
                base.ThrowConstraintIfPhaseOne(defaultConstraintDefinition);
            }
            ScalarExpression expression = this.expressionWithFlags(ExpressionFlags.ScalarSubqueriesDisallowed);
            this.match(67);
            Identifier column = this.identifier();
            if (base.inputState.guessing == 0) {
                defaultConstraintDefinition.Expression = expression;
                defaultConstraintDefinition.Column = column;
            }
            if (this.LA(1) == 171 && this.LA(2) == 164) {
                this.match(171);
                token2 = this.LT(1);
                this.match(164);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(defaultConstraintDefinition, token2);
                    defaultConstraintDefinition.WithValues = true;
                }
                goto IL_0118;
            }
            if (TSql140ParserInternal.tokenSet_78_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_168_.member(this.LA(2))) {
                goto IL_0118;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0118:
            return defaultConstraintDefinition;
        }

        public ForeignKeyConstraintDefinition foreignKeyTableConstraint(IndexAffectingStatement statementType) {
            ForeignKeyConstraintDefinition foreignKeyConstraintDefinition = base.FragmentFactory.CreateFragment<ForeignKeyConstraintDefinition>();
            IToken token = null;
            token = this.LT(1);
            this.match(68);
            this.match(91);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(foreignKeyConstraintDefinition, token);
                base.ThrowConstraintIfPhaseOne(foreignKeyConstraintDefinition);
            }
            this.foreignConstraintColumnsOpt(foreignKeyConstraintDefinition);
            this.foreignKeyConstraintCommonEnd(statementType, foreignKeyConstraintDefinition);
            return foreignKeyConstraintDefinition;
        }

        public void uniqueConstraintHeader(UniqueConstraintDefinition vParent, bool throwInPhaseOne) {
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            IToken token6 = null;
            switch (this.LA(1)) {
                case 159:
                    token = this.LT(1);
                    this.match(159);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                        vParent.IsPrimaryKey = false;
                    }
                    break;
                case 118:
                    token2 = this.LT(1);
                    this.match(118);
                    token3 = this.LT(1);
                    this.match(91);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token3);
                        vParent.IsPrimaryKey = true;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0 && throwInPhaseOne) {
                base.ThrowConstraintIfPhaseOne(vParent);
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 21:
                    case 22:
                    case 23:
                    case 28:
                    case 30:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 68:
                    case 74:
                    case 75:
                    case 79:
                    case 82:
                    case 84:
                    case 86:
                    case 92:
                    case 95:
                        return;
                    case 24:
                        token4 = this.LT(1);
                        this.match(24);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token4);
                            vParent.Clustered = true;
                            vParent.IndexType = new IndexType {
                                IndexTypeKind = IndexTypeKind.Clustered
                            };
                        }
                        return;
                }
            } else {
                switch (num) {
                    case 99:
                    case 100:
                    case 105:
                    case 106:
                    case 118:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 127:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 136:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 198:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        return;
                }
            }
            if (this.LA(1) == 98 && this.LA(2) == 232) {
                this.match(98);
                token5 = this.LT(1);
                this.match(232);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token5, "HASH");
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token5);
                    vParent.IndexType = new IndexType {
                        IndexTypeKind = IndexTypeKind.NonClusteredHash
                    };
                }
                return;
            }
            if (this.LA(1) == 98 && TSql140ParserInternal.tokenSet_179_.member(this.LA(2))) {
                token6 = this.LT(1);
                this.match(98);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token6);
                    vParent.Clustered = false;
                    vParent.IndexType = new IndexType {
                        IndexTypeKind = IndexTypeKind.NonClustered
                    };
                }
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void uniqueConstraintTailOpt(IndexAffectingStatement statementType, UniqueConstraintDefinition vParent) {
            IToken token = null;
            this.uniqueConstraintIndexOptionsOpt(statementType, vParent);
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 21:
                    case 22:
                    case 23:
                    case 28:
                    case 30:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 68:
                    case 74:
                    case 75:
                    case 79:
                    case 82:
                    case 84:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0321;
                }
            } else {
                switch (num) {
                    case 105: {
                            token = this.LT(1);
                            this.match(105);
                            FileGroupOrPartitionScheme onFileGroupOrPartitionScheme = this.filegroupOrPartitionScheme();
                            if (base.inputState.guessing == 0) {
                                if (statementType == IndexAffectingStatement.CreateType) {
                                    TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
                                }
                                vParent.OnFileGroupOrPartitionScheme = onFileGroupOrPartitionScheme;
                            }
                            goto IL_0321;
                        }
                    case 99:
                    case 100:
                    case 106:
                    case 118:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 127:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 136:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 198:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0321;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0321:
            this.fileStreamOnOpt(vParent);
        }

        public void uniqueConstraintIndexOptionsOpt(IndexAffectingStatement statement, UniqueConstraintDefinition vParent) {
            if (this.LA(1) == 171 && (this.LA(2) == 66 || this.LA(2) == 191 || this.LA(2) == 232)) {
                this.match(171);
                switch (this.LA(1)) {
                    case 66: {
                            IndexOption item = this.fillFactorOption();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.IndexOptions, item);
                            }
                            if (this.LA(1) == 232 && TSql140ParserInternal.tokenSet_179_.member(this.LA(2)) && base.NextTokenMatchesOneOf("SORTED_DATA", "SORTED_DATA_REORG")) {
                                this.sortedDataOptions();
                                break;
                            }
                            if (TSql140ParserInternal.tokenSet_179_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_98_.member(this.LA(2))) {
                                break;
                            }
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                        }
                    case 232: {
                            this.sortedDataOptions();
                            int num = this.LA(1);
                            if (num <= 95) {
                                switch (num) {
                                    case 1:
                                    case 4:
                                    case 6:
                                    case 12:
                                    case 13:
                                    case 15:
                                    case 17:
                                    case 21:
                                    case 22:
                                    case 23:
                                    case 28:
                                    case 30:
                                    case 33:
                                    case 35:
                                    case 44:
                                    case 45:
                                    case 46:
                                    case 47:
                                    case 48:
                                    case 49:
                                    case 54:
                                    case 55:
                                    case 56:
                                    case 60:
                                    case 61:
                                    case 64:
                                    case 68:
                                    case 74:
                                    case 75:
                                    case 79:
                                    case 82:
                                    case 84:
                                    case 86:
                                    case 92:
                                    case 95:
                                        return;
                                    case 66: {
                                            IndexOption item = this.fillFactorOption();
                                            if (base.inputState.guessing == 0) {
                                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.IndexOptions, item);
                                            }
                                            return;
                                        }
                                }
                            } else {
                                switch (num) {
                                    case 99:
                                    case 100:
                                    case 105:
                                    case 106:
                                    case 118:
                                    case 119:
                                    case 123:
                                    case 125:
                                    case 126:
                                    case 127:
                                    case 129:
                                    case 131:
                                    case 132:
                                    case 134:
                                    case 136:
                                    case 138:
                                    case 140:
                                    case 142:
                                    case 143:
                                    case 144:
                                    case 156:
                                    case 159:
                                    case 160:
                                    case 161:
                                    case 162:
                                    case 167:
                                    case 170:
                                    case 171:
                                    case 172:
                                    case 176:
                                    case 182:
                                    case 191:
                                    case 192:
                                    case 198:
                                    case 204:
                                    case 219:
                                    case 220:
                                    case 232:
                                        return;
                                }
                            }
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                        }
                    case 191:
                        this.indexOptionList(statement, vParent.IndexOptions, vParent);
                        break;
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                return;
            }
            if (TSql140ParserInternal.tokenSet_179_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_98_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void sortedDataOptions() {
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "SORTED_DATA", "SORTED_DATA_REORG");
            }
        }

        public DeleteUpdateAction deleteUpdateAction(TSqlFragment vParent) {
            DeleteUpdateAction result = DeleteUpdateAction.NoAction;
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            switch (this.LA(1)) {
                case 232:
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token, "NO");
                    }
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
                        TSql80ParserBaseInternal.Match(token2, "ACTION");
                    }
                    break;
                case 19:
                    token3 = this.LT(1);
                    this.match(19);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token3);
                        result = DeleteUpdateAction.Cascade;
                    }
                    break;
                case 142:
                    this.match(142);
                    switch (this.LA(1)) {
                        case 100:
                            token4 = this.LT(1);
                            this.match(100);
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token4);
                                result = DeleteUpdateAction.SetNull;
                            }
                            break;
                        case 47:
                            token5 = this.LT(1);
                            this.match(47);
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token5);
                                result = DeleteUpdateAction.SetDefault;
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public void foreignKeyConstraintCommonEnd(IndexAffectingStatement statementType, ForeignKeyConstraintDefinition vParent) {
            IToken token = null;
            IToken token2 = null;
            bool flag = false;
            token = this.LT(1);
            this.match(127);
            SchemaObjectName referenceTableName = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                vParent.ReferenceTableName = referenceTableName;
            }
            bool flag2 = false;
            if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                int pos = this.mark();
                flag2 = true;
                base.inputState.guessing++;
                try {
                    this.match(191);
                    this.identifier();
                } catch (RecognitionException) {
                    flag2 = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag2) {
                this.columnNameList(vParent, vParent.ReferencedTableColumns);
                goto IL_010d;
            }
            if (TSql140ParserInternal.tokenSet_179_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_98_.member(this.LA(2))) {
                goto IL_010d;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_01e4:
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 21:
                    case 22:
                    case 23:
                    case 28:
                    case 30:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 68:
                    case 74:
                    case 75:
                    case 79:
                    case 82:
                    case 84:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0862;
                }
                goto IL_084f;
            }
            switch (num) {
                case 105:
                    break;
                default:
                    goto IL_084f;
                case 99:
                case 100:
                case 106:
                case 118:
                case 119:
                case 123:
                case 125:
                case 126:
                case 127:
                case 129:
                case 131:
                case 132:
                case 134:
                case 136:
                case 138:
                case 140:
                case 142:
                case 143:
                case 144:
                case 156:
                case 159:
                case 160:
                case 161:
                case 162:
                case 167:
                case 170:
                case 171:
                case 172:
                case 176:
                case 182:
                case 191:
                case 192:
                case 198:
                case 204:
                case 219:
                case 220:
                case 232:
                    goto IL_0862;
            }
            this.match(105);
            this.match(160);
            DeleteUpdateAction updateAction = this.deleteUpdateAction(vParent);
            if (base.inputState.guessing == 0) {
                vParent.UpdateAction = updateAction;
            }
            int num2 = this.LA(1);
            if (num2 <= 95) {
                switch (num2) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 21:
                    case 22:
                    case 23:
                    case 28:
                    case 30:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 68:
                    case 74:
                    case 75:
                    case 79:
                    case 82:
                    case 84:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0862;
                }
                goto IL_083c;
            }
            switch (num2) {
                case 105:
                    break;
                default:
                    goto IL_083c;
                case 99:
                case 100:
                case 106:
                case 118:
                case 119:
                case 123:
                case 125:
                case 126:
                case 127:
                case 129:
                case 131:
                case 132:
                case 134:
                case 136:
                case 138:
                case 140:
                case 142:
                case 143:
                case 144:
                case 156:
                case 159:
                case 160:
                case 161:
                case 162:
                case 167:
                case 170:
                case 171:
                case 172:
                case 176:
                case 182:
                case 191:
                case 192:
                case 198:
                case 204:
                case 219:
                case 220:
                case 232:
                    goto IL_0862;
            }
            token2 = this.LT(1);
            this.match(105);
            this.match(48);
            updateAction = this.deleteUpdateAction(vParent);
            if (base.inputState.guessing == 0) {
                if (flag) {
                    throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
                }
                vParent.DeleteAction = updateAction;
            }
            goto IL_0862;
            IL_084f:
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0862:
            bool notForReplication = this.replicationClauseOpt(statementType, vParent);
            if (base.inputState.guessing == 0) {
                vParent.NotForReplication = notForReplication;
            }
            return;
            IL_010d:
            bool flag3 = false;
            if (this.LA(1) == 105 && this.LA(2) == 48) {
                int pos2 = this.mark();
                flag3 = true;
                base.inputState.guessing++;
                try {
                    this.match(105);
                    this.match(48);
                } catch (RecognitionException) {
                    flag3 = false;
                }
                this.rewind(pos2);
                base.inputState.guessing--;
            }
            if (flag3) {
                this.match(105);
                this.match(48);
                updateAction = this.deleteUpdateAction(vParent);
                if (base.inputState.guessing == 0) {
                    vParent.DeleteAction = updateAction;
                    flag = true;
                }
                goto IL_01e4;
            }
            if (TSql140ParserInternal.tokenSet_179_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_98_.member(this.LA(2))) {
                goto IL_01e4;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_083c:
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public void foreignConstraintColumnsOpt(ForeignKeyConstraintDefinition vParent) {
            switch (this.LA(1)) {
                case 127:
                    break;
                case 191:
                    this.columnNameList(vParent, vParent.Columns);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public XmlDataTypeReference xmlDataType(SchemaObjectName vName) {
            XmlDataTypeReference xmlDataTypeReference = base.FragmentFactory.CreateFragment<XmlDataTypeReference>();
            IToken token = null;
            IToken token2 = null;
            xmlDataTypeReference.Name = vName;
            xmlDataTypeReference.UpdateTokenInfo(vName);
            bool flag = false;
            if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(191);
                    this.identifier();
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                this.match(191);
                if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233)) {
                    token = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        xmlDataTypeReference.XmlDataTypeOption = XmlDataTypeOptionHelper.Instance.ParseOption(token);
                    }
                } else {
                    if (this.LA(1) != 232 && this.LA(1) != 233) {
                        goto IL_0145;
                    }
                    if (this.LA(2) != 192 && this.LA(2) != 200) {
                        goto IL_0145;
                    }
                }
                SchemaObjectName xmlSchemaCollection = this.dataTypeSchemaObjectName();
                if (base.inputState.guessing == 0) {
                    xmlDataTypeReference.XmlSchemaCollection = xmlSchemaCollection;
                }
                token2 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(xmlDataTypeReference, token2);
                }
                goto IL_01d5;
            }
            if (TSql140ParserInternal.tokenSet_0_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_1_.member(this.LA(2))) {
                goto IL_01d5;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_01d5:
            return xmlDataTypeReference;
            IL_0145:
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public SchemaObjectName dataTypeSchemaObjectName() {
            SchemaObjectName schemaObjectName = base.FragmentFactory.CreateFragment<SchemaObjectName>();
            Identifier item = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(schemaObjectName, schemaObjectName.Identifiers, item);
            }
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 9:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 21:
                    case 22:
                    case 23:
                    case 26:
                    case 28:
                    case 30:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 67:
                    case 68:
                    case 74:
                    case 75:
                    case 79:
                    case 82:
                    case 84:
                    case 86:
                    case 92:
                        goto IL_0382;
                }
            } else {
                switch (num) {
                    case 200:
                        this.match(200);
                        item = this.identifier();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(schemaObjectName, schemaObjectName.Identifiers, item);
                        }
                        goto IL_0382;
                    case 95:
                    case 99:
                    case 100:
                    case 106:
                    case 118:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 127:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 136:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 165:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 175:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 198:
                    case 204:
                    case 206:
                    case 219:
                    case 220:
                    case 230:
                    case 231:
                    case 232:
                    case 233:
                    case 234:
                        goto IL_0382;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0382:
            return schemaObjectName;
        }

        public SqlDataTypeReference sqlDataTypeWithoutNational(SchemaObjectName vName, SqlDataTypeOption vType) {
            SqlDataTypeReference sqlDataTypeReference = base.FragmentFactory.CreateFragment<SqlDataTypeReference>();
            IToken token = null;
            sqlDataTypeReference.Name = vName;
            sqlDataTypeReference.SqlDataTypeOption = vType;
            sqlDataTypeReference.UpdateTokenInfo(vName);
            bool isVarying = false;
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 9:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 21:
                    case 22:
                    case 23:
                    case 26:
                    case 28:
                    case 30:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 67:
                    case 68:
                    case 74:
                    case 75:
                    case 79:
                    case 82:
                    case 84:
                    case 86:
                    case 92:
                        goto IL_036a;
                }
            } else {
                switch (num) {
                    case 165:
                        token = this.LT(1);
                        this.match(165);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(sqlDataTypeReference, token);
                            isVarying = true;
                        }
                        goto IL_036a;
                    case 95:
                    case 99:
                    case 100:
                    case 106:
                    case 118:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 127:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 136:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 175:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 198:
                    case 204:
                    case 206:
                    case 219:
                    case 220:
                    case 230:
                    case 231:
                    case 232:
                    case 233:
                    case 234:
                        goto IL_036a;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_036a:
            this.dataTypeParametersOpt(sqlDataTypeReference);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.ProcessNationalAndVarying(sqlDataTypeReference, null, isVarying);
                TSql80ParserBaseInternal.CheckSqlDataTypeParameters(sqlDataTypeReference);
            }
            return sqlDataTypeReference;
        }

        public UserDataTypeReference userDataType(SchemaObjectName vName) {
            UserDataTypeReference userDataTypeReference = base.FragmentFactory.CreateFragment<UserDataTypeReference>();
            userDataTypeReference.Name = vName;
            userDataTypeReference.UpdateTokenInfo(vName);
            this.dataTypeParametersOpt(userDataTypeReference);
            return userDataTypeReference;
        }

        public SqlDataTypeReference doubleDataType() {
            SqlDataTypeReference sqlDataTypeReference = base.FragmentFactory.CreateFragment<SqlDataTypeReference>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(53);
            token2 = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token2, "PRECISION");
                base.SetNameForDoublePrecisionType(sqlDataTypeReference, token, token2);
                sqlDataTypeReference.SqlDataTypeOption = SqlDataTypeOption.Float;
            }
            bool flag = false;
            if (this.LA(1) == 191 && (this.LA(2) == 221 || this.LA(2) == 232)) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(191);
                    switch (this.LA(1)) {
                        case 221:
                            this.integer();
                            break;
                        case 232:
                            this.match(232);
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                this.match(191);
                switch (this.LA(1)) {
                    case 232: {
                            Literal item = this.max();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(sqlDataTypeReference, sqlDataTypeReference.Parameters, item);
                            }
                            break;
                        }
                    case 221: {
                            Literal item = this.integer();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(sqlDataTypeReference, sqlDataTypeReference.Parameters, item);
                            }
                            break;
                        }
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                token3 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(sqlDataTypeReference, token3);
                }
                goto IL_020f;
            }
            if (TSql140ParserInternal.tokenSet_0_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_1_.member(this.LA(2))) {
                goto IL_020f;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_020f:
            return sqlDataTypeReference;
        }

        public SqlDataTypeReference sqlDataTypeWithNational() {
            SqlDataTypeReference sqlDataTypeReference = base.FragmentFactory.CreateFragment<SqlDataTypeReference>();
            IToken token = null;
            IToken token2 = null;
            bool isVarying = false;
            token = this.LT(1);
            this.match(96);
            SchemaObjectName schemaObjectName = this.dataTypeSchemaObjectName();
            if (base.inputState.guessing == 0) {
                sqlDataTypeReference.SqlDataTypeOption = TSql100ParserBaseInternal.ParseDataType100(schemaObjectName.BaseIdentifier.Value);
                if (sqlDataTypeReference.SqlDataTypeOption == SqlDataTypeOption.None || (schemaObjectName.SchemaIdentifier != null && !TSql90ParserBaseInternal.IsSys(schemaObjectName.SchemaIdentifier))) {
                    TSql80ParserBaseInternal.ThrowParseErrorException("SQL46003", token, TSqlParserResource.SQL46003Message, TSqlParserResource.UserDefined);
                }
                sqlDataTypeReference.Name = schemaObjectName;
                TSql80ParserBaseInternal.UpdateTokenInfo(sqlDataTypeReference, token);
                sqlDataTypeReference.UpdateTokenInfo(schemaObjectName);
            }
            int num = this.LA(1);
            if (num <= 92) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 9:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 21:
                    case 22:
                    case 23:
                    case 26:
                    case 28:
                    case 30:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 67:
                    case 68:
                    case 74:
                    case 75:
                    case 79:
                    case 82:
                    case 84:
                    case 86:
                    case 92:
                        goto IL_0405;
                }
            } else {
                switch (num) {
                    case 165:
                        token2 = this.LT(1);
                        this.match(165);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(sqlDataTypeReference, token2);
                            isVarying = true;
                        }
                        goto IL_0405;
                    case 95:
                    case 99:
                    case 100:
                    case 106:
                    case 118:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 127:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 136:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 175:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 198:
                    case 204:
                    case 206:
                    case 219:
                    case 220:
                    case 230:
                    case 231:
                    case 232:
                    case 233:
                    case 234:
                        goto IL_0405;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0405:
            this.dataTypeParametersOpt(sqlDataTypeReference);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.ProcessNationalAndVarying(sqlDataTypeReference, token, isVarying);
                TSql80ParserBaseInternal.CheckSqlDataTypeParameters(sqlDataTypeReference);
            }
            return sqlDataTypeReference;
        }

        public void dataTypeParametersOpt(ParameterizedDataTypeReference vParent) {
            IToken token = null;
            bool flag = false;
            if (this.LA(1) == 191 && (this.LA(2) == 221 || this.LA(2) == 232)) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.match(191);
                    switch (this.LA(1)) {
                        case 221:
                            this.integer();
                            break;
                        case 232:
                            this.match(232);
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                this.match(191);
                switch (this.LA(1)) {
                    case 232: {
                            Literal item = this.max();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Parameters, item);
                            }
                            break;
                        }
                    case 221: {
                            Literal item = this.integer();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Parameters, item);
                            }
                            switch (this.LA(1)) {
                                case 198:
                                    this.match(198);
                                    item = this.integer();
                                    if (base.inputState.guessing == 0) {
                                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Parameters, item);
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this.LT(1), this.getFilename());
                                case 192:
                                    break;
                            }
                            break;
                        }
                    default:
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                token = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                }
                return;
            }
            if (TSql140ParserInternal.tokenSet_0_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_1_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public MaxLiteral max() {
            MaxLiteral maxLiteral = base.FragmentFactory.CreateFragment<MaxLiteral>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "MAX");
                TSql80ParserBaseInternal.UpdateTokenInfo(maxLiteral, token);
                maxLiteral.Value = token.getText();
            }
            return maxLiteral;
        }

        public void identifierListElement(List<Identifier> vParent, int vMaxNumber, bool first) {
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(200);
            Identifier emptyIdentifier;
            if (base.inputState.guessing == 0 && first) {
                emptyIdentifier = base.GetEmptyIdentifier(token);
                TSql80ParserBaseInternal.AddIdentifierToListWithCheck(vParent, emptyIdentifier, vMaxNumber);
            }
            while (true) {
                if (this.LA(1) != 200) {
                    break;
                }
                token2 = this.LT(1);
                this.match(200);
                if (base.inputState.guessing == 0) {
                    emptyIdentifier = base.GetEmptyIdentifier(token2);
                    TSql80ParserBaseInternal.AddIdentifierToListWithCheck(vParent, emptyIdentifier, vMaxNumber);
                }
            }
            emptyIdentifier = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddIdentifierToListWithCheck(vParent, emptyIdentifier, vMaxNumber);
            }
        }

        public MultiPartIdentifier nonEmptyThreePartObjectName() {
            MultiPartIdentifier multiPartIdentifier = base.FragmentFactory.CreateFragment<MultiPartIdentifier>();
            Identifier item = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(multiPartIdentifier, multiPartIdentifier.Identifiers, item);
            }
            this.match(200);
            item = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(multiPartIdentifier, multiPartIdentifier.Identifiers, item);
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 1:
                    case 4:
                    case 6:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 60:
                    case 61:
                    case 64:
                    case 74:
                    case 75:
                    case 82:
                    case 86:
                    case 92:
                    case 95:
                        goto IL_0311;
                }
            } else {
                switch (num) {
                    case 200:
                        this.match(200);
                        item = this.identifier();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(multiPartIdentifier, multiPartIdentifier.Identifiers, item);
                        }
                        goto IL_0311;
                    case 106:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 156:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 182:
                    case 191:
                    case 192:
                    case 198:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0311;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0311:
            return multiPartIdentifier;
        }

        public MultiPartIdentifier oneOrTwoOrThreePartObjectName() {
            MultiPartIdentifier multiPartIdentifier = base.FragmentFactory.CreateFragment<MultiPartIdentifier>();
            Identifier item = this.identifier();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(multiPartIdentifier, multiPartIdentifier.Identifiers, item);
            }
            switch (this.LA(1)) {
                case 200:
                    this.match(200);
                    item = this.identifier();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(multiPartIdentifier, multiPartIdentifier.Identifiers, item);
                    }
                    switch (this.LA(1)) {
                        case 200:
                            this.match(200);
                            item = this.identifier();
                            if (base.inputState.guessing == 0) {
                                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(multiPartIdentifier, multiPartIdentifier.Identifiers, item);
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                        case 188:
                        case 191:
                        case 198:
                        case 205:
                        case 206:
                        case 208:
                            break;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 188:
                case 191:
                case 198:
                case 205:
                case 206:
                case 208:
                    break;
            }
            return multiPartIdentifier;
        }

        public BooleanExpression booleanExpressionOr(ExpressionFlags expressionFlags) {
            BooleanExpression result = null;
            result = this.booleanExpressionAnd(expressionFlags);
            while (true) {
                if (this.LA(1) != 112) {
                    break;
                }
                this.match(112);
                BooleanExpression expression = this.booleanExpressionAnd(expressionFlags);
                if (base.inputState.guessing == 0) {
                    base.AddBinaryExpression(ref result, expression, BooleanBinaryExpressionType.Or);
                }
            }
            return result;
        }

        public BooleanExpression booleanExpressionAnd(ExpressionFlags expressionFlags) {
            BooleanExpression result = null;
            result = this.booleanExpressionUnary(expressionFlags);
            while (true) {
                if (this.LA(1) != 7) {
                    break;
                }
                this.match(7);
                BooleanExpression expression = this.booleanExpressionUnary(expressionFlags);
                if (base.inputState.guessing == 0) {
                    base.AddBinaryExpression(ref result, expression, BooleanBinaryExpressionType.And);
                }
            }
            return result;
        }

        public BooleanExpression booleanExpressionUnary(ExpressionFlags expressionFlags) {
            BooleanExpression result = null;
            IToken token = null;
            switch (this.LA(1)) {
                case 99: {
                        token = this.LT(1);
                        this.match(99);
                        BooleanExpression expression = this.booleanExpressionUnary(expressionFlags);
                        if (base.inputState.guessing == 0) {
                            BooleanNotExpression booleanNotExpression = base.FragmentFactory.CreateFragment<BooleanNotExpression>();
                            result = booleanNotExpression;
                            TSql80ParserBaseInternal.UpdateTokenInfo(booleanNotExpression, token);
                            booleanNotExpression.Expression = expression;
                        }
                        break;
                    }
                case 20:
                case 25:
                case 31:
                case 34:
                case 40:
                case 41:
                case 62:
                case 69:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 157:
                case 160:
                case 163:
                case 187:
                case 191:
                case 193:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                    result = this.booleanExpressionPrimary(expressionFlags);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public BooleanExpression booleanExpressionPrimary(ExpressionFlags expressionFlags) {
            BooleanExpression booleanExpression = null;
            IToken token = null;
            IToken token2 = null;
            bool vNotDefined = false;
            BooleanComparisonType booleanComparisonType = BooleanComparisonType.Equals;
            switch (this.LA(1)) {
                case 31:
                case 69:
                    booleanExpression = this.fulltextPredicate();
                    break;
                case 62:
                    booleanExpression = this.existsPredicate(expressionFlags);
                    break;
                case 157:
                    booleanExpression = this.tsEqualCall();
                    break;
                case 160:
                    booleanExpression = this.updateCall();
                    break;
                default:
                    if (this.LA(1) == 191 && TSql140ParserInternal.tokenSet_140_.member(this.LA(2)) && base.IsNextRuleBooleanParenthesis()) {
                        booleanExpression = this.booleanExpressionParenthesis(expressionFlags);
                        break;
                    }
                    if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("MATCH")) {
                        token = this.LT(1);
                        this.match(232);
                        this.match(191);
                        BooleanExpression expression = this.graphMatchPattern();
                        this.match(192);
                        if (base.inputState.guessing == 0) {
                            if (ExpressionFlags.MatchClauseAllowed != (expressionFlags & ExpressionFlags.MatchClauseAllowed)) {
                                TSql80ParserBaseInternal.ThrowParseErrorException("SQL46010", token, TSqlParserResource.SQL46010Message, "MATCH");
                            }
                            GraphMatchPredicate graphMatchPredicate = base.FragmentFactory.CreateFragment<GraphMatchPredicate>();
                            TSql80ParserBaseInternal.UpdateTokenInfo(graphMatchPredicate, token);
                            graphMatchPredicate.Expression = expression;
                            booleanExpression = graphMatchPredicate;
                        }
                        break;
                    }
                    if (TSql140ParserInternal.tokenSet_42_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_180_.member(this.LA(2))) {
                        ScalarExpression vExpressionFirst = this.expressionWithFlags(expressionFlags);
                        switch (this.LA(1)) {
                            case 188:
                            case 205:
                            case 206:
                            case 208:
                                booleanComparisonType = this.comparisonOperator();
                                switch (this.LA(1)) {
                                    case 20:
                                    case 25:
                                    case 34:
                                    case 40:
                                    case 41:
                                    case 81:
                                    case 93:
                                    case 100:
                                    case 101:
                                    case 133:
                                    case 136:
                                    case 141:
                                    case 147:
                                    case 163:
                                    case 187:
                                    case 191:
                                    case 193:
                                    case 197:
                                    case 199:
                                    case 200:
                                    case 211:
                                    case 221:
                                    case 222:
                                    case 223:
                                    case 224:
                                    case 225:
                                    case 227:
                                    case 228:
                                    case 230:
                                    case 231:
                                    case 232:
                                    case 233:
                                    case 234:
                                    case 235:
                                        booleanExpression = this.comparisonPredicate(vExpressionFirst, booleanComparisonType, expressionFlags);
                                        break;
                                    case 5:
                                    case 8:
                                    case 145:
                                        booleanExpression = this.subqueryComparisonPredicate(vExpressionFirst, booleanComparisonType, expressionFlags);
                                        break;
                                    default:
                                        throw new NoViableAltException(this.LT(1), this.getFilename());
                                }
                                break;
                            case 89:
                                booleanExpression = this.nullPredicate(vExpressionFirst);
                                break;
                            case 14:
                            case 83:
                            case 94:
                            case 99:
                                switch (this.LA(1)) {
                                    case 99:
                                        token2 = this.LT(1);
                                        this.match(99);
                                        if (base.inputState.guessing == 0) {
                                            vNotDefined = true;
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this.LT(1), this.getFilename());
                                    case 14:
                                    case 83:
                                    case 94:
                                        break;
                                }
                                switch (this.LA(1)) {
                                    case 83:
                                        booleanExpression = this.inPredicate(vExpressionFirst, vNotDefined, expressionFlags);
                                        break;
                                    case 14:
                                        booleanExpression = this.betweenPredicate(vExpressionFirst, vNotDefined, expressionFlags);
                                        break;
                                    case 94:
                                        booleanExpression = this.likePredicate(vExpressionFirst, vNotDefined, expressionFlags);
                                        break;
                                    default:
                                        throw new NoViableAltException(this.LT(1), this.getFilename());
                                }
                                if (base.inputState.guessing == 0 && token2 != null) {
                                    TSql80ParserBaseInternal.UpdateTokenInfo(booleanExpression, token2);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                        }
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return booleanExpression;
        }

        public BooleanParenthesisExpression booleanExpressionParenthesis(ExpressionFlags expressionFlags) {
            BooleanParenthesisExpression booleanParenthesisExpression = base.FragmentFactory.CreateFragment<BooleanParenthesisExpression>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(191);
            BooleanExpression expression = this.booleanExpressionWithFlags(expressionFlags);
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(booleanParenthesisExpression, token);
                booleanParenthesisExpression.Expression = expression;
                TSql80ParserBaseInternal.UpdateTokenInfo(booleanParenthesisExpression, token2);
            }
            return booleanParenthesisExpression;
        }

        public BooleanExpression graphMatchPattern() {
            BooleanExpression result = null;
            this.graphCompositeMatchPattern(ref result);
            while (true) {
                if (this.LA(1) != 7) {
                    break;
                }
                this.match(7);
                this.graphCompositeMatchPattern(ref result);
            }
            return result;
        }

        public BooleanComparisonExpression comparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags) {
            BooleanComparisonExpression booleanComparisonExpression = base.FragmentFactory.CreateFragment<BooleanComparisonExpression>();
            ScalarExpression secondExpression = this.expressionWithFlags(expressionFlags);
            if (base.inputState.guessing == 0) {
                booleanComparisonExpression.ComparisonType = vType;
                booleanComparisonExpression.FirstExpression = vExpressionFirst;
                booleanComparisonExpression.SecondExpression = secondExpression;
            }
            return booleanComparisonExpression;
        }

        public SubqueryComparisonPredicate subqueryComparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags) {
            SubqueryComparisonPredicate subqueryComparisonPredicate = base.FragmentFactory.CreateFragment<SubqueryComparisonPredicate>();
            SubqueryComparisonPredicateType subqueryComparisonPredicateType = SubqueryComparisonPredicateType.None;
            subqueryComparisonPredicateType = this.subqueryComparisonPredicateType();
            ScalarSubquery subquery = this.subquery(SubDmlFlags.SelectNotForInsert, expressionFlags);
            if (base.inputState.guessing == 0) {
                subqueryComparisonPredicate.ComparisonType = vType;
                subqueryComparisonPredicate.Expression = vExpressionFirst;
                subqueryComparisonPredicate.SubqueryComparisonPredicateType = subqueryComparisonPredicateType;
                subqueryComparisonPredicate.Subquery = subquery;
            }
            return subqueryComparisonPredicate;
        }

        public InPredicate inPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags) {
            InPredicate inPredicate = base.FragmentFactory.CreateFragment<InPredicate>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(83);
            if (base.inputState.guessing == 0) {
                if (vNotDefined) {
                    inPredicate.NotDefined = true;
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(inPredicate, token);
                inPredicate.Expression = vExpressionFirst;
            }
            if (this.LA(1) == 191 && (this.LA(2) == 140 || this.LA(2) == 191) && base.IsNextRuleSelectParenthesis()) {
                ScalarSubquery subquery = this.subquery(SubDmlFlags.SelectNotForInsert, expressionFlags);
                if (base.inputState.guessing == 0) {
                    inPredicate.Subquery = subquery;
                }
                goto IL_010b;
            }
            if (this.LA(1) == 191 && TSql140ParserInternal.tokenSet_42_.member(this.LA(2))) {
                this.match(191);
                this.expressionList(inPredicate, inPredicate.Values);
                token2 = this.LT(1);
                this.match(192);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.UpdateTokenInfo(inPredicate, token2);
                }
                goto IL_010b;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_010b:
            return inPredicate;
        }

        public BooleanTernaryExpression betweenPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags) {
            BooleanTernaryExpression booleanTernaryExpression = base.FragmentFactory.CreateFragment<BooleanTernaryExpression>();
            IToken token = null;
            token = this.LT(1);
            this.match(14);
            ScalarExpression secondExpression = this.expressionWithFlags(expressionFlags);
            if (base.inputState.guessing == 0) {
                booleanTernaryExpression.SecondExpression = secondExpression;
            }
            this.match(7);
            secondExpression = this.expressionWithFlags(expressionFlags);
            if (base.inputState.guessing == 0) {
                booleanTernaryExpression.ThirdExpression = secondExpression;
                if (vNotDefined) {
                    booleanTernaryExpression.TernaryExpressionType = BooleanTernaryExpressionType.NotBetween;
                } else {
                    booleanTernaryExpression.TernaryExpressionType = BooleanTernaryExpressionType.Between;
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(booleanTernaryExpression, token);
                booleanTernaryExpression.FirstExpression = vExpressionFirst;
            }
            return booleanTernaryExpression;
        }

        public LikePredicate likePredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags) {
            LikePredicate likePredicate = base.FragmentFactory.CreateFragment<LikePredicate>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(94);
            if (base.inputState.guessing == 0) {
                if (vNotDefined) {
                    likePredicate.NotDefined = true;
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(likePredicate, token);
                likePredicate.FirstExpression = vExpressionFirst;
            }
            ScalarExpression secondExpression = this.expressionWithFlags(expressionFlags);
            if (base.inputState.guessing == 0) {
                likePredicate.SecondExpression = secondExpression;
            }
            int num = this.LA(1);
            if (num <= 95) {
                switch (num) {
                    case 58:
                        this.escapeExpression(likePredicate, expressionFlags);
                        goto IL_0421;
                    case 1:
                    case 4:
                    case 6:
                    case 7:
                    case 12:
                    case 13:
                    case 15:
                    case 17:
                    case 22:
                    case 23:
                    case 28:
                    case 33:
                    case 35:
                    case 36:
                    case 44:
                    case 45:
                    case 46:
                    case 48:
                    case 49:
                    case 54:
                    case 55:
                    case 56:
                    case 59:
                    case 60:
                    case 61:
                    case 64:
                    case 67:
                    case 72:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 82:
                    case 85:
                    case 86:
                    case 87:
                    case 90:
                    case 92:
                    case 93:
                    case 95:
                        goto IL_0421;
                }
            } else {
                switch (num) {
                    case 193:
                        this.match(193);
                        if (base.inputState.guessing == 0) {
                            likePredicate.OdbcEscape = true;
                        }
                        this.escapeExpression(likePredicate, expressionFlags);
                        token2 = this.LT(1);
                        this.match(194);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(likePredicate, token2);
                        }
                        goto IL_0421;
                    case 105:
                    case 106:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 119:
                    case 123:
                    case 125:
                    case 126:
                    case 129:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 138:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 150:
                    case 156:
                    case 158:
                    case 160:
                    case 161:
                    case 162:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 176:
                    case 177:
                    case 178:
                    case 182:
                    case 191:
                    case 192:
                    case 194:
                    case 198:
                    case 204:
                    case 219:
                    case 220:
                    case 232:
                        goto IL_0421;
                }
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0421:
            return likePredicate;
        }

        public FullTextPredicate fulltextPredicate() {
            FullTextPredicate fullTextPredicate = base.FragmentFactory.CreateFragment<FullTextPredicate>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            switch (this.LA(1)) {
                case 31:
                    token = this.LT(1);
                    this.match(31);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(fullTextPredicate, token);
                        fullTextPredicate.FullTextFunctionType = FullTextFunctionType.Contains;
                    }
                    break;
                case 69:
                    token2 = this.LT(1);
                    this.match(69);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(fullTextPredicate, token2);
                        fullTextPredicate.FullTextFunctionType = FullTextFunctionType.FreeText;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            this.match(191);
            if (TSql140ParserInternal.tokenSet_181_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_182_.member(this.LA(2))) {
                ColumnReferenceExpression item = this.fulltextColumn();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(fullTextPredicate, fullTextPredicate.Columns, item);
                }
                goto IL_0311;
            }
            if (this.LA(1) == 191) {
                this.match(191);
                bool flag = false;
                if (TSql140ParserInternal.tokenSet_107_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_183_.member(this.LA(2))) {
                    int pos = this.mark();
                    flag = true;
                    base.inputState.guessing++;
                    try {
                        this.starColumn();
                    } catch (RecognitionException) {
                        flag = false;
                    }
                    this.rewind(pos);
                    base.inputState.guessing--;
                }
                if (flag) {
                    ColumnReferenceExpression item = this.starColumn();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(fullTextPredicate, fullTextPredicate.Columns, item);
                    }
                    goto IL_024b;
                }
                if (TSql140ParserInternal.tokenSet_36_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_184_.member(this.LA(2))) {
                    ColumnReferenceExpression item = this.column();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(fullTextPredicate, fullTextPredicate.Columns, item);
                    }
                    while (true) {
                        if (this.LA(1) != 198) {
                            break;
                        }
                        this.match(198);
                        item = this.column();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(fullTextPredicate, fullTextPredicate.Columns, item);
                        }
                    }
                    goto IL_024b;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (this.LA(1) == 232 && this.LA(2) == 191) {
                token3 = this.LT(1);
                this.match(232);
                this.match(191);
                ColumnReferenceExpression item = this.identifierColumnReferenceExpression();
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.Match(token3, "PROPERTY");
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(fullTextPredicate, fullTextPredicate.Columns, item);
                }
                this.match(198);
                StringLiteral propertyName = this.stringLiteral();
                this.match(192);
                if (base.inputState.guessing == 0) {
                    fullTextPredicate.PropertyName = propertyName;
                }
                goto IL_0311;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0311:
            this.match(198);
            ValueExpression value = this.stringOrVariable();
            if (base.inputState.guessing == 0) {
                fullTextPredicate.Value = value;
            }
            switch (this.LA(1)) {
                case 198: {
                        this.match(198);
                        ValueExpression languageTerm = this.languageExpression();
                        if (base.inputState.guessing == 0) {
                            fullTextPredicate.LanguageTerm = languageTerm;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token4 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(fullTextPredicate, token4);
            }
            return fullTextPredicate;
            IL_024b:
            this.match(192);
            goto IL_0311;
        }

        public ExistsPredicate existsPredicate(ExpressionFlags expressionFlags) {
            ExistsPredicate existsPredicate = base.FragmentFactory.CreateFragment<ExistsPredicate>();
            this.match(62);
            ScalarSubquery subquery = this.subquery(SubDmlFlags.SelectNotForInsert, expressionFlags);
            if (base.inputState.guessing == 0) {
                existsPredicate.Subquery = subquery;
            }
            return existsPredicate;
        }

        public TSEqualCall tsEqualCall() {
            TSEqualCall tSEqualCall = base.FragmentFactory.CreateFragment<TSEqualCall>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(157);
            this.match(191);
            ScalarExpression firstExpression = this.expression();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tSEqualCall, token);
                tSEqualCall.FirstExpression = firstExpression;
            }
            this.match(198);
            firstExpression = this.expression();
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                tSEqualCall.SecondExpression = firstExpression;
                TSql80ParserBaseInternal.UpdateTokenInfo(tSEqualCall, token2);
            }
            return tSEqualCall;
        }

        public UpdateCall updateCall() {
            UpdateCall updateCall = base.FragmentFactory.CreateFragment<UpdateCall>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(160);
            this.match(191);
            Identifier identifier = this.identifier();
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(updateCall, token);
                updateCall.Identifier = identifier;
                TSql80ParserBaseInternal.UpdateTokenInfo(updateCall, token2);
            }
            return updateCall;
        }

        public void graphCompositeMatchPattern(ref BooleanExpression vResult) {
            Identifier vLeftNode = this.identifier();
            GraphMatchExpression graphMatchExpression = this.graphSingleMatchPattern(vLeftNode);
            if (base.inputState.guessing == 0) {
                vLeftNode = graphMatchExpression.RightNode;
                if (vResult == null) {
                    vResult = graphMatchExpression;
                } else {
                    base.AddBinaryExpression(ref vResult, (BooleanExpression)graphMatchExpression, BooleanBinaryExpressionType.And);
                }
            }
            while (true) {
                if (this.LA(1) != 199 && this.LA(1) != 205) {
                    break;
                }
                graphMatchExpression = this.graphSingleMatchPattern(vLeftNode);
                if (base.inputState.guessing == 0) {
                    base.AddBinaryExpression(ref vResult, (BooleanExpression)graphMatchExpression, BooleanBinaryExpressionType.And);
                    vLeftNode = graphMatchExpression.RightNode;
                }
            }
        }

        public GraphMatchExpression graphSingleMatchPattern(Identifier vLeftNode) {
            GraphMatchExpression graphMatchExpression = base.FragmentFactory.CreateFragment<GraphMatchExpression>();
            bool arrowOnRight = true;
            Identifier edge;
            Identifier rightNode;
            switch (this.LA(1)) {
                case 199:
                    this.match(199);
                    this.match(191);
                    edge = this.identifier();
                    this.match(192);
                    this.match(199);
                    this.match(208);
                    rightNode = this.identifier();
                    if (base.inputState.guessing == 0) {
                        arrowOnRight = true;
                    }
                    break;
                case 205:
                    this.match(205);
                    this.match(199);
                    this.match(191);
                    edge = this.identifier();
                    this.match(192);
                    this.match(199);
                    rightNode = this.identifier();
                    if (base.inputState.guessing == 0) {
                        arrowOnRight = false;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                graphMatchExpression.LeftNode = vLeftNode;
                graphMatchExpression.Edge = edge;
                graphMatchExpression.RightNode = rightNode;
                graphMatchExpression.ArrowOnRight = arrowOnRight;
            }
            return graphMatchExpression;
        }

        public ColumnReferenceExpression fulltextColumn() {
            ColumnReferenceExpression columnReferenceExpression = null;
            bool flag = false;
            if (TSql140ParserInternal.tokenSet_107_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_182_.member(this.LA(2))) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.starColumn();
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                return this.starColumn();
            }
            if (TSql140ParserInternal.tokenSet_36_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_182_.member(this.LA(2))) {
                return this.column();
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public ColumnReferenceExpression starColumn() {
            ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
            IToken token = null;
            IToken token2 = null;
            columnReferenceExpression.ColumnType = ColumnType.Wildcard;
            switch (this.LA(1)) {
                case 200:
                case 232:
                case 233: {
                        MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
                        if (base.inputState.guessing == 0) {
                            columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
                        }
                        this.match(200);
                        token = this.LT(1);
                        this.match(195);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.UpdateTokenInfo(columnReferenceExpression, token);
                            columnReferenceExpression.ColumnType = ColumnType.Wildcard;
                        }
                        break;
                    }
                case 195:
                    token2 = this.LT(1);
                    this.match(195);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(columnReferenceExpression, token2);
                        columnReferenceExpression.ColumnType = ColumnType.Wildcard;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.CheckSpecialColumn(columnReferenceExpression);
                TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, false);
            }
            return columnReferenceExpression;
        }

        public SubqueryComparisonPredicateType subqueryComparisonPredicateType() {
            SubqueryComparisonPredicateType result = SubqueryComparisonPredicateType.None;
            switch (this.LA(1)) {
                case 5:
                    this.match(5);
                    if (base.inputState.guessing == 0) {
                        result = SubqueryComparisonPredicateType.All;
                    }
                    break;
                case 8:
                    this.match(8);
                    if (base.inputState.guessing == 0) {
                        result = SubqueryComparisonPredicateType.Any;
                    }
                    break;
                case 145:
                    this.match(145);
                    if (base.inputState.guessing == 0) {
                        result = SubqueryComparisonPredicateType.Any;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public void escapeExpression(LikePredicate vParent, ExpressionFlags expressionFlags) {
            this.match(58);
            ScalarExpression escapeExpression = this.expressionWithFlags(expressionFlags);
            if (base.inputState.guessing == 0) {
                vParent.EscapeExpression = escapeExpression;
            }
        }

        public ScalarExpression expressionBinaryPri2(ExpressionFlags expressionFlags) {
            ScalarExpression scalarExpression = null;
            scalarExpression = this.expressionBinaryPri1(expressionFlags);
            while (true) {
                switch (this.LA(1)) {
                    case 197: {
                            this.match(197);
                            ScalarExpression timeZone = this.expressionBinaryPri1(expressionFlags);
                            if (base.inputState.guessing == 0) {
                                base.AddBinaryExpression(ref scalarExpression, timeZone, BinaryExpressionType.Add);
                            }
                            break;
                        }
                    case 199: {
                            this.match(199);
                            ScalarExpression timeZone = this.expressionBinaryPri1(expressionFlags);
                            if (base.inputState.guessing == 0) {
                                base.AddBinaryExpression(ref scalarExpression, timeZone, BinaryExpressionType.Subtract);
                            }
                            break;
                        }
                    case 190: {
                            this.match(190);
                            ScalarExpression timeZone = this.expressionBinaryPri1(expressionFlags);
                            if (base.inputState.guessing == 0) {
                                base.AddBinaryExpression(ref scalarExpression, timeZone, BinaryExpressionType.BitwiseAnd);
                            }
                            break;
                        }
                    case 210: {
                            this.match(210);
                            ScalarExpression timeZone = this.expressionBinaryPri1(expressionFlags);
                            if (base.inputState.guessing == 0) {
                                base.AddBinaryExpression(ref scalarExpression, timeZone, BinaryExpressionType.BitwiseOr);
                            }
                            break;
                        }
                    case 209: {
                            this.match(209);
                            ScalarExpression timeZone = this.expressionBinaryPri1(expressionFlags);
                            if (base.inputState.guessing == 0) {
                                base.AddBinaryExpression(ref scalarExpression, timeZone, BinaryExpressionType.BitwiseXor);
                            }
                            break;
                        }
                    default:
                        if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("AT") && base.NextTokenMatches("TIME", 2) && base.NextTokenMatches("ZONE", 3)) {
                            this.LT(1);
                            this.match(232);
                            this.LT(1);
                            this.match(232);
                            this.LT(1);
                            this.match(232);
                            ScalarExpression timeZone = this.expressionBinaryPri1(expressionFlags);
                            if (base.inputState.guessing == 0) {
                                AtTimeZoneCall atTimeZoneCall = base.FragmentFactory.CreateFragment<AtTimeZoneCall>();
                                atTimeZoneCall.DateValue = scalarExpression;
                                atTimeZoneCall.TimeZone = timeZone;
                                scalarExpression = atTimeZoneCall;
                            }
                            break;
                        }
                        return scalarExpression;
                }
            }
        }

        public ScalarExpression expressionBinaryPri1(ExpressionFlags expressionFlags) {
            ScalarExpression result = null;
            result = this.expressionUnary(expressionFlags);
            while (true) {
                switch (this.LA(1)) {
                    case 195: {
                            this.match(195);
                            ScalarExpression expression = this.expressionUnary(expressionFlags);
                            if (base.inputState.guessing == 0) {
                                base.AddBinaryExpression(ref result, expression, BinaryExpressionType.Multiply);
                            }
                            break;
                        }
                    case 201: {
                            this.match(201);
                            ScalarExpression expression = this.expressionUnary(expressionFlags);
                            if (base.inputState.guessing == 0) {
                                base.AddBinaryExpression(ref result, expression, BinaryExpressionType.Divide);
                            }
                            break;
                        }
                    case 189: {
                            this.match(189);
                            ScalarExpression expression = this.expressionUnary(expressionFlags);
                            if (base.inputState.guessing == 0) {
                                base.AddBinaryExpression(ref result, expression, BinaryExpressionType.Modulo);
                            }
                            break;
                        }
                    default:
                        return result;
                }
            }
        }

        public ScalarExpression expressionUnary(ExpressionFlags expressionFlags) {
            ScalarExpression result = null;
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            ScalarExpression scalarExpression = null;
            UnaryExpression unaryExpression = null;
            switch (this.LA(1)) {
                case 197:
                case 199:
                case 211:
                    switch (this.LA(1)) {
                        case 197:
                            token = this.LT(1);
                            this.match(197);
                            if (base.inputState.guessing == 0) {
                                unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
                                TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token);
                                unaryExpression.UnaryExpressionType = UnaryExpressionType.Positive;
                            }
                            break;
                        case 199:
                            token2 = this.LT(1);
                            this.match(199);
                            if (base.inputState.guessing == 0) {
                                unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
                                TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token2);
                                unaryExpression.UnaryExpressionType = UnaryExpressionType.Negative;
                            }
                            break;
                        case 211:
                            token3 = this.LT(1);
                            this.match(211);
                            if (base.inputState.guessing == 0) {
                                unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
                                TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token3);
                                unaryExpression.UnaryExpressionType = UnaryExpressionType.BitwiseNot;
                            }
                            break;
                        default:
                            throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    scalarExpression = this.expressionUnary(expressionFlags);
                    if (base.inputState.guessing == 0) {
                        result = unaryExpression;
                        unaryExpression.Expression = scalarExpression;
                    }
                    break;
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 163:
                case 187:
                case 191:
                case 193:
                case 200:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                    result = this.expressionWithClrElements(expressionFlags);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return result;
        }

        public PrimaryExpression expressionWithClrElements(ExpressionFlags expressionFlags) {
            FunctionCall functionCall = null;
            ExpressionCallTarget expressionCallTarget = null;
            bool flag = false;
            if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_185_.member(this.LA(2))) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.schemaObjectTwoPartName();
                    this.match(203);
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            PrimaryExpression primaryExpression;
            if (flag) {
                primaryExpression = this.udtExpression();
                goto IL_00e7;
            }
            if (TSql140ParserInternal.tokenSet_186_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_187_.member(this.LA(2))) {
                primaryExpression = this.expressionPrimary(expressionFlags);
                goto IL_00e7;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_00e7:
            while (true) {
                if (this.LA(1) != 200) {
                    break;
                }
                this.match(200);
                Identifier identifier = this.identifier();
                if (base.inputState.guessing == 0) {
                    expressionCallTarget = base.FragmentFactory.CreateFragment<ExpressionCallTarget>();
                    expressionCallTarget.Expression = primaryExpression;
                }
                bool flag2 = false;
                if (this.LA(1) == 191 && TSql140ParserInternal.tokenSet_133_.member(this.LA(2))) {
                    int pos2 = this.mark();
                    flag2 = true;
                    base.inputState.guessing++;
                    try {
                        this.match(191);
                    } catch (RecognitionException) {
                        flag2 = false;
                    }
                    this.rewind(pos2);
                    base.inputState.guessing--;
                }
                if (flag2) {
                    functionCall = this.expressionWithClrElementsFunctionCallPart();
                    if (base.inputState.guessing == 0) {
                        functionCall.CallTarget = expressionCallTarget;
                        functionCall.FunctionName = identifier;
                        primaryExpression = functionCall;
                    }
                    this.collationOpt(primaryExpression);
                    continue;
                }
                if (TSql140ParserInternal.tokenSet_188_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_105_.member(this.LA(2))) {
                    if (base.inputState.guessing == 0) {
                        UserDefinedTypePropertyAccess userDefinedTypePropertyAccess = base.FragmentFactory.CreateFragment<UserDefinedTypePropertyAccess>();
                        userDefinedTypePropertyAccess.CallTarget = expressionCallTarget;
                        userDefinedTypePropertyAccess.PropertyName = identifier;
                        primaryExpression = userDefinedTypePropertyAccess;
                    }
                    this.collationOpt(primaryExpression);
                    continue;
                }
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return primaryExpression;
        }

        public PrimaryExpression udtExpression() {
            UserDefinedTypeCallTarget vCallTarget = this.userDefinedTypeCallTarget();
            bool flag = false;
            if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 191) {
                int pos = this.mark();
                flag = true;
                base.inputState.guessing++;
                try {
                    this.identifier();
                    this.match(191);
                } catch (RecognitionException) {
                    flag = false;
                }
                this.rewind(pos);
                base.inputState.guessing--;
            }
            if (flag) {
                return this.udtFunctionExpression(vCallTarget);
            }
            if ((this.LA(1) == 232 || this.LA(1) == 233) && TSql140ParserInternal.tokenSet_188_.member(this.LA(2))) {
                return this.udtPropertyExpression(vCallTarget);
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
        }

        public PrimaryExpression expressionPrimary(ExpressionFlags expressionFlags) {
            PrimaryExpression primaryExpression = null;
            switch (this.LA(1)) {
                case 235:
                    this.odbcInitiator();
                    break;
                case 93:
                    primaryExpression = this.leftFunctionCall();
                    break;
                case 133:
                    primaryExpression = this.rightFunctionCall();
                    break;
                case 101:
                    primaryExpression = this.nullIfExpression(expressionFlags);
                    break;
                case 25:
                    primaryExpression = this.coalesceExpression(expressionFlags);
                    break;
                case 20:
                    primaryExpression = this.caseExpression(expressionFlags);
                    break;
                case 34:
                    primaryExpression = this.convertCall();
                    break;
                case 187:
                    primaryExpression = this.tryConvertCall();
                    break;
                case 40:
                case 41:
                case 141:
                case 147:
                case 163:
                    primaryExpression = this.parameterlessCall();
                    break;
                case 191:
                    primaryExpression = this.parenthesisDisambiguatorForExpressions(expressionFlags);
                    break;
                default: {
                        if (this.LA(1) == 193 && this.LA(2) == 232 && this.LA(1) == 193 && base.NextTokenMatches("FN", 2)) {
                            primaryExpression = this.odbcFunctionCall();
                            break;
                        }
                        if (TSql140ParserInternal.tokenSet_189_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_188_.member(this.LA(2))) {
                            primaryExpression = this.literal();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("CAST") && this.LA(2) == 191) {
                            primaryExpression = this.castCall();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("TRY_CAST") && this.LA(2) == 191) {
                            primaryExpression = this.tryCastCall();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("PARSE") && this.LA(2) == 191) {
                            primaryExpression = this.parseCall();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("TRY_PARSE") && this.LA(2) == 191) {
                            primaryExpression = this.tryParseCall();
                            break;
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("IIF") && this.LA(2) == 191) {
                            primaryExpression = this.iIfCall();
                            break;
                        }
                        bool flag = false;
                        if (this.LA(1) == 232 && this.LA(2) == 191) {
                            int pos = this.mark();
                            flag = true;
                            base.inputState.guessing++;
                            try {
                                this.match(232);
                                this.match(191);
                            } catch (RecognitionException) {
                                flag = false;
                            }
                            this.rewind(pos);
                            base.inputState.guessing--;
                        }
                        if (flag) {
                            primaryExpression = this.builtInFunctionCall();
                            break;
                        }
                        if ((this.LA(1) == 228 || this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 200) {
                            if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 200 && this.LA(3) == 228) {
                                goto IL_03ea;
                            }
                            if (this.LA(1) == 228) {
                                goto IL_03ea;
                            }
                        }
                        if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("NEXT") && base.NextTokenMatches("VALUE", 2)) {
                            primaryExpression = this.nextValueForCall();
                            break;
                        }
                        if (TSql140ParserInternal.tokenSet_36_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_188_.member(this.LA(2))) {
                            primaryExpression = this.columnOrFunctionCall();
                            break;
                        }
                        throw new NoViableAltException(this.LT(1), this.getFilename());
                    }
                    IL_03ea:
                    primaryExpression = this.partitionFunctionCall();
                    break;
            }
            this.collationOpt(primaryExpression);
            return primaryExpression;
        }

        public FunctionCall expressionWithClrElementsFunctionCallPart() {
            FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
            this.parenthesizedOptExpressionWithDefaultList(functionCall, functionCall.Parameters);
            return functionCall;
        }

        public CastCall castCall() {
            CastCall castCall = base.FragmentFactory.CreateFragment<CastCall>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(191);
            ScalarExpression parameter = this.expression();
            this.match(9);
            DataTypeReference dataType = this.scalarDataType();
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "CAST");
                TSql80ParserBaseInternal.UpdateTokenInfo(castCall, token);
                castCall.DataType = dataType;
                castCall.Parameter = parameter;
                TSql80ParserBaseInternal.UpdateTokenInfo(castCall, token2);
            }
            return castCall;
        }

        public TryCastCall tryCastCall() {
            TryCastCall tryCastCall = base.FragmentFactory.CreateFragment<TryCastCall>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            this.match(191);
            ScalarExpression parameter = this.expression();
            this.match(9);
            DataTypeReference dataType = this.scalarDataType();
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "TRY_CAST");
                TSql80ParserBaseInternal.UpdateTokenInfo(tryCastCall, token);
                tryCastCall.DataType = dataType;
                tryCastCall.Parameter = parameter;
                TSql80ParserBaseInternal.UpdateTokenInfo(tryCastCall, token2);
            }
            return tryCastCall;
        }

        public ParseCall parseCall() {
            ParseCall parseCall = base.FragmentFactory.CreateFragment<ParseCall>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            this.match(191);
            ScalarExpression stringValue = this.expression();
            this.match(9);
            DataTypeReference dataType = this.scalarDataType();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "PARSE");
                TSql80ParserBaseInternal.UpdateTokenInfo(parseCall, token);
                parseCall.StringValue = stringValue;
                parseCall.DataType = dataType;
            }
            switch (this.LA(1)) {
                case 232: {
                        token2 = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token2, "USING");
                        }
                        ScalarExpression culture = this.expression();
                        if (base.inputState.guessing == 0) {
                            parseCall.Culture = culture;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token3 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(parseCall, token3);
            }
            return parseCall;
        }

        public TryParseCall tryParseCall() {
            TryParseCall tryParseCall = base.FragmentFactory.CreateFragment<TryParseCall>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            this.match(191);
            ScalarExpression stringValue = this.expression();
            this.match(9);
            DataTypeReference dataType = this.scalarDataType();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "TRY_PARSE");
                TSql80ParserBaseInternal.UpdateTokenInfo(tryParseCall, token);
                tryParseCall.StringValue = stringValue;
                tryParseCall.DataType = dataType;
            }
            switch (this.LA(1)) {
                case 232: {
                        token2 = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token2, "USING");
                        }
                        ScalarExpression culture = this.expression();
                        if (base.inputState.guessing == 0) {
                            tryParseCall.Culture = culture;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token3 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tryParseCall, token3);
            }
            return tryParseCall;
        }

        public IIfCall iIfCall() {
            IIfCall ifCall = base.FragmentFactory.CreateFragment<IIfCall>();
            IToken token = null;
            IToken token2 = null;
            BooleanExpression booleanExpression = null;
            ScalarExpression scalarExpression = null;
            ScalarExpression scalarExpression2 = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "IIF");
                TSql80ParserBaseInternal.UpdateTokenInfo(ifCall, token);
            }
            this.match(191);
            booleanExpression = this.booleanExpression();
            if (base.inputState.guessing == 0) {
                ifCall.Predicate = booleanExpression;
            }
            this.match(198);
            scalarExpression = this.expression();
            if (base.inputState.guessing == 0) {
                ifCall.ThenExpression = scalarExpression;
            }
            this.match(198);
            scalarExpression2 = this.expression();
            if (base.inputState.guessing == 0) {
                ifCall.ElseExpression = scalarExpression2;
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(ifCall, token2);
            }
            return ifCall;
        }

        public FunctionCall builtInFunctionCall() {
            FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
            Identifier functionName = this.nonQuotedIdentifier();
            if (base.inputState.guessing == 0) {
                functionCall.FunctionName = functionName;
            }
            this.match(191);
            if (TSql140ParserInternal.tokenSet_42_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_190_.member(this.LA(2)) && functionCall.FunctionName != null && functionCall.FunctionName.Value.ToUpper(CultureInfo.InvariantCulture) == "TRIM") {
                this.trimBuiltInFunctionCall(functionCall);
            } else if (TSql140ParserInternal.tokenSet_191_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_192_.member(this.LA(2))) {
                this.regularBuiltInFunctionCall(functionCall);
            } else {
                if (this.LA(1) != 5 && this.LA(1) != 51) {
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                }
                this.aggregateBuiltInFunctionCall(functionCall);
            }
            return functionCall;
        }

        public LeftFunctionCall leftFunctionCall() {
            LeftFunctionCall leftFunctionCall = base.FragmentFactory.CreateFragment<LeftFunctionCall>();
            IToken token = null;
            token = this.LT(1);
            this.match(93);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(leftFunctionCall, token);
            }
            this.reservedBuiltInFunctionCallParameters(leftFunctionCall, leftFunctionCall.Parameters);
            return leftFunctionCall;
        }

        public RightFunctionCall rightFunctionCall() {
            RightFunctionCall rightFunctionCall = base.FragmentFactory.CreateFragment<RightFunctionCall>();
            IToken token = null;
            token = this.LT(1);
            this.match(133);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(rightFunctionCall, token);
            }
            this.reservedBuiltInFunctionCallParameters(rightFunctionCall, rightFunctionCall.Parameters);
            return rightFunctionCall;
        }

        public PartitionFunctionCall partitionFunctionCall() {
            PartitionFunctionCall partitionFunctionCall = base.FragmentFactory.CreateFragment<PartitionFunctionCall>();
            IToken token = null;
            IToken token2 = null;
            Identifier databaseName;
            switch (this.LA(1)) {
                case 232:
                case 233:
                    databaseName = this.identifier();
                    if (base.inputState.guessing == 0) {
                        partitionFunctionCall.DatabaseName = databaseName;
                    }
                    this.match(200);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 228:
                    break;
            }
            token = this.LT(1);
            this.match(228);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(partitionFunctionCall, token);
            }
            this.match(200);
            databaseName = this.identifier();
            if (base.inputState.guessing == 0) {
                partitionFunctionCall.FunctionName = databaseName;
            }
            this.match(191);
            this.expressionList(partitionFunctionCall, partitionFunctionCall.Parameters);
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(partitionFunctionCall, token2);
            }
            return partitionFunctionCall;
        }

        public NextValueForExpression nextValueForCall() {
            NextValueForExpression nextValueForExpression = base.FragmentFactory.CreateFragment<NextValueForExpression>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(232);
            token2 = this.LT(1);
            this.match(232);
            this.LT(1);
            this.match(67);
            SchemaObjectName sequenceName = this.schemaObjectThreePartName();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "NEXT");
                TSql80ParserBaseInternal.Match(token2, "VALUE");
                TSql80ParserBaseInternal.UpdateTokenInfo(nextValueForExpression, token);
                nextValueForExpression.SequenceName = sequenceName;
            }
            switch (this.LA(1)) {
                case 115: {
                        OverClause overClause = this.overClause();
                        if (base.inputState.guessing == 0) {
                            nextValueForExpression.OverClause = overClause;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 1:
                case 4:
                case 6:
                case 7:
                case 9:
                case 10:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 21:
                case 22:
                case 23:
                case 26:
                case 28:
                case 30:
                case 33:
                case 35:
                case 36:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 54:
                case 55:
                case 56:
                case 58:
                case 59:
                case 60:
                case 61:
                case 64:
                case 67:
                case 68:
                case 71:
                case 72:
                case 74:
                case 75:
                case 76:
                case 77:
                case 79:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 92:
                case 93:
                case 94:
                case 95:
                case 99:
                case 100:
                case 105:
                case 106:
                case 111:
                case 112:
                case 113:
                case 114:
                case 116:
                case 118:
                case 119:
                case 123:
                case 125:
                case 126:
                case 127:
                case 129:
                case 131:
                case 132:
                case 133:
                case 134:
                case 136:
                case 138:
                case 140:
                case 142:
                case 143:
                case 144:
                case 150:
                case 151:
                case 156:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 164:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 176:
                case 177:
                case 178:
                case 182:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 195:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 204:
                case 205:
                case 206:
                case 208:
                case 209:
                case 210:
                case 219:
                case 220:
                case 230:
                case 231:
                case 232:
                case 233:
                    break;
            }
            return nextValueForExpression;
        }

        public PrimaryExpression columnOrFunctionCall() {
            PrimaryExpression primaryExpression = null;
            MultiPartIdentifier multiPartIdentifier = null;
            ColumnReferenceExpression columnReferenceExpression = null;
            switch (this.LA(1)) {
                case 200:
                case 232:
                case 233:
                    multiPartIdentifier = this.multiPartIdentifier(-1);
                    if (this.LA(1) == 200 && (this.LA(2) == 81 || this.LA(2) == 136 || this.LA(2) == 227)) {
                        if (base.inputState.guessing == 0) {
                            columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
                        }
                        this.match(200);
                        this.specialColumn(columnReferenceExpression);
                        break;
                    }
                    if (this.LA(1) == 191 && TSql140ParserInternal.tokenSet_193_.member(this.LA(2))) {
                        primaryExpression = this.userFunctionCall(multiPartIdentifier);
                        break;
                    }
                    if (TSql140ParserInternal.tokenSet_188_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_105_.member(this.LA(2))) {
                        break;
                    }
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 81:
                case 136:
                case 227:
                    if (base.inputState.guessing == 0) {
                        columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
                    }
                    this.specialColumn(columnReferenceExpression);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            if (base.inputState.guessing == 0 && (primaryExpression == null || primaryExpression is ColumnReferenceExpression)) {
                if (columnReferenceExpression == null) {
                    columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
                }
                columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
                TSql80ParserBaseInternal.CheckSpecialColumn(columnReferenceExpression);
                TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, false);
                primaryExpression = columnReferenceExpression;
            }
            return primaryExpression;
        }

        public NullIfExpression nullIfExpression(ExpressionFlags expressionFlags) {
            NullIfExpression nullIfExpression = base.FragmentFactory.CreateFragment<NullIfExpression>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(101);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(nullIfExpression, token);
            }
            this.match(191);
            ScalarExpression firstExpression = this.expressionWithFlags(expressionFlags);
            if (base.inputState.guessing == 0) {
                nullIfExpression.FirstExpression = firstExpression;
            }
            this.match(198);
            firstExpression = this.expressionWithFlags(expressionFlags);
            if (base.inputState.guessing == 0) {
                nullIfExpression.SecondExpression = firstExpression;
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(nullIfExpression, token2);
            }
            return nullIfExpression;
        }

        public CoalesceExpression coalesceExpression(ExpressionFlags expressionFlags) {
            CoalesceExpression coalesceExpression = base.FragmentFactory.CreateFragment<CoalesceExpression>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(25);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(coalesceExpression, token);
            }
            this.match(191);
            ScalarExpression item = this.expressionWithFlags(expressionFlags);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(coalesceExpression, coalesceExpression.Expressions, item);
            }
            int num = 0;
            while (true) {
                if (this.LA(1) != 198) {
                    break;
                }
                this.match(198);
                item = this.expressionWithFlags(expressionFlags);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(coalesceExpression, coalesceExpression.Expressions, item);
                }
                num++;
            }
            if (num < 1) {
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(coalesceExpression, token2);
            }
            return coalesceExpression;
        }

        public CaseExpression caseExpression(ExpressionFlags expressionFlags) {
            IToken token = null;
            IToken token2 = null;
            ScalarExpression scalarExpression = null;
            token = this.LT(1);
            this.match(20);
            CaseExpression caseExpression;
            switch (this.LA(1)) {
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 163:
                case 187:
                case 191:
                case 193:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                    scalarExpression = this.expression();
                    caseExpression = this.simpleCaseExpression(scalarExpression, expressionFlags);
                    break;
                case 168:
                    caseExpression = this.searchedCaseExpression(expressionFlags);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            switch (this.LA(1)) {
                case 55:
                    this.match(55);
                    scalarExpression = this.expression();
                    if (base.inputState.guessing == 0) {
                        caseExpression.ElseExpression = scalarExpression;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 56:
                    break;
            }
            token2 = this.LT(1);
            this.match(56);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(caseExpression, token);
                TSql80ParserBaseInternal.UpdateTokenInfo(caseExpression, token2);
            }
            return caseExpression;
        }

        public ConvertCall convertCall() {
            ConvertCall convertCall = base.FragmentFactory.CreateFragment<ConvertCall>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(34);
            this.match(191);
            DataTypeReference dataType = this.scalarDataType();
            this.match(198);
            ScalarExpression parameter = this.expression();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(convertCall, token);
                convertCall.DataType = dataType;
                convertCall.Parameter = parameter;
            }
            switch (this.LA(1)) {
                case 198:
                    this.match(198);
                    parameter = this.expression();
                    if (base.inputState.guessing == 0) {
                        convertCall.Style = parameter;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(convertCall, token2);
            }
            return convertCall;
        }

        public TryConvertCall tryConvertCall() {
            TryConvertCall tryConvertCall = base.FragmentFactory.CreateFragment<TryConvertCall>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(187);
            this.match(191);
            DataTypeReference dataType = this.scalarDataType();
            this.match(198);
            ScalarExpression parameter = this.expression();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tryConvertCall, token);
                tryConvertCall.DataType = dataType;
                tryConvertCall.Parameter = parameter;
            }
            switch (this.LA(1)) {
                case 198:
                    this.match(198);
                    parameter = this.expression();
                    if (base.inputState.guessing == 0) {
                        tryConvertCall.Style = parameter;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(tryConvertCall, token2);
            }
            return tryConvertCall;
        }

        public ParameterlessCall parameterlessCall() {
            ParameterlessCall parameterlessCall = base.FragmentFactory.CreateFragment<ParameterlessCall>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            switch (this.LA(1)) {
                case 163:
                    token = this.LT(1);
                    this.match(163);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(parameterlessCall, token);
                        parameterlessCall.ParameterlessCallType = ParameterlessCallType.User;
                    }
                    break;
                case 41:
                    token2 = this.LT(1);
                    this.match(41);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(parameterlessCall, token2);
                        parameterlessCall.ParameterlessCallType = ParameterlessCallType.CurrentUser;
                    }
                    break;
                case 141:
                    token3 = this.LT(1);
                    this.match(141);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(parameterlessCall, token3);
                        parameterlessCall.ParameterlessCallType = ParameterlessCallType.SessionUser;
                    }
                    break;
                case 147:
                    token4 = this.LT(1);
                    this.match(147);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(parameterlessCall, token4);
                        parameterlessCall.ParameterlessCallType = ParameterlessCallType.SystemUser;
                    }
                    break;
                case 40:
                    token5 = this.LT(1);
                    this.match(40);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.UpdateTokenInfo(parameterlessCall, token5);
                        parameterlessCall.ParameterlessCallType = ParameterlessCallType.CurrentTimestamp;
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return parameterlessCall;
        }

        public ParenthesisExpression expressionParenthesis(ExpressionFlags expressionFlags) {
            ParenthesisExpression parenthesisExpression = base.FragmentFactory.CreateFragment<ParenthesisExpression>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(191);
            ScalarExpression expression = this.expressionWithFlags(expressionFlags);
            token2 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(parenthesisExpression, token);
                parenthesisExpression.Expression = expression;
                TSql80ParserBaseInternal.UpdateTokenInfo(parenthesisExpression, token2);
            }
            return parenthesisExpression;
        }

        public UserDefinedTypeCallTarget userDefinedTypeCallTarget() {
            UserDefinedTypeCallTarget userDefinedTypeCallTarget = base.FragmentFactory.CreateFragment<UserDefinedTypeCallTarget>();
            IToken token = null;
            SchemaObjectName schemaObjectName = this.schemaObjectTwoPartName();
            token = this.LT(1);
            this.match(203);
            if (base.inputState.guessing == 0) {
                userDefinedTypeCallTarget.SchemaObjectName = schemaObjectName;
                TSql80ParserBaseInternal.UpdateTokenInfo(userDefinedTypeCallTarget, token);
            }
            return userDefinedTypeCallTarget;
        }

        public FunctionCall udtFunctionExpression(UserDefinedTypeCallTarget vCallTarget) {
            FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
            Identifier functionName = this.identifier();
            if (base.inputState.guessing == 0) {
                functionCall.CallTarget = vCallTarget;
                functionCall.FunctionName = functionName;
            }
            this.parenthesizedOptExpressionWithDefaultList(functionCall, functionCall.Parameters);
            return functionCall;
        }

        public UserDefinedTypePropertyAccess udtPropertyExpression(UserDefinedTypeCallTarget vCallTarget) {
            UserDefinedTypePropertyAccess userDefinedTypePropertyAccess = base.FragmentFactory.CreateFragment<UserDefinedTypePropertyAccess>();
            Identifier propertyName = this.identifier();
            this.collationOpt(userDefinedTypePropertyAccess);
            if (base.inputState.guessing == 0) {
                userDefinedTypePropertyAccess.CallTarget = vCallTarget;
                userDefinedTypePropertyAccess.PropertyName = propertyName;
            }
            return userDefinedTypePropertyAccess;
        }

        public FunctionCall basicFunctionCall() {
            FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
            Identifier functionName = this.identifier();
            if (base.inputState.guessing == 0) {
                functionCall.FunctionName = functionName;
            }
            this.parenthesizedOptExpressionWithDefaultList(functionCall, functionCall.Parameters);
            return functionCall;
        }

        public OverClause overClause() {
            IToken token = null;
            OverClause overClause = this.overClauseBeginning();
            switch (this.LA(1)) {
                case 113: {
                        OrderByClause orderByClause = this.orderByClause();
                        if (base.inputState.guessing == 0) {
                            overClause.OrderByClause = orderByClause;
                        }
                        switch (this.LA(1)) {
                            case 232: {
                                    WindowFrameClause windowFrameClause = this.windowFrameClause();
                                    if (base.inputState.guessing == 0) {
                                        TSql110ParserBaseInternal.CheckWindowFrame(windowFrameClause);
                                        overClause.WindowFrameClause = windowFrameClause;
                                    }
                                    break;
                                }
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                            case 192:
                                break;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(overClause, token);
            }
            return overClause;
        }

        public OverClause overClauseBeginning() {
            OverClause overClause = base.FragmentFactory.CreateFragment<OverClause>();
            IToken token = null;
            IToken token2 = null;
            token = this.LT(1);
            this.match(115);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(overClause, token);
            }
            this.match(191);
            switch (this.LA(1)) {
                case 232:
                    token2 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token2, "PARTITION");
                    }
                    this.match(18);
                    this.expressionList(overClause, overClause.Partitions);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 113:
                case 192:
                    break;
            }
            return overClause;
        }

        public WindowFrameClause windowFrameClause() {
            WindowFrameClause windowFrameClause = base.FragmentFactory.CreateFragment<WindowFrameClause>();
            IToken token = null;
            token = this.LT(1);
            this.match(232);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "ROWS", "RANGE");
                if (TSql80ParserBaseInternal.TryMatch(token, "ROWS")) {
                    windowFrameClause.WindowFrameType = WindowFrameType.Rows;
                } else {
                    TSql80ParserBaseInternal.Match(token, "RANGE");
                    windowFrameClause.WindowFrameType = WindowFrameType.Range;
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(windowFrameClause, token);
            }
            this.windowFrameExtent(windowFrameClause);
            return windowFrameClause;
        }

        public OverClause overClauseNoOrderBy() {
            IToken token = null;
            OverClause overClause = this.overClauseBeginning();
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(overClause, token);
            }
            return overClause;
        }

        public void windowFrameExtent(WindowFrameClause vParent) {
            IToken token = null;
            switch (this.LA(1)) {
                case 14: {
                        token = this.LT(1);
                        this.match(14);
                        WindowDelimiter top = this.windowFrameDelimiter();
                        this.match(7);
                        WindowDelimiter bottom = this.windowFrameDelimiter();
                        if (base.inputState.guessing == 0) {
                            vParent.Top = top;
                            vParent.Bottom = bottom;
                            TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
                        }
                        break;
                    }
                case 37:
                case 221:
                case 232: {
                        WindowDelimiter top = this.windowFrameDelimiter();
                        if (base.inputState.guessing == 0) {
                            vParent.Top = top;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public WindowDelimiter windowFrameDelimiter() {
            WindowDelimiter windowDelimiter = base.FragmentFactory.CreateFragment<WindowDelimiter>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            switch (this.LA(1)) {
                case 37:
                    token = this.LT(1);
                    this.match(37);
                    this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        windowDelimiter.WindowDelimiterType = WindowDelimiterType.CurrentRow;
                        TSql80ParserBaseInternal.UpdateTokenInfo(windowDelimiter, token);
                    }
                    break;
                case 221: {
                        Literal offsetValue = this.integer();
                        token2 = this.LT(1);
                        this.match(232);
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.Match(token2, "PRECEDING", "FOLLOWING");
                            if (TSql80ParserBaseInternal.TryMatch(token2, "PRECEDING")) {
                                windowDelimiter.WindowDelimiterType = WindowDelimiterType.ValuePreceding;
                            } else {
                                TSql80ParserBaseInternal.Match(token2, "FOLLOWING");
                                windowDelimiter.WindowDelimiterType = WindowDelimiterType.ValueFollowing;
                            }
                            windowDelimiter.OffsetValue = offsetValue;
                            TSql80ParserBaseInternal.UpdateTokenInfo(windowDelimiter, token2);
                        }
                        break;
                    }
                case 232:
                    token3 = this.LT(1);
                    this.match(232);
                    token4 = this.LT(1);
                    this.match(232);
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.Match(token3, "UNBOUNDED");
                        TSql80ParserBaseInternal.Match(token4, "PRECEDING", "FOLLOWING");
                        if (TSql80ParserBaseInternal.TryMatch(token4, "PRECEDING")) {
                            windowDelimiter.WindowDelimiterType = WindowDelimiterType.UnboundedPreceding;
                        } else {
                            TSql80ParserBaseInternal.Match(token4, "FOLLOWING");
                            windowDelimiter.WindowDelimiterType = WindowDelimiterType.UnboundedFollowing;
                        }
                        TSql80ParserBaseInternal.UpdateTokenInfo(windowDelimiter, token3);
                        TSql80ParserBaseInternal.UpdateTokenInfo(windowDelimiter, token4);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return windowDelimiter;
        }

        public WithinGroupClause withinGroupClause() {
            WithinGroupClause withinGroupClause = base.FragmentFactory.CreateFragment<WithinGroupClause>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            token = this.LT(1);
            this.match(232);
            this.match(76);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.Match(token, "WITHIN");
                TSql80ParserBaseInternal.UpdateTokenInfo(withinGroupClause, token);
            }
            token2 = this.LT(1);
            this.match(191);
            OrderByClause orderByClause = this.orderByClause();
            if (base.inputState.guessing == 0) {
                withinGroupClause.OrderByClause = orderByClause;
                TSql80ParserBaseInternal.UpdateTokenInfo(withinGroupClause, token2);
            }
            token3 = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(withinGroupClause, token3);
            }
            return withinGroupClause;
        }

        public void trimBuiltInFunctionCall(FunctionCall vParent) {
            IToken token = null;
            ScalarExpression item = this.expression();
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Parameters, item);
            }
            switch (this.LA(1)) {
                case 71:
                    this.match(71);
                    item = this.expression();
                    if (base.inputState.guessing == 0) {
                        TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Parameters, item);
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public void regularBuiltInFunctionCall(FunctionCall vParent) {
            IToken token = null;
            switch (this.LA(1)) {
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 163:
                case 187:
                case 191:
                case 193:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                    this.expressionList(vParent, vParent.Parameters);
                    break;
                case 195: {
                        ColumnReferenceExpression item = this.starColumnReferenceExpression();
                        if (base.inputState.guessing == 0) {
                            TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Parameters, item);
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
            if ((this.LA(1) == 115 || this.LA(1) == 232) && (this.LA(2) == 76 || this.LA(2) == 191)) {
                if (this.LA(1) == 115 && this.LA(2) == 191) {
                    goto IL_0256;
                }
                if (base.NextTokenMatches("WITHIN") && this.LA(2) == 76 && this.LA(3) == 191) {
                    goto IL_0256;
                }
            }
            if (TSql140ParserInternal.tokenSet_188_.member(this.LA(1)) && TSql140ParserInternal.tokenSet_105_.member(this.LA(2))) {
                return;
            }
            throw new NoViableAltException(this.LT(1), this.getFilename());
            IL_0256:
            this.withinGroupOrOverClause(vParent);
        }

        public void aggregateBuiltInFunctionCall(FunctionCall vParent) {
            IToken token = null;
            IToken distinctToken = null;
            UniqueRowFilter uniqueRowFilter = this.uniqueRowFilter(out distinctToken);
            ScalarExpression item = this.expression();
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                vParent.UniqueRowFilter = uniqueRowFilter;
                TSql80ParserBaseInternal.AddAndUpdateTokenInfo(vParent, vParent.Parameters, item);
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
            switch (this.LA(1)) {
                case 1:
                case 4:
                case 6:
                case 7:
                case 9:
                case 10:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 21:
                case 22:
                case 23:
                case 26:
                case 28:
                case 30:
                case 33:
                case 35:
                case 36:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 54:
                case 55:
                case 56:
                case 58:
                case 59:
                case 60:
                case 61:
                case 64:
                case 67:
                case 68:
                case 71:
                case 72:
                case 74:
                case 75:
                case 76:
                case 77:
                case 79:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 92:
                case 93:
                case 94:
                case 95:
                case 99:
                case 100:
                case 105:
                case 106:
                case 111:
                case 112:
                case 113:
                case 114:
                case 116:
                case 118:
                case 119:
                case 123:
                case 125:
                case 126:
                case 127:
                case 129:
                case 131:
                case 132:
                case 133:
                case 134:
                case 136:
                case 138:
                case 140:
                case 142:
                case 143:
                case 144:
                case 150:
                case 151:
                case 156:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 164:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 176:
                case 177:
                case 178:
                case 182:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 195:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 204:
                case 205:
                case 206:
                case 208:
                case 209:
                case 210:
                case 219:
                case 220:
                case 230:
                case 231:
                case 232:
                case 233:
                    break;
                case 115: {
                        OverClause overClause = this.overClauseNoOrderBy();
                        if (base.inputState.guessing == 0) {
                            vParent.OverClause = overClause;
                            TSql90ParserBaseInternal.CheckForDistinctInWindowedAggregate(vParent, distinctToken);
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void withinGroupOrOverClause(FunctionCall vParent) {
            switch (this.LA(1)) {
                case 232: {
                        WithinGroupClause withinGroupClause = this.withinGroupClause();
                        if (base.inputState.guessing == 0) {
                            vParent.WithinGroupClause = withinGroupClause;
                        }
                        switch (this.LA(1)) {
                            case 1:
                            case 4:
                            case 6:
                            case 7:
                            case 9:
                            case 10:
                            case 12:
                            case 13:
                            case 14:
                            case 15:
                            case 17:
                            case 21:
                            case 22:
                            case 23:
                            case 26:
                            case 28:
                            case 30:
                            case 33:
                            case 35:
                            case 36:
                            case 44:
                            case 45:
                            case 46:
                            case 47:
                            case 48:
                            case 49:
                            case 50:
                            case 54:
                            case 55:
                            case 56:
                            case 58:
                            case 59:
                            case 60:
                            case 61:
                            case 64:
                            case 67:
                            case 68:
                            case 71:
                            case 72:
                            case 74:
                            case 75:
                            case 76:
                            case 77:
                            case 79:
                            case 82:
                            case 83:
                            case 84:
                            case 85:
                            case 86:
                            case 87:
                            case 88:
                            case 89:
                            case 90:
                            case 92:
                            case 93:
                            case 94:
                            case 95:
                            case 99:
                            case 100:
                            case 105:
                            case 106:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 116:
                            case 118:
                            case 119:
                            case 123:
                            case 125:
                            case 126:
                            case 127:
                            case 129:
                            case 131:
                            case 132:
                            case 133:
                            case 134:
                            case 136:
                            case 138:
                            case 140:
                            case 142:
                            case 143:
                            case 144:
                            case 150:
                            case 151:
                            case 156:
                            case 158:
                            case 159:
                            case 160:
                            case 161:
                            case 162:
                            case 164:
                            case 167:
                            case 168:
                            case 169:
                            case 170:
                            case 171:
                            case 172:
                            case 176:
                            case 177:
                            case 178:
                            case 182:
                            case 188:
                            case 189:
                            case 190:
                            case 191:
                            case 192:
                            case 193:
                            case 194:
                            case 195:
                            case 197:
                            case 198:
                            case 199:
                            case 200:
                            case 201:
                            case 204:
                            case 205:
                            case 206:
                            case 208:
                            case 209:
                            case 210:
                            case 219:
                            case 220:
                            case 230:
                            case 231:
                            case 232:
                            case 233:
                                break;
                            case 115: {
                                    OverClause overClause = this.overClauseNoOrderBy();
                                    if (base.inputState.guessing == 0) {
                                        vParent.OverClause = overClause;
                                    }
                                    break;
                                }
                            default:
                                throw new NoViableAltException(this.LT(1), this.getFilename());
                        }
                        break;
                    }
                case 115: {
                        OverClause overClause = this.overClause();
                        if (base.inputState.guessing == 0) {
                            vParent.OverClause = overClause;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
        }

        public void reservedBuiltInFunctionCallParameters(TSqlFragment vParent, IList<ScalarExpression> parameters) {
            IToken token = null;
            this.match(191);
            switch (this.LA(1)) {
                case 20:
                case 25:
                case 34:
                case 40:
                case 41:
                case 81:
                case 93:
                case 100:
                case 101:
                case 133:
                case 136:
                case 141:
                case 147:
                case 163:
                case 187:
                case 191:
                case 193:
                case 197:
                case 199:
                case 200:
                case 211:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 227:
                case 228:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                    this.expressionList(vParent, parameters);
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
                case 192:
                    break;
            }
            token = this.LT(1);
            this.match(192);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
            }
        }

        public SimpleWhenClause simpleWhenClause(ExpressionFlags expressionFlags) {
            SimpleWhenClause simpleWhenClause = base.FragmentFactory.CreateFragment<SimpleWhenClause>();
            IToken token = null;
            ScalarExpression scalarExpression = null;
            token = this.LT(1);
            this.match(168);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(simpleWhenClause, token);
            }
            scalarExpression = this.expressionWithFlags(expressionFlags);
            if (base.inputState.guessing == 0) {
                simpleWhenClause.WhenExpression = scalarExpression;
            }
            this.match(150);
            scalarExpression = this.expressionWithFlags(expressionFlags);
            if (base.inputState.guessing == 0) {
                simpleWhenClause.ThenExpression = scalarExpression;
            }
            return simpleWhenClause;
        }

        public SearchedWhenClause searchedWhenClause(ExpressionFlags expressionFlags) {
            SearchedWhenClause searchedWhenClause = base.FragmentFactory.CreateFragment<SearchedWhenClause>();
            IToken token = null;
            BooleanExpression booleanExpression = null;
            ScalarExpression scalarExpression = null;
            token = this.LT(1);
            this.match(168);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(searchedWhenClause, token);
            }
            booleanExpression = this.booleanExpressionWithFlags(expressionFlags);
            if (base.inputState.guessing == 0) {
                searchedWhenClause.WhenExpression = booleanExpression;
            }
            this.match(150);
            scalarExpression = this.expressionWithFlags(expressionFlags);
            if (base.inputState.guessing == 0) {
                searchedWhenClause.ThenExpression = scalarExpression;
            }
            return searchedWhenClause;
        }

        public SimpleCaseExpression simpleCaseExpression(ScalarExpression inputExpression, ExpressionFlags expressionFlags) {
            SimpleCaseExpression simpleCaseExpression = base.FragmentFactory.CreateFragment<SimpleCaseExpression>();
            simpleCaseExpression.InputExpression = inputExpression;
            int num = 0;
            while (true) {
                if (this.LA(1) != 168) {
                    break;
                }
                SimpleWhenClause item = this.simpleWhenClause(expressionFlags);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(simpleCaseExpression, simpleCaseExpression.WhenClauses, item);
                }
                num++;
            }
            if (num < 1) {
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return simpleCaseExpression;
        }

        public SearchedCaseExpression searchedCaseExpression(ExpressionFlags expressionFlags) {
            SearchedCaseExpression searchedCaseExpression = base.FragmentFactory.CreateFragment<SearchedCaseExpression>();
            int num = 0;
            while (true) {
                if (this.LA(1) != 168) {
                    break;
                }
                SearchedWhenClause item = this.searchedWhenClause(expressionFlags);
                if (base.inputState.guessing == 0) {
                    TSql80ParserBaseInternal.AddAndUpdateTokenInfo(searchedCaseExpression, searchedCaseExpression.WhenClauses, item);
                }
                num++;
            }
            if (num < 1) {
                throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return searchedCaseExpression;
        }

        public ValueExpression globalVariableOrVariableReference() {
            ValueExpression valueExpression = null;
            IToken token = null;
            token = this.LT(1);
            this.match(234);
            if (base.inputState.guessing == 0) {
                if (token.getText().StartsWith("@@", StringComparison.Ordinal)) {
                    GlobalVariableExpression globalVariableExpression = base.FragmentFactory.CreateFragment<GlobalVariableExpression>();
                    globalVariableExpression.Name = token.getText();
                    valueExpression = globalVariableExpression;
                } else {
                    VariableReference variableReference = base.FragmentFactory.CreateFragment<VariableReference>();
                    variableReference.Name = token.getText();
                    valueExpression = variableReference;
                }
                TSql80ParserBaseInternal.UpdateTokenInfo(valueExpression, token);
            }
            return valueExpression;
        }

        public SchemaObjectNameOrValueExpression objectOrVariable() {
            SchemaObjectNameOrValueExpression schemaObjectNameOrValueExpression = base.FragmentFactory.CreateFragment<SchemaObjectNameOrValueExpression>();
            switch (this.LA(1)) {
                case 200:
                case 232:
                case 233: {
                        SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
                        if (base.inputState.guessing == 0) {
                            schemaObjectNameOrValueExpression.SchemaObjectName = schemaObjectName;
                        }
                        break;
                    }
                case 234: {
                        VariableReference valueExpression = this.variable();
                        if (base.inputState.guessing == 0) {
                            schemaObjectNameOrValueExpression.ValueExpression = valueExpression;
                        }
                        break;
                    }
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            return schemaObjectNameOrValueExpression;
        }

        public MoneyLiteral moneyLiteral() {
            MoneyLiteral moneyLiteral = base.FragmentFactory.CreateFragment<MoneyLiteral>();
            IToken token = null;
            token = this.LT(1);
            this.match(225);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(moneyLiteral, token);
                moneyLiteral.Value = token.getText();
            }
            return moneyLiteral;
        }

        public OdbcLiteral odbcLiteral() {
            OdbcLiteral odbcLiteral = base.FragmentFactory.CreateFragment<OdbcLiteral>();
            IToken token = null;
            IToken token2 = null;
            IToken token3 = null;
            IToken token4 = null;
            IToken token5 = null;
            token = this.LT(1);
            this.match(193);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(odbcLiteral, token);
            }
            token2 = this.LT(1);
            this.match(232);
            switch (this.LA(1)) {
                case 230:
                    token3 = this.LT(1);
                    this.match(230);
                    if (base.inputState.guessing == 0) {
                        odbcLiteral.OdbcLiteralType = TSql80ParserBaseInternal.ParseOdbcLiteralType(token2);
                        TSql80ParserBaseInternal.UpdateTokenInfo(odbcLiteral, token3);
                        odbcLiteral.Value = TSql80ParserBaseInternal.DecodeAsciiStringLiteral(token3.getText());
                    }
                    break;
                case 231:
                    token4 = this.LT(1);
                    this.match(231);
                    if (base.inputState.guessing == 0) {
                        odbcLiteral.OdbcLiteralType = TSql80ParserBaseInternal.ParseOdbcLiteralType(token2);
                        odbcLiteral.IsNational = true;
                        TSql80ParserBaseInternal.UpdateTokenInfo(odbcLiteral, token4);
                        odbcLiteral.Value = TSql80ParserBaseInternal.DecodeUnicodeStringLiteral(token4.getText());
                    }
                    break;
                default:
                    throw new NoViableAltException(this.LT(1), this.getFilename());
            }
            token5 = this.LT(1);
            this.match(194);
            if (base.inputState.guessing == 0) {
                TSql80ParserBaseInternal.UpdateTokenInfo(odbcLiteral, token5);
            }
            return odbcLiteral;
        }

        private void initializeFactory() {
        }

        private static long[] mk_tokenSet_0_() {
            long[] array = new long[8]
            {
                3585973655481528914L,
                -1675334557834638311L,
                -9204904057318025894L,
                8521617788993L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_1_() {
            long[] array = new long[8]
            {
                -14L,
                -1L,
                -517913957147607041L,
                17437434016751L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_2_() {
            long[] array = new long[8]
            {
                3585973655481528914L,
                -1675334557834638311L,
                -9204903919879072422L,
                8521617788993L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_3_() {
            long[] array = new long[8]
            {
                3549804119831261264L,
                7530022977430359041L,
                -9205044796953865126L,
                1099780063232L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_4_() {
            long[] array = new long[8]
            {
                2255115563040800L,
                206695464960L,
                -8646911250174299872L,
                17437030875562L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_5_() {
            long[] array = new long[8]
            {
                140737488355328L,
                216454257090494976L,
                275012127232L,
                1099511627776L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_6_() {
            return new long[6]
            {
                0L,
                216454257090494976L,
                275012124672L,
                0L,
                0L,
                0L
            };
        }

        private static long[] mk_tokenSet_7_() {
            long[] array = new long[8]
            {
                3549804119831261266L,
                7530022977430359041L,
                -9205044796953865126L,
                7696984047872L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_8_() {
            long[] array = new long[8]
            {
                -14L,
                -1L,
                -8588366688427180033L,
                35029619577258L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_9_() {
            long[] array = new long[8];
            for (int i = 0; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 7696581394688L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_10_() {
            long[] array = new long[8]
            {
                3549944857319616594L,
                7530023046149835777L,
                -9205044796953865126L,
                26130446815618L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_11_() {
            long[] array = new long[8]
            {
                3549804119831261266L,
                7530022977430359041L,
                -9205044796953865126L,
                1099914280960L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_12_() {
            long[] array = new long[8]
            {
                -14L,
                -1L,
                -8588366688427180033L,
                17437433532842L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_13_() {
            return new long[6]
            {
                16777216L,
                17180917760L,
                2147483648L,
                0L,
                0L,
                0L
            };
        }

        private static long[] mk_tokenSet_14_() {
            long[] array = new long[8]
            {
                0L,
                8796093022208L,
                -9223372036854775808L,
                7696581394688L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_15_() {
            return new long[6]
            {
                281474976710656L,
                4194304L,
                -9205348837957300224L,
                0L,
                0L,
                0L
            };
        }

        private static long[] mk_tokenSet_16_() {
            long[] array = new long[8]
            {
                2255115563040800L,
                2313579177083008L,
                -8646911250174299872L,
                17437030875562L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_17_() {
            long[] array = new long[8]
            {
                134219776L,
                1048576L,
                140771848095744L,
                1099511627776L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_18_() {
            long[] array = new long[8]
            {
                134217728L,
                18014398509481984L,
                140771848093696L,
                1099511627776L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_19_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977430359041L,
                -9205044796953865126L,
                1099914285056L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_20_() {
            long[] array = new long[8]
            {
                140737488355328L,
                68719476736L,
                0L,
                8537858113666L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_21_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530163714918714369L,
                -9205044796953865126L,
                1112262332481L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_22_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530163714918714369L,
                -9205044796953865126L,
                1099914285057L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_23_() {
            long[] array = new long[8]
            {
                9011597301252608L,
                4294967296L,
                0L,
                3298534883328L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_24_() {
            long[] array = new long[8]
            {
                0L,
                618475290624L,
                0L,
                8537858113666L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_25_() {
            long[] array = new long[8]
            {
                3549804119831261264L,
                7530022977430359041L,
                -9205044796953865126L,
                1099780067328L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_26_() {
            long[] array = new long[8]
            {
                0L,
                128L,
                0L,
                7696581394432L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_27_() {
            long[] array = new long[8];
            for (int i = 0; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 7697118265472L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_28_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977430359041L,
                -9205044796953865126L,
                1100451156992L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_29_() {
            long[] array = new long[8]
            {
                32L,
                1048576L,
                128L,
                1099511627776L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_30_() {
            long[] array = new long[8]
            {
                137438953472L,
                0L,
                0L,
                0L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 1; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 3315714752512L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_31_() {
            long[] array = new long[8]
            {
                67108880L,
                0L,
                16384L,
                1099511627776L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_32_() {
            long[] array = new long[8]
            {
                3585832916917334610L,
                7530025176453614601L,
                -9205044796953865126L,
                1099914285056L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_33_() {
            long[] array = new long[8]
            {
                3315749355520L,
                206695432192L,
                -8646911250174303968L,
                17437030875562L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_34_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977430359041L,
                -9205044796953865126L,
                5498497667072L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_35_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530023046149966849L,
                -9205044796953864870L,
                8560272478464L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_36_() {
            long[] array = new long[8]
            {
                0L,
                131072L,
                256L,
                3332894621952L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_37_() {
            long[] array = new long[8];
            for (int i = 0; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 7700876361984L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_38_() {
            long[] array = new long[8]
            {
                0L,
                68719476736L,
                0L,
                5226975199232L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_39_() {
            long[] array = new long[8];
            for (int i = 0; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 825170591872L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_40_() {
            long[] array = new long[8]
            {
                3585832916850225746L,
                7530022977430359041L,
                -9205044796953865126L,
                1099914285056L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_41_() {
            long[] array = new long[8]
            {
                -16L,
                -2199023257729L,
                58544596124172287L,
                1099511627776L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_42_() {
            long[] array = new long[8]
            {
                3315749355520L,
                206695432192L,
                -8646911250191081184L,
                17437030875554L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_43_() {
            long[] array = new long[8]
            {
                3585836232666689618L,
                7530023184125791233L,
                -1711053883137460870L,
                17437433928618L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_44_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977430359041L,
                -9205044796953865126L,
                3298937540608L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_45_() {
            long[] array = new long[8]
            {
                0L,
                262144L,
                0L,
                3298534883584L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_46_() {
            long[] array = new long[8]
            {
                0L,
                68719476736L,
                0L,
                8537858113667L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_47_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530163714918714377L,
                -9205044796953865126L,
                1099914285056L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_48_() {
            long[] array = new long[8];
            for (int i = 0; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 3332894621952L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_49_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530025176453614593L,
                -9205042597930609574L,
                1099914285056L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_50_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530025176453614593L,
                -9205044796953865126L,
                1099914285056L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_51_() {
            long[] array = new long[8]
            {
                3594840116105228882L,
                7530022981725326337L,
                -9205044796953865126L,
                3300548153504L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_52_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530023011790097409L,
                -9205044796953865126L,
                1099914285056L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_53_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977430359041L,
                -9205042597930609574L,
                1099914285056L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_54_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977430359041L,
                -9205042597922220966L,
                1099914285056L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_55_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530025726209428481L,
                -9205044796953865126L,
                1099914301504L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_56_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977430359041L,
                -9205044796953865126L,
                1099914285120L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_57_() {
            long[] array = new long[8]
            {
                2306124484190404608L,
                -9223372036850581504L,
                4294971392L,
                1099511627776L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_58_() {
            long[] array = new long[8]
            {
                -14L,
                -1L,
                -8588366688427180033L,
                17437433549226L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_59_() {
            long[] array = new long[8]
            {
                3585832916917334610L,
                7530022977430359049L,
                -9205044796953865126L,
                1099914285056L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_60_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977430359041L,
                -9205044796945476518L,
                1099914301504L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_61_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977430359041L,
                -9205044796945476518L,
                1099914285056L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_62_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977430359169L,
                -9205044796945476518L,
                1099914285120L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_63_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977430359169L,
                -9205044796953865126L,
                1099914301504L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_64_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977430359169L,
                -9205044796953865126L,
                1099914285056L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_65_() {
            long[] array = new long[8]
            {
                9007199254740992L,
                4294967296L,
                0L,
                3298534883328L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_66_() {
            long[] array = new long[8]
            {
                0L,
                103079215104L,
                0L,
                65L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_67_() {
            long[] array = new long[8]
            {
                0L,
                68719476736L,
                0L,
                8537858113666L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_68_() {
            long[] array = new long[8];
            for (int i = 0; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 1111859658817L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_69_() {
            long[] array = new long[8]
            {
                18014398509482064L,
                0L,
                0L,
                0L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 1; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 1099511627776L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_70_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977430359049L,
                -9205044796953865126L,
                1099914285056L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_71_() {
            long[] array = new long[8];
            for (int i = 0; i <= 1; i++) {
                array[i] = 0L;
            }
            array[2] = 2199023271936L;
            array[3] = 1099511627777L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_72_() {
            long[] array = new long[8]
            {
                3585832916850227794L,
                7530022977430359041L,
                -9205044796953865126L,
                1099914285056L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_73_() {
            long[] array = new long[8]
            {
                3585832916850227282L,
                7530022977430359041L,
                -9205044796953865126L,
                1099914285312L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_74_() {
            long[] array = new long[8]
            {
                3585832916850227282L,
                7530022977430359041L,
                -9205044796953865126L,
                1099914285056L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_75_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977564576769L,
                -9205044796953865126L,
                4128403099713L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_76_() {
            long[] array = new long[8];
            for (int i = 0; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 4128000442368L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_77_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977564576769L,
                -9205044796953865126L,
                3298937540673L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_78_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977430359041L,
                -9205044796953865126L,
                1099914285121L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_79_() {
            long[] array = new long[8];
            for (int i = 0; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 4123168604225L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_80_() {
            long[] array = new long[8];
            for (int i = 0; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 3298534883393L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_81_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977430359041L,
                -9205044796953865126L,
                3298937540673L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_82_() {
            long[] array = new long[8]
            {
                3585832916850225746L,
                7530022977430359049L,
                -9205044796953865126L,
                1099914285056L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_83_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977430359041L,
                -9205044796953865126L,
                3298937540864L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_84_() {
            long[] array = new long[8]
            {
                3585832916850487378L,
                7530022977430359041L,
                -9205044796953865126L,
                1101524897952L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_85_() {
            long[] array = new long[8]
            {
                -14L,
                -1L,
                -8588366688427180033L,
                17437433532906L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_86_() {
            return new long[6]
            {
                562984313159680L,
                2048L,
                16L,
                0L,
                0L,
                0L
            };
        }

        private static long[] mk_tokenSet_87_() {
            long[] array = new long[8]
            {
                -16L,
                -1L,
                -8588366688427180033L,
                17437299315114L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_88_() {
            long[] array = new long[8]
            {
                8704L,
                562949953421312L,
                140737488355336L,
                64L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_89_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530025176453614593L,
                -9205044796953865126L,
                1099914285120L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_90_() {
            long[] array = new long[8]
            {
                -16L,
                -2199023257729L,
                58544596124172287L,
                1099511629824L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_91_() {
            long[] array = new long[8]
            {
                262144L,
                128L,
                -9223372036846387200L,
                3298534883584L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_92_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530163714935491585L,
                -9205044796953865126L,
                1099914285057L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_93_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977447136257L,
                -9205044796953865126L,
                3298937540608L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_94_() {
            long[] array = new long[8]
            {
                0L,
                128L,
                0L,
                4398583382144L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_95_() {
            long[] array = new long[8]
            {
                8197518935277613138L,
                7530022977430359041L,
                -9205044796953865126L,
                1099914285120L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_96_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977430359041L,
                -9205044796953865126L,
                3298937540928L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_97_() {
            long[] array = new long[8]
            {
                3585973655414419538L,
                -1675334557834638319L,
                -9205044794806381222L,
                3298937540673L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_98_() {
            long[] array = new long[8]
            {
                -14L,
                -1L,
                -8588366688427180033L,
                17437433532907L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_99_() {
            long[] array = new long[8]
            {
                262144L,
                0L,
                0L,
                0L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 1; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 3298534883584L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_100_() {
            long[] array = new long[8];
            for (int i = 0; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 133185552L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_101_() {
            long[] array = new long[8]
            {
                3594980854669161042L,
                -1675334553539671023L,
                -9205044794806381222L,
                3298937540673L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_102_() {
            long[] array = new long[8]
            {
                3585973655414419538L,
                -1675334557834638319L,
                -9205044794806381222L,
                1099914285121L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_103_() {
            long[] array = new long[8]
            {
                4162293669153648722L,
                7530163714927102985L,
                -9205044795880123302L,
                1099914285057L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_104_() {
            long[] array = new long[8]
            {
                4162293737873125458L,
                7531854764416711945L,
                -9203353746996603782L,
                1099914285125L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_105_() {
            long[] array = new long[8]
            {
                -14L,
                -1L,
                -13510798882111489L,
                17437434018799L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_106_() {
            long[] array = new long[8]
            {
                577023736616583170L,
                8390664L,
                8797166764048L,
                134221825L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_107_() {
            long[] array = new long[8];
            for (int i = 0; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 3298534883592L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_108_() {
            long[] array = new long[8]
            {
                577023736616583170L,
                562949961824392L,
                10996190019600L,
                3298669105473L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_109_() {
            long[] array = new long[8]
            {
                3315749355520L,
                206695464960L,
                -8646911250191081184L,
                17437030875554L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_110_() {
            long[] array = new long[8]
            {
                577027052433048066L,
                563156657256584L,
                -1729370126848347856L,
                17437165509611L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_111_() {
            long[] array = new long[8]
            {
                4162293669153648722L,
                7530726664880532489L,
                -9205044795880123302L,
                1099914285057L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_112_() {
            long[] array = new long[8]
            {
                4162293669153648722L,
                7530728863920569481L,
                -9205042596856867750L,
                3298937540929L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_113_() {
            long[] array = new long[8]
            {
                4162296984970113618L,
                7530729070616001673L,
                -1711051683040463494L,
                17437433945067L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_114_() {
            long[] array = new long[8]
            {
                4162296984970113618L,
                7530729070616001673L,
                -1711051683040463494L,
                17437433928683L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_115_() {
            long[] array = new long[8]
            {
                512L,
                0L,
                0L,
                0L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 1; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 4123168604160L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_116_() {
            long[] array = new long[8]
            {
                4162293669153648722L,
                7530728863920569481L,
                -9205042596856867750L,
                4123571261505L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_117_() {
            long[] array = new long[8]
            {
                4162293669153648722L,
                7530728863920569481L,
                -9205042596856867750L,
                1099914285121L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_118_() {
            long[] array = new long[8]
            {
                3585973654338580562L,
                7530163714935491713L,
                -9205042529211132838L,
                3298937540929L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_119_() {
            long[] array = new long[8]
            {
                3585976970155045458L,
                7530163921630923905L,
                -1711051615394728582L,
                17437433928683L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_120_() {
            long[] array = new long[8]
            {
                3585973654338580562L,
                7530163714935491713L,
                -9205042529211132838L,
                4123571261505L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_121_() {
            long[] array = new long[8]
            {
                3585973654338580562L,
                7530163714935491713L,
                -9205042529211132838L,
                1099914285121L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_122_() {
            long[] array = new long[8]
            {
                -14L,
                -1L,
                -8083963530161684481L,
                17437433534890L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_123_() {
            long[] array = new long[8]
            {
                4162293737873125970L,
                7531854764416728329L,
                -9203353746996603782L,
                3298937540677L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_124_() {
            return new long[6]
            {
                68719476736L,
                1125900512919808L,
                1688849860263968L,
                0L,
                0L,
                0L
            };
        }

        private static long[] mk_tokenSet_125_() {
            long[] array = new long[8]
            {
                4294967296L,
                131941395333184L,
                -8718968878589280256L,
                7696581396736L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_126_() {
            long[] array = new long[8]
            {
                4162293737873125970L,
                7531854764416728329L,
                -9201101878463441798L,
                3298937540933L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_127_() {
            return new long[6]
            {
                68719476736L,
                1125900512919808L,
                32L,
                0L,
                0L,
                0L
            };
        }

        private static long[] mk_tokenSet_128_() {
            long[] array = new long[8]
            {
                281543696187904L,
                1125900517130504L,
                -9203096969424138208L,
                3298534883584L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_129_() {
            long[] array = new long[8]
            {
                4162293737873125970L,
                7531854764416711945L,
                -9203353746996603782L,
                3298937540677L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_130_() {
            return new long[6]
            {
                281474976710656L,
                4194304L,
                18014402804449280L,
                0L,
                0L,
                0L
            };
        }

        private static long[] mk_tokenSet_131_() {
            long[] array = new long[8]
            {
                4162293737873125970L,
                7531854764416728329L,
                -9201101947182918534L,
                3298937540933L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_132_() {
            long[] array = new long[8]
            {
                4162293737873125970L,
                7531854764416728329L,
                -9201101947182918534L,
                3298937540677L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_133_() {
            long[] array = new long[8]
            {
                144053237710848L,
                206695432192L,
                -8646911250191081184L,
                17437030875555L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_134_() {
            long[] array = new long[8]
            {
                3458905251308896256L,
                0L,
                -9223371968135294976L,
                1099511627776L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_135_() {
            long[] array = new long[8]
            {
                2255115563040800L,
                9002788487168L,
                -8646911181454823136L,
                17437030875562L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_136_() {
            long[] array = new long[8]
            {
                4294967296L,
                131941395333184L,
                -8718968878589280256L,
                16492674418946L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_137_() {
            long[] array = new long[8]
            {
                4162434475361481298L,
                7531854764416712073L,
                -9203353678277127046L,
                3298937540677L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_138_() {
            long[] array = new long[8]
            {
                3315749355520L,
                206695432192L,
                -8646911250191081184L,
                17437030875562L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_139_() {
            long[] array = new long[8]
            {
                3585973654338580562L,
                7530163714918714497L,
                -9205042529211132838L,
                1099914285057L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_140_() {
            long[] array = new long[8]
            {
                4611689336324227072L,
                241055170592L,
                -8646911245359242976L,
                17437030875554L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_141_() {
            long[] array = new long[8];
            for (int i = 0; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 3298668069136L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_142_() {
            long[] array = new long[8]
            {
                3585836232666689618L,
                7530163921614146689L,
                -1711051684114205318L,
                17437433928683L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_143_() {
            long[] array = new long[8];
            for (int i = 0; i <= 1; i++) {
                array[i] = 0L;
            }
            array[2] = -9223372036854775808L;
            array[3] = 3298534883584L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_144_() {
            long[] array = new long[8]
            {
                3585973654338581074L,
                7530163714918714497L,
                -9205042529211132838L,
                3298937540865L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_145_() {
            long[] array = new long[8]
            {
                3585973654338581074L,
                7530163714918714497L,
                -9205042529211132838L,
                3298937540609L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_146_() {
            long[] array = new long[8]
            {
                4162293737873125458L,
                7531854764416711945L,
                -9203353746996603782L,
                3298937540677L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_147_() {
            long[] array = new long[8]
            {
                4162293737873125458L,
                7531854764416728329L,
                -9201101947182918534L,
                3298937540677L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_148_() {
            long[] array = new long[8];
            for (int i = 0; i <= 1; i++) {
                array[i] = 0L;
            }
            array[2] = -9223372036854775808L;
            array[3] = 3298534883592L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_149_() {
            long[] array = new long[8];
            for (int i = 0; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 3298534883656L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_150_() {
            long[] array = new long[8]
            {
                0L,
                1064960L,
                0L,
                1099511627840L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_151_() {
            long[] array = new long[8]
            {
                0L,
                1064960L,
                -9223372036854775808L,
                1099511627841L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_152_() {
            long[] array = new long[8]
            {
                0L,
                1064960L,
                0L,
                1099511627841L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_153_() {
            long[] array = new long[8]
            {
                4162296984970113106L,
                7530726871575964681L,
                -1711053882063719046L,
                17437433928683L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_154_() {
            long[] array = new long[8]
            {
                3315816464384L,
                206695432192L,
                -1729381123038367456L,
                17437031271403L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_155_() {
            long[] array = new long[8]
            {
                4162293669153648722L,
                7530163714927102977L,
                -9205044795880123302L,
                1099914285121L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_156_() {
            long[] array = new long[8]
            {
                0L,
                9570149275275264L,
                1073741824L,
                1099511627841L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_157_() {
            long[] array = new long[8]
            {
                3585832916850487890L,
                7530022977430359041L,
                -9205044796953865126L,
                1101524897952L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_158_() {
            long[] array = new long[8];
            for (int i = 0; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 1610612896L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_159_() {
            long[] array = new long[8]
            {
                3585832916850225746L,
                7530022977430359041L,
                -9205044796953865126L,
                1101524897952L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_160_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530023011790097409L,
                -9205044796953865126L,
                1099914285120L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_161_() {
            return new long[6]
            {
                281474976710656L,
                274882101248L,
                4294967296L,
                0L,
                0L,
                0L
            };
        }

        private static long[] mk_tokenSet_162_() {
            long[] array = new long[8]
            {
                0L,
                128L,
                0L,
                3298534883648L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_163_() {
            long[] array = new long[8]
            {
                3315816464896L,
                206695432320L,
                -1729381123038367456L,
                17437031271402L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_164_() {
            long[] array = new long[8]
            {
                0L,
                8796093022208L,
                0L,
                7696581394688L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_165_() {
            long[] array = new long[8]
            {
                3585973654338580562L,
                7530163783638191105L,
                -9205044796953865126L,
                26130446815619L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_166_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530163714918714369L,
                -9205044796953865126L,
                1112262316097L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_167_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530163714918714369L,
                -9205044796953865126L,
                1099914285121L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_168_() {
            long[] array = new long[8]
            {
                -14L,
                -1L,
                -8588366688427180033L,
                17437433532843L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_169_() {
            long[] array = new long[8]
            {
                140738564194304L,
                18014398510530576L,
                2147483648L,
                3298534883328L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_170_() {
            long[] array = new long[8]
            {
                0L,
                1048576L,
                0L,
                1099511627841L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_171_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530023080509574145L,
                -9205044796953865126L,
                1099914285056L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_172_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530023080509574153L,
                -9205044796953865126L,
                1099914285056L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_173_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530022977430359041L,
                -9205044796953865126L,
                3298937540672L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_174_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530025176453614593L,
                -9205042597930609574L,
                1099914285121L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_175_() {
            long[] array = new long[8]
            {
                3585832916850225234L,
                7530025176453614593L,
                -9205044796953865126L,
                1099914285121L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_176_() {
            long[] array = new long[8]
            {
                3585973655414419538L,
                -1675334557835719663L,
                -9205044794806381478L,
                1099914285121L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_177_() {
            return new long[6]
            {
                140738564194304L,
                -9205357535266078704L,
                2147483648L,
                0L,
                0L,
                0L
            };
        }

        private static long[] mk_tokenSet_178_() {
            long[] array = new long[8]
            {
                3585973655481528402L,
                -1675334557834638319L,
                -9205044657367427750L,
                3298937540929L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_179_() {
            long[] array = new long[8]
            {
                3585973655414419538L,
                -1675332358811382767L,
                -9205044794806381222L,
                1099914285121L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_180_() {
            long[] array = new long[8]
            {
                3315816480768L,
                242162991104L,
                -576459618431520480L,
                17437031361450L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_181_() {
            long[] array = new long[8]
            {
                0L,
                131072L,
                256L,
                3332894621960L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_182_() {
            long[] array = new long[8];
            for (int i = 0; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 3298534883648L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_183_() {
            long[] array = new long[8];
            for (int i = 0; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 3298534883585L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_184_() {
            long[] array = new long[8];
            for (int i = 0; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 3298534883649L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_185_() {
            long[] array = new long[8];
            for (int i = 0; i <= 2; i++) {
                array[i] = 0L;
            }
            array[3] = 3298534885632L;
            for (int j = 4; j <= 7; j++) {
                array[j] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_186_() {
            long[] array = new long[8]
            {
                3315749355520L,
                206695432192L,
                -8646911250191081184L,
                17437030351106L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_187_() {
            long[] array = new long[8]
            {
                4451794068312356562L,
                -1668717557680521831L,
                -556441257693809286L,
                17437434016751L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_188_() {
            long[] array = new long[8]
            {
                4451790752563001042L,
                -1668717695119606375L,
                -1132902044357503622L,
                4123571745775L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_189_() {
            long[] array = new long[8]
            {
                0L,
                68719476736L,
                0L,
                5239323230210L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_190_() {
            long[] array = new long[8]
            {
                3315816464384L,
                206695432320L,
                -1729381123038367456L,
                17437031271339L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_191_() {
            long[] array = new long[8]
            {
                3315749355520L,
                206695432192L,
                -8646911250191081184L,
                17437030875563L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_192_() {
            long[] array = new long[8]
            {
                4451794068312356562L,
                -1666465757866836583L,
                -556441257693809286L,
                17437434018799L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }

        private static long[] mk_tokenSet_193_() {
            long[] array = new long[8]
            {
                2395853051396128L,
                206695432192L,
                -8646911250191081184L,
                17437030875555L,
                0L,
                0L,
                0L,
                0L
            };
            for (int i = 4; i <= 7; i++) {
                array[i] = 0L;
            }
            return array;
        }
    }
}
